
FreeRTOS_HelloWorld_SystemView.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006860  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000016c  08006a40  08006a40  00007a40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006bac  08006bac  0000806c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08006bac  08006bac  00007bac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006bb4  08006bb4  0000806c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006bb4  08006bb4  00007bb4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006bb8  08006bb8  00007bb8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000006c  20000000  08006bbc  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000145d8  2000006c  08006c28  0000806c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20014644  08006c28  00008644  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000806c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016c69  00000000  00000000  0000809c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003407  00000000  00000000  0001ed05  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000015c0  00000000  00000000  00022110  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000010a8  00000000  00000000  000236d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00027d10  00000000  00000000  00024778  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017ad3  00000000  00000000  0004c488  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fe75a  00000000  00000000  00063f5b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001626b5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005ff8  00000000  00000000  001626f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 000000b3  00000000  00000000  001686f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	2000006c 	.word	0x2000006c
 80001fc:	00000000 	.word	0x00000000
 8000200:	08006a28 	.word	0x08006a28

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000070 	.word	0x20000070
 800021c:	08006a28 	.word	0x08006a28

08000220 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 8000220:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 8000222:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000226:	f8df 0088 	ldr.w	r0, [pc, #136]	@ 80002b0 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 800022a:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 800022e:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 8000232:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 8000234:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 8000236:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 8000238:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 800023a:	d332      	bcc.n	80002a2 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 800023c:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 800023e:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 8000240:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 8000242:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 8000244:	d314      	bcc.n	8000270 <_CheckCase2>

08000246 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 8000246:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 8000248:	19d0      	adds	r0, r2, r7
 800024a:	bf00      	nop

0800024c <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 800024c:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000250:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000254:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000256:	d005      	beq.n	8000264 <_CSDone>
        LDRB     R3,[R1], #+1
 8000258:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800025c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000260:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000262:	d1f3      	bne.n	800024c <_LoopCopyStraight>

08000264 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000264:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000268:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800026a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800026c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800026e:	4770      	bx	lr

08000270 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000270:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000272:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000274:	d319      	bcc.n	80002aa <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000276:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000278:	1b12      	subs	r2, r2, r4

0800027a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800027a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800027e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000282:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000284:	d1f9      	bne.n	800027a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000286:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000288:	d005      	beq.n	8000296 <_No2ChunkNeeded>

0800028a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800028a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800028e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000292:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000294:	d1f9      	bne.n	800028a <_LoopCopyAfterWrapAround>

08000296 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000296:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800029a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800029c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800029e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 80002a0:	4770      	bx	lr

080002a2 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 80002a2:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 80002a4:	3801      	subs	r0, #1
        CMP      R0,R2
 80002a6:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 80002a8:	d2cd      	bcs.n	8000246 <_Case4>

080002aa <_Case3>:
_Case3:
        MOVS     R0,#+0
 80002aa:	2000      	movs	r0, #0
        POP      {R4-R7}
 80002ac:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 80002ae:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80002b0:	20012f24 	.word	0x20012f24

080002b4 <__aeabi_uldivmod>:
 80002b4:	b953      	cbnz	r3, 80002cc <__aeabi_uldivmod+0x18>
 80002b6:	b94a      	cbnz	r2, 80002cc <__aeabi_uldivmod+0x18>
 80002b8:	2900      	cmp	r1, #0
 80002ba:	bf08      	it	eq
 80002bc:	2800      	cmpeq	r0, #0
 80002be:	bf1c      	itt	ne
 80002c0:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80002c4:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80002c8:	f000 b988 	b.w	80005dc <__aeabi_idiv0>
 80002cc:	f1ad 0c08 	sub.w	ip, sp, #8
 80002d0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d4:	f000 f806 	bl	80002e4 <__udivmoddi4>
 80002d8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002dc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002e0:	b004      	add	sp, #16
 80002e2:	4770      	bx	lr

080002e4 <__udivmoddi4>:
 80002e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e8:	9d08      	ldr	r5, [sp, #32]
 80002ea:	468e      	mov	lr, r1
 80002ec:	4604      	mov	r4, r0
 80002ee:	4688      	mov	r8, r1
 80002f0:	2b00      	cmp	r3, #0
 80002f2:	d14a      	bne.n	800038a <__udivmoddi4+0xa6>
 80002f4:	428a      	cmp	r2, r1
 80002f6:	4617      	mov	r7, r2
 80002f8:	d962      	bls.n	80003c0 <__udivmoddi4+0xdc>
 80002fa:	fab2 f682 	clz	r6, r2
 80002fe:	b14e      	cbz	r6, 8000314 <__udivmoddi4+0x30>
 8000300:	f1c6 0320 	rsb	r3, r6, #32
 8000304:	fa01 f806 	lsl.w	r8, r1, r6
 8000308:	fa20 f303 	lsr.w	r3, r0, r3
 800030c:	40b7      	lsls	r7, r6
 800030e:	ea43 0808 	orr.w	r8, r3, r8
 8000312:	40b4      	lsls	r4, r6
 8000314:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000318:	fa1f fc87 	uxth.w	ip, r7
 800031c:	fbb8 f1fe 	udiv	r1, r8, lr
 8000320:	0c23      	lsrs	r3, r4, #16
 8000322:	fb0e 8811 	mls	r8, lr, r1, r8
 8000326:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800032a:	fb01 f20c 	mul.w	r2, r1, ip
 800032e:	429a      	cmp	r2, r3
 8000330:	d909      	bls.n	8000346 <__udivmoddi4+0x62>
 8000332:	18fb      	adds	r3, r7, r3
 8000334:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 8000338:	f080 80ea 	bcs.w	8000510 <__udivmoddi4+0x22c>
 800033c:	429a      	cmp	r2, r3
 800033e:	f240 80e7 	bls.w	8000510 <__udivmoddi4+0x22c>
 8000342:	3902      	subs	r1, #2
 8000344:	443b      	add	r3, r7
 8000346:	1a9a      	subs	r2, r3, r2
 8000348:	b2a3      	uxth	r3, r4
 800034a:	fbb2 f0fe 	udiv	r0, r2, lr
 800034e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000352:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000356:	fb00 fc0c 	mul.w	ip, r0, ip
 800035a:	459c      	cmp	ip, r3
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0x8e>
 800035e:	18fb      	adds	r3, r7, r3
 8000360:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000364:	f080 80d6 	bcs.w	8000514 <__udivmoddi4+0x230>
 8000368:	459c      	cmp	ip, r3
 800036a:	f240 80d3 	bls.w	8000514 <__udivmoddi4+0x230>
 800036e:	443b      	add	r3, r7
 8000370:	3802      	subs	r0, #2
 8000372:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000376:	eba3 030c 	sub.w	r3, r3, ip
 800037a:	2100      	movs	r1, #0
 800037c:	b11d      	cbz	r5, 8000386 <__udivmoddi4+0xa2>
 800037e:	40f3      	lsrs	r3, r6
 8000380:	2200      	movs	r2, #0
 8000382:	e9c5 3200 	strd	r3, r2, [r5]
 8000386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038a:	428b      	cmp	r3, r1
 800038c:	d905      	bls.n	800039a <__udivmoddi4+0xb6>
 800038e:	b10d      	cbz	r5, 8000394 <__udivmoddi4+0xb0>
 8000390:	e9c5 0100 	strd	r0, r1, [r5]
 8000394:	2100      	movs	r1, #0
 8000396:	4608      	mov	r0, r1
 8000398:	e7f5      	b.n	8000386 <__udivmoddi4+0xa2>
 800039a:	fab3 f183 	clz	r1, r3
 800039e:	2900      	cmp	r1, #0
 80003a0:	d146      	bne.n	8000430 <__udivmoddi4+0x14c>
 80003a2:	4573      	cmp	r3, lr
 80003a4:	d302      	bcc.n	80003ac <__udivmoddi4+0xc8>
 80003a6:	4282      	cmp	r2, r0
 80003a8:	f200 8105 	bhi.w	80005b6 <__udivmoddi4+0x2d2>
 80003ac:	1a84      	subs	r4, r0, r2
 80003ae:	eb6e 0203 	sbc.w	r2, lr, r3
 80003b2:	2001      	movs	r0, #1
 80003b4:	4690      	mov	r8, r2
 80003b6:	2d00      	cmp	r5, #0
 80003b8:	d0e5      	beq.n	8000386 <__udivmoddi4+0xa2>
 80003ba:	e9c5 4800 	strd	r4, r8, [r5]
 80003be:	e7e2      	b.n	8000386 <__udivmoddi4+0xa2>
 80003c0:	2a00      	cmp	r2, #0
 80003c2:	f000 8090 	beq.w	80004e6 <__udivmoddi4+0x202>
 80003c6:	fab2 f682 	clz	r6, r2
 80003ca:	2e00      	cmp	r6, #0
 80003cc:	f040 80a4 	bne.w	8000518 <__udivmoddi4+0x234>
 80003d0:	1a8a      	subs	r2, r1, r2
 80003d2:	0c03      	lsrs	r3, r0, #16
 80003d4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003d8:	b280      	uxth	r0, r0
 80003da:	b2bc      	uxth	r4, r7
 80003dc:	2101      	movs	r1, #1
 80003de:	fbb2 fcfe 	udiv	ip, r2, lr
 80003e2:	fb0e 221c 	mls	r2, lr, ip, r2
 80003e6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003ea:	fb04 f20c 	mul.w	r2, r4, ip
 80003ee:	429a      	cmp	r2, r3
 80003f0:	d907      	bls.n	8000402 <__udivmoddi4+0x11e>
 80003f2:	18fb      	adds	r3, r7, r3
 80003f4:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 80003f8:	d202      	bcs.n	8000400 <__udivmoddi4+0x11c>
 80003fa:	429a      	cmp	r2, r3
 80003fc:	f200 80e0 	bhi.w	80005c0 <__udivmoddi4+0x2dc>
 8000400:	46c4      	mov	ip, r8
 8000402:	1a9b      	subs	r3, r3, r2
 8000404:	fbb3 f2fe 	udiv	r2, r3, lr
 8000408:	fb0e 3312 	mls	r3, lr, r2, r3
 800040c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000410:	fb02 f404 	mul.w	r4, r2, r4
 8000414:	429c      	cmp	r4, r3
 8000416:	d907      	bls.n	8000428 <__udivmoddi4+0x144>
 8000418:	18fb      	adds	r3, r7, r3
 800041a:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 800041e:	d202      	bcs.n	8000426 <__udivmoddi4+0x142>
 8000420:	429c      	cmp	r4, r3
 8000422:	f200 80ca 	bhi.w	80005ba <__udivmoddi4+0x2d6>
 8000426:	4602      	mov	r2, r0
 8000428:	1b1b      	subs	r3, r3, r4
 800042a:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800042e:	e7a5      	b.n	800037c <__udivmoddi4+0x98>
 8000430:	f1c1 0620 	rsb	r6, r1, #32
 8000434:	408b      	lsls	r3, r1
 8000436:	fa22 f706 	lsr.w	r7, r2, r6
 800043a:	431f      	orrs	r7, r3
 800043c:	fa0e f401 	lsl.w	r4, lr, r1
 8000440:	fa20 f306 	lsr.w	r3, r0, r6
 8000444:	fa2e fe06 	lsr.w	lr, lr, r6
 8000448:	ea4f 4917 	mov.w	r9, r7, lsr #16
 800044c:	4323      	orrs	r3, r4
 800044e:	fa00 f801 	lsl.w	r8, r0, r1
 8000452:	fa1f fc87 	uxth.w	ip, r7
 8000456:	fbbe f0f9 	udiv	r0, lr, r9
 800045a:	0c1c      	lsrs	r4, r3, #16
 800045c:	fb09 ee10 	mls	lr, r9, r0, lr
 8000460:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000464:	fb00 fe0c 	mul.w	lr, r0, ip
 8000468:	45a6      	cmp	lr, r4
 800046a:	fa02 f201 	lsl.w	r2, r2, r1
 800046e:	d909      	bls.n	8000484 <__udivmoddi4+0x1a0>
 8000470:	193c      	adds	r4, r7, r4
 8000472:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 8000476:	f080 809c 	bcs.w	80005b2 <__udivmoddi4+0x2ce>
 800047a:	45a6      	cmp	lr, r4
 800047c:	f240 8099 	bls.w	80005b2 <__udivmoddi4+0x2ce>
 8000480:	3802      	subs	r0, #2
 8000482:	443c      	add	r4, r7
 8000484:	eba4 040e 	sub.w	r4, r4, lr
 8000488:	fa1f fe83 	uxth.w	lr, r3
 800048c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000490:	fb09 4413 	mls	r4, r9, r3, r4
 8000494:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000498:	fb03 fc0c 	mul.w	ip, r3, ip
 800049c:	45a4      	cmp	ip, r4
 800049e:	d908      	bls.n	80004b2 <__udivmoddi4+0x1ce>
 80004a0:	193c      	adds	r4, r7, r4
 80004a2:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 80004a6:	f080 8082 	bcs.w	80005ae <__udivmoddi4+0x2ca>
 80004aa:	45a4      	cmp	ip, r4
 80004ac:	d97f      	bls.n	80005ae <__udivmoddi4+0x2ca>
 80004ae:	3b02      	subs	r3, #2
 80004b0:	443c      	add	r4, r7
 80004b2:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004b6:	eba4 040c 	sub.w	r4, r4, ip
 80004ba:	fba0 ec02 	umull	lr, ip, r0, r2
 80004be:	4564      	cmp	r4, ip
 80004c0:	4673      	mov	r3, lr
 80004c2:	46e1      	mov	r9, ip
 80004c4:	d362      	bcc.n	800058c <__udivmoddi4+0x2a8>
 80004c6:	d05f      	beq.n	8000588 <__udivmoddi4+0x2a4>
 80004c8:	b15d      	cbz	r5, 80004e2 <__udivmoddi4+0x1fe>
 80004ca:	ebb8 0203 	subs.w	r2, r8, r3
 80004ce:	eb64 0409 	sbc.w	r4, r4, r9
 80004d2:	fa04 f606 	lsl.w	r6, r4, r6
 80004d6:	fa22 f301 	lsr.w	r3, r2, r1
 80004da:	431e      	orrs	r6, r3
 80004dc:	40cc      	lsrs	r4, r1
 80004de:	e9c5 6400 	strd	r6, r4, [r5]
 80004e2:	2100      	movs	r1, #0
 80004e4:	e74f      	b.n	8000386 <__udivmoddi4+0xa2>
 80004e6:	fbb1 fcf2 	udiv	ip, r1, r2
 80004ea:	0c01      	lsrs	r1, r0, #16
 80004ec:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004f0:	b280      	uxth	r0, r0
 80004f2:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004f6:	463b      	mov	r3, r7
 80004f8:	4638      	mov	r0, r7
 80004fa:	463c      	mov	r4, r7
 80004fc:	46b8      	mov	r8, r7
 80004fe:	46be      	mov	lr, r7
 8000500:	2620      	movs	r6, #32
 8000502:	fbb1 f1f7 	udiv	r1, r1, r7
 8000506:	eba2 0208 	sub.w	r2, r2, r8
 800050a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800050e:	e766      	b.n	80003de <__udivmoddi4+0xfa>
 8000510:	4601      	mov	r1, r0
 8000512:	e718      	b.n	8000346 <__udivmoddi4+0x62>
 8000514:	4610      	mov	r0, r2
 8000516:	e72c      	b.n	8000372 <__udivmoddi4+0x8e>
 8000518:	f1c6 0220 	rsb	r2, r6, #32
 800051c:	fa2e f302 	lsr.w	r3, lr, r2
 8000520:	40b7      	lsls	r7, r6
 8000522:	40b1      	lsls	r1, r6
 8000524:	fa20 f202 	lsr.w	r2, r0, r2
 8000528:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800052c:	430a      	orrs	r2, r1
 800052e:	fbb3 f8fe 	udiv	r8, r3, lr
 8000532:	b2bc      	uxth	r4, r7
 8000534:	fb0e 3318 	mls	r3, lr, r8, r3
 8000538:	0c11      	lsrs	r1, r2, #16
 800053a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800053e:	fb08 f904 	mul.w	r9, r8, r4
 8000542:	40b0      	lsls	r0, r6
 8000544:	4589      	cmp	r9, r1
 8000546:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800054a:	b280      	uxth	r0, r0
 800054c:	d93e      	bls.n	80005cc <__udivmoddi4+0x2e8>
 800054e:	1879      	adds	r1, r7, r1
 8000550:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000554:	d201      	bcs.n	800055a <__udivmoddi4+0x276>
 8000556:	4589      	cmp	r9, r1
 8000558:	d81f      	bhi.n	800059a <__udivmoddi4+0x2b6>
 800055a:	eba1 0109 	sub.w	r1, r1, r9
 800055e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000562:	fb09 f804 	mul.w	r8, r9, r4
 8000566:	fb0e 1119 	mls	r1, lr, r9, r1
 800056a:	b292      	uxth	r2, r2
 800056c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000570:	4542      	cmp	r2, r8
 8000572:	d229      	bcs.n	80005c8 <__udivmoddi4+0x2e4>
 8000574:	18ba      	adds	r2, r7, r2
 8000576:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 800057a:	d2c4      	bcs.n	8000506 <__udivmoddi4+0x222>
 800057c:	4542      	cmp	r2, r8
 800057e:	d2c2      	bcs.n	8000506 <__udivmoddi4+0x222>
 8000580:	f1a9 0102 	sub.w	r1, r9, #2
 8000584:	443a      	add	r2, r7
 8000586:	e7be      	b.n	8000506 <__udivmoddi4+0x222>
 8000588:	45f0      	cmp	r8, lr
 800058a:	d29d      	bcs.n	80004c8 <__udivmoddi4+0x1e4>
 800058c:	ebbe 0302 	subs.w	r3, lr, r2
 8000590:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000594:	3801      	subs	r0, #1
 8000596:	46e1      	mov	r9, ip
 8000598:	e796      	b.n	80004c8 <__udivmoddi4+0x1e4>
 800059a:	eba7 0909 	sub.w	r9, r7, r9
 800059e:	4449      	add	r1, r9
 80005a0:	f1a8 0c02 	sub.w	ip, r8, #2
 80005a4:	fbb1 f9fe 	udiv	r9, r1, lr
 80005a8:	fb09 f804 	mul.w	r8, r9, r4
 80005ac:	e7db      	b.n	8000566 <__udivmoddi4+0x282>
 80005ae:	4673      	mov	r3, lr
 80005b0:	e77f      	b.n	80004b2 <__udivmoddi4+0x1ce>
 80005b2:	4650      	mov	r0, sl
 80005b4:	e766      	b.n	8000484 <__udivmoddi4+0x1a0>
 80005b6:	4608      	mov	r0, r1
 80005b8:	e6fd      	b.n	80003b6 <__udivmoddi4+0xd2>
 80005ba:	443b      	add	r3, r7
 80005bc:	3a02      	subs	r2, #2
 80005be:	e733      	b.n	8000428 <__udivmoddi4+0x144>
 80005c0:	f1ac 0c02 	sub.w	ip, ip, #2
 80005c4:	443b      	add	r3, r7
 80005c6:	e71c      	b.n	8000402 <__udivmoddi4+0x11e>
 80005c8:	4649      	mov	r1, r9
 80005ca:	e79c      	b.n	8000506 <__udivmoddi4+0x222>
 80005cc:	eba1 0109 	sub.w	r1, r1, r9
 80005d0:	46c4      	mov	ip, r8
 80005d2:	fbb1 f9fe 	udiv	r9, r1, lr
 80005d6:	fb09 f804 	mul.w	r8, r9, r4
 80005da:	e7c4      	b.n	8000566 <__udivmoddi4+0x282>

080005dc <__aeabi_idiv0>:
 80005dc:	4770      	bx	lr
 80005de:	bf00      	nop

080005e0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b088      	sub	sp, #32
 80005e4:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005e6:	f000 fa88 	bl	8000afa <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005ea:	f000 f857 	bl	800069c <SystemClock_Config>

  /* Initialize all configured peripherals */
  /* USER CODE BEGIN 2 */

  /* Enable the cycle counter */
  DWT_CTRL = 1<<0;
 80005ee:	4b23      	ldr	r3, [pc, #140]	@ (800067c <main+0x9c>)
 80005f0:	2201      	movs	r2, #1
 80005f2:	601a      	str	r2, [r3, #0]
  SEGGER_SYSVIEW_Conf();
 80005f4:	f003 ff2e 	bl	8004454 <SEGGER_SYSVIEW_Conf>
  SEGGER_SYSVIEW_Start();
 80005f8:	f004 fee2 	bl	80053c0 <SEGGER_SYSVIEW_Start>
	printf("HEllo World\n");
 80005fc:	4820      	ldr	r0, [pc, #128]	@ (8000680 <main+0xa0>)
 80005fe:	f005 fe73 	bl	80062e8 <puts>

	status =  xTaskCreate(task1handler,
 8000602:	f107 0308 	add.w	r3, r7, #8
 8000606:	9301      	str	r3, [sp, #4]
 8000608:	2302      	movs	r3, #2
 800060a:	9300      	str	r3, [sp, #0]
 800060c:	4b1d      	ldr	r3, [pc, #116]	@ (8000684 <main+0xa4>)
 800060e:	22c8      	movs	r2, #200	@ 0xc8
 8000610:	491d      	ldr	r1, [pc, #116]	@ (8000688 <main+0xa8>)
 8000612:	481e      	ldr	r0, [pc, #120]	@ (800068c <main+0xac>)
 8000614:	f001 ff39 	bl	800248a <xTaskCreate>
 8000618:	6178      	str	r0, [r7, #20]
							"TASK-1",
							200,
							"Hello World from Task-1",
							2, /* priority 2 */
							&task1Handle);
	configASSERT(status == pdPASS);
 800061a:	697b      	ldr	r3, [r7, #20]
 800061c:	2b01      	cmp	r3, #1
 800061e:	d00d      	beq.n	800063c <main+0x5c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
    uint32_t ulNewBASEPRI;

    __asm volatile
 8000620:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000624:	b672      	cpsid	i
 8000626:	f383 8811 	msr	BASEPRI, r3
 800062a:	f3bf 8f6f 	isb	sy
 800062e:	f3bf 8f4f 	dsb	sy
 8000632:	b662      	cpsie	i
 8000634:	613b      	str	r3, [r7, #16]
        "   isb                                                     \n" \
        "   dsb                                                     \n" \
        "   cpsie i                                                 \n" \
        : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
    );
}
 8000636:	bf00      	nop
 8000638:	bf00      	nop
 800063a:	e7fd      	b.n	8000638 <main+0x58>

	status =  xTaskCreate(task2handler,
 800063c:	1d3b      	adds	r3, r7, #4
 800063e:	9301      	str	r3, [sp, #4]
 8000640:	2302      	movs	r3, #2
 8000642:	9300      	str	r3, [sp, #0]
 8000644:	4b12      	ldr	r3, [pc, #72]	@ (8000690 <main+0xb0>)
 8000646:	22c8      	movs	r2, #200	@ 0xc8
 8000648:	4912      	ldr	r1, [pc, #72]	@ (8000694 <main+0xb4>)
 800064a:	4813      	ldr	r0, [pc, #76]	@ (8000698 <main+0xb8>)
 800064c:	f001 ff1d 	bl	800248a <xTaskCreate>
 8000650:	6178      	str	r0, [r7, #20]
							"TASK-2",
							200,
							"Hello World from Task-2",
							2, /* priority 2 */
							&task2Handle);
	configASSERT(status == pdPASS);
 8000652:	697b      	ldr	r3, [r7, #20]
 8000654:	2b01      	cmp	r3, #1
 8000656:	d00d      	beq.n	8000674 <main+0x94>
    __asm volatile
 8000658:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800065c:	b672      	cpsid	i
 800065e:	f383 8811 	msr	BASEPRI, r3
 8000662:	f3bf 8f6f 	isb	sy
 8000666:	f3bf 8f4f 	dsb	sy
 800066a:	b662      	cpsie	i
 800066c:	60fb      	str	r3, [r7, #12]
}
 800066e:	bf00      	nop
 8000670:	bf00      	nop
 8000672:	e7fd      	b.n	8000670 <main+0x90>

	vTaskStartScheduler();
 8000674:	f002 f8be 	bl	80027f4 <vTaskStartScheduler>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000678:	bf00      	nop
 800067a:	e7fd      	b.n	8000678 <main+0x98>
 800067c:	e0001000 	.word	0xe0001000
 8000680:	08006a40 	.word	0x08006a40
 8000684:	08006a4c 	.word	0x08006a4c
 8000688:	08006a64 	.word	0x08006a64
 800068c:	0800077d 	.word	0x0800077d
 8000690:	08006a6c 	.word	0x08006a6c
 8000694:	08006a84 	.word	0x08006a84
 8000698:	080007a5 	.word	0x080007a5

0800069c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	b094      	sub	sp, #80	@ 0x50
 80006a0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006a2:	f107 0320 	add.w	r3, r7, #32
 80006a6:	2230      	movs	r2, #48	@ 0x30
 80006a8:	2100      	movs	r1, #0
 80006aa:	4618      	mov	r0, r3
 80006ac:	f005 ff0c 	bl	80064c8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006b0:	f107 030c 	add.w	r3, r7, #12
 80006b4:	2200      	movs	r2, #0
 80006b6:	601a      	str	r2, [r3, #0]
 80006b8:	605a      	str	r2, [r3, #4]
 80006ba:	609a      	str	r2, [r3, #8]
 80006bc:	60da      	str	r2, [r3, #12]
 80006be:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80006c0:	f000 fb2a 	bl	8000d18 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006c4:	4b2b      	ldr	r3, [pc, #172]	@ (8000774 <SystemClock_Config+0xd8>)
 80006c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006c8:	4a2a      	ldr	r2, [pc, #168]	@ (8000774 <SystemClock_Config+0xd8>)
 80006ca:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80006ce:	6413      	str	r3, [r2, #64]	@ 0x40
 80006d0:	4b28      	ldr	r3, [pc, #160]	@ (8000774 <SystemClock_Config+0xd8>)
 80006d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006d4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80006d8:	60bb      	str	r3, [r7, #8]
 80006da:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006dc:	4b26      	ldr	r3, [pc, #152]	@ (8000778 <SystemClock_Config+0xdc>)
 80006de:	681b      	ldr	r3, [r3, #0]
 80006e0:	4a25      	ldr	r2, [pc, #148]	@ (8000778 <SystemClock_Config+0xdc>)
 80006e2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80006e6:	6013      	str	r3, [r2, #0]
 80006e8:	4b23      	ldr	r3, [pc, #140]	@ (8000778 <SystemClock_Config+0xdc>)
 80006ea:	681b      	ldr	r3, [r3, #0]
 80006ec:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80006f0:	607b      	str	r3, [r7, #4]
 80006f2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80006f4:	2301      	movs	r3, #1
 80006f6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80006f8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80006fc:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006fe:	2302      	movs	r3, #2
 8000700:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000702:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000706:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000708:	2319      	movs	r3, #25
 800070a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 432;
 800070c:	f44f 73d8 	mov.w	r3, #432	@ 0x1b0
 8000710:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000712:	2302      	movs	r3, #2
 8000714:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8000716:	2309      	movs	r3, #9
 8000718:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800071a:	f107 0320 	add.w	r3, r7, #32
 800071e:	4618      	mov	r0, r3
 8000720:	f000 fb5a 	bl	8000dd8 <HAL_RCC_OscConfig>
 8000724:	4603      	mov	r3, r0
 8000726:	2b00      	cmp	r3, #0
 8000728:	d001      	beq.n	800072e <SystemClock_Config+0x92>
  {
    Error_Handler();
 800072a:	f000 f861 	bl	80007f0 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800072e:	f000 fb03 	bl	8000d38 <HAL_PWREx_EnableOverDrive>
 8000732:	4603      	mov	r3, r0
 8000734:	2b00      	cmp	r3, #0
 8000736:	d001      	beq.n	800073c <SystemClock_Config+0xa0>
  {
    Error_Handler();
 8000738:	f000 f85a 	bl	80007f0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800073c:	230f      	movs	r3, #15
 800073e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000740:	2302      	movs	r3, #2
 8000742:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000744:	2300      	movs	r3, #0
 8000746:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000748:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800074c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800074e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000752:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8000754:	f107 030c 	add.w	r3, r7, #12
 8000758:	2107      	movs	r1, #7
 800075a:	4618      	mov	r0, r3
 800075c:	f000 fde0 	bl	8001320 <HAL_RCC_ClockConfig>
 8000760:	4603      	mov	r3, r0
 8000762:	2b00      	cmp	r3, #0
 8000764:	d001      	beq.n	800076a <SystemClock_Config+0xce>
  {
    Error_Handler();
 8000766:	f000 f843 	bl	80007f0 <Error_Handler>
  }
}
 800076a:	bf00      	nop
 800076c:	3750      	adds	r7, #80	@ 0x50
 800076e:	46bd      	mov	sp, r7
 8000770:	bd80      	pop	{r7, pc}
 8000772:	bf00      	nop
 8000774:	40023800 	.word	0x40023800
 8000778:	40007000 	.word	0x40007000

0800077c <task1handler>:

/* USER CODE BEGIN 4 */
static void task1handler(void *parameters)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	b082      	sub	sp, #8
 8000780:	af00      	add	r7, sp, #0
 8000782:	6078      	str	r0, [r7, #4]
	while(1){
		printf("%s\n", (char *) parameters);
 8000784:	6878      	ldr	r0, [r7, #4]
 8000786:	f005 fdaf 	bl	80062e8 <puts>
		taskYIELD();
 800078a:	4b05      	ldr	r3, [pc, #20]	@ (80007a0 <task1handler+0x24>)
 800078c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8000790:	601a      	str	r2, [r3, #0]
 8000792:	f3bf 8f4f 	dsb	sy
 8000796:	f3bf 8f6f 	isb	sy
		printf("%s\n", (char *) parameters);
 800079a:	bf00      	nop
 800079c:	e7f2      	b.n	8000784 <task1handler+0x8>
 800079e:	bf00      	nop
 80007a0:	e000ed04 	.word	0xe000ed04

080007a4 <task2handler>:
	};
}

static void task2handler(void *parameters)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	b082      	sub	sp, #8
 80007a8:	af00      	add	r7, sp, #0
 80007aa:	6078      	str	r0, [r7, #4]
	while(1){
		printf("%s\n", (char *) parameters);
 80007ac:	6878      	ldr	r0, [r7, #4]
 80007ae:	f005 fd9b 	bl	80062e8 <puts>
		taskYIELD();
 80007b2:	4b05      	ldr	r3, [pc, #20]	@ (80007c8 <task2handler+0x24>)
 80007b4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80007b8:	601a      	str	r2, [r3, #0]
 80007ba:	f3bf 8f4f 	dsb	sy
 80007be:	f3bf 8f6f 	isb	sy
		printf("%s\n", (char *) parameters);
 80007c2:	bf00      	nop
 80007c4:	e7f2      	b.n	80007ac <task2handler+0x8>
 80007c6:	bf00      	nop
 80007c8:	e000ed04 	.word	0xe000ed04

080007cc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	b082      	sub	sp, #8
 80007d0:	af00      	add	r7, sp, #0
 80007d2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1)
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	681b      	ldr	r3, [r3, #0]
 80007d8:	4a04      	ldr	r2, [pc, #16]	@ (80007ec <HAL_TIM_PeriodElapsedCallback+0x20>)
 80007da:	4293      	cmp	r3, r2
 80007dc:	d101      	bne.n	80007e2 <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 80007de:	f000 f999 	bl	8000b14 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80007e2:	bf00      	nop
 80007e4:	3708      	adds	r7, #8
 80007e6:	46bd      	mov	sp, r7
 80007e8:	bd80      	pop	{r7, pc}
 80007ea:	bf00      	nop
 80007ec:	40010000 	.word	0x40010000

080007f0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007f0:	b480      	push	{r7}
 80007f2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007f4:	b672      	cpsid	i
}
 80007f6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007f8:	bf00      	nop
 80007fa:	e7fd      	b.n	80007f8 <Error_Handler+0x8>

080007fc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007fc:	b480      	push	{r7}
 80007fe:	b083      	sub	sp, #12
 8000800:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000802:	4b0f      	ldr	r3, [pc, #60]	@ (8000840 <HAL_MspInit+0x44>)
 8000804:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000806:	4a0e      	ldr	r2, [pc, #56]	@ (8000840 <HAL_MspInit+0x44>)
 8000808:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800080c:	6413      	str	r3, [r2, #64]	@ 0x40
 800080e:	4b0c      	ldr	r3, [pc, #48]	@ (8000840 <HAL_MspInit+0x44>)
 8000810:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000812:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000816:	607b      	str	r3, [r7, #4]
 8000818:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800081a:	4b09      	ldr	r3, [pc, #36]	@ (8000840 <HAL_MspInit+0x44>)
 800081c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800081e:	4a08      	ldr	r2, [pc, #32]	@ (8000840 <HAL_MspInit+0x44>)
 8000820:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000824:	6453      	str	r3, [r2, #68]	@ 0x44
 8000826:	4b06      	ldr	r3, [pc, #24]	@ (8000840 <HAL_MspInit+0x44>)
 8000828:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800082a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800082e:	603b      	str	r3, [r7, #0]
 8000830:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000832:	bf00      	nop
 8000834:	370c      	adds	r7, #12
 8000836:	46bd      	mov	sp, r7
 8000838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800083c:	4770      	bx	lr
 800083e:	bf00      	nop
 8000840:	40023800 	.word	0x40023800

08000844 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	b08c      	sub	sp, #48	@ 0x30
 8000848:	af00      	add	r7, sp, #0
 800084a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 800084c:	2300      	movs	r3, #0
 800084e:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 8000850:	2300      	movs	r3, #0
 8000852:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000854:	4b2f      	ldr	r3, [pc, #188]	@ (8000914 <HAL_InitTick+0xd0>)
 8000856:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000858:	4a2e      	ldr	r2, [pc, #184]	@ (8000914 <HAL_InitTick+0xd0>)
 800085a:	f043 0301 	orr.w	r3, r3, #1
 800085e:	6453      	str	r3, [r2, #68]	@ 0x44
 8000860:	4b2c      	ldr	r3, [pc, #176]	@ (8000914 <HAL_InitTick+0xd0>)
 8000862:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000864:	f003 0301 	and.w	r3, r3, #1
 8000868:	60bb      	str	r3, [r7, #8]
 800086a:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800086c:	f107 020c 	add.w	r2, r7, #12
 8000870:	f107 0310 	add.w	r3, r7, #16
 8000874:	4611      	mov	r1, r2
 8000876:	4618      	mov	r0, r3
 8000878:	f000 ff24 	bl	80016c4 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 800087c:	f000 ff0e 	bl	800169c <HAL_RCC_GetPCLK2Freq>
 8000880:	4603      	mov	r3, r0
 8000882:	005b      	lsls	r3, r3, #1
 8000884:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000886:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000888:	4a23      	ldr	r2, [pc, #140]	@ (8000918 <HAL_InitTick+0xd4>)
 800088a:	fba2 2303 	umull	r2, r3, r2, r3
 800088e:	0c9b      	lsrs	r3, r3, #18
 8000890:	3b01      	subs	r3, #1
 8000892:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000894:	4b21      	ldr	r3, [pc, #132]	@ (800091c <HAL_InitTick+0xd8>)
 8000896:	4a22      	ldr	r2, [pc, #136]	@ (8000920 <HAL_InitTick+0xdc>)
 8000898:	601a      	str	r2, [r3, #0]
   * Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 800089a:	4b20      	ldr	r3, [pc, #128]	@ (800091c <HAL_InitTick+0xd8>)
 800089c:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80008a0:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80008a2:	4a1e      	ldr	r2, [pc, #120]	@ (800091c <HAL_InitTick+0xd8>)
 80008a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80008a6:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80008a8:	4b1c      	ldr	r3, [pc, #112]	@ (800091c <HAL_InitTick+0xd8>)
 80008aa:	2200      	movs	r2, #0
 80008ac:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008ae:	4b1b      	ldr	r3, [pc, #108]	@ (800091c <HAL_InitTick+0xd8>)
 80008b0:	2200      	movs	r2, #0
 80008b2:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008b4:	4b19      	ldr	r3, [pc, #100]	@ (800091c <HAL_InitTick+0xd8>)
 80008b6:	2200      	movs	r2, #0
 80008b8:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 80008ba:	4818      	ldr	r0, [pc, #96]	@ (800091c <HAL_InitTick+0xd8>)
 80008bc:	f000 ff34 	bl	8001728 <HAL_TIM_Base_Init>
 80008c0:	4603      	mov	r3, r0
 80008c2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 80008c6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80008ca:	2b00      	cmp	r3, #0
 80008cc:	d11b      	bne.n	8000906 <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 80008ce:	4813      	ldr	r0, [pc, #76]	@ (800091c <HAL_InitTick+0xd8>)
 80008d0:	f000 ff8c 	bl	80017ec <HAL_TIM_Base_Start_IT>
 80008d4:	4603      	mov	r3, r0
 80008d6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 80008da:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80008de:	2b00      	cmp	r3, #0
 80008e0:	d111      	bne.n	8000906 <HAL_InitTick+0xc2>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80008e2:	2019      	movs	r0, #25
 80008e4:	f000 fa0a 	bl	8000cfc <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	2b0f      	cmp	r3, #15
 80008ec:	d808      	bhi.n	8000900 <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 80008ee:	2200      	movs	r2, #0
 80008f0:	6879      	ldr	r1, [r7, #4]
 80008f2:	2019      	movs	r0, #25
 80008f4:	f000 f9e6 	bl	8000cc4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80008f8:	4a0a      	ldr	r2, [pc, #40]	@ (8000924 <HAL_InitTick+0xe0>)
 80008fa:	687b      	ldr	r3, [r7, #4]
 80008fc:	6013      	str	r3, [r2, #0]
 80008fe:	e002      	b.n	8000906 <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 8000900:	2301      	movs	r3, #1
 8000902:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000906:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800090a:	4618      	mov	r0, r3
 800090c:	3730      	adds	r7, #48	@ 0x30
 800090e:	46bd      	mov	sp, r7
 8000910:	bd80      	pop	{r7, pc}
 8000912:	bf00      	nop
 8000914:	40023800 	.word	0x40023800
 8000918:	431bde83 	.word	0x431bde83
 800091c:	20000088 	.word	0x20000088
 8000920:	40010000 	.word	0x40010000
 8000924:	20000004 	.word	0x20000004

08000928 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000928:	b480      	push	{r7}
 800092a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800092c:	bf00      	nop
 800092e:	e7fd      	b.n	800092c <NMI_Handler+0x4>

08000930 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000930:	b480      	push	{r7}
 8000932:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000934:	bf00      	nop
 8000936:	e7fd      	b.n	8000934 <HardFault_Handler+0x4>

08000938 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000938:	b480      	push	{r7}
 800093a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800093c:	bf00      	nop
 800093e:	e7fd      	b.n	800093c <MemManage_Handler+0x4>

08000940 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000940:	b480      	push	{r7}
 8000942:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000944:	bf00      	nop
 8000946:	e7fd      	b.n	8000944 <BusFault_Handler+0x4>

08000948 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000948:	b480      	push	{r7}
 800094a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800094c:	bf00      	nop
 800094e:	e7fd      	b.n	800094c <UsageFault_Handler+0x4>

08000950 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000950:	b480      	push	{r7}
 8000952:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000954:	bf00      	nop
 8000956:	46bd      	mov	sp, r7
 8000958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800095c:	4770      	bx	lr
	...

08000960 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000964:	4802      	ldr	r0, [pc, #8]	@ (8000970 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000966:	f000 ffb9 	bl	80018dc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800096a:	bf00      	nop
 800096c:	bd80      	pop	{r7, pc}
 800096e:	bf00      	nop
 8000970:	20000088 	.word	0x20000088

08000974 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	b086      	sub	sp, #24
 8000978:	af00      	add	r7, sp, #0
 800097a:	60f8      	str	r0, [r7, #12]
 800097c:	60b9      	str	r1, [r7, #8]
 800097e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000980:	2300      	movs	r3, #0
 8000982:	617b      	str	r3, [r7, #20]
 8000984:	e00a      	b.n	800099c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000986:	f3af 8000 	nop.w
 800098a:	4601      	mov	r1, r0
 800098c:	68bb      	ldr	r3, [r7, #8]
 800098e:	1c5a      	adds	r2, r3, #1
 8000990:	60ba      	str	r2, [r7, #8]
 8000992:	b2ca      	uxtb	r2, r1
 8000994:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000996:	697b      	ldr	r3, [r7, #20]
 8000998:	3301      	adds	r3, #1
 800099a:	617b      	str	r3, [r7, #20]
 800099c:	697a      	ldr	r2, [r7, #20]
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	429a      	cmp	r2, r3
 80009a2:	dbf0      	blt.n	8000986 <_read+0x12>
  }

  return len;
 80009a4:	687b      	ldr	r3, [r7, #4]
}
 80009a6:	4618      	mov	r0, r3
 80009a8:	3718      	adds	r7, #24
 80009aa:	46bd      	mov	sp, r7
 80009ac:	bd80      	pop	{r7, pc}

080009ae <_close>:
  }
  return len;
}

int _close(int file)
{
 80009ae:	b480      	push	{r7}
 80009b0:	b083      	sub	sp, #12
 80009b2:	af00      	add	r7, sp, #0
 80009b4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80009b6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80009ba:	4618      	mov	r0, r3
 80009bc:	370c      	adds	r7, #12
 80009be:	46bd      	mov	sp, r7
 80009c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c4:	4770      	bx	lr

080009c6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80009c6:	b480      	push	{r7}
 80009c8:	b083      	sub	sp, #12
 80009ca:	af00      	add	r7, sp, #0
 80009cc:	6078      	str	r0, [r7, #4]
 80009ce:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80009d0:	683b      	ldr	r3, [r7, #0]
 80009d2:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80009d6:	605a      	str	r2, [r3, #4]
  return 0;
 80009d8:	2300      	movs	r3, #0
}
 80009da:	4618      	mov	r0, r3
 80009dc:	370c      	adds	r7, #12
 80009de:	46bd      	mov	sp, r7
 80009e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e4:	4770      	bx	lr

080009e6 <_isatty>:

int _isatty(int file)
{
 80009e6:	b480      	push	{r7}
 80009e8:	b083      	sub	sp, #12
 80009ea:	af00      	add	r7, sp, #0
 80009ec:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80009ee:	2301      	movs	r3, #1
}
 80009f0:	4618      	mov	r0, r3
 80009f2:	370c      	adds	r7, #12
 80009f4:	46bd      	mov	sp, r7
 80009f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009fa:	4770      	bx	lr

080009fc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80009fc:	b480      	push	{r7}
 80009fe:	b085      	sub	sp, #20
 8000a00:	af00      	add	r7, sp, #0
 8000a02:	60f8      	str	r0, [r7, #12]
 8000a04:	60b9      	str	r1, [r7, #8]
 8000a06:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000a08:	2300      	movs	r3, #0
}
 8000a0a:	4618      	mov	r0, r3
 8000a0c:	3714      	adds	r7, #20
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a14:	4770      	bx	lr
	...

08000a18 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	b086      	sub	sp, #24
 8000a1c:	af00      	add	r7, sp, #0
 8000a1e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000a20:	4a14      	ldr	r2, [pc, #80]	@ (8000a74 <_sbrk+0x5c>)
 8000a22:	4b15      	ldr	r3, [pc, #84]	@ (8000a78 <_sbrk+0x60>)
 8000a24:	1ad3      	subs	r3, r2, r3
 8000a26:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000a28:	697b      	ldr	r3, [r7, #20]
 8000a2a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000a2c:	4b13      	ldr	r3, [pc, #76]	@ (8000a7c <_sbrk+0x64>)
 8000a2e:	681b      	ldr	r3, [r3, #0]
 8000a30:	2b00      	cmp	r3, #0
 8000a32:	d102      	bne.n	8000a3a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000a34:	4b11      	ldr	r3, [pc, #68]	@ (8000a7c <_sbrk+0x64>)
 8000a36:	4a12      	ldr	r2, [pc, #72]	@ (8000a80 <_sbrk+0x68>)
 8000a38:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000a3a:	4b10      	ldr	r3, [pc, #64]	@ (8000a7c <_sbrk+0x64>)
 8000a3c:	681a      	ldr	r2, [r3, #0]
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	4413      	add	r3, r2
 8000a42:	693a      	ldr	r2, [r7, #16]
 8000a44:	429a      	cmp	r2, r3
 8000a46:	d207      	bcs.n	8000a58 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000a48:	f005 fd7a 	bl	8006540 <__errno>
 8000a4c:	4603      	mov	r3, r0
 8000a4e:	220c      	movs	r2, #12
 8000a50:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000a52:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000a56:	e009      	b.n	8000a6c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000a58:	4b08      	ldr	r3, [pc, #32]	@ (8000a7c <_sbrk+0x64>)
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000a5e:	4b07      	ldr	r3, [pc, #28]	@ (8000a7c <_sbrk+0x64>)
 8000a60:	681a      	ldr	r2, [r3, #0]
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	4413      	add	r3, r2
 8000a66:	4a05      	ldr	r2, [pc, #20]	@ (8000a7c <_sbrk+0x64>)
 8000a68:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000a6a:	68fb      	ldr	r3, [r7, #12]
}
 8000a6c:	4618      	mov	r0, r3
 8000a6e:	3718      	adds	r7, #24
 8000a70:	46bd      	mov	sp, r7
 8000a72:	bd80      	pop	{r7, pc}
 8000a74:	20040000 	.word	0x20040000
 8000a78:	00000400 	.word	0x00000400
 8000a7c:	200000d4 	.word	0x200000d4
 8000a80:	20014648 	.word	0x20014648

08000a84 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a84:	b480      	push	{r7}
 8000a86:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a88:	4b06      	ldr	r3, [pc, #24]	@ (8000aa4 <SystemInit+0x20>)
 8000a8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000a8e:	4a05      	ldr	r2, [pc, #20]	@ (8000aa4 <SystemInit+0x20>)
 8000a90:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000a94:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a98:	bf00      	nop
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa0:	4770      	bx	lr
 8000aa2:	bf00      	nop
 8000aa4:	e000ed00 	.word	0xe000ed00

08000aa8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000aa8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000ae0 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit 
 8000aac:	f7ff ffea 	bl	8000a84 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000ab0:	480c      	ldr	r0, [pc, #48]	@ (8000ae4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000ab2:	490d      	ldr	r1, [pc, #52]	@ (8000ae8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000ab4:	4a0d      	ldr	r2, [pc, #52]	@ (8000aec <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000ab6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ab8:	e002      	b.n	8000ac0 <LoopCopyDataInit>

08000aba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000aba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000abc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000abe:	3304      	adds	r3, #4

08000ac0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ac0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ac2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ac4:	d3f9      	bcc.n	8000aba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ac6:	4a0a      	ldr	r2, [pc, #40]	@ (8000af0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000ac8:	4c0a      	ldr	r4, [pc, #40]	@ (8000af4 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000aca:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000acc:	e001      	b.n	8000ad2 <LoopFillZerobss>

08000ace <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ace:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ad0:	3204      	adds	r2, #4

08000ad2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ad2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ad4:	d3fb      	bcc.n	8000ace <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000ad6:	f005 fd39 	bl	800654c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000ada:	f7ff fd81 	bl	80005e0 <main>
  bx  lr    
 8000ade:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000ae0:	20040000 	.word	0x20040000
  ldr r0, =_sdata
 8000ae4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ae8:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8000aec:	08006bbc 	.word	0x08006bbc
  ldr r2, =_sbss
 8000af0:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8000af4:	20014644 	.word	0x20014644

08000af8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000af8:	e7fe      	b.n	8000af8 <ADC_IRQHandler>

08000afa <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000afa:	b580      	push	{r7, lr}
 8000afc:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000afe:	2003      	movs	r0, #3
 8000b00:	f000 f8d5 	bl	8000cae <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b04:	200f      	movs	r0, #15
 8000b06:	f7ff fe9d 	bl	8000844 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b0a:	f7ff fe77 	bl	80007fc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b0e:	2300      	movs	r3, #0
}
 8000b10:	4618      	mov	r0, r3
 8000b12:	bd80      	pop	{r7, pc}

08000b14 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b14:	b480      	push	{r7}
 8000b16:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b18:	4b06      	ldr	r3, [pc, #24]	@ (8000b34 <HAL_IncTick+0x20>)
 8000b1a:	781b      	ldrb	r3, [r3, #0]
 8000b1c:	461a      	mov	r2, r3
 8000b1e:	4b06      	ldr	r3, [pc, #24]	@ (8000b38 <HAL_IncTick+0x24>)
 8000b20:	681b      	ldr	r3, [r3, #0]
 8000b22:	4413      	add	r3, r2
 8000b24:	4a04      	ldr	r2, [pc, #16]	@ (8000b38 <HAL_IncTick+0x24>)
 8000b26:	6013      	str	r3, [r2, #0]
}
 8000b28:	bf00      	nop
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b30:	4770      	bx	lr
 8000b32:	bf00      	nop
 8000b34:	20000008 	.word	0x20000008
 8000b38:	200000d8 	.word	0x200000d8

08000b3c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b3c:	b480      	push	{r7}
 8000b3e:	af00      	add	r7, sp, #0
  return uwTick;
 8000b40:	4b03      	ldr	r3, [pc, #12]	@ (8000b50 <HAL_GetTick+0x14>)
 8000b42:	681b      	ldr	r3, [r3, #0]
}
 8000b44:	4618      	mov	r0, r3
 8000b46:	46bd      	mov	sp, r7
 8000b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b4c:	4770      	bx	lr
 8000b4e:	bf00      	nop
 8000b50:	200000d8 	.word	0x200000d8

08000b54 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b54:	b480      	push	{r7}
 8000b56:	b085      	sub	sp, #20
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	f003 0307 	and.w	r3, r3, #7
 8000b62:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b64:	4b0b      	ldr	r3, [pc, #44]	@ (8000b94 <__NVIC_SetPriorityGrouping+0x40>)
 8000b66:	68db      	ldr	r3, [r3, #12]
 8000b68:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b6a:	68ba      	ldr	r2, [r7, #8]
 8000b6c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000b70:	4013      	ands	r3, r2
 8000b72:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b74:	68fb      	ldr	r3, [r7, #12]
 8000b76:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b78:	68bb      	ldr	r3, [r7, #8]
 8000b7a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000b7c:	4b06      	ldr	r3, [pc, #24]	@ (8000b98 <__NVIC_SetPriorityGrouping+0x44>)
 8000b7e:	4313      	orrs	r3, r2
 8000b80:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b82:	4a04      	ldr	r2, [pc, #16]	@ (8000b94 <__NVIC_SetPriorityGrouping+0x40>)
 8000b84:	68bb      	ldr	r3, [r7, #8]
 8000b86:	60d3      	str	r3, [r2, #12]
}
 8000b88:	bf00      	nop
 8000b8a:	3714      	adds	r7, #20
 8000b8c:	46bd      	mov	sp, r7
 8000b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b92:	4770      	bx	lr
 8000b94:	e000ed00 	.word	0xe000ed00
 8000b98:	05fa0000 	.word	0x05fa0000

08000b9c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b9c:	b480      	push	{r7}
 8000b9e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ba0:	4b04      	ldr	r3, [pc, #16]	@ (8000bb4 <__NVIC_GetPriorityGrouping+0x18>)
 8000ba2:	68db      	ldr	r3, [r3, #12]
 8000ba4:	0a1b      	lsrs	r3, r3, #8
 8000ba6:	f003 0307 	and.w	r3, r3, #7
}
 8000baa:	4618      	mov	r0, r3
 8000bac:	46bd      	mov	sp, r7
 8000bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb2:	4770      	bx	lr
 8000bb4:	e000ed00 	.word	0xe000ed00

08000bb8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000bb8:	b480      	push	{r7}
 8000bba:	b083      	sub	sp, #12
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	4603      	mov	r3, r0
 8000bc0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	db0b      	blt.n	8000be2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000bca:	79fb      	ldrb	r3, [r7, #7]
 8000bcc:	f003 021f 	and.w	r2, r3, #31
 8000bd0:	4907      	ldr	r1, [pc, #28]	@ (8000bf0 <__NVIC_EnableIRQ+0x38>)
 8000bd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bd6:	095b      	lsrs	r3, r3, #5
 8000bd8:	2001      	movs	r0, #1
 8000bda:	fa00 f202 	lsl.w	r2, r0, r2
 8000bde:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000be2:	bf00      	nop
 8000be4:	370c      	adds	r7, #12
 8000be6:	46bd      	mov	sp, r7
 8000be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bec:	4770      	bx	lr
 8000bee:	bf00      	nop
 8000bf0:	e000e100 	.word	0xe000e100

08000bf4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000bf4:	b480      	push	{r7}
 8000bf6:	b083      	sub	sp, #12
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	4603      	mov	r3, r0
 8000bfc:	6039      	str	r1, [r7, #0]
 8000bfe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c00:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	db0a      	blt.n	8000c1e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c08:	683b      	ldr	r3, [r7, #0]
 8000c0a:	b2da      	uxtb	r2, r3
 8000c0c:	490c      	ldr	r1, [pc, #48]	@ (8000c40 <__NVIC_SetPriority+0x4c>)
 8000c0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c12:	0112      	lsls	r2, r2, #4
 8000c14:	b2d2      	uxtb	r2, r2
 8000c16:	440b      	add	r3, r1
 8000c18:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c1c:	e00a      	b.n	8000c34 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c1e:	683b      	ldr	r3, [r7, #0]
 8000c20:	b2da      	uxtb	r2, r3
 8000c22:	4908      	ldr	r1, [pc, #32]	@ (8000c44 <__NVIC_SetPriority+0x50>)
 8000c24:	79fb      	ldrb	r3, [r7, #7]
 8000c26:	f003 030f 	and.w	r3, r3, #15
 8000c2a:	3b04      	subs	r3, #4
 8000c2c:	0112      	lsls	r2, r2, #4
 8000c2e:	b2d2      	uxtb	r2, r2
 8000c30:	440b      	add	r3, r1
 8000c32:	761a      	strb	r2, [r3, #24]
}
 8000c34:	bf00      	nop
 8000c36:	370c      	adds	r7, #12
 8000c38:	46bd      	mov	sp, r7
 8000c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c3e:	4770      	bx	lr
 8000c40:	e000e100 	.word	0xe000e100
 8000c44:	e000ed00 	.word	0xe000ed00

08000c48 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c48:	b480      	push	{r7}
 8000c4a:	b089      	sub	sp, #36	@ 0x24
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	60f8      	str	r0, [r7, #12]
 8000c50:	60b9      	str	r1, [r7, #8]
 8000c52:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c54:	68fb      	ldr	r3, [r7, #12]
 8000c56:	f003 0307 	and.w	r3, r3, #7
 8000c5a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c5c:	69fb      	ldr	r3, [r7, #28]
 8000c5e:	f1c3 0307 	rsb	r3, r3, #7
 8000c62:	2b04      	cmp	r3, #4
 8000c64:	bf28      	it	cs
 8000c66:	2304      	movcs	r3, #4
 8000c68:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c6a:	69fb      	ldr	r3, [r7, #28]
 8000c6c:	3304      	adds	r3, #4
 8000c6e:	2b06      	cmp	r3, #6
 8000c70:	d902      	bls.n	8000c78 <NVIC_EncodePriority+0x30>
 8000c72:	69fb      	ldr	r3, [r7, #28]
 8000c74:	3b03      	subs	r3, #3
 8000c76:	e000      	b.n	8000c7a <NVIC_EncodePriority+0x32>
 8000c78:	2300      	movs	r3, #0
 8000c7a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c7c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000c80:	69bb      	ldr	r3, [r7, #24]
 8000c82:	fa02 f303 	lsl.w	r3, r2, r3
 8000c86:	43da      	mvns	r2, r3
 8000c88:	68bb      	ldr	r3, [r7, #8]
 8000c8a:	401a      	ands	r2, r3
 8000c8c:	697b      	ldr	r3, [r7, #20]
 8000c8e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c90:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000c94:	697b      	ldr	r3, [r7, #20]
 8000c96:	fa01 f303 	lsl.w	r3, r1, r3
 8000c9a:	43d9      	mvns	r1, r3
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ca0:	4313      	orrs	r3, r2
         );
}
 8000ca2:	4618      	mov	r0, r3
 8000ca4:	3724      	adds	r7, #36	@ 0x24
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cac:	4770      	bx	lr

08000cae <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cae:	b580      	push	{r7, lr}
 8000cb0:	b082      	sub	sp, #8
 8000cb2:	af00      	add	r7, sp, #0
 8000cb4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000cb6:	6878      	ldr	r0, [r7, #4]
 8000cb8:	f7ff ff4c 	bl	8000b54 <__NVIC_SetPriorityGrouping>
}
 8000cbc:	bf00      	nop
 8000cbe:	3708      	adds	r7, #8
 8000cc0:	46bd      	mov	sp, r7
 8000cc2:	bd80      	pop	{r7, pc}

08000cc4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	b086      	sub	sp, #24
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	4603      	mov	r3, r0
 8000ccc:	60b9      	str	r1, [r7, #8]
 8000cce:	607a      	str	r2, [r7, #4]
 8000cd0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000cd6:	f7ff ff61 	bl	8000b9c <__NVIC_GetPriorityGrouping>
 8000cda:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000cdc:	687a      	ldr	r2, [r7, #4]
 8000cde:	68b9      	ldr	r1, [r7, #8]
 8000ce0:	6978      	ldr	r0, [r7, #20]
 8000ce2:	f7ff ffb1 	bl	8000c48 <NVIC_EncodePriority>
 8000ce6:	4602      	mov	r2, r0
 8000ce8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000cec:	4611      	mov	r1, r2
 8000cee:	4618      	mov	r0, r3
 8000cf0:	f7ff ff80 	bl	8000bf4 <__NVIC_SetPriority>
}
 8000cf4:	bf00      	nop
 8000cf6:	3718      	adds	r7, #24
 8000cf8:	46bd      	mov	sp, r7
 8000cfa:	bd80      	pop	{r7, pc}

08000cfc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	b082      	sub	sp, #8
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	4603      	mov	r3, r0
 8000d04:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d0a:	4618      	mov	r0, r3
 8000d0c:	f7ff ff54 	bl	8000bb8 <__NVIC_EnableIRQ>
}
 8000d10:	bf00      	nop
 8000d12:	3708      	adds	r7, #8
 8000d14:	46bd      	mov	sp, r7
 8000d16:	bd80      	pop	{r7, pc}

08000d18 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8000d18:	b480      	push	{r7}
 8000d1a:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8000d1c:	4b05      	ldr	r3, [pc, #20]	@ (8000d34 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	4a04      	ldr	r2, [pc, #16]	@ (8000d34 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8000d22:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000d26:	6013      	str	r3, [r2, #0]
}
 8000d28:	bf00      	nop
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d30:	4770      	bx	lr
 8000d32:	bf00      	nop
 8000d34:	40007000 	.word	0x40007000

08000d38 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	b082      	sub	sp, #8
 8000d3c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8000d3e:	2300      	movs	r3, #0
 8000d40:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8000d42:	4b23      	ldr	r3, [pc, #140]	@ (8000dd0 <HAL_PWREx_EnableOverDrive+0x98>)
 8000d44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d46:	4a22      	ldr	r2, [pc, #136]	@ (8000dd0 <HAL_PWREx_EnableOverDrive+0x98>)
 8000d48:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000d4c:	6413      	str	r3, [r2, #64]	@ 0x40
 8000d4e:	4b20      	ldr	r3, [pc, #128]	@ (8000dd0 <HAL_PWREx_EnableOverDrive+0x98>)
 8000d50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d52:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000d56:	603b      	str	r3, [r7, #0]
 8000d58:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8000d5a:	4b1e      	ldr	r3, [pc, #120]	@ (8000dd4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	4a1d      	ldr	r2, [pc, #116]	@ (8000dd4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8000d60:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000d64:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000d66:	f7ff fee9 	bl	8000b3c <HAL_GetTick>
 8000d6a:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8000d6c:	e009      	b.n	8000d82 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8000d6e:	f7ff fee5 	bl	8000b3c <HAL_GetTick>
 8000d72:	4602      	mov	r2, r0
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	1ad3      	subs	r3, r2, r3
 8000d78:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8000d7c:	d901      	bls.n	8000d82 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8000d7e:	2303      	movs	r3, #3
 8000d80:	e022      	b.n	8000dc8 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8000d82:	4b14      	ldr	r3, [pc, #80]	@ (8000dd4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8000d84:	685b      	ldr	r3, [r3, #4]
 8000d86:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000d8a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000d8e:	d1ee      	bne.n	8000d6e <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8000d90:	4b10      	ldr	r3, [pc, #64]	@ (8000dd4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	4a0f      	ldr	r2, [pc, #60]	@ (8000dd4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8000d96:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000d9a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000d9c:	f7ff fece 	bl	8000b3c <HAL_GetTick>
 8000da0:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8000da2:	e009      	b.n	8000db8 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8000da4:	f7ff feca 	bl	8000b3c <HAL_GetTick>
 8000da8:	4602      	mov	r2, r0
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	1ad3      	subs	r3, r2, r3
 8000dae:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8000db2:	d901      	bls.n	8000db8 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8000db4:	2303      	movs	r3, #3
 8000db6:	e007      	b.n	8000dc8 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8000db8:	4b06      	ldr	r3, [pc, #24]	@ (8000dd4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8000dba:	685b      	ldr	r3, [r3, #4]
 8000dbc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000dc0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8000dc4:	d1ee      	bne.n	8000da4 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8000dc6:	2300      	movs	r3, #0
}
 8000dc8:	4618      	mov	r0, r3
 8000dca:	3708      	adds	r7, #8
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	bd80      	pop	{r7, pc}
 8000dd0:	40023800 	.word	0x40023800
 8000dd4:	40007000 	.word	0x40007000

08000dd8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	b086      	sub	sp, #24
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8000de0:	2300      	movs	r3, #0
 8000de2:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d101      	bne.n	8000dee <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8000dea:	2301      	movs	r3, #1
 8000dec:	e291      	b.n	8001312 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	f003 0301 	and.w	r3, r3, #1
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	f000 8087 	beq.w	8000f0a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000dfc:	4b96      	ldr	r3, [pc, #600]	@ (8001058 <HAL_RCC_OscConfig+0x280>)
 8000dfe:	689b      	ldr	r3, [r3, #8]
 8000e00:	f003 030c 	and.w	r3, r3, #12
 8000e04:	2b04      	cmp	r3, #4
 8000e06:	d00c      	beq.n	8000e22 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000e08:	4b93      	ldr	r3, [pc, #588]	@ (8001058 <HAL_RCC_OscConfig+0x280>)
 8000e0a:	689b      	ldr	r3, [r3, #8]
 8000e0c:	f003 030c 	and.w	r3, r3, #12
 8000e10:	2b08      	cmp	r3, #8
 8000e12:	d112      	bne.n	8000e3a <HAL_RCC_OscConfig+0x62>
 8000e14:	4b90      	ldr	r3, [pc, #576]	@ (8001058 <HAL_RCC_OscConfig+0x280>)
 8000e16:	685b      	ldr	r3, [r3, #4]
 8000e18:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000e1c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8000e20:	d10b      	bne.n	8000e3a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000e22:	4b8d      	ldr	r3, [pc, #564]	@ (8001058 <HAL_RCC_OscConfig+0x280>)
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d06c      	beq.n	8000f08 <HAL_RCC_OscConfig+0x130>
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	685b      	ldr	r3, [r3, #4]
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d168      	bne.n	8000f08 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8000e36:	2301      	movs	r3, #1
 8000e38:	e26b      	b.n	8001312 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	685b      	ldr	r3, [r3, #4]
 8000e3e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000e42:	d106      	bne.n	8000e52 <HAL_RCC_OscConfig+0x7a>
 8000e44:	4b84      	ldr	r3, [pc, #528]	@ (8001058 <HAL_RCC_OscConfig+0x280>)
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	4a83      	ldr	r2, [pc, #524]	@ (8001058 <HAL_RCC_OscConfig+0x280>)
 8000e4a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000e4e:	6013      	str	r3, [r2, #0]
 8000e50:	e02e      	b.n	8000eb0 <HAL_RCC_OscConfig+0xd8>
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	685b      	ldr	r3, [r3, #4]
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d10c      	bne.n	8000e74 <HAL_RCC_OscConfig+0x9c>
 8000e5a:	4b7f      	ldr	r3, [pc, #508]	@ (8001058 <HAL_RCC_OscConfig+0x280>)
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	4a7e      	ldr	r2, [pc, #504]	@ (8001058 <HAL_RCC_OscConfig+0x280>)
 8000e60:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000e64:	6013      	str	r3, [r2, #0]
 8000e66:	4b7c      	ldr	r3, [pc, #496]	@ (8001058 <HAL_RCC_OscConfig+0x280>)
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	4a7b      	ldr	r2, [pc, #492]	@ (8001058 <HAL_RCC_OscConfig+0x280>)
 8000e6c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000e70:	6013      	str	r3, [r2, #0]
 8000e72:	e01d      	b.n	8000eb0 <HAL_RCC_OscConfig+0xd8>
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	685b      	ldr	r3, [r3, #4]
 8000e78:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8000e7c:	d10c      	bne.n	8000e98 <HAL_RCC_OscConfig+0xc0>
 8000e7e:	4b76      	ldr	r3, [pc, #472]	@ (8001058 <HAL_RCC_OscConfig+0x280>)
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	4a75      	ldr	r2, [pc, #468]	@ (8001058 <HAL_RCC_OscConfig+0x280>)
 8000e84:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000e88:	6013      	str	r3, [r2, #0]
 8000e8a:	4b73      	ldr	r3, [pc, #460]	@ (8001058 <HAL_RCC_OscConfig+0x280>)
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	4a72      	ldr	r2, [pc, #456]	@ (8001058 <HAL_RCC_OscConfig+0x280>)
 8000e90:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000e94:	6013      	str	r3, [r2, #0]
 8000e96:	e00b      	b.n	8000eb0 <HAL_RCC_OscConfig+0xd8>
 8000e98:	4b6f      	ldr	r3, [pc, #444]	@ (8001058 <HAL_RCC_OscConfig+0x280>)
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	4a6e      	ldr	r2, [pc, #440]	@ (8001058 <HAL_RCC_OscConfig+0x280>)
 8000e9e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000ea2:	6013      	str	r3, [r2, #0]
 8000ea4:	4b6c      	ldr	r3, [pc, #432]	@ (8001058 <HAL_RCC_OscConfig+0x280>)
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	4a6b      	ldr	r2, [pc, #428]	@ (8001058 <HAL_RCC_OscConfig+0x280>)
 8000eaa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000eae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	685b      	ldr	r3, [r3, #4]
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	d013      	beq.n	8000ee0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000eb8:	f7ff fe40 	bl	8000b3c <HAL_GetTick>
 8000ebc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000ebe:	e008      	b.n	8000ed2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000ec0:	f7ff fe3c 	bl	8000b3c <HAL_GetTick>
 8000ec4:	4602      	mov	r2, r0
 8000ec6:	693b      	ldr	r3, [r7, #16]
 8000ec8:	1ad3      	subs	r3, r2, r3
 8000eca:	2b64      	cmp	r3, #100	@ 0x64
 8000ecc:	d901      	bls.n	8000ed2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8000ece:	2303      	movs	r3, #3
 8000ed0:	e21f      	b.n	8001312 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000ed2:	4b61      	ldr	r3, [pc, #388]	@ (8001058 <HAL_RCC_OscConfig+0x280>)
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d0f0      	beq.n	8000ec0 <HAL_RCC_OscConfig+0xe8>
 8000ede:	e014      	b.n	8000f0a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000ee0:	f7ff fe2c 	bl	8000b3c <HAL_GetTick>
 8000ee4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000ee6:	e008      	b.n	8000efa <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000ee8:	f7ff fe28 	bl	8000b3c <HAL_GetTick>
 8000eec:	4602      	mov	r2, r0
 8000eee:	693b      	ldr	r3, [r7, #16]
 8000ef0:	1ad3      	subs	r3, r2, r3
 8000ef2:	2b64      	cmp	r3, #100	@ 0x64
 8000ef4:	d901      	bls.n	8000efa <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8000ef6:	2303      	movs	r3, #3
 8000ef8:	e20b      	b.n	8001312 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000efa:	4b57      	ldr	r3, [pc, #348]	@ (8001058 <HAL_RCC_OscConfig+0x280>)
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d1f0      	bne.n	8000ee8 <HAL_RCC_OscConfig+0x110>
 8000f06:	e000      	b.n	8000f0a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f08:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	f003 0302 	and.w	r3, r3, #2
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d069      	beq.n	8000fea <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000f16:	4b50      	ldr	r3, [pc, #320]	@ (8001058 <HAL_RCC_OscConfig+0x280>)
 8000f18:	689b      	ldr	r3, [r3, #8]
 8000f1a:	f003 030c 	and.w	r3, r3, #12
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d00b      	beq.n	8000f3a <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000f22:	4b4d      	ldr	r3, [pc, #308]	@ (8001058 <HAL_RCC_OscConfig+0x280>)
 8000f24:	689b      	ldr	r3, [r3, #8]
 8000f26:	f003 030c 	and.w	r3, r3, #12
 8000f2a:	2b08      	cmp	r3, #8
 8000f2c:	d11c      	bne.n	8000f68 <HAL_RCC_OscConfig+0x190>
 8000f2e:	4b4a      	ldr	r3, [pc, #296]	@ (8001058 <HAL_RCC_OscConfig+0x280>)
 8000f30:	685b      	ldr	r3, [r3, #4]
 8000f32:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d116      	bne.n	8000f68 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000f3a:	4b47      	ldr	r3, [pc, #284]	@ (8001058 <HAL_RCC_OscConfig+0x280>)
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	f003 0302 	and.w	r3, r3, #2
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d005      	beq.n	8000f52 <HAL_RCC_OscConfig+0x17a>
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	68db      	ldr	r3, [r3, #12]
 8000f4a:	2b01      	cmp	r3, #1
 8000f4c:	d001      	beq.n	8000f52 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8000f4e:	2301      	movs	r3, #1
 8000f50:	e1df      	b.n	8001312 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000f52:	4b41      	ldr	r3, [pc, #260]	@ (8001058 <HAL_RCC_OscConfig+0x280>)
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	691b      	ldr	r3, [r3, #16]
 8000f5e:	00db      	lsls	r3, r3, #3
 8000f60:	493d      	ldr	r1, [pc, #244]	@ (8001058 <HAL_RCC_OscConfig+0x280>)
 8000f62:	4313      	orrs	r3, r2
 8000f64:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000f66:	e040      	b.n	8000fea <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	68db      	ldr	r3, [r3, #12]
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d023      	beq.n	8000fb8 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000f70:	4b39      	ldr	r3, [pc, #228]	@ (8001058 <HAL_RCC_OscConfig+0x280>)
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	4a38      	ldr	r2, [pc, #224]	@ (8001058 <HAL_RCC_OscConfig+0x280>)
 8000f76:	f043 0301 	orr.w	r3, r3, #1
 8000f7a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000f7c:	f7ff fdde 	bl	8000b3c <HAL_GetTick>
 8000f80:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000f82:	e008      	b.n	8000f96 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000f84:	f7ff fdda 	bl	8000b3c <HAL_GetTick>
 8000f88:	4602      	mov	r2, r0
 8000f8a:	693b      	ldr	r3, [r7, #16]
 8000f8c:	1ad3      	subs	r3, r2, r3
 8000f8e:	2b02      	cmp	r3, #2
 8000f90:	d901      	bls.n	8000f96 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8000f92:	2303      	movs	r3, #3
 8000f94:	e1bd      	b.n	8001312 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000f96:	4b30      	ldr	r3, [pc, #192]	@ (8001058 <HAL_RCC_OscConfig+0x280>)
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	f003 0302 	and.w	r3, r3, #2
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d0f0      	beq.n	8000f84 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000fa2:	4b2d      	ldr	r3, [pc, #180]	@ (8001058 <HAL_RCC_OscConfig+0x280>)
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	691b      	ldr	r3, [r3, #16]
 8000fae:	00db      	lsls	r3, r3, #3
 8000fb0:	4929      	ldr	r1, [pc, #164]	@ (8001058 <HAL_RCC_OscConfig+0x280>)
 8000fb2:	4313      	orrs	r3, r2
 8000fb4:	600b      	str	r3, [r1, #0]
 8000fb6:	e018      	b.n	8000fea <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000fb8:	4b27      	ldr	r3, [pc, #156]	@ (8001058 <HAL_RCC_OscConfig+0x280>)
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	4a26      	ldr	r2, [pc, #152]	@ (8001058 <HAL_RCC_OscConfig+0x280>)
 8000fbe:	f023 0301 	bic.w	r3, r3, #1
 8000fc2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000fc4:	f7ff fdba 	bl	8000b3c <HAL_GetTick>
 8000fc8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000fca:	e008      	b.n	8000fde <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000fcc:	f7ff fdb6 	bl	8000b3c <HAL_GetTick>
 8000fd0:	4602      	mov	r2, r0
 8000fd2:	693b      	ldr	r3, [r7, #16]
 8000fd4:	1ad3      	subs	r3, r2, r3
 8000fd6:	2b02      	cmp	r3, #2
 8000fd8:	d901      	bls.n	8000fde <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8000fda:	2303      	movs	r3, #3
 8000fdc:	e199      	b.n	8001312 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000fde:	4b1e      	ldr	r3, [pc, #120]	@ (8001058 <HAL_RCC_OscConfig+0x280>)
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	f003 0302 	and.w	r3, r3, #2
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d1f0      	bne.n	8000fcc <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	f003 0308 	and.w	r3, r3, #8
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d038      	beq.n	8001068 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	695b      	ldr	r3, [r3, #20]
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d019      	beq.n	8001032 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000ffe:	4b16      	ldr	r3, [pc, #88]	@ (8001058 <HAL_RCC_OscConfig+0x280>)
 8001000:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001002:	4a15      	ldr	r2, [pc, #84]	@ (8001058 <HAL_RCC_OscConfig+0x280>)
 8001004:	f043 0301 	orr.w	r3, r3, #1
 8001008:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800100a:	f7ff fd97 	bl	8000b3c <HAL_GetTick>
 800100e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001010:	e008      	b.n	8001024 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001012:	f7ff fd93 	bl	8000b3c <HAL_GetTick>
 8001016:	4602      	mov	r2, r0
 8001018:	693b      	ldr	r3, [r7, #16]
 800101a:	1ad3      	subs	r3, r2, r3
 800101c:	2b02      	cmp	r3, #2
 800101e:	d901      	bls.n	8001024 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001020:	2303      	movs	r3, #3
 8001022:	e176      	b.n	8001312 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001024:	4b0c      	ldr	r3, [pc, #48]	@ (8001058 <HAL_RCC_OscConfig+0x280>)
 8001026:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001028:	f003 0302 	and.w	r3, r3, #2
 800102c:	2b00      	cmp	r3, #0
 800102e:	d0f0      	beq.n	8001012 <HAL_RCC_OscConfig+0x23a>
 8001030:	e01a      	b.n	8001068 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001032:	4b09      	ldr	r3, [pc, #36]	@ (8001058 <HAL_RCC_OscConfig+0x280>)
 8001034:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001036:	4a08      	ldr	r2, [pc, #32]	@ (8001058 <HAL_RCC_OscConfig+0x280>)
 8001038:	f023 0301 	bic.w	r3, r3, #1
 800103c:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800103e:	f7ff fd7d 	bl	8000b3c <HAL_GetTick>
 8001042:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001044:	e00a      	b.n	800105c <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001046:	f7ff fd79 	bl	8000b3c <HAL_GetTick>
 800104a:	4602      	mov	r2, r0
 800104c:	693b      	ldr	r3, [r7, #16]
 800104e:	1ad3      	subs	r3, r2, r3
 8001050:	2b02      	cmp	r3, #2
 8001052:	d903      	bls.n	800105c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001054:	2303      	movs	r3, #3
 8001056:	e15c      	b.n	8001312 <HAL_RCC_OscConfig+0x53a>
 8001058:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800105c:	4b91      	ldr	r3, [pc, #580]	@ (80012a4 <HAL_RCC_OscConfig+0x4cc>)
 800105e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001060:	f003 0302 	and.w	r3, r3, #2
 8001064:	2b00      	cmp	r3, #0
 8001066:	d1ee      	bne.n	8001046 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	f003 0304 	and.w	r3, r3, #4
 8001070:	2b00      	cmp	r3, #0
 8001072:	f000 80a4 	beq.w	80011be <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001076:	4b8b      	ldr	r3, [pc, #556]	@ (80012a4 <HAL_RCC_OscConfig+0x4cc>)
 8001078:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800107a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800107e:	2b00      	cmp	r3, #0
 8001080:	d10d      	bne.n	800109e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8001082:	4b88      	ldr	r3, [pc, #544]	@ (80012a4 <HAL_RCC_OscConfig+0x4cc>)
 8001084:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001086:	4a87      	ldr	r2, [pc, #540]	@ (80012a4 <HAL_RCC_OscConfig+0x4cc>)
 8001088:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800108c:	6413      	str	r3, [r2, #64]	@ 0x40
 800108e:	4b85      	ldr	r3, [pc, #532]	@ (80012a4 <HAL_RCC_OscConfig+0x4cc>)
 8001090:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001092:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001096:	60bb      	str	r3, [r7, #8]
 8001098:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800109a:	2301      	movs	r3, #1
 800109c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800109e:	4b82      	ldr	r3, [pc, #520]	@ (80012a8 <HAL_RCC_OscConfig+0x4d0>)
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d118      	bne.n	80010dc <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80010aa:	4b7f      	ldr	r3, [pc, #508]	@ (80012a8 <HAL_RCC_OscConfig+0x4d0>)
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	4a7e      	ldr	r2, [pc, #504]	@ (80012a8 <HAL_RCC_OscConfig+0x4d0>)
 80010b0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80010b4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80010b6:	f7ff fd41 	bl	8000b3c <HAL_GetTick>
 80010ba:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80010bc:	e008      	b.n	80010d0 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80010be:	f7ff fd3d 	bl	8000b3c <HAL_GetTick>
 80010c2:	4602      	mov	r2, r0
 80010c4:	693b      	ldr	r3, [r7, #16]
 80010c6:	1ad3      	subs	r3, r2, r3
 80010c8:	2b64      	cmp	r3, #100	@ 0x64
 80010ca:	d901      	bls.n	80010d0 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80010cc:	2303      	movs	r3, #3
 80010ce:	e120      	b.n	8001312 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80010d0:	4b75      	ldr	r3, [pc, #468]	@ (80012a8 <HAL_RCC_OscConfig+0x4d0>)
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d0f0      	beq.n	80010be <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	689b      	ldr	r3, [r3, #8]
 80010e0:	2b01      	cmp	r3, #1
 80010e2:	d106      	bne.n	80010f2 <HAL_RCC_OscConfig+0x31a>
 80010e4:	4b6f      	ldr	r3, [pc, #444]	@ (80012a4 <HAL_RCC_OscConfig+0x4cc>)
 80010e6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80010e8:	4a6e      	ldr	r2, [pc, #440]	@ (80012a4 <HAL_RCC_OscConfig+0x4cc>)
 80010ea:	f043 0301 	orr.w	r3, r3, #1
 80010ee:	6713      	str	r3, [r2, #112]	@ 0x70
 80010f0:	e02d      	b.n	800114e <HAL_RCC_OscConfig+0x376>
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	689b      	ldr	r3, [r3, #8]
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d10c      	bne.n	8001114 <HAL_RCC_OscConfig+0x33c>
 80010fa:	4b6a      	ldr	r3, [pc, #424]	@ (80012a4 <HAL_RCC_OscConfig+0x4cc>)
 80010fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80010fe:	4a69      	ldr	r2, [pc, #420]	@ (80012a4 <HAL_RCC_OscConfig+0x4cc>)
 8001100:	f023 0301 	bic.w	r3, r3, #1
 8001104:	6713      	str	r3, [r2, #112]	@ 0x70
 8001106:	4b67      	ldr	r3, [pc, #412]	@ (80012a4 <HAL_RCC_OscConfig+0x4cc>)
 8001108:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800110a:	4a66      	ldr	r2, [pc, #408]	@ (80012a4 <HAL_RCC_OscConfig+0x4cc>)
 800110c:	f023 0304 	bic.w	r3, r3, #4
 8001110:	6713      	str	r3, [r2, #112]	@ 0x70
 8001112:	e01c      	b.n	800114e <HAL_RCC_OscConfig+0x376>
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	689b      	ldr	r3, [r3, #8]
 8001118:	2b05      	cmp	r3, #5
 800111a:	d10c      	bne.n	8001136 <HAL_RCC_OscConfig+0x35e>
 800111c:	4b61      	ldr	r3, [pc, #388]	@ (80012a4 <HAL_RCC_OscConfig+0x4cc>)
 800111e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001120:	4a60      	ldr	r2, [pc, #384]	@ (80012a4 <HAL_RCC_OscConfig+0x4cc>)
 8001122:	f043 0304 	orr.w	r3, r3, #4
 8001126:	6713      	str	r3, [r2, #112]	@ 0x70
 8001128:	4b5e      	ldr	r3, [pc, #376]	@ (80012a4 <HAL_RCC_OscConfig+0x4cc>)
 800112a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800112c:	4a5d      	ldr	r2, [pc, #372]	@ (80012a4 <HAL_RCC_OscConfig+0x4cc>)
 800112e:	f043 0301 	orr.w	r3, r3, #1
 8001132:	6713      	str	r3, [r2, #112]	@ 0x70
 8001134:	e00b      	b.n	800114e <HAL_RCC_OscConfig+0x376>
 8001136:	4b5b      	ldr	r3, [pc, #364]	@ (80012a4 <HAL_RCC_OscConfig+0x4cc>)
 8001138:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800113a:	4a5a      	ldr	r2, [pc, #360]	@ (80012a4 <HAL_RCC_OscConfig+0x4cc>)
 800113c:	f023 0301 	bic.w	r3, r3, #1
 8001140:	6713      	str	r3, [r2, #112]	@ 0x70
 8001142:	4b58      	ldr	r3, [pc, #352]	@ (80012a4 <HAL_RCC_OscConfig+0x4cc>)
 8001144:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001146:	4a57      	ldr	r2, [pc, #348]	@ (80012a4 <HAL_RCC_OscConfig+0x4cc>)
 8001148:	f023 0304 	bic.w	r3, r3, #4
 800114c:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	689b      	ldr	r3, [r3, #8]
 8001152:	2b00      	cmp	r3, #0
 8001154:	d015      	beq.n	8001182 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001156:	f7ff fcf1 	bl	8000b3c <HAL_GetTick>
 800115a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800115c:	e00a      	b.n	8001174 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800115e:	f7ff fced 	bl	8000b3c <HAL_GetTick>
 8001162:	4602      	mov	r2, r0
 8001164:	693b      	ldr	r3, [r7, #16]
 8001166:	1ad3      	subs	r3, r2, r3
 8001168:	f241 3288 	movw	r2, #5000	@ 0x1388
 800116c:	4293      	cmp	r3, r2
 800116e:	d901      	bls.n	8001174 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8001170:	2303      	movs	r3, #3
 8001172:	e0ce      	b.n	8001312 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001174:	4b4b      	ldr	r3, [pc, #300]	@ (80012a4 <HAL_RCC_OscConfig+0x4cc>)
 8001176:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001178:	f003 0302 	and.w	r3, r3, #2
 800117c:	2b00      	cmp	r3, #0
 800117e:	d0ee      	beq.n	800115e <HAL_RCC_OscConfig+0x386>
 8001180:	e014      	b.n	80011ac <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001182:	f7ff fcdb 	bl	8000b3c <HAL_GetTick>
 8001186:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001188:	e00a      	b.n	80011a0 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800118a:	f7ff fcd7 	bl	8000b3c <HAL_GetTick>
 800118e:	4602      	mov	r2, r0
 8001190:	693b      	ldr	r3, [r7, #16]
 8001192:	1ad3      	subs	r3, r2, r3
 8001194:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001198:	4293      	cmp	r3, r2
 800119a:	d901      	bls.n	80011a0 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 800119c:	2303      	movs	r3, #3
 800119e:	e0b8      	b.n	8001312 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80011a0:	4b40      	ldr	r3, [pc, #256]	@ (80012a4 <HAL_RCC_OscConfig+0x4cc>)
 80011a2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80011a4:	f003 0302 	and.w	r3, r3, #2
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d1ee      	bne.n	800118a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80011ac:	7dfb      	ldrb	r3, [r7, #23]
 80011ae:	2b01      	cmp	r3, #1
 80011b0:	d105      	bne.n	80011be <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80011b2:	4b3c      	ldr	r3, [pc, #240]	@ (80012a4 <HAL_RCC_OscConfig+0x4cc>)
 80011b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011b6:	4a3b      	ldr	r2, [pc, #236]	@ (80012a4 <HAL_RCC_OscConfig+0x4cc>)
 80011b8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80011bc:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	699b      	ldr	r3, [r3, #24]
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	f000 80a4 	beq.w	8001310 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80011c8:	4b36      	ldr	r3, [pc, #216]	@ (80012a4 <HAL_RCC_OscConfig+0x4cc>)
 80011ca:	689b      	ldr	r3, [r3, #8]
 80011cc:	f003 030c 	and.w	r3, r3, #12
 80011d0:	2b08      	cmp	r3, #8
 80011d2:	d06b      	beq.n	80012ac <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	699b      	ldr	r3, [r3, #24]
 80011d8:	2b02      	cmp	r3, #2
 80011da:	d149      	bne.n	8001270 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80011dc:	4b31      	ldr	r3, [pc, #196]	@ (80012a4 <HAL_RCC_OscConfig+0x4cc>)
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	4a30      	ldr	r2, [pc, #192]	@ (80012a4 <HAL_RCC_OscConfig+0x4cc>)
 80011e2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80011e6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80011e8:	f7ff fca8 	bl	8000b3c <HAL_GetTick>
 80011ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80011ee:	e008      	b.n	8001202 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80011f0:	f7ff fca4 	bl	8000b3c <HAL_GetTick>
 80011f4:	4602      	mov	r2, r0
 80011f6:	693b      	ldr	r3, [r7, #16]
 80011f8:	1ad3      	subs	r3, r2, r3
 80011fa:	2b02      	cmp	r3, #2
 80011fc:	d901      	bls.n	8001202 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80011fe:	2303      	movs	r3, #3
 8001200:	e087      	b.n	8001312 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001202:	4b28      	ldr	r3, [pc, #160]	@ (80012a4 <HAL_RCC_OscConfig+0x4cc>)
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800120a:	2b00      	cmp	r3, #0
 800120c:	d1f0      	bne.n	80011f0 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	69da      	ldr	r2, [r3, #28]
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	6a1b      	ldr	r3, [r3, #32]
 8001216:	431a      	orrs	r2, r3
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800121c:	019b      	lsls	r3, r3, #6
 800121e:	431a      	orrs	r2, r3
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001224:	085b      	lsrs	r3, r3, #1
 8001226:	3b01      	subs	r3, #1
 8001228:	041b      	lsls	r3, r3, #16
 800122a:	431a      	orrs	r2, r3
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001230:	061b      	lsls	r3, r3, #24
 8001232:	4313      	orrs	r3, r2
 8001234:	4a1b      	ldr	r2, [pc, #108]	@ (80012a4 <HAL_RCC_OscConfig+0x4cc>)
 8001236:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800123a:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800123c:	4b19      	ldr	r3, [pc, #100]	@ (80012a4 <HAL_RCC_OscConfig+0x4cc>)
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	4a18      	ldr	r2, [pc, #96]	@ (80012a4 <HAL_RCC_OscConfig+0x4cc>)
 8001242:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001246:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001248:	f7ff fc78 	bl	8000b3c <HAL_GetTick>
 800124c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800124e:	e008      	b.n	8001262 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001250:	f7ff fc74 	bl	8000b3c <HAL_GetTick>
 8001254:	4602      	mov	r2, r0
 8001256:	693b      	ldr	r3, [r7, #16]
 8001258:	1ad3      	subs	r3, r2, r3
 800125a:	2b02      	cmp	r3, #2
 800125c:	d901      	bls.n	8001262 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 800125e:	2303      	movs	r3, #3
 8001260:	e057      	b.n	8001312 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001262:	4b10      	ldr	r3, [pc, #64]	@ (80012a4 <HAL_RCC_OscConfig+0x4cc>)
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800126a:	2b00      	cmp	r3, #0
 800126c:	d0f0      	beq.n	8001250 <HAL_RCC_OscConfig+0x478>
 800126e:	e04f      	b.n	8001310 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001270:	4b0c      	ldr	r3, [pc, #48]	@ (80012a4 <HAL_RCC_OscConfig+0x4cc>)
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	4a0b      	ldr	r2, [pc, #44]	@ (80012a4 <HAL_RCC_OscConfig+0x4cc>)
 8001276:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800127a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800127c:	f7ff fc5e 	bl	8000b3c <HAL_GetTick>
 8001280:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001282:	e008      	b.n	8001296 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001284:	f7ff fc5a 	bl	8000b3c <HAL_GetTick>
 8001288:	4602      	mov	r2, r0
 800128a:	693b      	ldr	r3, [r7, #16]
 800128c:	1ad3      	subs	r3, r2, r3
 800128e:	2b02      	cmp	r3, #2
 8001290:	d901      	bls.n	8001296 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8001292:	2303      	movs	r3, #3
 8001294:	e03d      	b.n	8001312 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001296:	4b03      	ldr	r3, [pc, #12]	@ (80012a4 <HAL_RCC_OscConfig+0x4cc>)
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d1f0      	bne.n	8001284 <HAL_RCC_OscConfig+0x4ac>
 80012a2:	e035      	b.n	8001310 <HAL_RCC_OscConfig+0x538>
 80012a4:	40023800 	.word	0x40023800
 80012a8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80012ac:	4b1b      	ldr	r3, [pc, #108]	@ (800131c <HAL_RCC_OscConfig+0x544>)
 80012ae:	685b      	ldr	r3, [r3, #4]
 80012b0:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	699b      	ldr	r3, [r3, #24]
 80012b6:	2b01      	cmp	r3, #1
 80012b8:	d028      	beq.n	800130c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80012ba:	68fb      	ldr	r3, [r7, #12]
 80012bc:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80012c4:	429a      	cmp	r2, r3
 80012c6:	d121      	bne.n	800130c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80012c8:	68fb      	ldr	r3, [r7, #12]
 80012ca:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80012d2:	429a      	cmp	r2, r3
 80012d4:	d11a      	bne.n	800130c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80012d6:	68fa      	ldr	r2, [r7, #12]
 80012d8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80012dc:	4013      	ands	r3, r2
 80012de:	687a      	ldr	r2, [r7, #4]
 80012e0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80012e2:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80012e4:	4293      	cmp	r3, r2
 80012e6:	d111      	bne.n	800130c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80012e8:	68fb      	ldr	r3, [r7, #12]
 80012ea:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80012f2:	085b      	lsrs	r3, r3, #1
 80012f4:	3b01      	subs	r3, #1
 80012f6:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80012f8:	429a      	cmp	r2, r3
 80012fa:	d107      	bne.n	800130c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80012fc:	68fb      	ldr	r3, [r7, #12]
 80012fe:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001306:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001308:	429a      	cmp	r2, r3
 800130a:	d001      	beq.n	8001310 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 800130c:	2301      	movs	r3, #1
 800130e:	e000      	b.n	8001312 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8001310:	2300      	movs	r3, #0
}
 8001312:	4618      	mov	r0, r3
 8001314:	3718      	adds	r7, #24
 8001316:	46bd      	mov	sp, r7
 8001318:	bd80      	pop	{r7, pc}
 800131a:	bf00      	nop
 800131c:	40023800 	.word	0x40023800

08001320 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	b084      	sub	sp, #16
 8001324:	af00      	add	r7, sp, #0
 8001326:	6078      	str	r0, [r7, #4]
 8001328:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800132a:	2300      	movs	r3, #0
 800132c:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	2b00      	cmp	r3, #0
 8001332:	d101      	bne.n	8001338 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001334:	2301      	movs	r3, #1
 8001336:	e0d0      	b.n	80014da <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001338:	4b6a      	ldr	r3, [pc, #424]	@ (80014e4 <HAL_RCC_ClockConfig+0x1c4>)
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	f003 030f 	and.w	r3, r3, #15
 8001340:	683a      	ldr	r2, [r7, #0]
 8001342:	429a      	cmp	r2, r3
 8001344:	d910      	bls.n	8001368 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001346:	4b67      	ldr	r3, [pc, #412]	@ (80014e4 <HAL_RCC_ClockConfig+0x1c4>)
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	f023 020f 	bic.w	r2, r3, #15
 800134e:	4965      	ldr	r1, [pc, #404]	@ (80014e4 <HAL_RCC_ClockConfig+0x1c4>)
 8001350:	683b      	ldr	r3, [r7, #0]
 8001352:	4313      	orrs	r3, r2
 8001354:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001356:	4b63      	ldr	r3, [pc, #396]	@ (80014e4 <HAL_RCC_ClockConfig+0x1c4>)
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	f003 030f 	and.w	r3, r3, #15
 800135e:	683a      	ldr	r2, [r7, #0]
 8001360:	429a      	cmp	r2, r3
 8001362:	d001      	beq.n	8001368 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001364:	2301      	movs	r3, #1
 8001366:	e0b8      	b.n	80014da <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	f003 0302 	and.w	r3, r3, #2
 8001370:	2b00      	cmp	r3, #0
 8001372:	d020      	beq.n	80013b6 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	f003 0304 	and.w	r3, r3, #4
 800137c:	2b00      	cmp	r3, #0
 800137e:	d005      	beq.n	800138c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001380:	4b59      	ldr	r3, [pc, #356]	@ (80014e8 <HAL_RCC_ClockConfig+0x1c8>)
 8001382:	689b      	ldr	r3, [r3, #8]
 8001384:	4a58      	ldr	r2, [pc, #352]	@ (80014e8 <HAL_RCC_ClockConfig+0x1c8>)
 8001386:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800138a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	f003 0308 	and.w	r3, r3, #8
 8001394:	2b00      	cmp	r3, #0
 8001396:	d005      	beq.n	80013a4 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001398:	4b53      	ldr	r3, [pc, #332]	@ (80014e8 <HAL_RCC_ClockConfig+0x1c8>)
 800139a:	689b      	ldr	r3, [r3, #8]
 800139c:	4a52      	ldr	r2, [pc, #328]	@ (80014e8 <HAL_RCC_ClockConfig+0x1c8>)
 800139e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80013a2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80013a4:	4b50      	ldr	r3, [pc, #320]	@ (80014e8 <HAL_RCC_ClockConfig+0x1c8>)
 80013a6:	689b      	ldr	r3, [r3, #8]
 80013a8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	689b      	ldr	r3, [r3, #8]
 80013b0:	494d      	ldr	r1, [pc, #308]	@ (80014e8 <HAL_RCC_ClockConfig+0x1c8>)
 80013b2:	4313      	orrs	r3, r2
 80013b4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	f003 0301 	and.w	r3, r3, #1
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d040      	beq.n	8001444 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	685b      	ldr	r3, [r3, #4]
 80013c6:	2b01      	cmp	r3, #1
 80013c8:	d107      	bne.n	80013da <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80013ca:	4b47      	ldr	r3, [pc, #284]	@ (80014e8 <HAL_RCC_ClockConfig+0x1c8>)
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d115      	bne.n	8001402 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80013d6:	2301      	movs	r3, #1
 80013d8:	e07f      	b.n	80014da <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	685b      	ldr	r3, [r3, #4]
 80013de:	2b02      	cmp	r3, #2
 80013e0:	d107      	bne.n	80013f2 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80013e2:	4b41      	ldr	r3, [pc, #260]	@ (80014e8 <HAL_RCC_ClockConfig+0x1c8>)
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d109      	bne.n	8001402 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80013ee:	2301      	movs	r3, #1
 80013f0:	e073      	b.n	80014da <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013f2:	4b3d      	ldr	r3, [pc, #244]	@ (80014e8 <HAL_RCC_ClockConfig+0x1c8>)
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	f003 0302 	and.w	r3, r3, #2
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d101      	bne.n	8001402 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80013fe:	2301      	movs	r3, #1
 8001400:	e06b      	b.n	80014da <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001402:	4b39      	ldr	r3, [pc, #228]	@ (80014e8 <HAL_RCC_ClockConfig+0x1c8>)
 8001404:	689b      	ldr	r3, [r3, #8]
 8001406:	f023 0203 	bic.w	r2, r3, #3
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	685b      	ldr	r3, [r3, #4]
 800140e:	4936      	ldr	r1, [pc, #216]	@ (80014e8 <HAL_RCC_ClockConfig+0x1c8>)
 8001410:	4313      	orrs	r3, r2
 8001412:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001414:	f7ff fb92 	bl	8000b3c <HAL_GetTick>
 8001418:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800141a:	e00a      	b.n	8001432 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800141c:	f7ff fb8e 	bl	8000b3c <HAL_GetTick>
 8001420:	4602      	mov	r2, r0
 8001422:	68fb      	ldr	r3, [r7, #12]
 8001424:	1ad3      	subs	r3, r2, r3
 8001426:	f241 3288 	movw	r2, #5000	@ 0x1388
 800142a:	4293      	cmp	r3, r2
 800142c:	d901      	bls.n	8001432 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800142e:	2303      	movs	r3, #3
 8001430:	e053      	b.n	80014da <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001432:	4b2d      	ldr	r3, [pc, #180]	@ (80014e8 <HAL_RCC_ClockConfig+0x1c8>)
 8001434:	689b      	ldr	r3, [r3, #8]
 8001436:	f003 020c 	and.w	r2, r3, #12
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	685b      	ldr	r3, [r3, #4]
 800143e:	009b      	lsls	r3, r3, #2
 8001440:	429a      	cmp	r2, r3
 8001442:	d1eb      	bne.n	800141c <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001444:	4b27      	ldr	r3, [pc, #156]	@ (80014e4 <HAL_RCC_ClockConfig+0x1c4>)
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	f003 030f 	and.w	r3, r3, #15
 800144c:	683a      	ldr	r2, [r7, #0]
 800144e:	429a      	cmp	r2, r3
 8001450:	d210      	bcs.n	8001474 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001452:	4b24      	ldr	r3, [pc, #144]	@ (80014e4 <HAL_RCC_ClockConfig+0x1c4>)
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	f023 020f 	bic.w	r2, r3, #15
 800145a:	4922      	ldr	r1, [pc, #136]	@ (80014e4 <HAL_RCC_ClockConfig+0x1c4>)
 800145c:	683b      	ldr	r3, [r7, #0]
 800145e:	4313      	orrs	r3, r2
 8001460:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001462:	4b20      	ldr	r3, [pc, #128]	@ (80014e4 <HAL_RCC_ClockConfig+0x1c4>)
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	f003 030f 	and.w	r3, r3, #15
 800146a:	683a      	ldr	r2, [r7, #0]
 800146c:	429a      	cmp	r2, r3
 800146e:	d001      	beq.n	8001474 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8001470:	2301      	movs	r3, #1
 8001472:	e032      	b.n	80014da <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	f003 0304 	and.w	r3, r3, #4
 800147c:	2b00      	cmp	r3, #0
 800147e:	d008      	beq.n	8001492 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001480:	4b19      	ldr	r3, [pc, #100]	@ (80014e8 <HAL_RCC_ClockConfig+0x1c8>)
 8001482:	689b      	ldr	r3, [r3, #8]
 8001484:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	68db      	ldr	r3, [r3, #12]
 800148c:	4916      	ldr	r1, [pc, #88]	@ (80014e8 <HAL_RCC_ClockConfig+0x1c8>)
 800148e:	4313      	orrs	r3, r2
 8001490:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	f003 0308 	and.w	r3, r3, #8
 800149a:	2b00      	cmp	r3, #0
 800149c:	d009      	beq.n	80014b2 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800149e:	4b12      	ldr	r3, [pc, #72]	@ (80014e8 <HAL_RCC_ClockConfig+0x1c8>)
 80014a0:	689b      	ldr	r3, [r3, #8]
 80014a2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	691b      	ldr	r3, [r3, #16]
 80014aa:	00db      	lsls	r3, r3, #3
 80014ac:	490e      	ldr	r1, [pc, #56]	@ (80014e8 <HAL_RCC_ClockConfig+0x1c8>)
 80014ae:	4313      	orrs	r3, r2
 80014b0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80014b2:	f000 f821 	bl	80014f8 <HAL_RCC_GetSysClockFreq>
 80014b6:	4602      	mov	r2, r0
 80014b8:	4b0b      	ldr	r3, [pc, #44]	@ (80014e8 <HAL_RCC_ClockConfig+0x1c8>)
 80014ba:	689b      	ldr	r3, [r3, #8]
 80014bc:	091b      	lsrs	r3, r3, #4
 80014be:	f003 030f 	and.w	r3, r3, #15
 80014c2:	490a      	ldr	r1, [pc, #40]	@ (80014ec <HAL_RCC_ClockConfig+0x1cc>)
 80014c4:	5ccb      	ldrb	r3, [r1, r3]
 80014c6:	fa22 f303 	lsr.w	r3, r2, r3
 80014ca:	4a09      	ldr	r2, [pc, #36]	@ (80014f0 <HAL_RCC_ClockConfig+0x1d0>)
 80014cc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80014ce:	4b09      	ldr	r3, [pc, #36]	@ (80014f4 <HAL_RCC_ClockConfig+0x1d4>)
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	4618      	mov	r0, r3
 80014d4:	f7ff f9b6 	bl	8000844 <HAL_InitTick>

  return HAL_OK;
 80014d8:	2300      	movs	r3, #0
}
 80014da:	4618      	mov	r0, r3
 80014dc:	3710      	adds	r7, #16
 80014de:	46bd      	mov	sp, r7
 80014e0:	bd80      	pop	{r7, pc}
 80014e2:	bf00      	nop
 80014e4:	40023c00 	.word	0x40023c00
 80014e8:	40023800 	.word	0x40023800
 80014ec:	08006b68 	.word	0x08006b68
 80014f0:	20000000 	.word	0x20000000
 80014f4:	20000004 	.word	0x20000004

080014f8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80014f8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80014fc:	b090      	sub	sp, #64	@ 0x40
 80014fe:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8001500:	2300      	movs	r3, #0
 8001502:	637b      	str	r3, [r7, #52]	@ 0x34
 8001504:	2300      	movs	r3, #0
 8001506:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001508:	2300      	movs	r3, #0
 800150a:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0;
 800150c:	2300      	movs	r3, #0
 800150e:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001510:	4b59      	ldr	r3, [pc, #356]	@ (8001678 <HAL_RCC_GetSysClockFreq+0x180>)
 8001512:	689b      	ldr	r3, [r3, #8]
 8001514:	f003 030c 	and.w	r3, r3, #12
 8001518:	2b08      	cmp	r3, #8
 800151a:	d00d      	beq.n	8001538 <HAL_RCC_GetSysClockFreq+0x40>
 800151c:	2b08      	cmp	r3, #8
 800151e:	f200 80a1 	bhi.w	8001664 <HAL_RCC_GetSysClockFreq+0x16c>
 8001522:	2b00      	cmp	r3, #0
 8001524:	d002      	beq.n	800152c <HAL_RCC_GetSysClockFreq+0x34>
 8001526:	2b04      	cmp	r3, #4
 8001528:	d003      	beq.n	8001532 <HAL_RCC_GetSysClockFreq+0x3a>
 800152a:	e09b      	b.n	8001664 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800152c:	4b53      	ldr	r3, [pc, #332]	@ (800167c <HAL_RCC_GetSysClockFreq+0x184>)
 800152e:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001530:	e09b      	b.n	800166a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001532:	4b53      	ldr	r3, [pc, #332]	@ (8001680 <HAL_RCC_GetSysClockFreq+0x188>)
 8001534:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001536:	e098      	b.n	800166a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001538:	4b4f      	ldr	r3, [pc, #316]	@ (8001678 <HAL_RCC_GetSysClockFreq+0x180>)
 800153a:	685b      	ldr	r3, [r3, #4]
 800153c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001540:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8001542:	4b4d      	ldr	r3, [pc, #308]	@ (8001678 <HAL_RCC_GetSysClockFreq+0x180>)
 8001544:	685b      	ldr	r3, [r3, #4]
 8001546:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800154a:	2b00      	cmp	r3, #0
 800154c:	d028      	beq.n	80015a0 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800154e:	4b4a      	ldr	r3, [pc, #296]	@ (8001678 <HAL_RCC_GetSysClockFreq+0x180>)
 8001550:	685b      	ldr	r3, [r3, #4]
 8001552:	099b      	lsrs	r3, r3, #6
 8001554:	2200      	movs	r2, #0
 8001556:	623b      	str	r3, [r7, #32]
 8001558:	627a      	str	r2, [r7, #36]	@ 0x24
 800155a:	6a3b      	ldr	r3, [r7, #32]
 800155c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001560:	2100      	movs	r1, #0
 8001562:	4b47      	ldr	r3, [pc, #284]	@ (8001680 <HAL_RCC_GetSysClockFreq+0x188>)
 8001564:	fb03 f201 	mul.w	r2, r3, r1
 8001568:	2300      	movs	r3, #0
 800156a:	fb00 f303 	mul.w	r3, r0, r3
 800156e:	4413      	add	r3, r2
 8001570:	4a43      	ldr	r2, [pc, #268]	@ (8001680 <HAL_RCC_GetSysClockFreq+0x188>)
 8001572:	fba0 1202 	umull	r1, r2, r0, r2
 8001576:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001578:	460a      	mov	r2, r1
 800157a:	62ba      	str	r2, [r7, #40]	@ 0x28
 800157c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800157e:	4413      	add	r3, r2
 8001580:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001582:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001584:	2200      	movs	r2, #0
 8001586:	61bb      	str	r3, [r7, #24]
 8001588:	61fa      	str	r2, [r7, #28]
 800158a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800158e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8001592:	f7fe fe8f 	bl	80002b4 <__aeabi_uldivmod>
 8001596:	4602      	mov	r2, r0
 8001598:	460b      	mov	r3, r1
 800159a:	4613      	mov	r3, r2
 800159c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800159e:	e053      	b.n	8001648 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80015a0:	4b35      	ldr	r3, [pc, #212]	@ (8001678 <HAL_RCC_GetSysClockFreq+0x180>)
 80015a2:	685b      	ldr	r3, [r3, #4]
 80015a4:	099b      	lsrs	r3, r3, #6
 80015a6:	2200      	movs	r2, #0
 80015a8:	613b      	str	r3, [r7, #16]
 80015aa:	617a      	str	r2, [r7, #20]
 80015ac:	693b      	ldr	r3, [r7, #16]
 80015ae:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80015b2:	f04f 0b00 	mov.w	fp, #0
 80015b6:	4652      	mov	r2, sl
 80015b8:	465b      	mov	r3, fp
 80015ba:	f04f 0000 	mov.w	r0, #0
 80015be:	f04f 0100 	mov.w	r1, #0
 80015c2:	0159      	lsls	r1, r3, #5
 80015c4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80015c8:	0150      	lsls	r0, r2, #5
 80015ca:	4602      	mov	r2, r0
 80015cc:	460b      	mov	r3, r1
 80015ce:	ebb2 080a 	subs.w	r8, r2, sl
 80015d2:	eb63 090b 	sbc.w	r9, r3, fp
 80015d6:	f04f 0200 	mov.w	r2, #0
 80015da:	f04f 0300 	mov.w	r3, #0
 80015de:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80015e2:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80015e6:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80015ea:	ebb2 0408 	subs.w	r4, r2, r8
 80015ee:	eb63 0509 	sbc.w	r5, r3, r9
 80015f2:	f04f 0200 	mov.w	r2, #0
 80015f6:	f04f 0300 	mov.w	r3, #0
 80015fa:	00eb      	lsls	r3, r5, #3
 80015fc:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001600:	00e2      	lsls	r2, r4, #3
 8001602:	4614      	mov	r4, r2
 8001604:	461d      	mov	r5, r3
 8001606:	eb14 030a 	adds.w	r3, r4, sl
 800160a:	603b      	str	r3, [r7, #0]
 800160c:	eb45 030b 	adc.w	r3, r5, fp
 8001610:	607b      	str	r3, [r7, #4]
 8001612:	f04f 0200 	mov.w	r2, #0
 8001616:	f04f 0300 	mov.w	r3, #0
 800161a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800161e:	4629      	mov	r1, r5
 8001620:	028b      	lsls	r3, r1, #10
 8001622:	4621      	mov	r1, r4
 8001624:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001628:	4621      	mov	r1, r4
 800162a:	028a      	lsls	r2, r1, #10
 800162c:	4610      	mov	r0, r2
 800162e:	4619      	mov	r1, r3
 8001630:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001632:	2200      	movs	r2, #0
 8001634:	60bb      	str	r3, [r7, #8]
 8001636:	60fa      	str	r2, [r7, #12]
 8001638:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800163c:	f7fe fe3a 	bl	80002b4 <__aeabi_uldivmod>
 8001640:	4602      	mov	r2, r0
 8001642:	460b      	mov	r3, r1
 8001644:	4613      	mov	r3, r2
 8001646:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8001648:	4b0b      	ldr	r3, [pc, #44]	@ (8001678 <HAL_RCC_GetSysClockFreq+0x180>)
 800164a:	685b      	ldr	r3, [r3, #4]
 800164c:	0c1b      	lsrs	r3, r3, #16
 800164e:	f003 0303 	and.w	r3, r3, #3
 8001652:	3301      	adds	r3, #1
 8001654:	005b      	lsls	r3, r3, #1
 8001656:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8001658:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800165a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800165c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001660:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001662:	e002      	b.n	800166a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001664:	4b05      	ldr	r3, [pc, #20]	@ (800167c <HAL_RCC_GetSysClockFreq+0x184>)
 8001666:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001668:	bf00      	nop
    }
  }
  return sysclockfreq;
 800166a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 800166c:	4618      	mov	r0, r3
 800166e:	3740      	adds	r7, #64	@ 0x40
 8001670:	46bd      	mov	sp, r7
 8001672:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001676:	bf00      	nop
 8001678:	40023800 	.word	0x40023800
 800167c:	00f42400 	.word	0x00f42400
 8001680:	017d7840 	.word	0x017d7840

08001684 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001684:	b480      	push	{r7}
 8001686:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001688:	4b03      	ldr	r3, [pc, #12]	@ (8001698 <HAL_RCC_GetHCLKFreq+0x14>)
 800168a:	681b      	ldr	r3, [r3, #0]
}
 800168c:	4618      	mov	r0, r3
 800168e:	46bd      	mov	sp, r7
 8001690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001694:	4770      	bx	lr
 8001696:	bf00      	nop
 8001698:	20000000 	.word	0x20000000

0800169c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800169c:	b580      	push	{r7, lr}
 800169e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80016a0:	f7ff fff0 	bl	8001684 <HAL_RCC_GetHCLKFreq>
 80016a4:	4602      	mov	r2, r0
 80016a6:	4b05      	ldr	r3, [pc, #20]	@ (80016bc <HAL_RCC_GetPCLK2Freq+0x20>)
 80016a8:	689b      	ldr	r3, [r3, #8]
 80016aa:	0b5b      	lsrs	r3, r3, #13
 80016ac:	f003 0307 	and.w	r3, r3, #7
 80016b0:	4903      	ldr	r1, [pc, #12]	@ (80016c0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80016b2:	5ccb      	ldrb	r3, [r1, r3]
 80016b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80016b8:	4618      	mov	r0, r3
 80016ba:	bd80      	pop	{r7, pc}
 80016bc:	40023800 	.word	0x40023800
 80016c0:	08006b78 	.word	0x08006b78

080016c4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80016c4:	b480      	push	{r7}
 80016c6:	b083      	sub	sp, #12
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	6078      	str	r0, [r7, #4]
 80016cc:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	220f      	movs	r2, #15
 80016d2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80016d4:	4b12      	ldr	r3, [pc, #72]	@ (8001720 <HAL_RCC_GetClockConfig+0x5c>)
 80016d6:	689b      	ldr	r3, [r3, #8]
 80016d8:	f003 0203 	and.w	r2, r3, #3
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80016e0:	4b0f      	ldr	r3, [pc, #60]	@ (8001720 <HAL_RCC_GetClockConfig+0x5c>)
 80016e2:	689b      	ldr	r3, [r3, #8]
 80016e4:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80016ec:	4b0c      	ldr	r3, [pc, #48]	@ (8001720 <HAL_RCC_GetClockConfig+0x5c>)
 80016ee:	689b      	ldr	r3, [r3, #8]
 80016f0:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80016f8:	4b09      	ldr	r3, [pc, #36]	@ (8001720 <HAL_RCC_GetClockConfig+0x5c>)
 80016fa:	689b      	ldr	r3, [r3, #8]
 80016fc:	08db      	lsrs	r3, r3, #3
 80016fe:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001706:	4b07      	ldr	r3, [pc, #28]	@ (8001724 <HAL_RCC_GetClockConfig+0x60>)
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	f003 020f 	and.w	r2, r3, #15
 800170e:	683b      	ldr	r3, [r7, #0]
 8001710:	601a      	str	r2, [r3, #0]
}
 8001712:	bf00      	nop
 8001714:	370c      	adds	r7, #12
 8001716:	46bd      	mov	sp, r7
 8001718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171c:	4770      	bx	lr
 800171e:	bf00      	nop
 8001720:	40023800 	.word	0x40023800
 8001724:	40023c00 	.word	0x40023c00

08001728 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	b082      	sub	sp, #8
 800172c:	af00      	add	r7, sp, #0
 800172e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	2b00      	cmp	r3, #0
 8001734:	d101      	bne.n	800173a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001736:	2301      	movs	r3, #1
 8001738:	e049      	b.n	80017ce <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001740:	b2db      	uxtb	r3, r3
 8001742:	2b00      	cmp	r3, #0
 8001744:	d106      	bne.n	8001754 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	2200      	movs	r2, #0
 800174a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800174e:	6878      	ldr	r0, [r7, #4]
 8001750:	f000 f841 	bl	80017d6 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	2202      	movs	r2, #2
 8001758:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681a      	ldr	r2, [r3, #0]
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	3304      	adds	r3, #4
 8001764:	4619      	mov	r1, r3
 8001766:	4610      	mov	r0, r2
 8001768:	f000 f9e8 	bl	8001b3c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	2201      	movs	r2, #1
 8001770:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	2201      	movs	r2, #1
 8001778:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	2201      	movs	r2, #1
 8001780:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	2201      	movs	r2, #1
 8001788:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	2201      	movs	r2, #1
 8001790:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	2201      	movs	r2, #1
 8001798:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	2201      	movs	r2, #1
 80017a0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	2201      	movs	r2, #1
 80017a8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	2201      	movs	r2, #1
 80017b0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	2201      	movs	r2, #1
 80017b8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	2201      	movs	r2, #1
 80017c0:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	2201      	movs	r2, #1
 80017c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80017cc:	2300      	movs	r3, #0
}
 80017ce:	4618      	mov	r0, r3
 80017d0:	3708      	adds	r7, #8
 80017d2:	46bd      	mov	sp, r7
 80017d4:	bd80      	pop	{r7, pc}

080017d6 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80017d6:	b480      	push	{r7}
 80017d8:	b083      	sub	sp, #12
 80017da:	af00      	add	r7, sp, #0
 80017dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80017de:	bf00      	nop
 80017e0:	370c      	adds	r7, #12
 80017e2:	46bd      	mov	sp, r7
 80017e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e8:	4770      	bx	lr
	...

080017ec <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80017ec:	b480      	push	{r7}
 80017ee:	b085      	sub	sp, #20
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80017fa:	b2db      	uxtb	r3, r3
 80017fc:	2b01      	cmp	r3, #1
 80017fe:	d001      	beq.n	8001804 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001800:	2301      	movs	r3, #1
 8001802:	e054      	b.n	80018ae <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	2202      	movs	r2, #2
 8001808:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	68da      	ldr	r2, [r3, #12]
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	f042 0201 	orr.w	r2, r2, #1
 800181a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	4a26      	ldr	r2, [pc, #152]	@ (80018bc <HAL_TIM_Base_Start_IT+0xd0>)
 8001822:	4293      	cmp	r3, r2
 8001824:	d022      	beq.n	800186c <HAL_TIM_Base_Start_IT+0x80>
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800182e:	d01d      	beq.n	800186c <HAL_TIM_Base_Start_IT+0x80>
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	4a22      	ldr	r2, [pc, #136]	@ (80018c0 <HAL_TIM_Base_Start_IT+0xd4>)
 8001836:	4293      	cmp	r3, r2
 8001838:	d018      	beq.n	800186c <HAL_TIM_Base_Start_IT+0x80>
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	4a21      	ldr	r2, [pc, #132]	@ (80018c4 <HAL_TIM_Base_Start_IT+0xd8>)
 8001840:	4293      	cmp	r3, r2
 8001842:	d013      	beq.n	800186c <HAL_TIM_Base_Start_IT+0x80>
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	4a1f      	ldr	r2, [pc, #124]	@ (80018c8 <HAL_TIM_Base_Start_IT+0xdc>)
 800184a:	4293      	cmp	r3, r2
 800184c:	d00e      	beq.n	800186c <HAL_TIM_Base_Start_IT+0x80>
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	4a1e      	ldr	r2, [pc, #120]	@ (80018cc <HAL_TIM_Base_Start_IT+0xe0>)
 8001854:	4293      	cmp	r3, r2
 8001856:	d009      	beq.n	800186c <HAL_TIM_Base_Start_IT+0x80>
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	4a1c      	ldr	r2, [pc, #112]	@ (80018d0 <HAL_TIM_Base_Start_IT+0xe4>)
 800185e:	4293      	cmp	r3, r2
 8001860:	d004      	beq.n	800186c <HAL_TIM_Base_Start_IT+0x80>
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	4a1b      	ldr	r2, [pc, #108]	@ (80018d4 <HAL_TIM_Base_Start_IT+0xe8>)
 8001868:	4293      	cmp	r3, r2
 800186a:	d115      	bne.n	8001898 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	689a      	ldr	r2, [r3, #8]
 8001872:	4b19      	ldr	r3, [pc, #100]	@ (80018d8 <HAL_TIM_Base_Start_IT+0xec>)
 8001874:	4013      	ands	r3, r2
 8001876:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	2b06      	cmp	r3, #6
 800187c:	d015      	beq.n	80018aa <HAL_TIM_Base_Start_IT+0xbe>
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001884:	d011      	beq.n	80018aa <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	681a      	ldr	r2, [r3, #0]
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	f042 0201 	orr.w	r2, r2, #1
 8001894:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001896:	e008      	b.n	80018aa <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	681a      	ldr	r2, [r3, #0]
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	f042 0201 	orr.w	r2, r2, #1
 80018a6:	601a      	str	r2, [r3, #0]
 80018a8:	e000      	b.n	80018ac <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80018aa:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80018ac:	2300      	movs	r3, #0
}
 80018ae:	4618      	mov	r0, r3
 80018b0:	3714      	adds	r7, #20
 80018b2:	46bd      	mov	sp, r7
 80018b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b8:	4770      	bx	lr
 80018ba:	bf00      	nop
 80018bc:	40010000 	.word	0x40010000
 80018c0:	40000400 	.word	0x40000400
 80018c4:	40000800 	.word	0x40000800
 80018c8:	40000c00 	.word	0x40000c00
 80018cc:	40010400 	.word	0x40010400
 80018d0:	40014000 	.word	0x40014000
 80018d4:	40001800 	.word	0x40001800
 80018d8:	00010007 	.word	0x00010007

080018dc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	b084      	sub	sp, #16
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	68db      	ldr	r3, [r3, #12]
 80018ea:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	691b      	ldr	r3, [r3, #16]
 80018f2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80018f4:	68bb      	ldr	r3, [r7, #8]
 80018f6:	f003 0302 	and.w	r3, r3, #2
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d020      	beq.n	8001940 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	f003 0302 	and.w	r3, r3, #2
 8001904:	2b00      	cmp	r3, #0
 8001906:	d01b      	beq.n	8001940 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	f06f 0202 	mvn.w	r2, #2
 8001910:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	2201      	movs	r2, #1
 8001916:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	699b      	ldr	r3, [r3, #24]
 800191e:	f003 0303 	and.w	r3, r3, #3
 8001922:	2b00      	cmp	r3, #0
 8001924:	d003      	beq.n	800192e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001926:	6878      	ldr	r0, [r7, #4]
 8001928:	f000 f8e9 	bl	8001afe <HAL_TIM_IC_CaptureCallback>
 800192c:	e005      	b.n	800193a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800192e:	6878      	ldr	r0, [r7, #4]
 8001930:	f000 f8db 	bl	8001aea <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001934:	6878      	ldr	r0, [r7, #4]
 8001936:	f000 f8ec 	bl	8001b12 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	2200      	movs	r2, #0
 800193e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8001940:	68bb      	ldr	r3, [r7, #8]
 8001942:	f003 0304 	and.w	r3, r3, #4
 8001946:	2b00      	cmp	r3, #0
 8001948:	d020      	beq.n	800198c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800194a:	68fb      	ldr	r3, [r7, #12]
 800194c:	f003 0304 	and.w	r3, r3, #4
 8001950:	2b00      	cmp	r3, #0
 8001952:	d01b      	beq.n	800198c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	f06f 0204 	mvn.w	r2, #4
 800195c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	2202      	movs	r2, #2
 8001962:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	699b      	ldr	r3, [r3, #24]
 800196a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800196e:	2b00      	cmp	r3, #0
 8001970:	d003      	beq.n	800197a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001972:	6878      	ldr	r0, [r7, #4]
 8001974:	f000 f8c3 	bl	8001afe <HAL_TIM_IC_CaptureCallback>
 8001978:	e005      	b.n	8001986 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800197a:	6878      	ldr	r0, [r7, #4]
 800197c:	f000 f8b5 	bl	8001aea <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001980:	6878      	ldr	r0, [r7, #4]
 8001982:	f000 f8c6 	bl	8001b12 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	2200      	movs	r2, #0
 800198a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800198c:	68bb      	ldr	r3, [r7, #8]
 800198e:	f003 0308 	and.w	r3, r3, #8
 8001992:	2b00      	cmp	r3, #0
 8001994:	d020      	beq.n	80019d8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	f003 0308 	and.w	r3, r3, #8
 800199c:	2b00      	cmp	r3, #0
 800199e:	d01b      	beq.n	80019d8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	f06f 0208 	mvn.w	r2, #8
 80019a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	2204      	movs	r2, #4
 80019ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	69db      	ldr	r3, [r3, #28]
 80019b6:	f003 0303 	and.w	r3, r3, #3
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d003      	beq.n	80019c6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80019be:	6878      	ldr	r0, [r7, #4]
 80019c0:	f000 f89d 	bl	8001afe <HAL_TIM_IC_CaptureCallback>
 80019c4:	e005      	b.n	80019d2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80019c6:	6878      	ldr	r0, [r7, #4]
 80019c8:	f000 f88f 	bl	8001aea <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80019cc:	6878      	ldr	r0, [r7, #4]
 80019ce:	f000 f8a0 	bl	8001b12 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	2200      	movs	r2, #0
 80019d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80019d8:	68bb      	ldr	r3, [r7, #8]
 80019da:	f003 0310 	and.w	r3, r3, #16
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d020      	beq.n	8001a24 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	f003 0310 	and.w	r3, r3, #16
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d01b      	beq.n	8001a24 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	f06f 0210 	mvn.w	r2, #16
 80019f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	2208      	movs	r2, #8
 80019fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	69db      	ldr	r3, [r3, #28]
 8001a02:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d003      	beq.n	8001a12 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001a0a:	6878      	ldr	r0, [r7, #4]
 8001a0c:	f000 f877 	bl	8001afe <HAL_TIM_IC_CaptureCallback>
 8001a10:	e005      	b.n	8001a1e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001a12:	6878      	ldr	r0, [r7, #4]
 8001a14:	f000 f869 	bl	8001aea <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001a18:	6878      	ldr	r0, [r7, #4]
 8001a1a:	f000 f87a 	bl	8001b12 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	2200      	movs	r2, #0
 8001a22:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8001a24:	68bb      	ldr	r3, [r7, #8]
 8001a26:	f003 0301 	and.w	r3, r3, #1
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d00c      	beq.n	8001a48 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	f003 0301 	and.w	r3, r3, #1
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d007      	beq.n	8001a48 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	f06f 0201 	mvn.w	r2, #1
 8001a40:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001a42:	6878      	ldr	r0, [r7, #4]
 8001a44:	f7fe fec2 	bl	80007cc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8001a48:	68bb      	ldr	r3, [r7, #8]
 8001a4a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d104      	bne.n	8001a5c <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8001a52:	68bb      	ldr	r3, [r7, #8]
 8001a54:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d00c      	beq.n	8001a76 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d007      	beq.n	8001a76 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8001a6e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001a70:	6878      	ldr	r0, [r7, #4]
 8001a72:	f000 f913 	bl	8001c9c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8001a76:	68bb      	ldr	r3, [r7, #8]
 8001a78:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d00c      	beq.n	8001a9a <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d007      	beq.n	8001a9a <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8001a92:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8001a94:	6878      	ldr	r0, [r7, #4]
 8001a96:	f000 f90b 	bl	8001cb0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8001a9a:	68bb      	ldr	r3, [r7, #8]
 8001a9c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d00c      	beq.n	8001abe <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d007      	beq.n	8001abe <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8001ab6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001ab8:	6878      	ldr	r0, [r7, #4]
 8001aba:	f000 f834 	bl	8001b26 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8001abe:	68bb      	ldr	r3, [r7, #8]
 8001ac0:	f003 0320 	and.w	r3, r3, #32
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d00c      	beq.n	8001ae2 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	f003 0320 	and.w	r3, r3, #32
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d007      	beq.n	8001ae2 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	f06f 0220 	mvn.w	r2, #32
 8001ada:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001adc:	6878      	ldr	r0, [r7, #4]
 8001ade:	f000 f8d3 	bl	8001c88 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001ae2:	bf00      	nop
 8001ae4:	3710      	adds	r7, #16
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	bd80      	pop	{r7, pc}

08001aea <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001aea:	b480      	push	{r7}
 8001aec:	b083      	sub	sp, #12
 8001aee:	af00      	add	r7, sp, #0
 8001af0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001af2:	bf00      	nop
 8001af4:	370c      	adds	r7, #12
 8001af6:	46bd      	mov	sp, r7
 8001af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afc:	4770      	bx	lr

08001afe <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001afe:	b480      	push	{r7}
 8001b00:	b083      	sub	sp, #12
 8001b02:	af00      	add	r7, sp, #0
 8001b04:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001b06:	bf00      	nop
 8001b08:	370c      	adds	r7, #12
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b10:	4770      	bx	lr

08001b12 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001b12:	b480      	push	{r7}
 8001b14:	b083      	sub	sp, #12
 8001b16:	af00      	add	r7, sp, #0
 8001b18:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001b1a:	bf00      	nop
 8001b1c:	370c      	adds	r7, #12
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b24:	4770      	bx	lr

08001b26 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001b26:	b480      	push	{r7}
 8001b28:	b083      	sub	sp, #12
 8001b2a:	af00      	add	r7, sp, #0
 8001b2c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001b2e:	bf00      	nop
 8001b30:	370c      	adds	r7, #12
 8001b32:	46bd      	mov	sp, r7
 8001b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b38:	4770      	bx	lr
	...

08001b3c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8001b3c:	b480      	push	{r7}
 8001b3e:	b085      	sub	sp, #20
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	6078      	str	r0, [r7, #4]
 8001b44:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	4a43      	ldr	r2, [pc, #268]	@ (8001c5c <TIM_Base_SetConfig+0x120>)
 8001b50:	4293      	cmp	r3, r2
 8001b52:	d013      	beq.n	8001b7c <TIM_Base_SetConfig+0x40>
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001b5a:	d00f      	beq.n	8001b7c <TIM_Base_SetConfig+0x40>
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	4a40      	ldr	r2, [pc, #256]	@ (8001c60 <TIM_Base_SetConfig+0x124>)
 8001b60:	4293      	cmp	r3, r2
 8001b62:	d00b      	beq.n	8001b7c <TIM_Base_SetConfig+0x40>
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	4a3f      	ldr	r2, [pc, #252]	@ (8001c64 <TIM_Base_SetConfig+0x128>)
 8001b68:	4293      	cmp	r3, r2
 8001b6a:	d007      	beq.n	8001b7c <TIM_Base_SetConfig+0x40>
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	4a3e      	ldr	r2, [pc, #248]	@ (8001c68 <TIM_Base_SetConfig+0x12c>)
 8001b70:	4293      	cmp	r3, r2
 8001b72:	d003      	beq.n	8001b7c <TIM_Base_SetConfig+0x40>
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	4a3d      	ldr	r2, [pc, #244]	@ (8001c6c <TIM_Base_SetConfig+0x130>)
 8001b78:	4293      	cmp	r3, r2
 8001b7a:	d108      	bne.n	8001b8e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001b82:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001b84:	683b      	ldr	r3, [r7, #0]
 8001b86:	685b      	ldr	r3, [r3, #4]
 8001b88:	68fa      	ldr	r2, [r7, #12]
 8001b8a:	4313      	orrs	r3, r2
 8001b8c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	4a32      	ldr	r2, [pc, #200]	@ (8001c5c <TIM_Base_SetConfig+0x120>)
 8001b92:	4293      	cmp	r3, r2
 8001b94:	d02b      	beq.n	8001bee <TIM_Base_SetConfig+0xb2>
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001b9c:	d027      	beq.n	8001bee <TIM_Base_SetConfig+0xb2>
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	4a2f      	ldr	r2, [pc, #188]	@ (8001c60 <TIM_Base_SetConfig+0x124>)
 8001ba2:	4293      	cmp	r3, r2
 8001ba4:	d023      	beq.n	8001bee <TIM_Base_SetConfig+0xb2>
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	4a2e      	ldr	r2, [pc, #184]	@ (8001c64 <TIM_Base_SetConfig+0x128>)
 8001baa:	4293      	cmp	r3, r2
 8001bac:	d01f      	beq.n	8001bee <TIM_Base_SetConfig+0xb2>
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	4a2d      	ldr	r2, [pc, #180]	@ (8001c68 <TIM_Base_SetConfig+0x12c>)
 8001bb2:	4293      	cmp	r3, r2
 8001bb4:	d01b      	beq.n	8001bee <TIM_Base_SetConfig+0xb2>
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	4a2c      	ldr	r2, [pc, #176]	@ (8001c6c <TIM_Base_SetConfig+0x130>)
 8001bba:	4293      	cmp	r3, r2
 8001bbc:	d017      	beq.n	8001bee <TIM_Base_SetConfig+0xb2>
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	4a2b      	ldr	r2, [pc, #172]	@ (8001c70 <TIM_Base_SetConfig+0x134>)
 8001bc2:	4293      	cmp	r3, r2
 8001bc4:	d013      	beq.n	8001bee <TIM_Base_SetConfig+0xb2>
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	4a2a      	ldr	r2, [pc, #168]	@ (8001c74 <TIM_Base_SetConfig+0x138>)
 8001bca:	4293      	cmp	r3, r2
 8001bcc:	d00f      	beq.n	8001bee <TIM_Base_SetConfig+0xb2>
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	4a29      	ldr	r2, [pc, #164]	@ (8001c78 <TIM_Base_SetConfig+0x13c>)
 8001bd2:	4293      	cmp	r3, r2
 8001bd4:	d00b      	beq.n	8001bee <TIM_Base_SetConfig+0xb2>
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	4a28      	ldr	r2, [pc, #160]	@ (8001c7c <TIM_Base_SetConfig+0x140>)
 8001bda:	4293      	cmp	r3, r2
 8001bdc:	d007      	beq.n	8001bee <TIM_Base_SetConfig+0xb2>
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	4a27      	ldr	r2, [pc, #156]	@ (8001c80 <TIM_Base_SetConfig+0x144>)
 8001be2:	4293      	cmp	r3, r2
 8001be4:	d003      	beq.n	8001bee <TIM_Base_SetConfig+0xb2>
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	4a26      	ldr	r2, [pc, #152]	@ (8001c84 <TIM_Base_SetConfig+0x148>)
 8001bea:	4293      	cmp	r3, r2
 8001bec:	d108      	bne.n	8001c00 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001bf4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001bf6:	683b      	ldr	r3, [r7, #0]
 8001bf8:	68db      	ldr	r3, [r3, #12]
 8001bfa:	68fa      	ldr	r2, [r7, #12]
 8001bfc:	4313      	orrs	r3, r2
 8001bfe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8001c06:	683b      	ldr	r3, [r7, #0]
 8001c08:	695b      	ldr	r3, [r3, #20]
 8001c0a:	4313      	orrs	r3, r2
 8001c0c:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001c0e:	683b      	ldr	r3, [r7, #0]
 8001c10:	689a      	ldr	r2, [r3, #8]
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001c16:	683b      	ldr	r3, [r7, #0]
 8001c18:	681a      	ldr	r2, [r3, #0]
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	4a0e      	ldr	r2, [pc, #56]	@ (8001c5c <TIM_Base_SetConfig+0x120>)
 8001c22:	4293      	cmp	r3, r2
 8001c24:	d003      	beq.n	8001c2e <TIM_Base_SetConfig+0xf2>
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	4a10      	ldr	r2, [pc, #64]	@ (8001c6c <TIM_Base_SetConfig+0x130>)
 8001c2a:	4293      	cmp	r3, r2
 8001c2c:	d103      	bne.n	8001c36 <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001c2e:	683b      	ldr	r3, [r7, #0]
 8001c30:	691a      	ldr	r2, [r3, #16]
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	f043 0204 	orr.w	r2, r3, #4
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	2201      	movs	r2, #1
 8001c46:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	68fa      	ldr	r2, [r7, #12]
 8001c4c:	601a      	str	r2, [r3, #0]
}
 8001c4e:	bf00      	nop
 8001c50:	3714      	adds	r7, #20
 8001c52:	46bd      	mov	sp, r7
 8001c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c58:	4770      	bx	lr
 8001c5a:	bf00      	nop
 8001c5c:	40010000 	.word	0x40010000
 8001c60:	40000400 	.word	0x40000400
 8001c64:	40000800 	.word	0x40000800
 8001c68:	40000c00 	.word	0x40000c00
 8001c6c:	40010400 	.word	0x40010400
 8001c70:	40014000 	.word	0x40014000
 8001c74:	40014400 	.word	0x40014400
 8001c78:	40014800 	.word	0x40014800
 8001c7c:	40001800 	.word	0x40001800
 8001c80:	40001c00 	.word	0x40001c00
 8001c84:	40002000 	.word	0x40002000

08001c88 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001c88:	b480      	push	{r7}
 8001c8a:	b083      	sub	sp, #12
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001c90:	bf00      	nop
 8001c92:	370c      	adds	r7, #12
 8001c94:	46bd      	mov	sp, r7
 8001c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9a:	4770      	bx	lr

08001c9c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001c9c:	b480      	push	{r7}
 8001c9e:	b083      	sub	sp, #12
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001ca4:	bf00      	nop
 8001ca6:	370c      	adds	r7, #12
 8001ca8:	46bd      	mov	sp, r7
 8001caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cae:	4770      	bx	lr

08001cb0 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8001cb0:	b480      	push	{r7}
 8001cb2:	b083      	sub	sp, #12
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8001cb8:	bf00      	nop
 8001cba:	370c      	adds	r7, #12
 8001cbc:	46bd      	mov	sp, r7
 8001cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc2:	4770      	bx	lr

08001cc4 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	b082      	sub	sp, #8
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	6078      	str	r0, [r7, #4]
    traceENTER_vListInitialise( pxList );

    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	f103 0208 	add.w	r2, r3, #8
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001cdc:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	f103 0208 	add.w	r2, r3, #8
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	f103 0208 	add.w	r2, r3, #8
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	611a      	str	r2, [r3, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	601a      	str	r2, [r3, #0]
    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );

    traceRETURN_vListInitialise();
 8001cf8:	f240 1019 	movw	r0, #281	@ 0x119
 8001cfc:	f003 fea2 	bl	8005a44 <SEGGER_SYSVIEW_RecordEndCall>
}
 8001d00:	bf00      	nop
 8001d02:	3708      	adds	r7, #8
 8001d04:	46bd      	mov	sp, r7
 8001d06:	bd80      	pop	{r7, pc}

08001d08 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	b082      	sub	sp, #8
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	6078      	str	r0, [r7, #4]
    traceENTER_vListInitialiseItem( pxItem );

    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	2200      	movs	r2, #0
 8001d14:	611a      	str	r2, [r3, #16]
    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );

    traceRETURN_vListInitialiseItem();
 8001d16:	f44f 708d 	mov.w	r0, #282	@ 0x11a
 8001d1a:	f003 fe93 	bl	8005a44 <SEGGER_SYSVIEW_RecordEndCall>
}
 8001d1e:	bf00      	nop
 8001d20:	3708      	adds	r7, #8
 8001d22:	46bd      	mov	sp, r7
 8001d24:	bd80      	pop	{r7, pc}

08001d26 <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8001d26:	b580      	push	{r7, lr}
 8001d28:	b084      	sub	sp, #16
 8001d2a:	af00      	add	r7, sp, #0
 8001d2c:	6078      	str	r0, [r7, #4]
 8001d2e:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8001d30:	683b      	ldr	r3, [r7, #0]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8001d36:	68bb      	ldr	r3, [r7, #8]
 8001d38:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001d3c:	d103      	bne.n	8001d46 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	691b      	ldr	r3, [r3, #16]
 8001d42:	60fb      	str	r3, [r7, #12]
 8001d44:	e00c      	b.n	8001d60 <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext )
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	3308      	adds	r3, #8
 8001d4a:	60fb      	str	r3, [r7, #12]
 8001d4c:	e002      	b.n	8001d54 <vListInsert+0x2e>
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	685b      	ldr	r3, [r3, #4]
 8001d52:	60fb      	str	r3, [r7, #12]
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	685b      	ldr	r3, [r3, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	68ba      	ldr	r2, [r7, #8]
 8001d5c:	429a      	cmp	r2, r3
 8001d5e:	d2f6      	bcs.n	8001d4e <vListInsert+0x28>
             * IF YOU FIND YOUR CODE STUCK HERE, SEE THE NOTE JUST ABOVE.
             */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	685a      	ldr	r2, [r3, #4]
 8001d64:	683b      	ldr	r3, [r7, #0]
 8001d66:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8001d68:	683b      	ldr	r3, [r7, #0]
 8001d6a:	685b      	ldr	r3, [r3, #4]
 8001d6c:	683a      	ldr	r2, [r7, #0]
 8001d6e:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8001d70:	683b      	ldr	r3, [r7, #0]
 8001d72:	68fa      	ldr	r2, [r7, #12]
 8001d74:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	683a      	ldr	r2, [r7, #0]
 8001d7a:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8001d7c:	683b      	ldr	r3, [r7, #0]
 8001d7e:	687a      	ldr	r2, [r7, #4]
 8001d80:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems ) = ( UBaseType_t ) ( pxList->uxNumberOfItems + 1U );
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	1c5a      	adds	r2, r3, #1
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	601a      	str	r2, [r3, #0]

    traceRETURN_vListInsert();
 8001d8c:	f44f 708e 	mov.w	r0, #284	@ 0x11c
 8001d90:	f003 fe58 	bl	8005a44 <SEGGER_SYSVIEW_RecordEndCall>
}
 8001d94:	bf00      	nop
 8001d96:	3710      	adds	r7, #16
 8001d98:	46bd      	mov	sp, r7
 8001d9a:	bd80      	pop	{r7, pc}

08001d9c <uxListRemove>:
/*-----------------------------------------------------------*/


UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	b084      	sub	sp, #16
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	6078      	str	r0, [r7, #4]
    /* The list item knows which list it is in.  Obtain the list from the list
     * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	691b      	ldr	r3, [r3, #16]
 8001da8:	60fb      	str	r3, [r7, #12]

    traceENTER_uxListRemove( pxItemToRemove );

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	685b      	ldr	r3, [r3, #4]
 8001dae:	687a      	ldr	r2, [r7, #4]
 8001db0:	6892      	ldr	r2, [r2, #8]
 8001db2:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	689b      	ldr	r3, [r3, #8]
 8001db8:	687a      	ldr	r2, [r7, #4]
 8001dba:	6852      	ldr	r2, [r2, #4]
 8001dbc:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	685b      	ldr	r3, [r3, #4]
 8001dc2:	687a      	ldr	r2, [r7, #4]
 8001dc4:	429a      	cmp	r2, r3
 8001dc6:	d103      	bne.n	8001dd0 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	689a      	ldr	r2, [r3, #8]
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	2200      	movs	r2, #0
 8001dd4:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems ) = ( UBaseType_t ) ( pxList->uxNumberOfItems - 1U );
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	1e5a      	subs	r2, r3, #1
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	601a      	str	r2, [r3, #0]

    traceRETURN_uxListRemove( pxList->uxNumberOfItems );
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	4619      	mov	r1, r3
 8001de6:	f240 101d 	movw	r0, #285	@ 0x11d
 8001dea:	f003 fe67 	bl	8005abc <SEGGER_SYSVIEW_RecordEndCallU32>

    return pxList->uxNumberOfItems;
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	681b      	ldr	r3, [r3, #0]
}
 8001df2:	4618      	mov	r0, r3
 8001df4:	3710      	adds	r7, #16
 8001df6:	46bd      	mov	sp, r7
 8001df8:	bd80      	pop	{r7, pc}

08001dfa <xQueueGenericReset>:
    } while( 0 )
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 8001dfa:	b580      	push	{r7, lr}
 8001dfc:	b086      	sub	sp, #24
 8001dfe:	af00      	add	r7, sp, #0
 8001e00:	6078      	str	r0, [r7, #4]
 8001e02:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 8001e04:	2301      	movs	r3, #1
 8001e06:	617b      	str	r3, [r7, #20]
    Queue_t * const pxQueue = xQueue;
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	613b      	str	r3, [r7, #16]

    traceENTER_xQueueGenericReset( xQueue, xNewQueue );

    configASSERT( pxQueue );
 8001e0c:	693b      	ldr	r3, [r7, #16]
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d10d      	bne.n	8001e2e <xQueueGenericReset+0x34>
    __asm volatile
 8001e12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001e16:	b672      	cpsid	i
 8001e18:	f383 8811 	msr	BASEPRI, r3
 8001e1c:	f3bf 8f6f 	isb	sy
 8001e20:	f3bf 8f4f 	dsb	sy
 8001e24:	b662      	cpsie	i
 8001e26:	60fb      	str	r3, [r7, #12]
}
 8001e28:	bf00      	nop
 8001e2a:	bf00      	nop
 8001e2c:	e7fd      	b.n	8001e2a <xQueueGenericReset+0x30>

    if( ( pxQueue != NULL ) &&
 8001e2e:	693b      	ldr	r3, [r7, #16]
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d052      	beq.n	8001eda <xQueueGenericReset+0xe0>
        ( pxQueue->uxLength >= 1U ) &&
 8001e34:	693b      	ldr	r3, [r7, #16]
 8001e36:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    if( ( pxQueue != NULL ) &&
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d04e      	beq.n	8001eda <xQueueGenericReset+0xe0>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 8001e3c:	693b      	ldr	r3, [r7, #16]
 8001e3e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001e40:	693b      	ldr	r3, [r7, #16]
 8001e42:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001e44:	2100      	movs	r1, #0
 8001e46:	fba3 2302 	umull	r2, r3, r3, r2
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d000      	beq.n	8001e50 <xQueueGenericReset+0x56>
 8001e4e:	2101      	movs	r1, #1
 8001e50:	460b      	mov	r3, r1
        ( pxQueue->uxLength >= 1U ) &&
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d141      	bne.n	8001eda <xQueueGenericReset+0xe0>
    {
        taskENTER_CRITICAL();
 8001e56:	f001 ff1d 	bl	8003c94 <vPortEnterCritical>
        {
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8001e5a:	693b      	ldr	r3, [r7, #16]
 8001e5c:	681a      	ldr	r2, [r3, #0]
 8001e5e:	693b      	ldr	r3, [r7, #16]
 8001e60:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001e62:	6939      	ldr	r1, [r7, #16]
 8001e64:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8001e66:	fb01 f303 	mul.w	r3, r1, r3
 8001e6a:	441a      	add	r2, r3
 8001e6c:	693b      	ldr	r3, [r7, #16]
 8001e6e:	609a      	str	r2, [r3, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8001e70:	693b      	ldr	r3, [r7, #16]
 8001e72:	2200      	movs	r2, #0
 8001e74:	639a      	str	r2, [r3, #56]	@ 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8001e76:	693b      	ldr	r3, [r7, #16]
 8001e78:	681a      	ldr	r2, [r3, #0]
 8001e7a:	693b      	ldr	r3, [r7, #16]
 8001e7c:	605a      	str	r2, [r3, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize );
 8001e7e:	693b      	ldr	r3, [r7, #16]
 8001e80:	681a      	ldr	r2, [r3, #0]
 8001e82:	693b      	ldr	r3, [r7, #16]
 8001e84:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001e86:	3b01      	subs	r3, #1
 8001e88:	6939      	ldr	r1, [r7, #16]
 8001e8a:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8001e8c:	fb01 f303 	mul.w	r3, r1, r3
 8001e90:	441a      	add	r2, r3
 8001e92:	693b      	ldr	r3, [r7, #16]
 8001e94:	60da      	str	r2, [r3, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 8001e96:	693b      	ldr	r3, [r7, #16]
 8001e98:	22ff      	movs	r2, #255	@ 0xff
 8001e9a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
            pxQueue->cTxLock = queueUNLOCKED;
 8001e9e:	693b      	ldr	r3, [r7, #16]
 8001ea0:	22ff      	movs	r2, #255	@ 0xff
 8001ea2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

            if( xNewQueue == pdFALSE )
 8001ea6:	683b      	ldr	r3, [r7, #0]
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d109      	bne.n	8001ec0 <xQueueGenericReset+0xc6>
                /* If there are tasks blocked waiting to read from the queue, then
                 * the tasks will remain blocked as after this function exits the queue
                 * will still be empty.  If there are tasks blocked waiting to write to
                 * the queue, then one should be unblocked as after this function exits
                 * it will be possible to write to it. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001eac:	693b      	ldr	r3, [r7, #16]
 8001eae:	691b      	ldr	r3, [r3, #16]
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d00f      	beq.n	8001ed4 <xQueueGenericReset+0xda>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001eb4:	693b      	ldr	r3, [r7, #16]
 8001eb6:	3310      	adds	r3, #16
 8001eb8:	4618      	mov	r0, r3
 8001eba:	f001 f819 	bl	8002ef0 <xTaskRemoveFromEventList>
 8001ebe:	e009      	b.n	8001ed4 <xQueueGenericReset+0xda>
                }
            }
            else
            {
                /* Ensure the event queues start in the correct state. */
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8001ec0:	693b      	ldr	r3, [r7, #16]
 8001ec2:	3310      	adds	r3, #16
 8001ec4:	4618      	mov	r0, r3
 8001ec6:	f7ff fefd 	bl	8001cc4 <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8001eca:	693b      	ldr	r3, [r7, #16]
 8001ecc:	3324      	adds	r3, #36	@ 0x24
 8001ece:	4618      	mov	r0, r3
 8001ed0:	f7ff fef8 	bl	8001cc4 <vListInitialise>
            }
        }
        taskEXIT_CRITICAL();
 8001ed4:	f001 ff14 	bl	8003d00 <vPortExitCritical>
 8001ed8:	e001      	b.n	8001ede <xQueueGenericReset+0xe4>
    }
    else
    {
        xReturn = pdFAIL;
 8001eda:	2300      	movs	r3, #0
 8001edc:	617b      	str	r3, [r7, #20]
    }

    configASSERT( xReturn != pdFAIL );
 8001ede:	697b      	ldr	r3, [r7, #20]
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d10d      	bne.n	8001f00 <xQueueGenericReset+0x106>
    __asm volatile
 8001ee4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001ee8:	b672      	cpsid	i
 8001eea:	f383 8811 	msr	BASEPRI, r3
 8001eee:	f3bf 8f6f 	isb	sy
 8001ef2:	f3bf 8f4f 	dsb	sy
 8001ef6:	b662      	cpsie	i
 8001ef8:	60bb      	str	r3, [r7, #8]
}
 8001efa:	bf00      	nop
 8001efc:	bf00      	nop
 8001efe:	e7fd      	b.n	8001efc <xQueueGenericReset+0x102>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    traceRETURN_xQueueGenericReset( xReturn );
 8001f00:	697b      	ldr	r3, [r7, #20]
 8001f02:	4619      	mov	r1, r3
 8001f04:	2096      	movs	r0, #150	@ 0x96
 8001f06:	f003 fdd9 	bl	8005abc <SEGGER_SYSVIEW_RecordEndCallU32>

    return xReturn;
 8001f0a:	697b      	ldr	r3, [r7, #20]
}
 8001f0c:	4618      	mov	r0, r3
 8001f0e:	3718      	adds	r7, #24
 8001f10:	46bd      	mov	sp, r7
 8001f12:	bd80      	pop	{r7, pc}

08001f14 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 8001f14:	b580      	push	{r7, lr}
 8001f16:	b08a      	sub	sp, #40	@ 0x28
 8001f18:	af02      	add	r7, sp, #8
 8001f1a:	60f8      	str	r0, [r7, #12]
 8001f1c:	60b9      	str	r1, [r7, #8]
 8001f1e:	4613      	mov	r3, r2
 8001f20:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue = NULL;
 8001f22:	2300      	movs	r3, #0
 8001f24:	61fb      	str	r3, [r7, #28]
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        traceENTER_xQueueGenericCreate( uxQueueLength, uxItemSize, ucQueueType );

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d02e      	beq.n	8001f8a <xQueueGenericCreate+0x76>
            /* Check for multiplication overflow. */
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8001f2c:	2100      	movs	r1, #0
 8001f2e:	68ba      	ldr	r2, [r7, #8]
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	fba3 2302 	umull	r2, r3, r3, r2
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d000      	beq.n	8001f3c <xQueueGenericCreate+0x28>
 8001f3a:	2101      	movs	r1, #1
 8001f3c:	460b      	mov	r3, r1
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d123      	bne.n	8001f8a <xQueueGenericCreate+0x76>
            /* Check for addition overflow. */
            /* MISRA Ref 14.3.1 [Configuration dependent invariant] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-143. */
            /* coverity[misra_c_2012_rule_14_3_violation] */
            ( ( SIZE_MAX - sizeof( Queue_t ) ) >= ( size_t ) ( ( size_t ) uxQueueLength * ( size_t ) uxItemSize ) ) )
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	68ba      	ldr	r2, [r7, #8]
 8001f46:	fb02 f303 	mul.w	r3, r2, r3
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8001f4a:	f113 0f51 	cmn.w	r3, #81	@ 0x51
 8001f4e:	d81c      	bhi.n	8001f8a <xQueueGenericCreate+0x76>
        {
            /* Allocate enough space to hold the maximum number of items that
             * can be in the queue at any time.  It is valid for uxItemSize to be
             * zero in the case the queue is used as a semaphore. */
            xQueueSizeInBytes = ( size_t ) ( ( size_t ) uxQueueLength * ( size_t ) uxItemSize );
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	68ba      	ldr	r2, [r7, #8]
 8001f54:	fb02 f303 	mul.w	r3, r2, r3
 8001f58:	61bb      	str	r3, [r7, #24]

            /* MISRA Ref 11.5.1 [Malloc memory assignment] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
            /* coverity[misra_c_2012_rule_11_5_violation] */
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8001f5a:	69bb      	ldr	r3, [r7, #24]
 8001f5c:	3350      	adds	r3, #80	@ 0x50
 8001f5e:	4618      	mov	r0, r3
 8001f60:	f001 ffd4 	bl	8003f0c <pvPortMalloc>
 8001f64:	61f8      	str	r0, [r7, #28]

            if( pxNewQueue != NULL )
 8001f66:	69fb      	ldr	r3, [r7, #28]
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d01f      	beq.n	8001fac <xQueueGenericCreate+0x98>
            {
                /* Jump past the queue structure to find the location of the queue
                 * storage area. */
                pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8001f6c:	69fb      	ldr	r3, [r7, #28]
 8001f6e:	617b      	str	r3, [r7, #20]
                pucQueueStorage += sizeof( Queue_t );
 8001f70:	697b      	ldr	r3, [r7, #20]
 8001f72:	3350      	adds	r3, #80	@ 0x50
 8001f74:	617b      	str	r3, [r7, #20]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
                #endif /* configSUPPORT_STATIC_ALLOCATION */

                prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8001f76:	79fa      	ldrb	r2, [r7, #7]
 8001f78:	69fb      	ldr	r3, [r7, #28]
 8001f7a:	9300      	str	r3, [sp, #0]
 8001f7c:	4613      	mov	r3, r2
 8001f7e:	697a      	ldr	r2, [r7, #20]
 8001f80:	68b9      	ldr	r1, [r7, #8]
 8001f82:	68f8      	ldr	r0, [r7, #12]
 8001f84:	f000 f820 	bl	8001fc8 <prvInitialiseNewQueue>
            if( pxNewQueue != NULL )
 8001f88:	e010      	b.n	8001fac <xQueueGenericCreate+0x98>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            configASSERT( pxNewQueue );
 8001f8a:	69fb      	ldr	r3, [r7, #28]
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d10d      	bne.n	8001fac <xQueueGenericCreate+0x98>
    __asm volatile
 8001f90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001f94:	b672      	cpsid	i
 8001f96:	f383 8811 	msr	BASEPRI, r3
 8001f9a:	f3bf 8f6f 	isb	sy
 8001f9e:	f3bf 8f4f 	dsb	sy
 8001fa2:	b662      	cpsie	i
 8001fa4:	613b      	str	r3, [r7, #16]
}
 8001fa6:	bf00      	nop
 8001fa8:	bf00      	nop
 8001faa:	e7fd      	b.n	8001fa8 <xQueueGenericCreate+0x94>
            mtCOVERAGE_TEST_MARKER();
        }

        traceRETURN_xQueueGenericCreate( pxNewQueue );
 8001fac:	69fb      	ldr	r3, [r7, #28]
 8001fae:	4618      	mov	r0, r3
 8001fb0:	f003 ff1e 	bl	8005df0 <SEGGER_SYSVIEW_ShrinkId>
 8001fb4:	4603      	mov	r3, r0
 8001fb6:	4619      	mov	r1, r3
 8001fb8:	2098      	movs	r0, #152	@ 0x98
 8001fba:	f003 fd7f 	bl	8005abc <SEGGER_SYSVIEW_RecordEndCallU32>

        return pxNewQueue;
 8001fbe:	69fb      	ldr	r3, [r7, #28]
    }
 8001fc0:	4618      	mov	r0, r3
 8001fc2:	3720      	adds	r7, #32
 8001fc4:	46bd      	mov	sp, r7
 8001fc6:	bd80      	pop	{r7, pc}

08001fc8 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	b084      	sub	sp, #16
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	60f8      	str	r0, [r7, #12]
 8001fd0:	60b9      	str	r1, [r7, #8]
 8001fd2:	607a      	str	r2, [r7, #4]
 8001fd4:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 8001fd6:	68bb      	ldr	r3, [r7, #8]
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d103      	bne.n	8001fe4 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8001fdc:	69bb      	ldr	r3, [r7, #24]
 8001fde:	69ba      	ldr	r2, [r7, #24]
 8001fe0:	601a      	str	r2, [r3, #0]
 8001fe2:	e002      	b.n	8001fea <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8001fe4:	69bb      	ldr	r3, [r7, #24]
 8001fe6:	687a      	ldr	r2, [r7, #4]
 8001fe8:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 8001fea:	69bb      	ldr	r3, [r7, #24]
 8001fec:	68fa      	ldr	r2, [r7, #12]
 8001fee:	63da      	str	r2, [r3, #60]	@ 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 8001ff0:	69bb      	ldr	r3, [r7, #24]
 8001ff2:	68ba      	ldr	r2, [r7, #8]
 8001ff4:	641a      	str	r2, [r3, #64]	@ 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8001ff6:	2101      	movs	r1, #1
 8001ff8:	69b8      	ldr	r0, [r7, #24]
 8001ffa:	f7ff fefe 	bl	8001dfa <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
    {
        pxNewQueue->ucQueueType = ucQueueType;
 8001ffe:	69bb      	ldr	r3, [r7, #24]
 8002000:	78fa      	ldrb	r2, [r7, #3]
 8002002:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        pxNewQueue->pxQueueSetContainer = NULL;
    }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 8002006:	bf00      	nop
 8002008:	3710      	adds	r7, #16
 800200a:	46bd      	mov	sp, r7
 800200c:	bd80      	pop	{r7, pc}
	...

08002010 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8002010:	b580      	push	{r7, lr}
 8002012:	b08c      	sub	sp, #48	@ 0x30
 8002014:	af00      	add	r7, sp, #0
 8002016:	60f8      	str	r0, [r7, #12]
 8002018:	60b9      	str	r1, [r7, #8]
 800201a:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 800201c:	2300      	movs	r3, #0
 800201e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	62bb      	str	r3, [r7, #40]	@ 0x28

    traceENTER_xQueueReceive( xQueue, pvBuffer, xTicksToWait );

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8002024:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002026:	2b00      	cmp	r3, #0
 8002028:	d10d      	bne.n	8002046 <xQueueReceive+0x36>
    __asm volatile
 800202a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800202e:	b672      	cpsid	i
 8002030:	f383 8811 	msr	BASEPRI, r3
 8002034:	f3bf 8f6f 	isb	sy
 8002038:	f3bf 8f4f 	dsb	sy
 800203c:	b662      	cpsie	i
 800203e:	623b      	str	r3, [r7, #32]
}
 8002040:	bf00      	nop
 8002042:	bf00      	nop
 8002044:	e7fd      	b.n	8002042 <xQueueReceive+0x32>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002046:	68bb      	ldr	r3, [r7, #8]
 8002048:	2b00      	cmp	r3, #0
 800204a:	d103      	bne.n	8002054 <xQueueReceive+0x44>
 800204c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800204e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002050:	2b00      	cmp	r3, #0
 8002052:	d101      	bne.n	8002058 <xQueueReceive+0x48>
 8002054:	2301      	movs	r3, #1
 8002056:	e000      	b.n	800205a <xQueueReceive+0x4a>
 8002058:	2300      	movs	r3, #0
 800205a:	2b00      	cmp	r3, #0
 800205c:	d10d      	bne.n	800207a <xQueueReceive+0x6a>
    __asm volatile
 800205e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002062:	b672      	cpsid	i
 8002064:	f383 8811 	msr	BASEPRI, r3
 8002068:	f3bf 8f6f 	isb	sy
 800206c:	f3bf 8f4f 	dsb	sy
 8002070:	b662      	cpsie	i
 8002072:	61fb      	str	r3, [r7, #28]
}
 8002074:	bf00      	nop
 8002076:	bf00      	nop
 8002078:	e7fd      	b.n	8002076 <xQueueReceive+0x66>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800207a:	f001 f95b 	bl	8003334 <xTaskGetSchedulerState>
 800207e:	4603      	mov	r3, r0
 8002080:	2b00      	cmp	r3, #0
 8002082:	d102      	bne.n	800208a <xQueueReceive+0x7a>
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	2b00      	cmp	r3, #0
 8002088:	d101      	bne.n	800208e <xQueueReceive+0x7e>
 800208a:	2301      	movs	r3, #1
 800208c:	e000      	b.n	8002090 <xQueueReceive+0x80>
 800208e:	2300      	movs	r3, #0
 8002090:	2b00      	cmp	r3, #0
 8002092:	d10d      	bne.n	80020b0 <xQueueReceive+0xa0>
    __asm volatile
 8002094:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002098:	b672      	cpsid	i
 800209a:	f383 8811 	msr	BASEPRI, r3
 800209e:	f3bf 8f6f 	isb	sy
 80020a2:	f3bf 8f4f 	dsb	sy
 80020a6:	b662      	cpsie	i
 80020a8:	61bb      	str	r3, [r7, #24]
}
 80020aa:	bf00      	nop
 80020ac:	bf00      	nop
 80020ae:	e7fd      	b.n	80020ac <xQueueReceive+0x9c>
    }
    #endif

    for( ; ; )
    {
        taskENTER_CRITICAL();
 80020b0:	f001 fdf0 	bl	8003c94 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80020b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80020b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80020b8:	627b      	str	r3, [r7, #36]	@ 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80020ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d018      	beq.n	80020f2 <xQueueReceive+0xe2>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 80020c0:	68b9      	ldr	r1, [r7, #8]
 80020c2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80020c4:	f000 f88e 	bl	80021e4 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = ( UBaseType_t ) ( uxMessagesWaiting - ( UBaseType_t ) 1 );
 80020c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020ca:	1e5a      	subs	r2, r3, #1
 80020cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80020ce:	639a      	str	r2, [r3, #56]	@ 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80020d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80020d2:	691b      	ldr	r3, [r3, #16]
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d004      	beq.n	80020e2 <xQueueReceive+0xd2>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80020d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80020da:	3310      	adds	r3, #16
 80020dc:	4618      	mov	r0, r3
 80020de:	f000 ff07 	bl	8002ef0 <xTaskRemoveFromEventList>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 80020e2:	f001 fe0d 	bl	8003d00 <vPortExitCritical>

                traceRETURN_xQueueReceive( pdPASS );
 80020e6:	2101      	movs	r1, #1
 80020e8:	20a4      	movs	r0, #164	@ 0xa4
 80020ea:	f003 fce7 	bl	8005abc <SEGGER_SYSVIEW_RecordEndCallU32>

                return pdPASS;
 80020ee:	2301      	movs	r3, #1
 80020f0:	e071      	b.n	80021d6 <xQueueReceive+0x1c6>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d107      	bne.n	8002108 <xQueueReceive+0xf8>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 80020f8:	f001 fe02 	bl	8003d00 <vPortExitCritical>

                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    traceRETURN_xQueueReceive( errQUEUE_EMPTY );
 80020fc:	2100      	movs	r1, #0
 80020fe:	20a4      	movs	r0, #164	@ 0xa4
 8002100:	f003 fcdc 	bl	8005abc <SEGGER_SYSVIEW_RecordEndCallU32>

                    return errQUEUE_EMPTY;
 8002104:	2300      	movs	r3, #0
 8002106:	e066      	b.n	80021d6 <xQueueReceive+0x1c6>
                }
                else if( xEntryTimeSet == pdFALSE )
 8002108:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800210a:	2b00      	cmp	r3, #0
 800210c:	d106      	bne.n	800211c <xQueueReceive+0x10c>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 800210e:	f107 0310 	add.w	r3, r7, #16
 8002112:	4618      	mov	r0, r3
 8002114:	f000 ffce 	bl	80030b4 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8002118:	2301      	movs	r3, #1
 800211a:	62fb      	str	r3, [r7, #44]	@ 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 800211c:	f001 fdf0 	bl	8003d00 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8002120:	f000 fbc6 	bl	80028b0 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8002124:	f001 fdb6 	bl	8003c94 <vPortEnterCritical>
 8002128:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800212a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800212e:	b25b      	sxtb	r3, r3
 8002130:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002134:	d103      	bne.n	800213e <xQueueReceive+0x12e>
 8002136:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002138:	2200      	movs	r2, #0
 800213a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800213e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002140:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002144:	b25b      	sxtb	r3, r3
 8002146:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800214a:	d103      	bne.n	8002154 <xQueueReceive+0x144>
 800214c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800214e:	2200      	movs	r2, #0
 8002150:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002154:	f001 fdd4 	bl	8003d00 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002158:	1d3a      	adds	r2, r7, #4
 800215a:	f107 0310 	add.w	r3, r7, #16
 800215e:	4611      	mov	r1, r2
 8002160:	4618      	mov	r0, r3
 8002162:	f000 ffbf 	bl	80030e4 <xTaskCheckForTimeOut>
 8002166:	4603      	mov	r3, r0
 8002168:	2b00      	cmp	r3, #0
 800216a:	d123      	bne.n	80021b4 <xQueueReceive+0x1a4>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800216c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800216e:	f000 f8b1 	bl	80022d4 <prvIsQueueEmpty>
 8002172:	4603      	mov	r3, r0
 8002174:	2b00      	cmp	r3, #0
 8002176:	d017      	beq.n	80021a8 <xQueueReceive+0x198>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002178:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800217a:	3324      	adds	r3, #36	@ 0x24
 800217c:	687a      	ldr	r2, [r7, #4]
 800217e:	4611      	mov	r1, r2
 8002180:	4618      	mov	r0, r3
 8002182:	f000 fe3f 	bl	8002e04 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8002186:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002188:	f000 f852 	bl	8002230 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 800218c:	f000 fb9e 	bl	80028cc <xTaskResumeAll>
 8002190:	4603      	mov	r3, r0
 8002192:	2b00      	cmp	r3, #0
 8002194:	d18c      	bne.n	80020b0 <xQueueReceive+0xa0>
                {
                    taskYIELD_WITHIN_API();
 8002196:	4b12      	ldr	r3, [pc, #72]	@ (80021e0 <xQueueReceive+0x1d0>)
 8002198:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800219c:	601a      	str	r2, [r3, #0]
 800219e:	f3bf 8f4f 	dsb	sy
 80021a2:	f3bf 8f6f 	isb	sy
 80021a6:	e783      	b.n	80020b0 <xQueueReceive+0xa0>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 80021a8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80021aa:	f000 f841 	bl	8002230 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 80021ae:	f000 fb8d 	bl	80028cc <xTaskResumeAll>
 80021b2:	e77d      	b.n	80020b0 <xQueueReceive+0xa0>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 80021b4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80021b6:	f000 f83b 	bl	8002230 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 80021ba:	f000 fb87 	bl	80028cc <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80021be:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80021c0:	f000 f888 	bl	80022d4 <prvIsQueueEmpty>
 80021c4:	4603      	mov	r3, r0
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	f43f af72 	beq.w	80020b0 <xQueueReceive+0xa0>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                traceRETURN_xQueueReceive( errQUEUE_EMPTY );
 80021cc:	2100      	movs	r1, #0
 80021ce:	20a4      	movs	r0, #164	@ 0xa4
 80021d0:	f003 fc74 	bl	8005abc <SEGGER_SYSVIEW_RecordEndCallU32>

                return errQUEUE_EMPTY;
 80021d4:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
}
 80021d6:	4618      	mov	r0, r3
 80021d8:	3730      	adds	r7, #48	@ 0x30
 80021da:	46bd      	mov	sp, r7
 80021dc:	bd80      	pop	{r7, pc}
 80021de:	bf00      	nop
 80021e0:	e000ed04 	.word	0xe000ed04

080021e4 <prvCopyDataFromQueue>:
}
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 80021e4:	b580      	push	{r7, lr}
 80021e6:	b082      	sub	sp, #8
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	6078      	str	r0, [r7, #4]
 80021ec:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d018      	beq.n	8002228 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	68da      	ldr	r2, [r3, #12]
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021fe:	441a      	add	r2, r3
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail )
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	68da      	ldr	r2, [r3, #12]
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	689b      	ldr	r3, [r3, #8]
 800220c:	429a      	cmp	r2, r3
 800220e:	d303      	bcc.n	8002218 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681a      	ldr	r2, [r3, #0]
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize );
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	68d9      	ldr	r1, [r3, #12]
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002220:	461a      	mov	r2, r3
 8002222:	6838      	ldr	r0, [r7, #0]
 8002224:	f004 f9b9 	bl	800659a <memcpy>
    }
}
 8002228:	bf00      	nop
 800222a:	3708      	adds	r7, #8
 800222c:	46bd      	mov	sp, r7
 800222e:	bd80      	pop	{r7, pc}

08002230 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8002230:	b580      	push	{r7, lr}
 8002232:	b084      	sub	sp, #16
 8002234:	af00      	add	r7, sp, #0
 8002236:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8002238:	f001 fd2c 	bl	8003c94 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002242:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8002244:	e011      	b.n	800226a <prvUnlockQueue+0x3a>
            }
            #else /* configUSE_QUEUE_SETS */
            {
                /* Tasks that are removed from the event list will get added to
                 * the pending ready list as the scheduler is still suspended. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800224a:	2b00      	cmp	r3, #0
 800224c:	d012      	beq.n	8002274 <prvUnlockQueue+0x44>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	3324      	adds	r3, #36	@ 0x24
 8002252:	4618      	mov	r0, r3
 8002254:	f000 fe4c 	bl	8002ef0 <xTaskRemoveFromEventList>
 8002258:	4603      	mov	r3, r0
 800225a:	2b00      	cmp	r3, #0
 800225c:	d001      	beq.n	8002262 <prvUnlockQueue+0x32>
                    {
                        /* The task waiting has a higher priority so record that
                         * a context switch is required. */
                        vTaskMissedYield();
 800225e:	f000 ffb1 	bl	80031c4 <vTaskMissedYield>
                    break;
                }
            }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 8002262:	7bfb      	ldrb	r3, [r7, #15]
 8002264:	3b01      	subs	r3, #1
 8002266:	b2db      	uxtb	r3, r3
 8002268:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 800226a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800226e:	2b00      	cmp	r3, #0
 8002270:	dce9      	bgt.n	8002246 <prvUnlockQueue+0x16>
 8002272:	e000      	b.n	8002276 <prvUnlockQueue+0x46>
                    break;
 8002274:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	22ff      	movs	r2, #255	@ 0xff
 800227a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
    taskEXIT_CRITICAL();
 800227e:	f001 fd3f 	bl	8003d00 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8002282:	f001 fd07 	bl	8003c94 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800228c:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 800228e:	e011      	b.n	80022b4 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	691b      	ldr	r3, [r3, #16]
 8002294:	2b00      	cmp	r3, #0
 8002296:	d012      	beq.n	80022be <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	3310      	adds	r3, #16
 800229c:	4618      	mov	r0, r3
 800229e:	f000 fe27 	bl	8002ef0 <xTaskRemoveFromEventList>
 80022a2:	4603      	mov	r3, r0
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d001      	beq.n	80022ac <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 80022a8:	f000 ff8c 	bl	80031c4 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 80022ac:	7bbb      	ldrb	r3, [r7, #14]
 80022ae:	3b01      	subs	r3, #1
 80022b0:	b2db      	uxtb	r3, r3
 80022b2:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 80022b4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	dce9      	bgt.n	8002290 <prvUnlockQueue+0x60>
 80022bc:	e000      	b.n	80022c0 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 80022be:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	22ff      	movs	r2, #255	@ 0xff
 80022c4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
    }
    taskEXIT_CRITICAL();
 80022c8:	f001 fd1a 	bl	8003d00 <vPortExitCritical>
}
 80022cc:	bf00      	nop
 80022ce:	3710      	adds	r7, #16
 80022d0:	46bd      	mov	sp, r7
 80022d2:	bd80      	pop	{r7, pc}

080022d4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 80022d4:	b580      	push	{r7, lr}
 80022d6:	b084      	sub	sp, #16
 80022d8:	af00      	add	r7, sp, #0
 80022da:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 80022dc:	f001 fcda 	bl	8003c94 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d102      	bne.n	80022ee <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 80022e8:	2301      	movs	r3, #1
 80022ea:	60fb      	str	r3, [r7, #12]
 80022ec:	e001      	b.n	80022f2 <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 80022ee:	2300      	movs	r3, #0
 80022f0:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 80022f2:	f001 fd05 	bl	8003d00 <vPortExitCritical>

    return xReturn;
 80022f6:	68fb      	ldr	r3, [r7, #12]
}
 80022f8:	4618      	mov	r0, r3
 80022fa:	3710      	adds	r7, #16
 80022fc:	46bd      	mov	sp, r7
 80022fe:	bd80      	pop	{r7, pc}

08002300 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName )
    {
 8002300:	b580      	push	{r7, lr}
 8002302:	b086      	sub	sp, #24
 8002304:	af00      	add	r7, sp, #0
 8002306:	6078      	str	r0, [r7, #4]
 8002308:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;
        QueueRegistryItem_t * pxEntryToWrite = NULL;
 800230a:	2300      	movs	r3, #0
 800230c:	613b      	str	r3, [r7, #16]

        traceENTER_vQueueAddToRegistry( xQueue, pcQueueName );

        configASSERT( xQueue );
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	2b00      	cmp	r3, #0
 8002312:	d10d      	bne.n	8002330 <vQueueAddToRegistry+0x30>
    __asm volatile
 8002314:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002318:	b672      	cpsid	i
 800231a:	f383 8811 	msr	BASEPRI, r3
 800231e:	f3bf 8f6f 	isb	sy
 8002322:	f3bf 8f4f 	dsb	sy
 8002326:	b662      	cpsie	i
 8002328:	60fb      	str	r3, [r7, #12]
}
 800232a:	bf00      	nop
 800232c:	bf00      	nop
 800232e:	e7fd      	b.n	800232c <vQueueAddToRegistry+0x2c>

        if( pcQueueName != NULL )
 8002330:	683b      	ldr	r3, [r7, #0]
 8002332:	2b00      	cmp	r3, #0
 8002334:	d024      	beq.n	8002380 <vQueueAddToRegistry+0x80>
        {
            /* See if there is an empty space in the registry.  A NULL name denotes
             * a free slot. */
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002336:	2300      	movs	r3, #0
 8002338:	617b      	str	r3, [r7, #20]
 800233a:	e01e      	b.n	800237a <vQueueAddToRegistry+0x7a>
            {
                /* Replace an existing entry if the queue is already in the registry. */
                if( xQueue == xQueueRegistry[ ux ].xHandle )
 800233c:	4a18      	ldr	r2, [pc, #96]	@ (80023a0 <vQueueAddToRegistry+0xa0>)
 800233e:	697b      	ldr	r3, [r7, #20]
 8002340:	00db      	lsls	r3, r3, #3
 8002342:	4413      	add	r3, r2
 8002344:	685b      	ldr	r3, [r3, #4]
 8002346:	687a      	ldr	r2, [r7, #4]
 8002348:	429a      	cmp	r2, r3
 800234a:	d105      	bne.n	8002358 <vQueueAddToRegistry+0x58>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 800234c:	697b      	ldr	r3, [r7, #20]
 800234e:	00db      	lsls	r3, r3, #3
 8002350:	4a13      	ldr	r2, [pc, #76]	@ (80023a0 <vQueueAddToRegistry+0xa0>)
 8002352:	4413      	add	r3, r2
 8002354:	613b      	str	r3, [r7, #16]
                    break;
 8002356:	e013      	b.n	8002380 <vQueueAddToRegistry+0x80>
                }
                /* Otherwise, store in the next empty location */
                else if( ( pxEntryToWrite == NULL ) && ( xQueueRegistry[ ux ].pcQueueName == NULL ) )
 8002358:	693b      	ldr	r3, [r7, #16]
 800235a:	2b00      	cmp	r3, #0
 800235c:	d10a      	bne.n	8002374 <vQueueAddToRegistry+0x74>
 800235e:	4a10      	ldr	r2, [pc, #64]	@ (80023a0 <vQueueAddToRegistry+0xa0>)
 8002360:	697b      	ldr	r3, [r7, #20]
 8002362:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8002366:	2b00      	cmp	r3, #0
 8002368:	d104      	bne.n	8002374 <vQueueAddToRegistry+0x74>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 800236a:	697b      	ldr	r3, [r7, #20]
 800236c:	00db      	lsls	r3, r3, #3
 800236e:	4a0c      	ldr	r2, [pc, #48]	@ (80023a0 <vQueueAddToRegistry+0xa0>)
 8002370:	4413      	add	r3, r2
 8002372:	613b      	str	r3, [r7, #16]
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002374:	697b      	ldr	r3, [r7, #20]
 8002376:	3301      	adds	r3, #1
 8002378:	617b      	str	r3, [r7, #20]
 800237a:	697b      	ldr	r3, [r7, #20]
 800237c:	2b07      	cmp	r3, #7
 800237e:	d9dd      	bls.n	800233c <vQueueAddToRegistry+0x3c>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }

        if( pxEntryToWrite != NULL )
 8002380:	693b      	ldr	r3, [r7, #16]
 8002382:	2b00      	cmp	r3, #0
 8002384:	d005      	beq.n	8002392 <vQueueAddToRegistry+0x92>
        {
            /* Store the information on this queue. */
            pxEntryToWrite->pcQueueName = pcQueueName;
 8002386:	693b      	ldr	r3, [r7, #16]
 8002388:	683a      	ldr	r2, [r7, #0]
 800238a:	601a      	str	r2, [r3, #0]
            pxEntryToWrite->xHandle = xQueue;
 800238c:	693b      	ldr	r3, [r7, #16]
 800238e:	687a      	ldr	r2, [r7, #4]
 8002390:	605a      	str	r2, [r3, #4]

            traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
        }

        traceRETURN_vQueueAddToRegistry();
 8002392:	20b6      	movs	r0, #182	@ 0xb6
 8002394:	f003 fb56 	bl	8005a44 <SEGGER_SYSVIEW_RecordEndCall>
    }
 8002398:	bf00      	nop
 800239a:	3718      	adds	r7, #24
 800239c:	46bd      	mov	sp, r7
 800239e:	bd80      	pop	{r7, pc}
 80023a0:	200000dc 	.word	0x200000dc

080023a4 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 80023a4:	b580      	push	{r7, lr}
 80023a6:	b086      	sub	sp, #24
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	60f8      	str	r0, [r7, #12]
 80023ac:	60b9      	str	r1, [r7, #8]
 80023ae:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 80023b4:	f001 fc6e 	bl	8003c94 <vPortEnterCritical>
 80023b8:	697b      	ldr	r3, [r7, #20]
 80023ba:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80023be:	b25b      	sxtb	r3, r3
 80023c0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80023c4:	d103      	bne.n	80023ce <vQueueWaitForMessageRestricted+0x2a>
 80023c6:	697b      	ldr	r3, [r7, #20]
 80023c8:	2200      	movs	r2, #0
 80023ca:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80023ce:	697b      	ldr	r3, [r7, #20]
 80023d0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80023d4:	b25b      	sxtb	r3, r3
 80023d6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80023da:	d103      	bne.n	80023e4 <vQueueWaitForMessageRestricted+0x40>
 80023dc:	697b      	ldr	r3, [r7, #20]
 80023de:	2200      	movs	r2, #0
 80023e0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80023e4:	f001 fc8c 	bl	8003d00 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80023e8:	697b      	ldr	r3, [r7, #20]
 80023ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d106      	bne.n	80023fe <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80023f0:	697b      	ldr	r3, [r7, #20]
 80023f2:	3324      	adds	r3, #36	@ 0x24
 80023f4:	687a      	ldr	r2, [r7, #4]
 80023f6:	68b9      	ldr	r1, [r7, #8]
 80023f8:	4618      	mov	r0, r3
 80023fa:	f000 fd2d 	bl	8002e58 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 80023fe:	6978      	ldr	r0, [r7, #20]
 8002400:	f7ff ff16 	bl	8002230 <prvUnlockQueue>

        traceRETURN_vQueueWaitForMessageRestricted();
 8002404:	20b9      	movs	r0, #185	@ 0xb9
 8002406:	f003 fb1d 	bl	8005a44 <SEGGER_SYSVIEW_RecordEndCall>
    }
 800240a:	bf00      	nop
 800240c:	3718      	adds	r7, #24
 800240e:	46bd      	mov	sp, r7
 8002410:	bd80      	pop	{r7, pc}

08002412 <prvCreateTask>:
                                  const char * const pcName,
                                  const configSTACK_DEPTH_TYPE uxStackDepth,
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask )
    {
 8002412:	b580      	push	{r7, lr}
 8002414:	b08a      	sub	sp, #40	@ 0x28
 8002416:	af04      	add	r7, sp, #16
 8002418:	60f8      	str	r0, [r7, #12]
 800241a:	60b9      	str	r1, [r7, #8]
 800241c:	607a      	str	r2, [r7, #4]
 800241e:	603b      	str	r3, [r7, #0]

            /* Allocate space for the stack used by the task being created. */
            /* MISRA Ref 11.5.1 [Malloc memory assignment] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
            /* coverity[misra_c_2012_rule_11_5_violation] */
            pxStack = pvPortMallocStack( ( ( ( size_t ) uxStackDepth ) * sizeof( StackType_t ) ) );
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	009b      	lsls	r3, r3, #2
 8002424:	4618      	mov	r0, r3
 8002426:	f001 fd71 	bl	8003f0c <pvPortMalloc>
 800242a:	6138      	str	r0, [r7, #16]

            if( pxStack != NULL )
 800242c:	693b      	ldr	r3, [r7, #16]
 800242e:	2b00      	cmp	r3, #0
 8002430:	d013      	beq.n	800245a <prvCreateTask+0x48>
            {
                /* Allocate space for the TCB. */
                /* MISRA Ref 11.5.1 [Malloc memory assignment] */
                /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                /* coverity[misra_c_2012_rule_11_5_violation] */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
 8002432:	2058      	movs	r0, #88	@ 0x58
 8002434:	f001 fd6a 	bl	8003f0c <pvPortMalloc>
 8002438:	6178      	str	r0, [r7, #20]

                if( pxNewTCB != NULL )
 800243a:	697b      	ldr	r3, [r7, #20]
 800243c:	2b00      	cmp	r3, #0
 800243e:	d008      	beq.n	8002452 <prvCreateTask+0x40>
                {
                    ( void ) memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 8002440:	2258      	movs	r2, #88	@ 0x58
 8002442:	2100      	movs	r1, #0
 8002444:	6978      	ldr	r0, [r7, #20]
 8002446:	f004 f83f 	bl	80064c8 <memset>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
 800244a:	697b      	ldr	r3, [r7, #20]
 800244c:	693a      	ldr	r2, [r7, #16]
 800244e:	631a      	str	r2, [r3, #48]	@ 0x30
 8002450:	e005      	b.n	800245e <prvCreateTask+0x4c>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
 8002452:	6938      	ldr	r0, [r7, #16]
 8002454:	f001 fe9e 	bl	8004194 <vPortFree>
 8002458:	e001      	b.n	800245e <prvCreateTask+0x4c>
                }
            }
            else
            {
                pxNewTCB = NULL;
 800245a:	2300      	movs	r3, #0
 800245c:	617b      	str	r3, [r7, #20]
            }
        }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 800245e:	697b      	ldr	r3, [r7, #20]
 8002460:	2b00      	cmp	r3, #0
 8002462:	d00d      	beq.n	8002480 <prvCreateTask+0x6e>
                 * task was created dynamically in case it is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, uxStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002464:	2300      	movs	r3, #0
 8002466:	9303      	str	r3, [sp, #12]
 8002468:	697b      	ldr	r3, [r7, #20]
 800246a:	9302      	str	r3, [sp, #8]
 800246c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800246e:	9301      	str	r3, [sp, #4]
 8002470:	6a3b      	ldr	r3, [r7, #32]
 8002472:	9300      	str	r3, [sp, #0]
 8002474:	683b      	ldr	r3, [r7, #0]
 8002476:	687a      	ldr	r2, [r7, #4]
 8002478:	68b9      	ldr	r1, [r7, #8]
 800247a:	68f8      	ldr	r0, [r7, #12]
 800247c:	f000 f82d 	bl	80024da <prvInitialiseNewTask>
        }

        return pxNewTCB;
 8002480:	697b      	ldr	r3, [r7, #20]
    }
 8002482:	4618      	mov	r0, r3
 8002484:	3718      	adds	r7, #24
 8002486:	46bd      	mov	sp, r7
 8002488:	bd80      	pop	{r7, pc}

0800248a <xTaskCreate>:
                            const char * const pcName,
                            const configSTACK_DEPTH_TYPE uxStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 800248a:	b580      	push	{r7, lr}
 800248c:	b088      	sub	sp, #32
 800248e:	af02      	add	r7, sp, #8
 8002490:	60f8      	str	r0, [r7, #12]
 8002492:	60b9      	str	r1, [r7, #8]
 8002494:	607a      	str	r2, [r7, #4]
 8002496:	603b      	str	r3, [r7, #0]
        TCB_t * pxNewTCB;
        BaseType_t xReturn;

        traceENTER_xTaskCreate( pxTaskCode, pcName, uxStackDepth, pvParameters, uxPriority, pxCreatedTask );

        pxNewTCB = prvCreateTask( pxTaskCode, pcName, uxStackDepth, pvParameters, uxPriority, pxCreatedTask );
 8002498:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800249a:	9301      	str	r3, [sp, #4]
 800249c:	6a3b      	ldr	r3, [r7, #32]
 800249e:	9300      	str	r3, [sp, #0]
 80024a0:	683b      	ldr	r3, [r7, #0]
 80024a2:	687a      	ldr	r2, [r7, #4]
 80024a4:	68b9      	ldr	r1, [r7, #8]
 80024a6:	68f8      	ldr	r0, [r7, #12]
 80024a8:	f7ff ffb3 	bl	8002412 <prvCreateTask>
 80024ac:	6138      	str	r0, [r7, #16]

        if( pxNewTCB != NULL )
 80024ae:	693b      	ldr	r3, [r7, #16]
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d005      	beq.n	80024c0 <xTaskCreate+0x36>
                /* Set the task's affinity before scheduling it. */
                pxNewTCB->uxCoreAffinityMask = configTASK_DEFAULT_CORE_AFFINITY;
            }
            #endif

            prvAddNewTaskToReadyList( pxNewTCB );
 80024b4:	6938      	ldr	r0, [r7, #16]
 80024b6:	f000 f8a5 	bl	8002604 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 80024ba:	2301      	movs	r3, #1
 80024bc:	617b      	str	r3, [r7, #20]
 80024be:	e002      	b.n	80024c6 <xTaskCreate+0x3c>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80024c0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80024c4:	617b      	str	r3, [r7, #20]
        }

        traceRETURN_xTaskCreate( xReturn );
 80024c6:	697b      	ldr	r3, [r7, #20]
 80024c8:	4619      	mov	r1, r3
 80024ca:	20c2      	movs	r0, #194	@ 0xc2
 80024cc:	f003 faf6 	bl	8005abc <SEGGER_SYSVIEW_RecordEndCallU32>

        return xReturn;
 80024d0:	697b      	ldr	r3, [r7, #20]
    }
 80024d2:	4618      	mov	r0, r3
 80024d4:	3718      	adds	r7, #24
 80024d6:	46bd      	mov	sp, r7
 80024d8:	bd80      	pop	{r7, pc}

080024da <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 80024da:	b580      	push	{r7, lr}
 80024dc:	b088      	sub	sp, #32
 80024de:	af00      	add	r7, sp, #0
 80024e0:	60f8      	str	r0, [r7, #12]
 80024e2:	60b9      	str	r1, [r7, #8]
 80024e4:	607a      	str	r2, [r7, #4]
 80024e6:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
    {
        /* Fill the stack with a known value to assist debugging. */
        ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) uxStackDepth * sizeof( StackType_t ) );
 80024e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80024ea:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	009b      	lsls	r3, r3, #2
 80024f0:	461a      	mov	r2, r3
 80024f2:	21a5      	movs	r1, #165	@ 0xa5
 80024f4:	f003 ffe8 	bl	80064c8 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ uxStackDepth - ( configSTACK_DEPTH_TYPE ) 1 ] );
 80024f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80024fa:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80024fc:	6879      	ldr	r1, [r7, #4]
 80024fe:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 8002502:	440b      	add	r3, r1
 8002504:	009b      	lsls	r3, r3, #2
 8002506:	4413      	add	r3, r2
 8002508:	61bb      	str	r3, [r7, #24]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
 800250a:	69bb      	ldr	r3, [r7, #24]
 800250c:	f023 0307 	bic.w	r3, r3, #7
 8002510:	61bb      	str	r3, [r7, #24]

        /* Check the alignment of the calculated top of stack is correct. */
        configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0U ) );
 8002512:	69bb      	ldr	r3, [r7, #24]
 8002514:	f003 0307 	and.w	r3, r3, #7
 8002518:	2b00      	cmp	r3, #0
 800251a:	d00d      	beq.n	8002538 <prvInitialiseNewTask+0x5e>
    __asm volatile
 800251c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002520:	b672      	cpsid	i
 8002522:	f383 8811 	msr	BASEPRI, r3
 8002526:	f3bf 8f6f 	isb	sy
 800252a:	f3bf 8f4f 	dsb	sy
 800252e:	b662      	cpsie	i
 8002530:	617b      	str	r3, [r7, #20]
}
 8002532:	bf00      	nop
 8002534:	bf00      	nop
 8002536:	e7fd      	b.n	8002534 <prvInitialiseNewTask+0x5a>
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( uxStackDepth - ( configSTACK_DEPTH_TYPE ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8002538:	68bb      	ldr	r3, [r7, #8]
 800253a:	2b00      	cmp	r3, #0
 800253c:	d01e      	beq.n	800257c <prvInitialiseNewTask+0xa2>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800253e:	2300      	movs	r3, #0
 8002540:	61fb      	str	r3, [r7, #28]
 8002542:	e012      	b.n	800256a <prvInitialiseNewTask+0x90>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002544:	68ba      	ldr	r2, [r7, #8]
 8002546:	69fb      	ldr	r3, [r7, #28]
 8002548:	4413      	add	r3, r2
 800254a:	7819      	ldrb	r1, [r3, #0]
 800254c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800254e:	69fb      	ldr	r3, [r7, #28]
 8002550:	4413      	add	r3, r2
 8002552:	3334      	adds	r3, #52	@ 0x34
 8002554:	460a      	mov	r2, r1
 8002556:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8002558:	68ba      	ldr	r2, [r7, #8]
 800255a:	69fb      	ldr	r3, [r7, #28]
 800255c:	4413      	add	r3, r2
 800255e:	781b      	ldrb	r3, [r3, #0]
 8002560:	2b00      	cmp	r3, #0
 8002562:	d006      	beq.n	8002572 <prvInitialiseNewTask+0x98>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002564:	69fb      	ldr	r3, [r7, #28]
 8002566:	3301      	adds	r3, #1
 8002568:	61fb      	str	r3, [r7, #28]
 800256a:	69fb      	ldr	r3, [r7, #28]
 800256c:	2b09      	cmp	r3, #9
 800256e:	d9e9      	bls.n	8002544 <prvInitialiseNewTask+0x6a>
 8002570:	e000      	b.n	8002574 <prvInitialiseNewTask+0x9a>
            {
                break;
 8002572:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1U ] = '\0';
 8002574:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002576:	2200      	movs	r2, #0
 8002578:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    {
        mtCOVERAGE_TEST_MARKER();
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 800257c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800257e:	2b04      	cmp	r3, #4
 8002580:	d90d      	bls.n	800259e <prvInitialiseNewTask+0xc4>
    __asm volatile
 8002582:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002586:	b672      	cpsid	i
 8002588:	f383 8811 	msr	BASEPRI, r3
 800258c:	f3bf 8f6f 	isb	sy
 8002590:	f3bf 8f4f 	dsb	sy
 8002594:	b662      	cpsie	i
 8002596:	613b      	str	r3, [r7, #16]
}
 8002598:	bf00      	nop
 800259a:	bf00      	nop
 800259c:	e7fd      	b.n	800259a <prvInitialiseNewTask+0xc0>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800259e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80025a0:	2b04      	cmp	r3, #4
 80025a2:	d901      	bls.n	80025a8 <prvInitialiseNewTask+0xce>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80025a4:	2304      	movs	r3, #4
 80025a6:	62bb      	str	r3, [r7, #40]	@ 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 80025a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80025aa:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80025ac:	62da      	str	r2, [r3, #44]	@ 0x2c
    #if ( configUSE_MUTEXES == 1 )
    {
        pxNewTCB->uxBasePriority = uxPriority;
 80025ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80025b0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80025b2:	649a      	str	r2, [r3, #72]	@ 0x48
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80025b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80025b6:	3304      	adds	r3, #4
 80025b8:	4618      	mov	r0, r3
 80025ba:	f7ff fba5 	bl	8001d08 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80025be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80025c0:	3318      	adds	r3, #24
 80025c2:	4618      	mov	r0, r3
 80025c4:	f7ff fba0 	bl	8001d08 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80025c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80025ca:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80025cc:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority );
 80025ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80025d0:	f1c3 0205 	rsb	r2, r3, #5
 80025d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80025d6:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80025d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80025da:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80025dc:	625a      	str	r2, [r3, #36]	@ 0x24
            }
            #endif /* portSTACK_GROWTH */
        }
        #else /* portHAS_STACK_OVERFLOW_CHECKING */
        {
            pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80025de:	683a      	ldr	r2, [r7, #0]
 80025e0:	68f9      	ldr	r1, [r7, #12]
 80025e2:	69b8      	ldr	r0, [r7, #24]
 80025e4:	f001 f9f6 	bl	80039d4 <pxPortInitialiseStack>
 80025e8:	4602      	mov	r2, r0
 80025ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80025ec:	601a      	str	r2, [r3, #0]
            pxNewTCB->uxTaskAttributes |= taskATTRIBUTE_IS_IDLE;
        }
    }
    #endif /* #if ( configNUMBER_OF_CORES > 1 ) */

    if( pxCreatedTask != NULL )
 80025ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d002      	beq.n	80025fa <prvInitialiseNewTask+0x120>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80025f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80025f6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80025f8:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80025fa:	bf00      	nop
 80025fc:	3720      	adds	r7, #32
 80025fe:	46bd      	mov	sp, r7
 8002600:	bd80      	pop	{r7, pc}
	...

08002604 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

#if ( configNUMBER_OF_CORES == 1 )

    static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
    {
 8002604:	b5b0      	push	{r4, r5, r7, lr}
 8002606:	b086      	sub	sp, #24
 8002608:	af02      	add	r7, sp, #8
 800260a:	6078      	str	r0, [r7, #4]
        /* Ensure interrupts don't access the task lists while the lists are being
         * updated. */
        taskENTER_CRITICAL();
 800260c:	f001 fb42 	bl	8003c94 <vPortEnterCritical>
        {
            uxCurrentNumberOfTasks = ( UBaseType_t ) ( uxCurrentNumberOfTasks + 1U );
 8002610:	4b48      	ldr	r3, [pc, #288]	@ (8002734 <prvAddNewTaskToReadyList+0x130>)
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	3301      	adds	r3, #1
 8002616:	4a47      	ldr	r2, [pc, #284]	@ (8002734 <prvAddNewTaskToReadyList+0x130>)
 8002618:	6013      	str	r3, [r2, #0]

            if( pxCurrentTCB == NULL )
 800261a:	4b47      	ldr	r3, [pc, #284]	@ (8002738 <prvAddNewTaskToReadyList+0x134>)
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	2b00      	cmp	r3, #0
 8002620:	d109      	bne.n	8002636 <prvAddNewTaskToReadyList+0x32>
            {
                /* There are no other tasks, or all the other tasks are in
                 * the suspended state - make this the current task. */
                pxCurrentTCB = pxNewTCB;
 8002622:	4a45      	ldr	r2, [pc, #276]	@ (8002738 <prvAddNewTaskToReadyList+0x134>)
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	6013      	str	r3, [r2, #0]

                if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002628:	4b42      	ldr	r3, [pc, #264]	@ (8002734 <prvAddNewTaskToReadyList+0x130>)
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	2b01      	cmp	r3, #1
 800262e:	d110      	bne.n	8002652 <prvAddNewTaskToReadyList+0x4e>
                {
                    /* This is the first task to be created so do the preliminary
                     * initialisation required.  We will not recover if this call
                     * fails, but we will report the failure. */
                    prvInitialiseTaskLists();
 8002630:	f000 fde6 	bl	8003200 <prvInitialiseTaskLists>
 8002634:	e00d      	b.n	8002652 <prvAddNewTaskToReadyList+0x4e>
            else
            {
                /* If the scheduler is not already running, make this task the
                 * current task if it is the highest priority task to be created
                 * so far. */
                if( xSchedulerRunning == pdFALSE )
 8002636:	4b41      	ldr	r3, [pc, #260]	@ (800273c <prvAddNewTaskToReadyList+0x138>)
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	2b00      	cmp	r3, #0
 800263c:	d109      	bne.n	8002652 <prvAddNewTaskToReadyList+0x4e>
                {
                    if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800263e:	4b3e      	ldr	r3, [pc, #248]	@ (8002738 <prvAddNewTaskToReadyList+0x134>)
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002648:	429a      	cmp	r2, r3
 800264a:	d802      	bhi.n	8002652 <prvAddNewTaskToReadyList+0x4e>
                    {
                        pxCurrentTCB = pxNewTCB;
 800264c:	4a3a      	ldr	r2, [pc, #232]	@ (8002738 <prvAddNewTaskToReadyList+0x134>)
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	6013      	str	r3, [r2, #0]
                {
                    mtCOVERAGE_TEST_MARKER();
                }
            }

            uxTaskNumber++;
 8002652:	4b3b      	ldr	r3, [pc, #236]	@ (8002740 <prvAddNewTaskToReadyList+0x13c>)
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	3301      	adds	r3, #1
 8002658:	4a39      	ldr	r2, [pc, #228]	@ (8002740 <prvAddNewTaskToReadyList+0x13c>)
 800265a:	6013      	str	r3, [r2, #0]

            #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 800265c:	4b38      	ldr	r3, [pc, #224]	@ (8002740 <prvAddNewTaskToReadyList+0x13c>)
 800265e:	681a      	ldr	r2, [r3, #0]
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	641a      	str	r2, [r3, #64]	@ 0x40
            }
            #endif /* configUSE_TRACE_FACILITY */
            traceTASK_CREATE( pxNewTCB );
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	2b00      	cmp	r3, #0
 8002668:	d016      	beq.n	8002698 <prvAddNewTaskToReadyList+0x94>
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	4618      	mov	r0, r3
 800266e:	f003 fa99 	bl	8005ba4 <SEGGER_SYSVIEW_OnTaskCreate>
 8002672:	6878      	ldr	r0, [r7, #4]
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002682:	461d      	mov	r5, r3
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	461c      	mov	r4, r3
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800268e:	1ae3      	subs	r3, r4, r3
 8002690:	9300      	str	r3, [sp, #0]
 8002692:	462b      	mov	r3, r5
 8002694:	f001 ff80 	bl	8004598 <SYSVIEW_AddTask>

            prvAddTaskToReadyList( pxNewTCB );
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	4618      	mov	r0, r3
 800269c:	f003 fb06 	bl	8005cac <SEGGER_SYSVIEW_OnTaskStartReady>
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80026a4:	2201      	movs	r2, #1
 80026a6:	409a      	lsls	r2, r3
 80026a8:	4b26      	ldr	r3, [pc, #152]	@ (8002744 <prvAddNewTaskToReadyList+0x140>)
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	4313      	orrs	r3, r2
 80026ae:	4a25      	ldr	r2, [pc, #148]	@ (8002744 <prvAddNewTaskToReadyList+0x140>)
 80026b0:	6013      	str	r3, [r2, #0]
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80026b6:	4924      	ldr	r1, [pc, #144]	@ (8002748 <prvAddNewTaskToReadyList+0x144>)
 80026b8:	4613      	mov	r3, r2
 80026ba:	009b      	lsls	r3, r3, #2
 80026bc:	4413      	add	r3, r2
 80026be:	009b      	lsls	r3, r3, #2
 80026c0:	440b      	add	r3, r1
 80026c2:	3304      	adds	r3, #4
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	60fb      	str	r3, [r7, #12]
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	68fa      	ldr	r2, [r7, #12]
 80026cc:	609a      	str	r2, [r3, #8]
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	689a      	ldr	r2, [r3, #8]
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	60da      	str	r2, [r3, #12]
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	689b      	ldr	r3, [r3, #8]
 80026da:	687a      	ldr	r2, [r7, #4]
 80026dc:	3204      	adds	r2, #4
 80026de:	605a      	str	r2, [r3, #4]
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	1d1a      	adds	r2, r3, #4
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	609a      	str	r2, [r3, #8]
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80026ec:	4613      	mov	r3, r2
 80026ee:	009b      	lsls	r3, r3, #2
 80026f0:	4413      	add	r3, r2
 80026f2:	009b      	lsls	r3, r3, #2
 80026f4:	4a14      	ldr	r2, [pc, #80]	@ (8002748 <prvAddNewTaskToReadyList+0x144>)
 80026f6:	441a      	add	r2, r3
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	615a      	str	r2, [r3, #20]
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002700:	4911      	ldr	r1, [pc, #68]	@ (8002748 <prvAddNewTaskToReadyList+0x144>)
 8002702:	4613      	mov	r3, r2
 8002704:	009b      	lsls	r3, r3, #2
 8002706:	4413      	add	r3, r2
 8002708:	009b      	lsls	r3, r3, #2
 800270a:	440b      	add	r3, r1
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	687a      	ldr	r2, [r7, #4]
 8002710:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8002712:	1c59      	adds	r1, r3, #1
 8002714:	480c      	ldr	r0, [pc, #48]	@ (8002748 <prvAddNewTaskToReadyList+0x144>)
 8002716:	4613      	mov	r3, r2
 8002718:	009b      	lsls	r3, r3, #2
 800271a:	4413      	add	r3, r2
 800271c:	009b      	lsls	r3, r3, #2
 800271e:	4403      	add	r3, r0
 8002720:	6019      	str	r1, [r3, #0]

            portSETUP_TCB( pxNewTCB );
        }
        taskEXIT_CRITICAL();
 8002722:	f001 faed 	bl	8003d00 <vPortExitCritical>

        if( xSchedulerRunning != pdFALSE )
 8002726:	4b05      	ldr	r3, [pc, #20]	@ (800273c <prvAddNewTaskToReadyList+0x138>)
 8002728:	681b      	ldr	r3, [r3, #0]
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 800272a:	bf00      	nop
 800272c:	3710      	adds	r7, #16
 800272e:	46bd      	mov	sp, r7
 8002730:	bdb0      	pop	{r4, r5, r7, pc}
 8002732:	bf00      	nop
 8002734:	200001f4 	.word	0x200001f4
 8002738:	2000011c 	.word	0x2000011c
 800273c:	20000200 	.word	0x20000200
 8002740:	20000210 	.word	0x20000210
 8002744:	200001fc 	.word	0x200001fc
 8002748:	20000120 	.word	0x20000120

0800274c <prvCreateIdleTasks>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

static BaseType_t prvCreateIdleTasks( void )
{
 800274c:	b580      	push	{r7, lr}
 800274e:	b08a      	sub	sp, #40	@ 0x28
 8002750:	af02      	add	r7, sp, #8
    BaseType_t xReturn = pdPASS;
 8002752:	2301      	movs	r3, #1
 8002754:	61fb      	str	r3, [r7, #28]
    BaseType_t xCoreID;
    char cIdleName[ configMAX_TASK_NAME_LEN ] = { 0 };
 8002756:	1d3b      	adds	r3, r7, #4
 8002758:	2200      	movs	r2, #0
 800275a:	601a      	str	r2, [r3, #0]
 800275c:	605a      	str	r2, [r3, #4]
 800275e:	811a      	strh	r2, [r3, #8]
    TaskFunction_t pxIdleTaskFunction = NULL;
 8002760:	2300      	movs	r3, #0
 8002762:	613b      	str	r3, [r7, #16]
    UBaseType_t xIdleTaskNameIndex;

    /* MISRA Ref 14.3.1 [Configuration dependent invariant] */
    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-143. */
    /* coverity[misra_c_2012_rule_14_3_violation] */
    for( xIdleTaskNameIndex = 0U; xIdleTaskNameIndex < ( configMAX_TASK_NAME_LEN - taskRESERVED_TASK_NAME_LENGTH ); xIdleTaskNameIndex++ )
 8002764:	2300      	movs	r3, #0
 8002766:	617b      	str	r3, [r7, #20]
 8002768:	e011      	b.n	800278e <prvCreateIdleTasks+0x42>
    {
        /* MISRA Ref 18.1.1 [Configuration dependent bounds checking] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-181. */
        /* coverity[misra_c_2012_rule_18_1_violation] */
        cIdleName[ xIdleTaskNameIndex ] = configIDLE_TASK_NAME[ xIdleTaskNameIndex ];
 800276a:	4a1f      	ldr	r2, [pc, #124]	@ (80027e8 <prvCreateIdleTasks+0x9c>)
 800276c:	697b      	ldr	r3, [r7, #20]
 800276e:	4413      	add	r3, r2
 8002770:	7819      	ldrb	r1, [r3, #0]
 8002772:	1d3a      	adds	r2, r7, #4
 8002774:	697b      	ldr	r3, [r7, #20]
 8002776:	4413      	add	r3, r2
 8002778:	460a      	mov	r2, r1
 800277a:	701a      	strb	r2, [r3, #0]

        if( cIdleName[ xIdleTaskNameIndex ] == ( char ) 0x00 )
 800277c:	1d3a      	adds	r2, r7, #4
 800277e:	697b      	ldr	r3, [r7, #20]
 8002780:	4413      	add	r3, r2
 8002782:	781b      	ldrb	r3, [r3, #0]
 8002784:	2b00      	cmp	r3, #0
 8002786:	d006      	beq.n	8002796 <prvCreateIdleTasks+0x4a>
    for( xIdleTaskNameIndex = 0U; xIdleTaskNameIndex < ( configMAX_TASK_NAME_LEN - taskRESERVED_TASK_NAME_LENGTH ); xIdleTaskNameIndex++ )
 8002788:	697b      	ldr	r3, [r7, #20]
 800278a:	3301      	adds	r3, #1
 800278c:	617b      	str	r3, [r7, #20]
 800278e:	697b      	ldr	r3, [r7, #20]
 8002790:	2b08      	cmp	r3, #8
 8002792:	d9ea      	bls.n	800276a <prvCreateIdleTasks+0x1e>
 8002794:	e000      	b.n	8002798 <prvCreateIdleTasks+0x4c>
        {
            break;
 8002796:	bf00      	nop
            mtCOVERAGE_TEST_MARKER();
        }
    }

    /* Ensure null termination. */
    cIdleName[ xIdleTaskNameIndex ] = '\0';
 8002798:	1d3a      	adds	r2, r7, #4
 800279a:	697b      	ldr	r3, [r7, #20]
 800279c:	4413      	add	r3, r2
 800279e:	2200      	movs	r2, #0
 80027a0:	701a      	strb	r2, [r3, #0]

    /* Add each idle task at the lowest priority. */
    for( xCoreID = ( BaseType_t ) 0; xCoreID < ( BaseType_t ) configNUMBER_OF_CORES; xCoreID++ )
 80027a2:	2300      	movs	r3, #0
 80027a4:	61bb      	str	r3, [r7, #24]
 80027a6:	e015      	b.n	80027d4 <prvCreateIdleTasks+0x88>
    {
        #if ( configNUMBER_OF_CORES == 1 )
        {
            pxIdleTaskFunction = &prvIdleTask;
 80027a8:	4b10      	ldr	r3, [pc, #64]	@ (80027ec <prvCreateIdleTasks+0xa0>)
 80027aa:	613b      	str	r3, [r7, #16]
            }
        }
        #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( pxIdleTaskFunction,
 80027ac:	69bb      	ldr	r3, [r7, #24]
 80027ae:	009b      	lsls	r3, r3, #2
 80027b0:	4a0f      	ldr	r2, [pc, #60]	@ (80027f0 <prvCreateIdleTasks+0xa4>)
 80027b2:	4413      	add	r3, r2
 80027b4:	1d39      	adds	r1, r7, #4
 80027b6:	9301      	str	r3, [sp, #4]
 80027b8:	2300      	movs	r3, #0
 80027ba:	9300      	str	r3, [sp, #0]
 80027bc:	2300      	movs	r3, #0
 80027be:	2282      	movs	r2, #130	@ 0x82
 80027c0:	6938      	ldr	r0, [r7, #16]
 80027c2:	f7ff fe62 	bl	800248a <xTaskCreate>
 80027c6:	61f8      	str	r0, [r7, #28]
                                   &xIdleTaskHandles[ xCoreID ] );
        }
        #endif /* configSUPPORT_STATIC_ALLOCATION */

        /* Break the loop if any of the idle task is failed to be created. */
        if( xReturn != pdPASS )
 80027c8:	69fb      	ldr	r3, [r7, #28]
 80027ca:	2b01      	cmp	r3, #1
 80027cc:	d106      	bne.n	80027dc <prvCreateIdleTasks+0x90>
    for( xCoreID = ( BaseType_t ) 0; xCoreID < ( BaseType_t ) configNUMBER_OF_CORES; xCoreID++ )
 80027ce:	69bb      	ldr	r3, [r7, #24]
 80027d0:	3301      	adds	r3, #1
 80027d2:	61bb      	str	r3, [r7, #24]
 80027d4:	69bb      	ldr	r3, [r7, #24]
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	dde6      	ble.n	80027a8 <prvCreateIdleTasks+0x5c>
 80027da:	e000      	b.n	80027de <prvCreateIdleTasks+0x92>
        {
            break;
 80027dc:	bf00      	nop
            }
            #endif
        }
    }

    return xReturn;
 80027de:	69fb      	ldr	r3, [r7, #28]
}
 80027e0:	4618      	mov	r0, r3
 80027e2:	3720      	adds	r7, #32
 80027e4:	46bd      	mov	sp, r7
 80027e6:	bd80      	pop	{r7, pc}
 80027e8:	08006a8c 	.word	0x08006a8c
 80027ec:	080031dd 	.word	0x080031dd
 80027f0:	20000218 	.word	0x20000218

080027f4 <vTaskStartScheduler>:

/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80027f4:	b580      	push	{r7, lr}
 80027f6:	b084      	sub	sp, #16
 80027f8:	af00      	add	r7, sp, #0
         * the number of bits as confNUMBER_OF_CORES. */
        configASSERT( ( sizeof( UBaseType_t ) * taskBITS_PER_BYTE ) >= configNUMBER_OF_CORES );
    }
    #endif /* #if ( configUSE_CORE_AFFINITY == 1 ) && ( configNUMBER_OF_CORES > 1 ) */

    xReturn = prvCreateIdleTasks();
 80027fa:	f7ff ffa7 	bl	800274c <prvCreateIdleTasks>
 80027fe:	60f8      	str	r0, [r7, #12]

    #if ( configUSE_TIMERS == 1 )
    {
        if( xReturn == pdPASS )
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	2b01      	cmp	r3, #1
 8002804:	d102      	bne.n	800280c <vTaskStartScheduler+0x18>
        {
            xReturn = xTimerCreateTimerTask();
 8002806:	f000 fe45 	bl	8003494 <xTimerCreateTimerTask>
 800280a:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	2b01      	cmp	r3, #1
 8002810:	d126      	bne.n	8002860 <vTaskStartScheduler+0x6c>
    __asm volatile
 8002812:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002816:	b672      	cpsid	i
 8002818:	f383 8811 	msr	BASEPRI, r3
 800281c:	f3bf 8f6f 	isb	sy
 8002820:	f3bf 8f4f 	dsb	sy
 8002824:	b662      	cpsie	i
 8002826:	60bb      	str	r3, [r7, #8]
}
 8002828:	bf00      	nop
             * block specific to the task that will run first. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif

        xNextTaskUnblockTime = portMAX_DELAY;
 800282a:	4b1b      	ldr	r3, [pc, #108]	@ (8002898 <vTaskStartScheduler+0xa4>)
 800282c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002830:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8002832:	4b1a      	ldr	r3, [pc, #104]	@ (800289c <vTaskStartScheduler+0xa8>)
 8002834:	2201      	movs	r2, #1
 8002836:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8002838:	4b19      	ldr	r3, [pc, #100]	@ (80028a0 <vTaskStartScheduler+0xac>)
 800283a:	2200      	movs	r2, #0
 800283c:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 800283e:	4b19      	ldr	r3, [pc, #100]	@ (80028a4 <vTaskStartScheduler+0xb0>)
 8002840:	681a      	ldr	r2, [r3, #0]
 8002842:	4b19      	ldr	r3, [pc, #100]	@ (80028a8 <vTaskStartScheduler+0xb4>)
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	429a      	cmp	r2, r3
 8002848:	d102      	bne.n	8002850 <vTaskStartScheduler+0x5c>
 800284a:	f003 f98f 	bl	8005b6c <SEGGER_SYSVIEW_OnIdle>
 800284e:	e004      	b.n	800285a <vTaskStartScheduler+0x66>
 8002850:	4b15      	ldr	r3, [pc, #84]	@ (80028a8 <vTaskStartScheduler+0xb4>)
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	4618      	mov	r0, r3
 8002856:	f003 f9e7 	bl	8005c28 <SEGGER_SYSVIEW_OnTaskStartExec>
        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */

        /* The return value for xPortStartScheduler is not required
         * hence using a void datatype. */
        ( void ) xPortStartScheduler();
 800285a:	f001 f94b 	bl	8003af4 <xPortStartScheduler>
 800285e:	e011      	b.n	8002884 <vTaskStartScheduler+0x90>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002866:	d10d      	bne.n	8002884 <vTaskStartScheduler+0x90>
    __asm volatile
 8002868:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800286c:	b672      	cpsid	i
 800286e:	f383 8811 	msr	BASEPRI, r3
 8002872:	f3bf 8f6f 	isb	sy
 8002876:	f3bf 8f4f 	dsb	sy
 800287a:	b662      	cpsie	i
 800287c:	607b      	str	r3, [r7, #4]
}
 800287e:	bf00      	nop
 8002880:	bf00      	nop
 8002882:	e7fd      	b.n	8002880 <vTaskStartScheduler+0x8c>
     * meaning xIdleTaskHandles are not used anywhere else. */
    ( void ) xIdleTaskHandles;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8002884:	4b09      	ldr	r3, [pc, #36]	@ (80028ac <vTaskStartScheduler+0xb8>)
 8002886:	681b      	ldr	r3, [r3, #0]

    traceRETURN_vTaskStartScheduler();
 8002888:	20cd      	movs	r0, #205	@ 0xcd
 800288a:	f003 f8db 	bl	8005a44 <SEGGER_SYSVIEW_RecordEndCall>
}
 800288e:	bf00      	nop
 8002890:	3710      	adds	r7, #16
 8002892:	46bd      	mov	sp, r7
 8002894:	bd80      	pop	{r7, pc}
 8002896:	bf00      	nop
 8002898:	20000214 	.word	0x20000214
 800289c:	20000200 	.word	0x20000200
 80028a0:	200001f8 	.word	0x200001f8
 80028a4:	20000218 	.word	0x20000218
 80028a8:	2000011c 	.word	0x2000011c
 80028ac:	08006b80 	.word	0x08006b80

080028b0 <vTaskSuspendAll>:
    traceRETURN_vTaskEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80028b0:	b580      	push	{r7, lr}
 80028b2:	af00      	add	r7, sp, #0
         * do not otherwise exhibit real time behaviour. */
        portSOFTWARE_BARRIER();

        /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
         * is used to allow calls to vTaskSuspendAll() to nest. */
        uxSchedulerSuspended = ( UBaseType_t ) ( uxSchedulerSuspended + 1U );
 80028b4:	4b04      	ldr	r3, [pc, #16]	@ (80028c8 <vTaskSuspendAll+0x18>)
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	3301      	adds	r3, #1
 80028ba:	4a03      	ldr	r2, [pc, #12]	@ (80028c8 <vTaskSuspendAll+0x18>)
 80028bc:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* #if ( configNUMBER_OF_CORES == 1 ) */

    traceRETURN_vTaskSuspendAll();
 80028be:	20cf      	movs	r0, #207	@ 0xcf
 80028c0:	f003 f8c0 	bl	8005a44 <SEGGER_SYSVIEW_RecordEndCall>
}
 80028c4:	bf00      	nop
 80028c6:	bd80      	pop	{r7, pc}
 80028c8:	2000021c 	.word	0x2000021c

080028cc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80028cc:	b580      	push	{r7, lr}
 80028ce:	b088      	sub	sp, #32
 80028d0:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 80028d2:	2300      	movs	r3, #0
 80028d4:	61fb      	str	r3, [r7, #28]
    BaseType_t xAlreadyYielded = pdFALSE;
 80028d6:	2300      	movs	r3, #0
 80028d8:	617b      	str	r3, [r7, #20]
        /* It is possible that an ISR caused a task to be removed from an event
         * list while the scheduler was suspended.  If this was the case then the
         * removed task will have been added to the xPendingReadyList.  Once the
         * scheduler has been resumed it is safe to move all the pending ready
         * tasks from this list into their appropriate ready list. */
        taskENTER_CRITICAL();
 80028da:	f001 f9db 	bl	8003c94 <vPortEnterCritical>
        {
            const BaseType_t xCoreID = ( BaseType_t ) portGET_CORE_ID();
 80028de:	2300      	movs	r3, #0
 80028e0:	613b      	str	r3, [r7, #16]

            /* If uxSchedulerSuspended is zero then this function does not match a
             * previous call to vTaskSuspendAll(). */
            configASSERT( uxSchedulerSuspended != 0U );
 80028e2:	4b74      	ldr	r3, [pc, #464]	@ (8002ab4 <xTaskResumeAll+0x1e8>)
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d10d      	bne.n	8002906 <xTaskResumeAll+0x3a>
    __asm volatile
 80028ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80028ee:	b672      	cpsid	i
 80028f0:	f383 8811 	msr	BASEPRI, r3
 80028f4:	f3bf 8f6f 	isb	sy
 80028f8:	f3bf 8f4f 	dsb	sy
 80028fc:	b662      	cpsie	i
 80028fe:	603b      	str	r3, [r7, #0]
}
 8002900:	bf00      	nop
 8002902:	bf00      	nop
 8002904:	e7fd      	b.n	8002902 <xTaskResumeAll+0x36>

            uxSchedulerSuspended = ( UBaseType_t ) ( uxSchedulerSuspended - 1U );
 8002906:	4b6b      	ldr	r3, [pc, #428]	@ (8002ab4 <xTaskResumeAll+0x1e8>)
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	3b01      	subs	r3, #1
 800290c:	4a69      	ldr	r2, [pc, #420]	@ (8002ab4 <xTaskResumeAll+0x1e8>)
 800290e:	6013      	str	r3, [r2, #0]
            portRELEASE_TASK_LOCK( xCoreID );

            if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 8002910:	4b68      	ldr	r3, [pc, #416]	@ (8002ab4 <xTaskResumeAll+0x1e8>)
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	2b00      	cmp	r3, #0
 8002916:	f040 80c0 	bne.w	8002a9a <xTaskResumeAll+0x1ce>
            {
                if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800291a:	4b67      	ldr	r3, [pc, #412]	@ (8002ab8 <xTaskResumeAll+0x1ec>)
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	2b00      	cmp	r3, #0
 8002920:	f000 80bb 	beq.w	8002a9a <xTaskResumeAll+0x1ce>
                {
                    /* Move any readied tasks from the pending list into the
                     * appropriate ready list. */
                    while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002924:	e092      	b.n	8002a4c <xTaskResumeAll+0x180>
                    {
                        /* MISRA Ref 11.5.3 [Void pointer assignment] */
                        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                        /* coverity[misra_c_2012_rule_11_5_violation] */
                        pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8002926:	4b65      	ldr	r3, [pc, #404]	@ (8002abc <xTaskResumeAll+0x1f0>)
 8002928:	68db      	ldr	r3, [r3, #12]
 800292a:	68db      	ldr	r3, [r3, #12]
 800292c:	61fb      	str	r3, [r7, #28]
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 800292e:	69fb      	ldr	r3, [r7, #28]
 8002930:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002932:	60fb      	str	r3, [r7, #12]
 8002934:	69fb      	ldr	r3, [r7, #28]
 8002936:	69db      	ldr	r3, [r3, #28]
 8002938:	69fa      	ldr	r2, [r7, #28]
 800293a:	6a12      	ldr	r2, [r2, #32]
 800293c:	609a      	str	r2, [r3, #8]
 800293e:	69fb      	ldr	r3, [r7, #28]
 8002940:	6a1b      	ldr	r3, [r3, #32]
 8002942:	69fa      	ldr	r2, [r7, #28]
 8002944:	69d2      	ldr	r2, [r2, #28]
 8002946:	605a      	str	r2, [r3, #4]
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	685a      	ldr	r2, [r3, #4]
 800294c:	69fb      	ldr	r3, [r7, #28]
 800294e:	3318      	adds	r3, #24
 8002950:	429a      	cmp	r2, r3
 8002952:	d103      	bne.n	800295c <xTaskResumeAll+0x90>
 8002954:	69fb      	ldr	r3, [r7, #28]
 8002956:	6a1a      	ldr	r2, [r3, #32]
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	605a      	str	r2, [r3, #4]
 800295c:	69fb      	ldr	r3, [r7, #28]
 800295e:	2200      	movs	r2, #0
 8002960:	629a      	str	r2, [r3, #40]	@ 0x28
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	1e5a      	subs	r2, r3, #1
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	601a      	str	r2, [r3, #0]
                        portMEMORY_BARRIER();
                        listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 800296c:	69fb      	ldr	r3, [r7, #28]
 800296e:	695b      	ldr	r3, [r3, #20]
 8002970:	60bb      	str	r3, [r7, #8]
 8002972:	69fb      	ldr	r3, [r7, #28]
 8002974:	689b      	ldr	r3, [r3, #8]
 8002976:	69fa      	ldr	r2, [r7, #28]
 8002978:	68d2      	ldr	r2, [r2, #12]
 800297a:	609a      	str	r2, [r3, #8]
 800297c:	69fb      	ldr	r3, [r7, #28]
 800297e:	68db      	ldr	r3, [r3, #12]
 8002980:	69fa      	ldr	r2, [r7, #28]
 8002982:	6892      	ldr	r2, [r2, #8]
 8002984:	605a      	str	r2, [r3, #4]
 8002986:	68bb      	ldr	r3, [r7, #8]
 8002988:	685a      	ldr	r2, [r3, #4]
 800298a:	69fb      	ldr	r3, [r7, #28]
 800298c:	3304      	adds	r3, #4
 800298e:	429a      	cmp	r2, r3
 8002990:	d103      	bne.n	800299a <xTaskResumeAll+0xce>
 8002992:	69fb      	ldr	r3, [r7, #28]
 8002994:	68da      	ldr	r2, [r3, #12]
 8002996:	68bb      	ldr	r3, [r7, #8]
 8002998:	605a      	str	r2, [r3, #4]
 800299a:	69fb      	ldr	r3, [r7, #28]
 800299c:	2200      	movs	r2, #0
 800299e:	615a      	str	r2, [r3, #20]
 80029a0:	68bb      	ldr	r3, [r7, #8]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	1e5a      	subs	r2, r3, #1
 80029a6:	68bb      	ldr	r3, [r7, #8]
 80029a8:	601a      	str	r2, [r3, #0]
                        prvAddTaskToReadyList( pxTCB );
 80029aa:	69fb      	ldr	r3, [r7, #28]
 80029ac:	4618      	mov	r0, r3
 80029ae:	f003 f97d 	bl	8005cac <SEGGER_SYSVIEW_OnTaskStartReady>
 80029b2:	69fb      	ldr	r3, [r7, #28]
 80029b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029b6:	2201      	movs	r2, #1
 80029b8:	409a      	lsls	r2, r3
 80029ba:	4b41      	ldr	r3, [pc, #260]	@ (8002ac0 <xTaskResumeAll+0x1f4>)
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	4313      	orrs	r3, r2
 80029c0:	4a3f      	ldr	r2, [pc, #252]	@ (8002ac0 <xTaskResumeAll+0x1f4>)
 80029c2:	6013      	str	r3, [r2, #0]
 80029c4:	69fb      	ldr	r3, [r7, #28]
 80029c6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80029c8:	493e      	ldr	r1, [pc, #248]	@ (8002ac4 <xTaskResumeAll+0x1f8>)
 80029ca:	4613      	mov	r3, r2
 80029cc:	009b      	lsls	r3, r3, #2
 80029ce:	4413      	add	r3, r2
 80029d0:	009b      	lsls	r3, r3, #2
 80029d2:	440b      	add	r3, r1
 80029d4:	3304      	adds	r3, #4
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	607b      	str	r3, [r7, #4]
 80029da:	69fb      	ldr	r3, [r7, #28]
 80029dc:	687a      	ldr	r2, [r7, #4]
 80029de:	609a      	str	r2, [r3, #8]
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	689a      	ldr	r2, [r3, #8]
 80029e4:	69fb      	ldr	r3, [r7, #28]
 80029e6:	60da      	str	r2, [r3, #12]
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	689b      	ldr	r3, [r3, #8]
 80029ec:	69fa      	ldr	r2, [r7, #28]
 80029ee:	3204      	adds	r2, #4
 80029f0:	605a      	str	r2, [r3, #4]
 80029f2:	69fb      	ldr	r3, [r7, #28]
 80029f4:	1d1a      	adds	r2, r3, #4
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	609a      	str	r2, [r3, #8]
 80029fa:	69fb      	ldr	r3, [r7, #28]
 80029fc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80029fe:	4613      	mov	r3, r2
 8002a00:	009b      	lsls	r3, r3, #2
 8002a02:	4413      	add	r3, r2
 8002a04:	009b      	lsls	r3, r3, #2
 8002a06:	4a2f      	ldr	r2, [pc, #188]	@ (8002ac4 <xTaskResumeAll+0x1f8>)
 8002a08:	441a      	add	r2, r3
 8002a0a:	69fb      	ldr	r3, [r7, #28]
 8002a0c:	615a      	str	r2, [r3, #20]
 8002a0e:	69fb      	ldr	r3, [r7, #28]
 8002a10:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002a12:	492c      	ldr	r1, [pc, #176]	@ (8002ac4 <xTaskResumeAll+0x1f8>)
 8002a14:	4613      	mov	r3, r2
 8002a16:	009b      	lsls	r3, r3, #2
 8002a18:	4413      	add	r3, r2
 8002a1a:	009b      	lsls	r3, r3, #2
 8002a1c:	440b      	add	r3, r1
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	69fa      	ldr	r2, [r7, #28]
 8002a22:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8002a24:	1c59      	adds	r1, r3, #1
 8002a26:	4827      	ldr	r0, [pc, #156]	@ (8002ac4 <xTaskResumeAll+0x1f8>)
 8002a28:	4613      	mov	r3, r2
 8002a2a:	009b      	lsls	r3, r3, #2
 8002a2c:	4413      	add	r3, r2
 8002a2e:	009b      	lsls	r3, r3, #2
 8002a30:	4403      	add	r3, r0
 8002a32:	6019      	str	r1, [r3, #0]

                        #if ( configNUMBER_OF_CORES == 1 )
                        {
                            /* If the moved task has a priority higher than the current
                             * task then a yield must be performed. */
                            if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8002a34:	69fb      	ldr	r3, [r7, #28]
 8002a36:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002a38:	4b23      	ldr	r3, [pc, #140]	@ (8002ac8 <xTaskResumeAll+0x1fc>)
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a3e:	429a      	cmp	r2, r3
 8002a40:	d904      	bls.n	8002a4c <xTaskResumeAll+0x180>
                            {
                                xYieldPendings[ xCoreID ] = pdTRUE;
 8002a42:	4a22      	ldr	r2, [pc, #136]	@ (8002acc <xTaskResumeAll+0x200>)
 8002a44:	693b      	ldr	r3, [r7, #16]
 8002a46:	2101      	movs	r1, #1
 8002a48:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                    while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002a4c:	4b1b      	ldr	r3, [pc, #108]	@ (8002abc <xTaskResumeAll+0x1f0>)
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	f47f af68 	bne.w	8002926 <xTaskResumeAll+0x5a>
                             * which sets xYieldPendings for the current core to pdTRUE. */
                        }
                        #endif /* #if ( configNUMBER_OF_CORES == 1 ) */
                    }

                    if( pxTCB != NULL )
 8002a56:	69fb      	ldr	r3, [r7, #28]
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d001      	beq.n	8002a60 <xTaskResumeAll+0x194>
                         * which may have prevented the next unblock time from being
                         * re-calculated, in which case re-calculate it now.  Mainly
                         * important for low power tickless implementations, where
                         * this can prevent an unnecessary exit from low power
                         * state. */
                        prvResetNextTaskUnblockTime();
 8002a5c:	f000 fc4e 	bl	80032fc <prvResetNextTaskUnblockTime>
                     * It should be safe to call xTaskIncrementTick here from any core
                     * since we are in a critical section and xTaskIncrementTick itself
                     * protects itself within a critical section. Suspending the scheduler
                     * from any core causes xTaskIncrementTick to increment uxPendedCounts. */
                    {
                        TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8002a60:	4b1b      	ldr	r3, [pc, #108]	@ (8002ad0 <xTaskResumeAll+0x204>)
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	61bb      	str	r3, [r7, #24]

                        if( xPendedCounts > ( TickType_t ) 0U )
 8002a66:	69bb      	ldr	r3, [r7, #24]
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d012      	beq.n	8002a92 <xTaskResumeAll+0x1c6>
                        {
                            do
                            {
                                if( xTaskIncrementTick() != pdFALSE )
 8002a6c:	f000 f85a 	bl	8002b24 <xTaskIncrementTick>
 8002a70:	4603      	mov	r3, r0
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d004      	beq.n	8002a80 <xTaskResumeAll+0x1b4>
                                {
                                    /* Other cores are interrupted from
                                     * within xTaskIncrementTick(). */
                                    xYieldPendings[ xCoreID ] = pdTRUE;
 8002a76:	4a15      	ldr	r2, [pc, #84]	@ (8002acc <xTaskResumeAll+0x200>)
 8002a78:	693b      	ldr	r3, [r7, #16]
 8002a7a:	2101      	movs	r1, #1
 8002a7c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                                else
                                {
                                    mtCOVERAGE_TEST_MARKER();
                                }

                                --xPendedCounts;
 8002a80:	69bb      	ldr	r3, [r7, #24]
 8002a82:	3b01      	subs	r3, #1
 8002a84:	61bb      	str	r3, [r7, #24]
                            } while( xPendedCounts > ( TickType_t ) 0U );
 8002a86:	69bb      	ldr	r3, [r7, #24]
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d1ef      	bne.n	8002a6c <xTaskResumeAll+0x1a0>

                            xPendedTicks = 0;
 8002a8c:	4b10      	ldr	r3, [pc, #64]	@ (8002ad0 <xTaskResumeAll+0x204>)
 8002a8e:	2200      	movs	r2, #0
 8002a90:	601a      	str	r2, [r3, #0]
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }

                    if( xYieldPendings[ xCoreID ] != pdFALSE )
 8002a92:	4a0e      	ldr	r2, [pc, #56]	@ (8002acc <xTaskResumeAll+0x200>)
 8002a94:	693b      	ldr	r3, [r7, #16]
 8002a96:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8002a9a:	f001 f931 	bl	8003d00 <vPortExitCritical>
    }

    traceRETURN_xTaskResumeAll( xAlreadyYielded );
 8002a9e:	697b      	ldr	r3, [r7, #20]
 8002aa0:	4619      	mov	r1, r3
 8002aa2:	20d0      	movs	r0, #208	@ 0xd0
 8002aa4:	f003 f80a 	bl	8005abc <SEGGER_SYSVIEW_RecordEndCallU32>

    return xAlreadyYielded;
 8002aa8:	697b      	ldr	r3, [r7, #20]
}
 8002aaa:	4618      	mov	r0, r3
 8002aac:	3720      	adds	r7, #32
 8002aae:	46bd      	mov	sp, r7
 8002ab0:	bd80      	pop	{r7, pc}
 8002ab2:	bf00      	nop
 8002ab4:	2000021c 	.word	0x2000021c
 8002ab8:	200001f4 	.word	0x200001f4
 8002abc:	200001b4 	.word	0x200001b4
 8002ac0:	200001fc 	.word	0x200001fc
 8002ac4:	20000120 	.word	0x20000120
 8002ac8:	2000011c 	.word	0x2000011c
 8002acc:	20000208 	.word	0x20000208
 8002ad0:	20000204 	.word	0x20000204

08002ad4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8002ad4:	b580      	push	{r7, lr}
 8002ad6:	b082      	sub	sp, #8
 8002ad8:	af00      	add	r7, sp, #0
    traceENTER_xTaskGetTickCount();

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 8002ada:	4b06      	ldr	r3, [pc, #24]	@ (8002af4 <xTaskGetTickCount+0x20>)
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    traceRETURN_xTaskGetTickCount( xTicks );
 8002ae0:	6879      	ldr	r1, [r7, #4]
 8002ae2:	20d1      	movs	r0, #209	@ 0xd1
 8002ae4:	f002 ffea 	bl	8005abc <SEGGER_SYSVIEW_RecordEndCallU32>

    return xTicks;
 8002ae8:	687b      	ldr	r3, [r7, #4]
}
 8002aea:	4618      	mov	r0, r3
 8002aec:	3708      	adds	r7, #8
 8002aee:	46bd      	mov	sp, r7
 8002af0:	bd80      	pop	{r7, pc}
 8002af2:	bf00      	nop
 8002af4:	200001f8 	.word	0x200001f8

08002af8 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8002af8:	b580      	push	{r7, lr}
 8002afa:	b082      	sub	sp, #8
 8002afc:	af00      	add	r7, sp, #0
     * that have been assigned a priority at or (logically) below the maximum
     * system call  interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002afe:	f001 f9bf 	bl	8003e80 <vPortValidateInterruptPriority>

    uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8002b02:	2300      	movs	r3, #0
 8002b04:	607b      	str	r3, [r7, #4]
    {
        xReturn = xTickCount;
 8002b06:	4b06      	ldr	r3, [pc, #24]	@ (8002b20 <xTaskGetTickCountFromISR+0x28>)
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	603b      	str	r3, [r7, #0]
    }
    portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    traceRETURN_xTaskGetTickCountFromISR( xReturn );
 8002b0c:	6839      	ldr	r1, [r7, #0]
 8002b0e:	20d2      	movs	r0, #210	@ 0xd2
 8002b10:	f002 ffd4 	bl	8005abc <SEGGER_SYSVIEW_RecordEndCallU32>

    return xReturn;
 8002b14:	683b      	ldr	r3, [r7, #0]
}
 8002b16:	4618      	mov	r0, r3
 8002b18:	3708      	adds	r7, #8
 8002b1a:	46bd      	mov	sp, r7
 8002b1c:	bd80      	pop	{r7, pc}
 8002b1e:	bf00      	nop
 8002b20:	200001f8 	.word	0x200001f8

08002b24 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8002b24:	b580      	push	{r7, lr}
 8002b26:	b08a      	sub	sp, #40	@ 0x28
 8002b28:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8002b2a:	2300      	movs	r3, #0
 8002b2c:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Tick increment should occur on every kernel timer event. Core 0 has the
     * responsibility to increment the tick, or increment the pended ticks if the
     * scheduler is suspended.  If pended ticks is greater than zero, the core that
     * calls xTaskResumeAll has the responsibility to increment the tick. */
    if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 8002b2e:	4b75      	ldr	r3, [pc, #468]	@ (8002d04 <xTaskIncrementTick+0x1e0>)
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	f040 80d6 	bne.w	8002ce4 <xTaskIncrementTick+0x1c0>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8002b38:	4b73      	ldr	r3, [pc, #460]	@ (8002d08 <xTaskIncrementTick+0x1e4>)
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	3301      	adds	r3, #1
 8002b3e:	623b      	str	r3, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8002b40:	4a71      	ldr	r2, [pc, #452]	@ (8002d08 <xTaskIncrementTick+0x1e4>)
 8002b42:	6a3b      	ldr	r3, [r7, #32]
 8002b44:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U )
 8002b46:	6a3b      	ldr	r3, [r7, #32]
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d123      	bne.n	8002b94 <xTaskIncrementTick+0x70>
        {
            taskSWITCH_DELAYED_LISTS();
 8002b4c:	4b6f      	ldr	r3, [pc, #444]	@ (8002d0c <xTaskIncrementTick+0x1e8>)
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d00d      	beq.n	8002b72 <xTaskIncrementTick+0x4e>
    __asm volatile
 8002b56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002b5a:	b672      	cpsid	i
 8002b5c:	f383 8811 	msr	BASEPRI, r3
 8002b60:	f3bf 8f6f 	isb	sy
 8002b64:	f3bf 8f4f 	dsb	sy
 8002b68:	b662      	cpsie	i
 8002b6a:	607b      	str	r3, [r7, #4]
}
 8002b6c:	bf00      	nop
 8002b6e:	bf00      	nop
 8002b70:	e7fd      	b.n	8002b6e <xTaskIncrementTick+0x4a>
 8002b72:	4b66      	ldr	r3, [pc, #408]	@ (8002d0c <xTaskIncrementTick+0x1e8>)
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	61fb      	str	r3, [r7, #28]
 8002b78:	4b65      	ldr	r3, [pc, #404]	@ (8002d10 <xTaskIncrementTick+0x1ec>)
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	4a63      	ldr	r2, [pc, #396]	@ (8002d0c <xTaskIncrementTick+0x1e8>)
 8002b7e:	6013      	str	r3, [r2, #0]
 8002b80:	4a63      	ldr	r2, [pc, #396]	@ (8002d10 <xTaskIncrementTick+0x1ec>)
 8002b82:	69fb      	ldr	r3, [r7, #28]
 8002b84:	6013      	str	r3, [r2, #0]
 8002b86:	4b63      	ldr	r3, [pc, #396]	@ (8002d14 <xTaskIncrementTick+0x1f0>)
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	3301      	adds	r3, #1
 8002b8c:	4a61      	ldr	r2, [pc, #388]	@ (8002d14 <xTaskIncrementTick+0x1f0>)
 8002b8e:	6013      	str	r3, [r2, #0]
 8002b90:	f000 fbb4 	bl	80032fc <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8002b94:	4b60      	ldr	r3, [pc, #384]	@ (8002d18 <xTaskIncrementTick+0x1f4>)
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	6a3a      	ldr	r2, [r7, #32]
 8002b9a:	429a      	cmp	r2, r3
 8002b9c:	f0c0 80a7 	bcc.w	8002cee <xTaskIncrementTick+0x1ca>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002ba0:	4b5a      	ldr	r3, [pc, #360]	@ (8002d0c <xTaskIncrementTick+0x1e8>)
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d104      	bne.n	8002bb4 <xTaskIncrementTick+0x90>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY;
 8002baa:	4b5b      	ldr	r3, [pc, #364]	@ (8002d18 <xTaskIncrementTick+0x1f4>)
 8002bac:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002bb0:	601a      	str	r2, [r3, #0]
                    break;
 8002bb2:	e09c      	b.n	8002cee <xTaskIncrementTick+0x1ca>
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    /* MISRA Ref 11.5.3 [Void pointer assignment] */
                    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                    /* coverity[misra_c_2012_rule_11_5_violation] */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8002bb4:	4b55      	ldr	r3, [pc, #340]	@ (8002d0c <xTaskIncrementTick+0x1e8>)
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	68db      	ldr	r3, [r3, #12]
 8002bba:	68db      	ldr	r3, [r3, #12]
 8002bbc:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8002bbe:	69bb      	ldr	r3, [r7, #24]
 8002bc0:	685b      	ldr	r3, [r3, #4]
 8002bc2:	617b      	str	r3, [r7, #20]

                    if( xConstTickCount < xItemValue )
 8002bc4:	6a3a      	ldr	r2, [r7, #32]
 8002bc6:	697b      	ldr	r3, [r7, #20]
 8002bc8:	429a      	cmp	r2, r3
 8002bca:	d203      	bcs.n	8002bd4 <xTaskIncrementTick+0xb0>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8002bcc:	4a52      	ldr	r2, [pc, #328]	@ (8002d18 <xTaskIncrementTick+0x1f4>)
 8002bce:	697b      	ldr	r3, [r7, #20]
 8002bd0:	6013      	str	r3, [r2, #0]
                        break;
 8002bd2:	e08c      	b.n	8002cee <xTaskIncrementTick+0x1ca>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8002bd4:	69bb      	ldr	r3, [r7, #24]
 8002bd6:	695b      	ldr	r3, [r3, #20]
 8002bd8:	613b      	str	r3, [r7, #16]
 8002bda:	69bb      	ldr	r3, [r7, #24]
 8002bdc:	689b      	ldr	r3, [r3, #8]
 8002bde:	69ba      	ldr	r2, [r7, #24]
 8002be0:	68d2      	ldr	r2, [r2, #12]
 8002be2:	609a      	str	r2, [r3, #8]
 8002be4:	69bb      	ldr	r3, [r7, #24]
 8002be6:	68db      	ldr	r3, [r3, #12]
 8002be8:	69ba      	ldr	r2, [r7, #24]
 8002bea:	6892      	ldr	r2, [r2, #8]
 8002bec:	605a      	str	r2, [r3, #4]
 8002bee:	693b      	ldr	r3, [r7, #16]
 8002bf0:	685a      	ldr	r2, [r3, #4]
 8002bf2:	69bb      	ldr	r3, [r7, #24]
 8002bf4:	3304      	adds	r3, #4
 8002bf6:	429a      	cmp	r2, r3
 8002bf8:	d103      	bne.n	8002c02 <xTaskIncrementTick+0xde>
 8002bfa:	69bb      	ldr	r3, [r7, #24]
 8002bfc:	68da      	ldr	r2, [r3, #12]
 8002bfe:	693b      	ldr	r3, [r7, #16]
 8002c00:	605a      	str	r2, [r3, #4]
 8002c02:	69bb      	ldr	r3, [r7, #24]
 8002c04:	2200      	movs	r2, #0
 8002c06:	615a      	str	r2, [r3, #20]
 8002c08:	693b      	ldr	r3, [r7, #16]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	1e5a      	subs	r2, r3, #1
 8002c0e:	693b      	ldr	r3, [r7, #16]
 8002c10:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002c12:	69bb      	ldr	r3, [r7, #24]
 8002c14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d01e      	beq.n	8002c58 <xTaskIncrementTick+0x134>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8002c1a:	69bb      	ldr	r3, [r7, #24]
 8002c1c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c1e:	60fb      	str	r3, [r7, #12]
 8002c20:	69bb      	ldr	r3, [r7, #24]
 8002c22:	69db      	ldr	r3, [r3, #28]
 8002c24:	69ba      	ldr	r2, [r7, #24]
 8002c26:	6a12      	ldr	r2, [r2, #32]
 8002c28:	609a      	str	r2, [r3, #8]
 8002c2a:	69bb      	ldr	r3, [r7, #24]
 8002c2c:	6a1b      	ldr	r3, [r3, #32]
 8002c2e:	69ba      	ldr	r2, [r7, #24]
 8002c30:	69d2      	ldr	r2, [r2, #28]
 8002c32:	605a      	str	r2, [r3, #4]
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	685a      	ldr	r2, [r3, #4]
 8002c38:	69bb      	ldr	r3, [r7, #24]
 8002c3a:	3318      	adds	r3, #24
 8002c3c:	429a      	cmp	r2, r3
 8002c3e:	d103      	bne.n	8002c48 <xTaskIncrementTick+0x124>
 8002c40:	69bb      	ldr	r3, [r7, #24]
 8002c42:	6a1a      	ldr	r2, [r3, #32]
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	605a      	str	r2, [r3, #4]
 8002c48:	69bb      	ldr	r3, [r7, #24]
 8002c4a:	2200      	movs	r2, #0
 8002c4c:	629a      	str	r2, [r3, #40]	@ 0x28
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	1e5a      	subs	r2, r3, #1
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8002c58:	69bb      	ldr	r3, [r7, #24]
 8002c5a:	4618      	mov	r0, r3
 8002c5c:	f003 f826 	bl	8005cac <SEGGER_SYSVIEW_OnTaskStartReady>
 8002c60:	69bb      	ldr	r3, [r7, #24]
 8002c62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c64:	2201      	movs	r2, #1
 8002c66:	409a      	lsls	r2, r3
 8002c68:	4b2c      	ldr	r3, [pc, #176]	@ (8002d1c <xTaskIncrementTick+0x1f8>)
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	4313      	orrs	r3, r2
 8002c6e:	4a2b      	ldr	r2, [pc, #172]	@ (8002d1c <xTaskIncrementTick+0x1f8>)
 8002c70:	6013      	str	r3, [r2, #0]
 8002c72:	69bb      	ldr	r3, [r7, #24]
 8002c74:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002c76:	492a      	ldr	r1, [pc, #168]	@ (8002d20 <xTaskIncrementTick+0x1fc>)
 8002c78:	4613      	mov	r3, r2
 8002c7a:	009b      	lsls	r3, r3, #2
 8002c7c:	4413      	add	r3, r2
 8002c7e:	009b      	lsls	r3, r3, #2
 8002c80:	440b      	add	r3, r1
 8002c82:	3304      	adds	r3, #4
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	60bb      	str	r3, [r7, #8]
 8002c88:	69bb      	ldr	r3, [r7, #24]
 8002c8a:	68ba      	ldr	r2, [r7, #8]
 8002c8c:	609a      	str	r2, [r3, #8]
 8002c8e:	68bb      	ldr	r3, [r7, #8]
 8002c90:	689a      	ldr	r2, [r3, #8]
 8002c92:	69bb      	ldr	r3, [r7, #24]
 8002c94:	60da      	str	r2, [r3, #12]
 8002c96:	68bb      	ldr	r3, [r7, #8]
 8002c98:	689b      	ldr	r3, [r3, #8]
 8002c9a:	69ba      	ldr	r2, [r7, #24]
 8002c9c:	3204      	adds	r2, #4
 8002c9e:	605a      	str	r2, [r3, #4]
 8002ca0:	69bb      	ldr	r3, [r7, #24]
 8002ca2:	1d1a      	adds	r2, r3, #4
 8002ca4:	68bb      	ldr	r3, [r7, #8]
 8002ca6:	609a      	str	r2, [r3, #8]
 8002ca8:	69bb      	ldr	r3, [r7, #24]
 8002caa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002cac:	4613      	mov	r3, r2
 8002cae:	009b      	lsls	r3, r3, #2
 8002cb0:	4413      	add	r3, r2
 8002cb2:	009b      	lsls	r3, r3, #2
 8002cb4:	4a1a      	ldr	r2, [pc, #104]	@ (8002d20 <xTaskIncrementTick+0x1fc>)
 8002cb6:	441a      	add	r2, r3
 8002cb8:	69bb      	ldr	r3, [r7, #24]
 8002cba:	615a      	str	r2, [r3, #20]
 8002cbc:	69bb      	ldr	r3, [r7, #24]
 8002cbe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002cc0:	4917      	ldr	r1, [pc, #92]	@ (8002d20 <xTaskIncrementTick+0x1fc>)
 8002cc2:	4613      	mov	r3, r2
 8002cc4:	009b      	lsls	r3, r3, #2
 8002cc6:	4413      	add	r3, r2
 8002cc8:	009b      	lsls	r3, r3, #2
 8002cca:	440b      	add	r3, r1
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	69ba      	ldr	r2, [r7, #24]
 8002cd0:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8002cd2:	1c59      	adds	r1, r3, #1
 8002cd4:	4812      	ldr	r0, [pc, #72]	@ (8002d20 <xTaskIncrementTick+0x1fc>)
 8002cd6:	4613      	mov	r3, r2
 8002cd8:	009b      	lsls	r3, r3, #2
 8002cda:	4413      	add	r3, r2
 8002cdc:	009b      	lsls	r3, r3, #2
 8002cde:	4403      	add	r3, r0
 8002ce0:	6019      	str	r1, [r3, #0]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002ce2:	e75d      	b.n	8002ba0 <xTaskIncrementTick+0x7c>
        }
        #endif /* #if ( configUSE_PREEMPTION == 1 ) */
    }
    else
    {
        xPendedTicks += 1U;
 8002ce4:	4b0f      	ldr	r3, [pc, #60]	@ (8002d24 <xTaskIncrementTick+0x200>)
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	3301      	adds	r3, #1
 8002cea:	4a0e      	ldr	r2, [pc, #56]	@ (8002d24 <xTaskIncrementTick+0x200>)
 8002cec:	6013      	str	r3, [r2, #0]
            vApplicationTickHook();
        }
        #endif
    }

    traceRETURN_xTaskIncrementTick( xSwitchRequired );
 8002cee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cf0:	4619      	mov	r1, r3
 8002cf2:	20db      	movs	r0, #219	@ 0xdb
 8002cf4:	f002 fee2 	bl	8005abc <SEGGER_SYSVIEW_RecordEndCallU32>

    return xSwitchRequired;
 8002cf8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8002cfa:	4618      	mov	r0, r3
 8002cfc:	3728      	adds	r7, #40	@ 0x28
 8002cfe:	46bd      	mov	sp, r7
 8002d00:	bd80      	pop	{r7, pc}
 8002d02:	bf00      	nop
 8002d04:	2000021c 	.word	0x2000021c
 8002d08:	200001f8 	.word	0x200001f8
 8002d0c:	200001ac 	.word	0x200001ac
 8002d10:	200001b0 	.word	0x200001b0
 8002d14:	2000020c 	.word	0x2000020c
 8002d18:	20000214 	.word	0x20000214
 8002d1c:	200001fc 	.word	0x200001fc
 8002d20:	20000120 	.word	0x20000120
 8002d24:	20000204 	.word	0x20000204

08002d28 <vTaskSwitchContext>:
#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

#if ( configNUMBER_OF_CORES == 1 )
    void vTaskSwitchContext( void )
    {
 8002d28:	b580      	push	{r7, lr}
 8002d2a:	b086      	sub	sp, #24
 8002d2c:	af00      	add	r7, sp, #0
        traceENTER_vTaskSwitchContext();

        if( uxSchedulerSuspended != ( UBaseType_t ) 0U )
 8002d2e:	4b2f      	ldr	r3, [pc, #188]	@ (8002dec <vTaskSwitchContext+0xc4>)
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d003      	beq.n	8002d3e <vTaskSwitchContext+0x16>
        {
            /* The scheduler is currently suspended - do not allow a context
             * switch. */
            xYieldPendings[ 0 ] = pdTRUE;
 8002d36:	4b2e      	ldr	r3, [pc, #184]	@ (8002df0 <vTaskSwitchContext+0xc8>)
 8002d38:	2201      	movs	r2, #1
 8002d3a:	601a      	str	r2, [r3, #0]
            }
            #endif
        }

        traceRETURN_vTaskSwitchContext();
    }
 8002d3c:	e051      	b.n	8002de2 <vTaskSwitchContext+0xba>
            xYieldPendings[ 0 ] = pdFALSE;
 8002d3e:	4b2c      	ldr	r3, [pc, #176]	@ (8002df0 <vTaskSwitchContext+0xc8>)
 8002d40:	2200      	movs	r2, #0
 8002d42:	601a      	str	r2, [r3, #0]
            taskSELECT_HIGHEST_PRIORITY_TASK();
 8002d44:	4b2b      	ldr	r3, [pc, #172]	@ (8002df4 <vTaskSwitchContext+0xcc>)
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	60fb      	str	r3, [r7, #12]
        __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	fab3 f383 	clz	r3, r3
 8002d50:	72fb      	strb	r3, [r7, #11]
        return ucReturn;
 8002d52:	7afb      	ldrb	r3, [r7, #11]
 8002d54:	f1c3 031f 	rsb	r3, r3, #31
 8002d58:	617b      	str	r3, [r7, #20]
 8002d5a:	4927      	ldr	r1, [pc, #156]	@ (8002df8 <vTaskSwitchContext+0xd0>)
 8002d5c:	697a      	ldr	r2, [r7, #20]
 8002d5e:	4613      	mov	r3, r2
 8002d60:	009b      	lsls	r3, r3, #2
 8002d62:	4413      	add	r3, r2
 8002d64:	009b      	lsls	r3, r3, #2
 8002d66:	440b      	add	r3, r1
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d10d      	bne.n	8002d8a <vTaskSwitchContext+0x62>
    __asm volatile
 8002d6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002d72:	b672      	cpsid	i
 8002d74:	f383 8811 	msr	BASEPRI, r3
 8002d78:	f3bf 8f6f 	isb	sy
 8002d7c:	f3bf 8f4f 	dsb	sy
 8002d80:	b662      	cpsie	i
 8002d82:	607b      	str	r3, [r7, #4]
}
 8002d84:	bf00      	nop
 8002d86:	bf00      	nop
 8002d88:	e7fd      	b.n	8002d86 <vTaskSwitchContext+0x5e>
 8002d8a:	697a      	ldr	r2, [r7, #20]
 8002d8c:	4613      	mov	r3, r2
 8002d8e:	009b      	lsls	r3, r3, #2
 8002d90:	4413      	add	r3, r2
 8002d92:	009b      	lsls	r3, r3, #2
 8002d94:	4a18      	ldr	r2, [pc, #96]	@ (8002df8 <vTaskSwitchContext+0xd0>)
 8002d96:	4413      	add	r3, r2
 8002d98:	613b      	str	r3, [r7, #16]
 8002d9a:	693b      	ldr	r3, [r7, #16]
 8002d9c:	685b      	ldr	r3, [r3, #4]
 8002d9e:	685a      	ldr	r2, [r3, #4]
 8002da0:	693b      	ldr	r3, [r7, #16]
 8002da2:	605a      	str	r2, [r3, #4]
 8002da4:	693b      	ldr	r3, [r7, #16]
 8002da6:	685a      	ldr	r2, [r3, #4]
 8002da8:	693b      	ldr	r3, [r7, #16]
 8002daa:	3308      	adds	r3, #8
 8002dac:	429a      	cmp	r2, r3
 8002dae:	d103      	bne.n	8002db8 <vTaskSwitchContext+0x90>
 8002db0:	693b      	ldr	r3, [r7, #16]
 8002db2:	68da      	ldr	r2, [r3, #12]
 8002db4:	693b      	ldr	r3, [r7, #16]
 8002db6:	605a      	str	r2, [r3, #4]
 8002db8:	693b      	ldr	r3, [r7, #16]
 8002dba:	685b      	ldr	r3, [r3, #4]
 8002dbc:	68db      	ldr	r3, [r3, #12]
 8002dbe:	4a0f      	ldr	r2, [pc, #60]	@ (8002dfc <vTaskSwitchContext+0xd4>)
 8002dc0:	6013      	str	r3, [r2, #0]
            traceTASK_SWITCHED_IN();
 8002dc2:	4b0f      	ldr	r3, [pc, #60]	@ (8002e00 <vTaskSwitchContext+0xd8>)
 8002dc4:	681a      	ldr	r2, [r3, #0]
 8002dc6:	4b0d      	ldr	r3, [pc, #52]	@ (8002dfc <vTaskSwitchContext+0xd4>)
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	429a      	cmp	r2, r3
 8002dcc:	d102      	bne.n	8002dd4 <vTaskSwitchContext+0xac>
 8002dce:	f002 fecd 	bl	8005b6c <SEGGER_SYSVIEW_OnIdle>
 8002dd2:	e004      	b.n	8002dde <vTaskSwitchContext+0xb6>
 8002dd4:	4b09      	ldr	r3, [pc, #36]	@ (8002dfc <vTaskSwitchContext+0xd4>)
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	4618      	mov	r0, r3
 8002dda:	f002 ff25 	bl	8005c28 <SEGGER_SYSVIEW_OnTaskStartExec>
            portTASK_SWITCH_HOOK( pxCurrentTCB );
 8002dde:	4b07      	ldr	r3, [pc, #28]	@ (8002dfc <vTaskSwitchContext+0xd4>)
 8002de0:	681b      	ldr	r3, [r3, #0]
    }
 8002de2:	bf00      	nop
 8002de4:	3718      	adds	r7, #24
 8002de6:	46bd      	mov	sp, r7
 8002de8:	bd80      	pop	{r7, pc}
 8002dea:	bf00      	nop
 8002dec:	2000021c 	.word	0x2000021c
 8002df0:	20000208 	.word	0x20000208
 8002df4:	200001fc 	.word	0x200001fc
 8002df8:	20000120 	.word	0x20000120
 8002dfc:	2000011c 	.word	0x2000011c
 8002e00:	20000218 	.word	0x20000218

08002e04 <vTaskPlaceOnEventList>:
#endif /* if ( configNUMBER_OF_CORES > 1 ) */
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8002e04:	b580      	push	{r7, lr}
 8002e06:	b084      	sub	sp, #16
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	6078      	str	r0, [r7, #4]
 8002e0c:	6039      	str	r1, [r7, #0]
    traceENTER_vTaskPlaceOnEventList( pxEventList, xTicksToWait );

    configASSERT( pxEventList );
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d10d      	bne.n	8002e30 <vTaskPlaceOnEventList+0x2c>
    __asm volatile
 8002e14:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002e18:	b672      	cpsid	i
 8002e1a:	f383 8811 	msr	BASEPRI, r3
 8002e1e:	f3bf 8f6f 	isb	sy
 8002e22:	f3bf 8f4f 	dsb	sy
 8002e26:	b662      	cpsie	i
 8002e28:	60fb      	str	r3, [r7, #12]
}
 8002e2a:	bf00      	nop
 8002e2c:	bf00      	nop
 8002e2e:	e7fd      	b.n	8002e2c <vTaskPlaceOnEventList+0x28>
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8002e30:	4b08      	ldr	r3, [pc, #32]	@ (8002e54 <vTaskPlaceOnEventList+0x50>)
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	3318      	adds	r3, #24
 8002e36:	4619      	mov	r1, r3
 8002e38:	6878      	ldr	r0, [r7, #4]
 8002e3a:	f7fe ff74 	bl	8001d26 <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8002e3e:	2101      	movs	r1, #1
 8002e40:	6838      	ldr	r0, [r7, #0]
 8002e42:	f000 fa99 	bl	8003378 <prvAddCurrentTaskToDelayedList>

    traceRETURN_vTaskPlaceOnEventList();
 8002e46:	20e1      	movs	r0, #225	@ 0xe1
 8002e48:	f002 fdfc 	bl	8005a44 <SEGGER_SYSVIEW_RecordEndCall>
}
 8002e4c:	bf00      	nop
 8002e4e:	3710      	adds	r7, #16
 8002e50:	46bd      	mov	sp, r7
 8002e52:	bd80      	pop	{r7, pc}
 8002e54:	2000011c 	.word	0x2000011c

08002e58 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 8002e58:	b580      	push	{r7, lr}
 8002e5a:	b086      	sub	sp, #24
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	60f8      	str	r0, [r7, #12]
 8002e60:	60b9      	str	r1, [r7, #8]
 8002e62:	607a      	str	r2, [r7, #4]
        traceENTER_vTaskPlaceOnEventListRestricted( pxEventList, xTicksToWait, xWaitIndefinitely );

        configASSERT( pxEventList );
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d10d      	bne.n	8002e86 <vTaskPlaceOnEventListRestricted+0x2e>
    __asm volatile
 8002e6a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002e6e:	b672      	cpsid	i
 8002e70:	f383 8811 	msr	BASEPRI, r3
 8002e74:	f3bf 8f6f 	isb	sy
 8002e78:	f3bf 8f4f 	dsb	sy
 8002e7c:	b662      	cpsie	i
 8002e7e:	613b      	str	r3, [r7, #16]
}
 8002e80:	bf00      	nop
 8002e82:	bf00      	nop
 8002e84:	e7fd      	b.n	8002e82 <vTaskPlaceOnEventListRestricted+0x2a>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	685b      	ldr	r3, [r3, #4]
 8002e8a:	617b      	str	r3, [r7, #20]
 8002e8c:	4b17      	ldr	r3, [pc, #92]	@ (8002eec <vTaskPlaceOnEventListRestricted+0x94>)
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	697a      	ldr	r2, [r7, #20]
 8002e92:	61da      	str	r2, [r3, #28]
 8002e94:	4b15      	ldr	r3, [pc, #84]	@ (8002eec <vTaskPlaceOnEventListRestricted+0x94>)
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	697a      	ldr	r2, [r7, #20]
 8002e9a:	6892      	ldr	r2, [r2, #8]
 8002e9c:	621a      	str	r2, [r3, #32]
 8002e9e:	4b13      	ldr	r3, [pc, #76]	@ (8002eec <vTaskPlaceOnEventListRestricted+0x94>)
 8002ea0:	681a      	ldr	r2, [r3, #0]
 8002ea2:	697b      	ldr	r3, [r7, #20]
 8002ea4:	689b      	ldr	r3, [r3, #8]
 8002ea6:	3218      	adds	r2, #24
 8002ea8:	605a      	str	r2, [r3, #4]
 8002eaa:	4b10      	ldr	r3, [pc, #64]	@ (8002eec <vTaskPlaceOnEventListRestricted+0x94>)
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f103 0218 	add.w	r2, r3, #24
 8002eb2:	697b      	ldr	r3, [r7, #20]
 8002eb4:	609a      	str	r2, [r3, #8]
 8002eb6:	4b0d      	ldr	r3, [pc, #52]	@ (8002eec <vTaskPlaceOnEventListRestricted+0x94>)
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	68fa      	ldr	r2, [r7, #12]
 8002ebc:	629a      	str	r2, [r3, #40]	@ 0x28
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	1c5a      	adds	r2, r3, #1
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	601a      	str	r2, [r3, #0]

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d002      	beq.n	8002ed4 <vTaskPlaceOnEventListRestricted+0x7c>
        {
            xTicksToWait = portMAX_DELAY;
 8002ece:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002ed2:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8002ed4:	6879      	ldr	r1, [r7, #4]
 8002ed6:	68b8      	ldr	r0, [r7, #8]
 8002ed8:	f000 fa4e 	bl	8003378 <prvAddCurrentTaskToDelayedList>

        traceRETURN_vTaskPlaceOnEventListRestricted();
 8002edc:	20e3      	movs	r0, #227	@ 0xe3
 8002ede:	f002 fdb1 	bl	8005a44 <SEGGER_SYSVIEW_RecordEndCall>
    }
 8002ee2:	bf00      	nop
 8002ee4:	3718      	adds	r7, #24
 8002ee6:	46bd      	mov	sp, r7
 8002ee8:	bd80      	pop	{r7, pc}
 8002eea:	bf00      	nop
 8002eec:	2000011c 	.word	0x2000011c

08002ef0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8002ef0:	b580      	push	{r7, lr}
 8002ef2:	b08a      	sub	sp, #40	@ 0x28
 8002ef4:	af00      	add	r7, sp, #0
 8002ef6:	6078      	str	r0, [r7, #4]
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    /* MISRA Ref 11.5.3 [Void pointer assignment] */
    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
    /* coverity[misra_c_2012_rule_11_5_violation] */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	68db      	ldr	r3, [r3, #12]
 8002efc:	68db      	ldr	r3, [r3, #12]
 8002efe:	623b      	str	r3, [r7, #32]
    configASSERT( pxUnblockedTCB );
 8002f00:	6a3b      	ldr	r3, [r7, #32]
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d10d      	bne.n	8002f22 <xTaskRemoveFromEventList+0x32>
    __asm volatile
 8002f06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002f0a:	b672      	cpsid	i
 8002f0c:	f383 8811 	msr	BASEPRI, r3
 8002f10:	f3bf 8f6f 	isb	sy
 8002f14:	f3bf 8f4f 	dsb	sy
 8002f18:	b662      	cpsie	i
 8002f1a:	60fb      	str	r3, [r7, #12]
}
 8002f1c:	bf00      	nop
 8002f1e:	bf00      	nop
 8002f20:	e7fd      	b.n	8002f1e <xTaskRemoveFromEventList+0x2e>
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 8002f22:	6a3b      	ldr	r3, [r7, #32]
 8002f24:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f26:	61fb      	str	r3, [r7, #28]
 8002f28:	6a3b      	ldr	r3, [r7, #32]
 8002f2a:	69db      	ldr	r3, [r3, #28]
 8002f2c:	6a3a      	ldr	r2, [r7, #32]
 8002f2e:	6a12      	ldr	r2, [r2, #32]
 8002f30:	609a      	str	r2, [r3, #8]
 8002f32:	6a3b      	ldr	r3, [r7, #32]
 8002f34:	6a1b      	ldr	r3, [r3, #32]
 8002f36:	6a3a      	ldr	r2, [r7, #32]
 8002f38:	69d2      	ldr	r2, [r2, #28]
 8002f3a:	605a      	str	r2, [r3, #4]
 8002f3c:	69fb      	ldr	r3, [r7, #28]
 8002f3e:	685a      	ldr	r2, [r3, #4]
 8002f40:	6a3b      	ldr	r3, [r7, #32]
 8002f42:	3318      	adds	r3, #24
 8002f44:	429a      	cmp	r2, r3
 8002f46:	d103      	bne.n	8002f50 <xTaskRemoveFromEventList+0x60>
 8002f48:	6a3b      	ldr	r3, [r7, #32]
 8002f4a:	6a1a      	ldr	r2, [r3, #32]
 8002f4c:	69fb      	ldr	r3, [r7, #28]
 8002f4e:	605a      	str	r2, [r3, #4]
 8002f50:	6a3b      	ldr	r3, [r7, #32]
 8002f52:	2200      	movs	r2, #0
 8002f54:	629a      	str	r2, [r3, #40]	@ 0x28
 8002f56:	69fb      	ldr	r3, [r7, #28]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	1e5a      	subs	r2, r3, #1
 8002f5c:	69fb      	ldr	r3, [r7, #28]
 8002f5e:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 8002f60:	4b4e      	ldr	r3, [pc, #312]	@ (800309c <xTaskRemoveFromEventList+0x1ac>)
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d164      	bne.n	8003032 <xTaskRemoveFromEventList+0x142>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 8002f68:	6a3b      	ldr	r3, [r7, #32]
 8002f6a:	695b      	ldr	r3, [r3, #20]
 8002f6c:	617b      	str	r3, [r7, #20]
 8002f6e:	6a3b      	ldr	r3, [r7, #32]
 8002f70:	689b      	ldr	r3, [r3, #8]
 8002f72:	6a3a      	ldr	r2, [r7, #32]
 8002f74:	68d2      	ldr	r2, [r2, #12]
 8002f76:	609a      	str	r2, [r3, #8]
 8002f78:	6a3b      	ldr	r3, [r7, #32]
 8002f7a:	68db      	ldr	r3, [r3, #12]
 8002f7c:	6a3a      	ldr	r2, [r7, #32]
 8002f7e:	6892      	ldr	r2, [r2, #8]
 8002f80:	605a      	str	r2, [r3, #4]
 8002f82:	697b      	ldr	r3, [r7, #20]
 8002f84:	685a      	ldr	r2, [r3, #4]
 8002f86:	6a3b      	ldr	r3, [r7, #32]
 8002f88:	3304      	adds	r3, #4
 8002f8a:	429a      	cmp	r2, r3
 8002f8c:	d103      	bne.n	8002f96 <xTaskRemoveFromEventList+0xa6>
 8002f8e:	6a3b      	ldr	r3, [r7, #32]
 8002f90:	68da      	ldr	r2, [r3, #12]
 8002f92:	697b      	ldr	r3, [r7, #20]
 8002f94:	605a      	str	r2, [r3, #4]
 8002f96:	6a3b      	ldr	r3, [r7, #32]
 8002f98:	2200      	movs	r2, #0
 8002f9a:	615a      	str	r2, [r3, #20]
 8002f9c:	697b      	ldr	r3, [r7, #20]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	1e5a      	subs	r2, r3, #1
 8002fa2:	697b      	ldr	r3, [r7, #20]
 8002fa4:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 8002fa6:	6a3b      	ldr	r3, [r7, #32]
 8002fa8:	4618      	mov	r0, r3
 8002faa:	f002 fe7f 	bl	8005cac <SEGGER_SYSVIEW_OnTaskStartReady>
 8002fae:	6a3b      	ldr	r3, [r7, #32]
 8002fb0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002fb2:	2201      	movs	r2, #1
 8002fb4:	409a      	lsls	r2, r3
 8002fb6:	4b3a      	ldr	r3, [pc, #232]	@ (80030a0 <xTaskRemoveFromEventList+0x1b0>)
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	4313      	orrs	r3, r2
 8002fbc:	4a38      	ldr	r2, [pc, #224]	@ (80030a0 <xTaskRemoveFromEventList+0x1b0>)
 8002fbe:	6013      	str	r3, [r2, #0]
 8002fc0:	6a3b      	ldr	r3, [r7, #32]
 8002fc2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002fc4:	4937      	ldr	r1, [pc, #220]	@ (80030a4 <xTaskRemoveFromEventList+0x1b4>)
 8002fc6:	4613      	mov	r3, r2
 8002fc8:	009b      	lsls	r3, r3, #2
 8002fca:	4413      	add	r3, r2
 8002fcc:	009b      	lsls	r3, r3, #2
 8002fce:	440b      	add	r3, r1
 8002fd0:	3304      	adds	r3, #4
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	613b      	str	r3, [r7, #16]
 8002fd6:	6a3b      	ldr	r3, [r7, #32]
 8002fd8:	693a      	ldr	r2, [r7, #16]
 8002fda:	609a      	str	r2, [r3, #8]
 8002fdc:	693b      	ldr	r3, [r7, #16]
 8002fde:	689a      	ldr	r2, [r3, #8]
 8002fe0:	6a3b      	ldr	r3, [r7, #32]
 8002fe2:	60da      	str	r2, [r3, #12]
 8002fe4:	693b      	ldr	r3, [r7, #16]
 8002fe6:	689b      	ldr	r3, [r3, #8]
 8002fe8:	6a3a      	ldr	r2, [r7, #32]
 8002fea:	3204      	adds	r2, #4
 8002fec:	605a      	str	r2, [r3, #4]
 8002fee:	6a3b      	ldr	r3, [r7, #32]
 8002ff0:	1d1a      	adds	r2, r3, #4
 8002ff2:	693b      	ldr	r3, [r7, #16]
 8002ff4:	609a      	str	r2, [r3, #8]
 8002ff6:	6a3b      	ldr	r3, [r7, #32]
 8002ff8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002ffa:	4613      	mov	r3, r2
 8002ffc:	009b      	lsls	r3, r3, #2
 8002ffe:	4413      	add	r3, r2
 8003000:	009b      	lsls	r3, r3, #2
 8003002:	4a28      	ldr	r2, [pc, #160]	@ (80030a4 <xTaskRemoveFromEventList+0x1b4>)
 8003004:	441a      	add	r2, r3
 8003006:	6a3b      	ldr	r3, [r7, #32]
 8003008:	615a      	str	r2, [r3, #20]
 800300a:	6a3b      	ldr	r3, [r7, #32]
 800300c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800300e:	4925      	ldr	r1, [pc, #148]	@ (80030a4 <xTaskRemoveFromEventList+0x1b4>)
 8003010:	4613      	mov	r3, r2
 8003012:	009b      	lsls	r3, r3, #2
 8003014:	4413      	add	r3, r2
 8003016:	009b      	lsls	r3, r3, #2
 8003018:	440b      	add	r3, r1
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	6a3a      	ldr	r2, [r7, #32]
 800301e:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8003020:	1c59      	adds	r1, r3, #1
 8003022:	4820      	ldr	r0, [pc, #128]	@ (80030a4 <xTaskRemoveFromEventList+0x1b4>)
 8003024:	4613      	mov	r3, r2
 8003026:	009b      	lsls	r3, r3, #2
 8003028:	4413      	add	r3, r2
 800302a:	009b      	lsls	r3, r3, #2
 800302c:	4403      	add	r3, r0
 800302e:	6019      	str	r1, [r3, #0]
 8003030:	e01b      	b.n	800306a <xTaskRemoveFromEventList+0x17a>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003032:	4b1d      	ldr	r3, [pc, #116]	@ (80030a8 <xTaskRemoveFromEventList+0x1b8>)
 8003034:	685b      	ldr	r3, [r3, #4]
 8003036:	61bb      	str	r3, [r7, #24]
 8003038:	6a3b      	ldr	r3, [r7, #32]
 800303a:	69ba      	ldr	r2, [r7, #24]
 800303c:	61da      	str	r2, [r3, #28]
 800303e:	69bb      	ldr	r3, [r7, #24]
 8003040:	689a      	ldr	r2, [r3, #8]
 8003042:	6a3b      	ldr	r3, [r7, #32]
 8003044:	621a      	str	r2, [r3, #32]
 8003046:	69bb      	ldr	r3, [r7, #24]
 8003048:	689b      	ldr	r3, [r3, #8]
 800304a:	6a3a      	ldr	r2, [r7, #32]
 800304c:	3218      	adds	r2, #24
 800304e:	605a      	str	r2, [r3, #4]
 8003050:	6a3b      	ldr	r3, [r7, #32]
 8003052:	f103 0218 	add.w	r2, r3, #24
 8003056:	69bb      	ldr	r3, [r7, #24]
 8003058:	609a      	str	r2, [r3, #8]
 800305a:	6a3b      	ldr	r3, [r7, #32]
 800305c:	4a12      	ldr	r2, [pc, #72]	@ (80030a8 <xTaskRemoveFromEventList+0x1b8>)
 800305e:	629a      	str	r2, [r3, #40]	@ 0x28
 8003060:	4b11      	ldr	r3, [pc, #68]	@ (80030a8 <xTaskRemoveFromEventList+0x1b8>)
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	3301      	adds	r3, #1
 8003066:	4a10      	ldr	r2, [pc, #64]	@ (80030a8 <xTaskRemoveFromEventList+0x1b8>)
 8003068:	6013      	str	r3, [r2, #0]
    }

    #if ( configNUMBER_OF_CORES == 1 )
    {
        if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800306a:	6a3b      	ldr	r3, [r7, #32]
 800306c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800306e:	4b0f      	ldr	r3, [pc, #60]	@ (80030ac <xTaskRemoveFromEventList+0x1bc>)
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003074:	429a      	cmp	r2, r3
 8003076:	d905      	bls.n	8003084 <xTaskRemoveFromEventList+0x194>
        {
            /* Return true if the task removed from the event list has a higher
             * priority than the calling task.  This allows the calling task to know if
             * it should force a context switch now. */
            xReturn = pdTRUE;
 8003078:	2301      	movs	r3, #1
 800307a:	627b      	str	r3, [r7, #36]	@ 0x24

            /* Mark that a yield is pending in case the user is not using the
             * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
            xYieldPendings[ 0 ] = pdTRUE;
 800307c:	4b0c      	ldr	r3, [pc, #48]	@ (80030b0 <xTaskRemoveFromEventList+0x1c0>)
 800307e:	2201      	movs	r2, #1
 8003080:	601a      	str	r2, [r3, #0]
 8003082:	e001      	b.n	8003088 <xTaskRemoveFromEventList+0x198>
        }
        else
        {
            xReturn = pdFALSE;
 8003084:	2300      	movs	r3, #0
 8003086:	627b      	str	r3, [r7, #36]	@ 0x24
        }
        #endif /* #if ( configUSE_PREEMPTION == 1 ) */
    }
    #endif /* #if ( configNUMBER_OF_CORES == 1 ) */

    traceRETURN_xTaskRemoveFromEventList( xReturn );
 8003088:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800308a:	4619      	mov	r1, r3
 800308c:	20e4      	movs	r0, #228	@ 0xe4
 800308e:	f002 fd15 	bl	8005abc <SEGGER_SYSVIEW_RecordEndCallU32>
    return xReturn;
 8003092:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8003094:	4618      	mov	r0, r3
 8003096:	3728      	adds	r7, #40	@ 0x28
 8003098:	46bd      	mov	sp, r7
 800309a:	bd80      	pop	{r7, pc}
 800309c:	2000021c 	.word	0x2000021c
 80030a0:	200001fc 	.word	0x200001fc
 80030a4:	20000120 	.word	0x20000120
 80030a8:	200001b4 	.word	0x200001b4
 80030ac:	2000011c 	.word	0x2000011c
 80030b0:	20000208 	.word	0x20000208

080030b4 <vTaskInternalSetTimeOutState>:
    traceRETURN_vTaskSetTimeOutState();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80030b4:	b580      	push	{r7, lr}
 80030b6:	b082      	sub	sp, #8
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	6078      	str	r0, [r7, #4]
    traceENTER_vTaskInternalSetTimeOutState( pxTimeOut );

    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 80030bc:	4b07      	ldr	r3, [pc, #28]	@ (80030dc <vTaskInternalSetTimeOutState+0x28>)
 80030be:	681a      	ldr	r2, [r3, #0]
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 80030c4:	4b06      	ldr	r3, [pc, #24]	@ (80030e0 <vTaskInternalSetTimeOutState+0x2c>)
 80030c6:	681a      	ldr	r2, [r3, #0]
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	605a      	str	r2, [r3, #4]

    traceRETURN_vTaskInternalSetTimeOutState();
 80030cc:	20e7      	movs	r0, #231	@ 0xe7
 80030ce:	f002 fcb9 	bl	8005a44 <SEGGER_SYSVIEW_RecordEndCall>
}
 80030d2:	bf00      	nop
 80030d4:	3708      	adds	r7, #8
 80030d6:	46bd      	mov	sp, r7
 80030d8:	bd80      	pop	{r7, pc}
 80030da:	bf00      	nop
 80030dc:	2000020c 	.word	0x2000020c
 80030e0:	200001f8 	.word	0x200001f8

080030e4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 80030e4:	b580      	push	{r7, lr}
 80030e6:	b088      	sub	sp, #32
 80030e8:	af00      	add	r7, sp, #0
 80030ea:	6078      	str	r0, [r7, #4]
 80030ec:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    traceENTER_xTaskCheckForTimeOut( pxTimeOut, pxTicksToWait );

    configASSERT( pxTimeOut );
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d10d      	bne.n	8003110 <xTaskCheckForTimeOut+0x2c>
    __asm volatile
 80030f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80030f8:	b672      	cpsid	i
 80030fa:	f383 8811 	msr	BASEPRI, r3
 80030fe:	f3bf 8f6f 	isb	sy
 8003102:	f3bf 8f4f 	dsb	sy
 8003106:	b662      	cpsie	i
 8003108:	613b      	str	r3, [r7, #16]
}
 800310a:	bf00      	nop
 800310c:	bf00      	nop
 800310e:	e7fd      	b.n	800310c <xTaskCheckForTimeOut+0x28>
    configASSERT( pxTicksToWait );
 8003110:	683b      	ldr	r3, [r7, #0]
 8003112:	2b00      	cmp	r3, #0
 8003114:	d10d      	bne.n	8003132 <xTaskCheckForTimeOut+0x4e>
    __asm volatile
 8003116:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800311a:	b672      	cpsid	i
 800311c:	f383 8811 	msr	BASEPRI, r3
 8003120:	f3bf 8f6f 	isb	sy
 8003124:	f3bf 8f4f 	dsb	sy
 8003128:	b662      	cpsie	i
 800312a:	60fb      	str	r3, [r7, #12]
}
 800312c:	bf00      	nop
 800312e:	bf00      	nop
 8003130:	e7fd      	b.n	800312e <xTaskCheckForTimeOut+0x4a>

    taskENTER_CRITICAL();
 8003132:	f000 fdaf 	bl	8003c94 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 8003136:	4b21      	ldr	r3, [pc, #132]	@ (80031bc <xTaskCheckForTimeOut+0xd8>)
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	685b      	ldr	r3, [r3, #4]
 8003140:	69ba      	ldr	r2, [r7, #24]
 8003142:	1ad3      	subs	r3, r2, r3
 8003144:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 8003146:	683b      	ldr	r3, [r7, #0]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800314e:	d102      	bne.n	8003156 <xTaskCheckForTimeOut+0x72>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8003150:	2300      	movs	r3, #0
 8003152:	61fb      	str	r3, [r7, #28]
 8003154:	e026      	b.n	80031a4 <xTaskCheckForTimeOut+0xc0>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) )
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681a      	ldr	r2, [r3, #0]
 800315a:	4b19      	ldr	r3, [pc, #100]	@ (80031c0 <xTaskCheckForTimeOut+0xdc>)
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	429a      	cmp	r2, r3
 8003160:	d00a      	beq.n	8003178 <xTaskCheckForTimeOut+0x94>
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	685b      	ldr	r3, [r3, #4]
 8003166:	69ba      	ldr	r2, [r7, #24]
 8003168:	429a      	cmp	r2, r3
 800316a:	d305      	bcc.n	8003178 <xTaskCheckForTimeOut+0x94>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 800316c:	2301      	movs	r3, #1
 800316e:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 8003170:	683b      	ldr	r3, [r7, #0]
 8003172:	2200      	movs	r2, #0
 8003174:	601a      	str	r2, [r3, #0]
 8003176:	e015      	b.n	80031a4 <xTaskCheckForTimeOut+0xc0>
        }
        else if( xElapsedTime < *pxTicksToWait )
 8003178:	683b      	ldr	r3, [r7, #0]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	697a      	ldr	r2, [r7, #20]
 800317e:	429a      	cmp	r2, r3
 8003180:	d20b      	bcs.n	800319a <xTaskCheckForTimeOut+0xb6>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 8003182:	683b      	ldr	r3, [r7, #0]
 8003184:	681a      	ldr	r2, [r3, #0]
 8003186:	697b      	ldr	r3, [r7, #20]
 8003188:	1ad2      	subs	r2, r2, r3
 800318a:	683b      	ldr	r3, [r7, #0]
 800318c:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 800318e:	6878      	ldr	r0, [r7, #4]
 8003190:	f7ff ff90 	bl	80030b4 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8003194:	2300      	movs	r3, #0
 8003196:	61fb      	str	r3, [r7, #28]
 8003198:	e004      	b.n	80031a4 <xTaskCheckForTimeOut+0xc0>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 800319a:	683b      	ldr	r3, [r7, #0]
 800319c:	2200      	movs	r2, #0
 800319e:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 80031a0:	2301      	movs	r3, #1
 80031a2:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 80031a4:	f000 fdac 	bl	8003d00 <vPortExitCritical>

    traceRETURN_xTaskCheckForTimeOut( xReturn );
 80031a8:	69fb      	ldr	r3, [r7, #28]
 80031aa:	4619      	mov	r1, r3
 80031ac:	20e8      	movs	r0, #232	@ 0xe8
 80031ae:	f002 fc85 	bl	8005abc <SEGGER_SYSVIEW_RecordEndCallU32>

    return xReturn;
 80031b2:	69fb      	ldr	r3, [r7, #28]
}
 80031b4:	4618      	mov	r0, r3
 80031b6:	3720      	adds	r7, #32
 80031b8:	46bd      	mov	sp, r7
 80031ba:	bd80      	pop	{r7, pc}
 80031bc:	200001f8 	.word	0x200001f8
 80031c0:	2000020c 	.word	0x2000020c

080031c4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80031c4:	b580      	push	{r7, lr}
 80031c6:	af00      	add	r7, sp, #0
    traceENTER_vTaskMissedYield();

    /* Must be called from within a critical section. */
    xYieldPendings[ portGET_CORE_ID() ] = pdTRUE;
 80031c8:	4b03      	ldr	r3, [pc, #12]	@ (80031d8 <vTaskMissedYield+0x14>)
 80031ca:	2201      	movs	r2, #1
 80031cc:	601a      	str	r2, [r3, #0]

    traceRETURN_vTaskMissedYield();
 80031ce:	20e9      	movs	r0, #233	@ 0xe9
 80031d0:	f002 fc38 	bl	8005a44 <SEGGER_SYSVIEW_RecordEndCall>
}
 80031d4:	bf00      	nop
 80031d6:	bd80      	pop	{r7, pc}
 80031d8:	20000208 	.word	0x20000208

080031dc <prvIdleTask>:
 * void prvIdleTask( void *pvParameters );
 *
 */

static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80031dc:	b580      	push	{r7, lr}
 80031de:	b082      	sub	sp, #8
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	6078      	str	r0, [r7, #4]

    for( ; configCONTROL_INFINITE_LOOP(); )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 80031e4:	f000 f84c 	bl	8003280 <prvCheckTasksWaitingTermination>
        {
            /* If we are not using preemption we keep forcing a task switch to
             * see if any other task has become available.  If we are using
             * preemption we don't need to do this as any task becoming available
             * will automatically get the processor anyway. */
            taskYIELD();
 80031e8:	4b04      	ldr	r3, [pc, #16]	@ (80031fc <prvIdleTask+0x20>)
 80031ea:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80031ee:	601a      	str	r2, [r3, #0]
 80031f0:	f3bf 8f4f 	dsb	sy
 80031f4:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 80031f8:	bf00      	nop
 80031fa:	e7f3      	b.n	80031e4 <prvIdleTask+0x8>
 80031fc:	e000ed04 	.word	0xe000ed04

08003200 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003200:	b580      	push	{r7, lr}
 8003202:	b082      	sub	sp, #8
 8003204:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003206:	2300      	movs	r3, #0
 8003208:	607b      	str	r3, [r7, #4]
 800320a:	e00c      	b.n	8003226 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800320c:	687a      	ldr	r2, [r7, #4]
 800320e:	4613      	mov	r3, r2
 8003210:	009b      	lsls	r3, r3, #2
 8003212:	4413      	add	r3, r2
 8003214:	009b      	lsls	r3, r3, #2
 8003216:	4a12      	ldr	r2, [pc, #72]	@ (8003260 <prvInitialiseTaskLists+0x60>)
 8003218:	4413      	add	r3, r2
 800321a:	4618      	mov	r0, r3
 800321c:	f7fe fd52 	bl	8001cc4 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	3301      	adds	r3, #1
 8003224:	607b      	str	r3, [r7, #4]
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	2b04      	cmp	r3, #4
 800322a:	d9ef      	bls.n	800320c <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 800322c:	480d      	ldr	r0, [pc, #52]	@ (8003264 <prvInitialiseTaskLists+0x64>)
 800322e:	f7fe fd49 	bl	8001cc4 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8003232:	480d      	ldr	r0, [pc, #52]	@ (8003268 <prvInitialiseTaskLists+0x68>)
 8003234:	f7fe fd46 	bl	8001cc4 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8003238:	480c      	ldr	r0, [pc, #48]	@ (800326c <prvInitialiseTaskLists+0x6c>)
 800323a:	f7fe fd43 	bl	8001cc4 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
    {
        vListInitialise( &xTasksWaitingTermination );
 800323e:	480c      	ldr	r0, [pc, #48]	@ (8003270 <prvInitialiseTaskLists+0x70>)
 8003240:	f7fe fd40 	bl	8001cc4 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        vListInitialise( &xSuspendedTaskList );
 8003244:	480b      	ldr	r0, [pc, #44]	@ (8003274 <prvInitialiseTaskLists+0x74>)
 8003246:	f7fe fd3d 	bl	8001cc4 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 800324a:	4b0b      	ldr	r3, [pc, #44]	@ (8003278 <prvInitialiseTaskLists+0x78>)
 800324c:	4a05      	ldr	r2, [pc, #20]	@ (8003264 <prvInitialiseTaskLists+0x64>)
 800324e:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003250:	4b0a      	ldr	r3, [pc, #40]	@ (800327c <prvInitialiseTaskLists+0x7c>)
 8003252:	4a05      	ldr	r2, [pc, #20]	@ (8003268 <prvInitialiseTaskLists+0x68>)
 8003254:	601a      	str	r2, [r3, #0]
}
 8003256:	bf00      	nop
 8003258:	3708      	adds	r7, #8
 800325a:	46bd      	mov	sp, r7
 800325c:	bd80      	pop	{r7, pc}
 800325e:	bf00      	nop
 8003260:	20000120 	.word	0x20000120
 8003264:	20000184 	.word	0x20000184
 8003268:	20000198 	.word	0x20000198
 800326c:	200001b4 	.word	0x200001b4
 8003270:	200001c8 	.word	0x200001c8
 8003274:	200001e0 	.word	0x200001e0
 8003278:	200001ac 	.word	0x200001ac
 800327c:	200001b0 	.word	0x200001b0

08003280 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003280:	b580      	push	{r7, lr}
 8003282:	b082      	sub	sp, #8
 8003284:	af00      	add	r7, sp, #0
    {
        TCB_t * pxTCB;

        /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
         * being called too often in the idle task. */
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003286:	e019      	b.n	80032bc <prvCheckTasksWaitingTermination+0x3c>
        {
            #if ( configNUMBER_OF_CORES == 1 )
            {
                taskENTER_CRITICAL();
 8003288:	f000 fd04 	bl	8003c94 <vPortEnterCritical>
                {
                    {
                        /* MISRA Ref 11.5.3 [Void pointer assignment] */
                        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                        /* coverity[misra_c_2012_rule_11_5_violation] */
                        pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 800328c:	4b10      	ldr	r3, [pc, #64]	@ (80032d0 <prvCheckTasksWaitingTermination+0x50>)
 800328e:	68db      	ldr	r3, [r3, #12]
 8003290:	68db      	ldr	r3, [r3, #12]
 8003292:	607b      	str	r3, [r7, #4]
                        ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	3304      	adds	r3, #4
 8003298:	4618      	mov	r0, r3
 800329a:	f7fe fd7f 	bl	8001d9c <uxListRemove>
                        --uxCurrentNumberOfTasks;
 800329e:	4b0d      	ldr	r3, [pc, #52]	@ (80032d4 <prvCheckTasksWaitingTermination+0x54>)
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	3b01      	subs	r3, #1
 80032a4:	4a0b      	ldr	r2, [pc, #44]	@ (80032d4 <prvCheckTasksWaitingTermination+0x54>)
 80032a6:	6013      	str	r3, [r2, #0]
                        --uxDeletedTasksWaitingCleanUp;
 80032a8:	4b0b      	ldr	r3, [pc, #44]	@ (80032d8 <prvCheckTasksWaitingTermination+0x58>)
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	3b01      	subs	r3, #1
 80032ae:	4a0a      	ldr	r2, [pc, #40]	@ (80032d8 <prvCheckTasksWaitingTermination+0x58>)
 80032b0:	6013      	str	r3, [r2, #0]
                    }
                }
                taskEXIT_CRITICAL();
 80032b2:	f000 fd25 	bl	8003d00 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 80032b6:	6878      	ldr	r0, [r7, #4]
 80032b8:	f000 f810 	bl	80032dc <prvDeleteTCB>
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80032bc:	4b06      	ldr	r3, [pc, #24]	@ (80032d8 <prvCheckTasksWaitingTermination+0x58>)
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d1e1      	bne.n	8003288 <prvCheckTasksWaitingTermination+0x8>
            }
            #endif /* #if( configNUMBER_OF_CORES == 1 ) */
        }
    }
    #endif /* INCLUDE_vTaskDelete */
}
 80032c4:	bf00      	nop
 80032c6:	bf00      	nop
 80032c8:	3708      	adds	r7, #8
 80032ca:	46bd      	mov	sp, r7
 80032cc:	bd80      	pop	{r7, pc}
 80032ce:	bf00      	nop
 80032d0:	200001c8 	.word	0x200001c8
 80032d4:	200001f4 	.word	0x200001f4
 80032d8:	200001dc 	.word	0x200001dc

080032dc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 80032dc:	b580      	push	{r7, lr}
 80032de:	b082      	sub	sp, #8
 80032e0:	af00      	add	r7, sp, #0
 80032e2:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
        {
            /* The task can only have been allocated dynamically - free both
             * the stack and TCB. */
            vPortFreeStack( pxTCB->pxStack );
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032e8:	4618      	mov	r0, r3
 80032ea:	f000 ff53 	bl	8004194 <vPortFree>
            vPortFree( pxTCB );
 80032ee:	6878      	ldr	r0, [r7, #4]
 80032f0:	f000 ff50 	bl	8004194 <vPortFree>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 80032f4:	bf00      	nop
 80032f6:	3708      	adds	r7, #8
 80032f8:	46bd      	mov	sp, r7
 80032fa:	bd80      	pop	{r7, pc}

080032fc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80032fc:	b480      	push	{r7}
 80032fe:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003300:	4b0a      	ldr	r3, [pc, #40]	@ (800332c <prvResetNextTaskUnblockTime+0x30>)
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	2b00      	cmp	r3, #0
 8003308:	d104      	bne.n	8003314 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 800330a:	4b09      	ldr	r3, [pc, #36]	@ (8003330 <prvResetNextTaskUnblockTime+0x34>)
 800330c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003310:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8003312:	e005      	b.n	8003320 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003314:	4b05      	ldr	r3, [pc, #20]	@ (800332c <prvResetNextTaskUnblockTime+0x30>)
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	68db      	ldr	r3, [r3, #12]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	4a04      	ldr	r2, [pc, #16]	@ (8003330 <prvResetNextTaskUnblockTime+0x34>)
 800331e:	6013      	str	r3, [r2, #0]
}
 8003320:	bf00      	nop
 8003322:	46bd      	mov	sp, r7
 8003324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003328:	4770      	bx	lr
 800332a:	bf00      	nop
 800332c:	200001ac 	.word	0x200001ac
 8003330:	20000214 	.word	0x20000214

08003334 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8003334:	b580      	push	{r7, lr}
 8003336:	b082      	sub	sp, #8
 8003338:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        traceENTER_xTaskGetSchedulerState();

        if( xSchedulerRunning == pdFALSE )
 800333a:	4b0d      	ldr	r3, [pc, #52]	@ (8003370 <xTaskGetSchedulerState+0x3c>)
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	2b00      	cmp	r3, #0
 8003340:	d102      	bne.n	8003348 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 8003342:	2301      	movs	r3, #1
 8003344:	607b      	str	r3, [r7, #4]
 8003346:	e008      	b.n	800335a <xTaskGetSchedulerState+0x26>
        {
            #if ( configNUMBER_OF_CORES > 1 )
                taskENTER_CRITICAL();
            #endif
            {
                if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 8003348:	4b0a      	ldr	r3, [pc, #40]	@ (8003374 <xTaskGetSchedulerState+0x40>)
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	2b00      	cmp	r3, #0
 800334e:	d102      	bne.n	8003356 <xTaskGetSchedulerState+0x22>
                {
                    xReturn = taskSCHEDULER_RUNNING;
 8003350:	2302      	movs	r3, #2
 8003352:	607b      	str	r3, [r7, #4]
 8003354:	e001      	b.n	800335a <xTaskGetSchedulerState+0x26>
                }
                else
                {
                    xReturn = taskSCHEDULER_SUSPENDED;
 8003356:	2300      	movs	r3, #0
 8003358:	607b      	str	r3, [r7, #4]
            #if ( configNUMBER_OF_CORES > 1 )
                taskEXIT_CRITICAL();
            #endif
        }

        traceRETURN_xTaskGetSchedulerState( xReturn );
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	4619      	mov	r1, r3
 800335e:	20f5      	movs	r0, #245	@ 0xf5
 8003360:	f002 fbac 	bl	8005abc <SEGGER_SYSVIEW_RecordEndCallU32>

        return xReturn;
 8003364:	687b      	ldr	r3, [r7, #4]
    }
 8003366:	4618      	mov	r0, r3
 8003368:	3708      	adds	r7, #8
 800336a:	46bd      	mov	sp, r7
 800336c:	bd80      	pop	{r7, pc}
 800336e:	bf00      	nop
 8003370:	20000200 	.word	0x20000200
 8003374:	2000021c 	.word	0x2000021c

08003378 <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8003378:	b580      	push	{r7, lr}
 800337a:	b088      	sub	sp, #32
 800337c:	af00      	add	r7, sp, #0
 800337e:	6078      	str	r0, [r7, #4]
 8003380:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8003382:	4b3d      	ldr	r3, [pc, #244]	@ (8003478 <prvAddCurrentTaskToDelayedList+0x100>)
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	61fb      	str	r3, [r7, #28]
    List_t * const pxDelayedList = pxDelayedTaskList;
 8003388:	4b3c      	ldr	r3, [pc, #240]	@ (800347c <prvAddCurrentTaskToDelayedList+0x104>)
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	61bb      	str	r3, [r7, #24]
    List_t * const pxOverflowDelayedList = pxOverflowDelayedTaskList;
 800338e:	4b3c      	ldr	r3, [pc, #240]	@ (8003480 <prvAddCurrentTaskToDelayedList+0x108>)
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	617b      	str	r3, [r7, #20]
    }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003394:	4b3b      	ldr	r3, [pc, #236]	@ (8003484 <prvAddCurrentTaskToDelayedList+0x10c>)
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	3304      	adds	r3, #4
 800339a:	4618      	mov	r0, r3
 800339c:	f7fe fcfe 	bl	8001d9c <uxListRemove>
 80033a0:	4603      	mov	r3, r0
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d10b      	bne.n	80033be <prvAddCurrentTaskToDelayedList+0x46>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 80033a6:	4b37      	ldr	r3, [pc, #220]	@ (8003484 <prvAddCurrentTaskToDelayedList+0x10c>)
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033ac:	2201      	movs	r2, #1
 80033ae:	fa02 f303 	lsl.w	r3, r2, r3
 80033b2:	43da      	mvns	r2, r3
 80033b4:	4b34      	ldr	r3, [pc, #208]	@ (8003488 <prvAddCurrentTaskToDelayedList+0x110>)
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	4013      	ands	r3, r2
 80033ba:	4a33      	ldr	r2, [pc, #204]	@ (8003488 <prvAddCurrentTaskToDelayedList+0x110>)
 80033bc:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80033c4:	d124      	bne.n	8003410 <prvAddCurrentTaskToDelayedList+0x98>
 80033c6:	683b      	ldr	r3, [r7, #0]
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d021      	beq.n	8003410 <prvAddCurrentTaskToDelayedList+0x98>
        {
            /* Add the task to the suspended task list instead of a delayed task
             * list to ensure it is not woken by a timing event.  It will block
             * indefinitely. */
            listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80033cc:	4b2f      	ldr	r3, [pc, #188]	@ (800348c <prvAddCurrentTaskToDelayedList+0x114>)
 80033ce:	685b      	ldr	r3, [r3, #4]
 80033d0:	613b      	str	r3, [r7, #16]
 80033d2:	4b2c      	ldr	r3, [pc, #176]	@ (8003484 <prvAddCurrentTaskToDelayedList+0x10c>)
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	693a      	ldr	r2, [r7, #16]
 80033d8:	609a      	str	r2, [r3, #8]
 80033da:	4b2a      	ldr	r3, [pc, #168]	@ (8003484 <prvAddCurrentTaskToDelayedList+0x10c>)
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	693a      	ldr	r2, [r7, #16]
 80033e0:	6892      	ldr	r2, [r2, #8]
 80033e2:	60da      	str	r2, [r3, #12]
 80033e4:	4b27      	ldr	r3, [pc, #156]	@ (8003484 <prvAddCurrentTaskToDelayedList+0x10c>)
 80033e6:	681a      	ldr	r2, [r3, #0]
 80033e8:	693b      	ldr	r3, [r7, #16]
 80033ea:	689b      	ldr	r3, [r3, #8]
 80033ec:	3204      	adds	r2, #4
 80033ee:	605a      	str	r2, [r3, #4]
 80033f0:	4b24      	ldr	r3, [pc, #144]	@ (8003484 <prvAddCurrentTaskToDelayedList+0x10c>)
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	1d1a      	adds	r2, r3, #4
 80033f6:	693b      	ldr	r3, [r7, #16]
 80033f8:	609a      	str	r2, [r3, #8]
 80033fa:	4b22      	ldr	r3, [pc, #136]	@ (8003484 <prvAddCurrentTaskToDelayedList+0x10c>)
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	4a23      	ldr	r2, [pc, #140]	@ (800348c <prvAddCurrentTaskToDelayedList+0x114>)
 8003400:	615a      	str	r2, [r3, #20]
 8003402:	4b22      	ldr	r3, [pc, #136]	@ (800348c <prvAddCurrentTaskToDelayedList+0x114>)
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	3301      	adds	r3, #1
 8003408:	4a20      	ldr	r2, [pc, #128]	@ (800348c <prvAddCurrentTaskToDelayedList+0x114>)
 800340a:	6013      	str	r3, [r2, #0]
 800340c:	bf00      	nop

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
 800340e:	e02e      	b.n	800346e <prvAddCurrentTaskToDelayedList+0xf6>
            xTimeToWake = xConstTickCount + xTicksToWait;
 8003410:	69fa      	ldr	r2, [r7, #28]
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	4413      	add	r3, r2
 8003416:	60fb      	str	r3, [r7, #12]
            listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003418:	4b1a      	ldr	r3, [pc, #104]	@ (8003484 <prvAddCurrentTaskToDelayedList+0x10c>)
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	68fa      	ldr	r2, [r7, #12]
 800341e:	605a      	str	r2, [r3, #4]
            if( xTimeToWake < xConstTickCount )
 8003420:	68fa      	ldr	r2, [r7, #12]
 8003422:	69fb      	ldr	r3, [r7, #28]
 8003424:	429a      	cmp	r2, r3
 8003426:	d20d      	bcs.n	8003444 <prvAddCurrentTaskToDelayedList+0xcc>
                traceMOVED_TASK_TO_OVERFLOW_DELAYED_LIST();
 8003428:	4b16      	ldr	r3, [pc, #88]	@ (8003484 <prvAddCurrentTaskToDelayedList+0x10c>)
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	2104      	movs	r1, #4
 800342e:	4618      	mov	r0, r3
 8003430:	f002 fc7e 	bl	8005d30 <SEGGER_SYSVIEW_OnTaskStopReady>
                vListInsert( pxOverflowDelayedList, &( pxCurrentTCB->xStateListItem ) );
 8003434:	4b13      	ldr	r3, [pc, #76]	@ (8003484 <prvAddCurrentTaskToDelayedList+0x10c>)
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	3304      	adds	r3, #4
 800343a:	4619      	mov	r1, r3
 800343c:	6978      	ldr	r0, [r7, #20]
 800343e:	f7fe fc72 	bl	8001d26 <vListInsert>
}
 8003442:	e014      	b.n	800346e <prvAddCurrentTaskToDelayedList+0xf6>
                traceMOVED_TASK_TO_DELAYED_LIST();
 8003444:	4b0f      	ldr	r3, [pc, #60]	@ (8003484 <prvAddCurrentTaskToDelayedList+0x10c>)
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	2104      	movs	r1, #4
 800344a:	4618      	mov	r0, r3
 800344c:	f002 fc70 	bl	8005d30 <SEGGER_SYSVIEW_OnTaskStopReady>
                vListInsert( pxDelayedList, &( pxCurrentTCB->xStateListItem ) );
 8003450:	4b0c      	ldr	r3, [pc, #48]	@ (8003484 <prvAddCurrentTaskToDelayedList+0x10c>)
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	3304      	adds	r3, #4
 8003456:	4619      	mov	r1, r3
 8003458:	69b8      	ldr	r0, [r7, #24]
 800345a:	f7fe fc64 	bl	8001d26 <vListInsert>
                if( xTimeToWake < xNextTaskUnblockTime )
 800345e:	4b0c      	ldr	r3, [pc, #48]	@ (8003490 <prvAddCurrentTaskToDelayedList+0x118>)
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	68fa      	ldr	r2, [r7, #12]
 8003464:	429a      	cmp	r2, r3
 8003466:	d202      	bcs.n	800346e <prvAddCurrentTaskToDelayedList+0xf6>
                    xNextTaskUnblockTime = xTimeToWake;
 8003468:	4a09      	ldr	r2, [pc, #36]	@ (8003490 <prvAddCurrentTaskToDelayedList+0x118>)
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	6013      	str	r3, [r2, #0]
}
 800346e:	bf00      	nop
 8003470:	3720      	adds	r7, #32
 8003472:	46bd      	mov	sp, r7
 8003474:	bd80      	pop	{r7, pc}
 8003476:	bf00      	nop
 8003478:	200001f8 	.word	0x200001f8
 800347c:	200001ac 	.word	0x200001ac
 8003480:	200001b0 	.word	0x200001b0
 8003484:	2000011c 	.word	0x2000011c
 8003488:	200001fc 	.word	0x200001fc
 800348c:	200001e0 	.word	0x200001e0
 8003490:	20000214 	.word	0x20000214

08003494 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 8003494:	b580      	push	{r7, lr}
 8003496:	b084      	sub	sp, #16
 8003498:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 800349a:	2300      	movs	r3, #0
 800349c:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 800349e:	f000 fa63 	bl	8003968 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 80034a2:	4b16      	ldr	r3, [pc, #88]	@ (80034fc <xTimerCreateTimerTask+0x68>)
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d00b      	beq.n	80034c2 <xTimerCreateTimerTask+0x2e>
                        xReturn = pdPASS;
                    }
                }
                #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
                {
                    xReturn = xTaskCreate( &prvTimerTask,
 80034aa:	4b15      	ldr	r3, [pc, #84]	@ (8003500 <xTimerCreateTimerTask+0x6c>)
 80034ac:	9301      	str	r3, [sp, #4]
 80034ae:	2302      	movs	r3, #2
 80034b0:	9300      	str	r3, [sp, #0]
 80034b2:	2300      	movs	r3, #0
 80034b4:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80034b8:	4912      	ldr	r1, [pc, #72]	@ (8003504 <xTimerCreateTimerTask+0x70>)
 80034ba:	4813      	ldr	r0, [pc, #76]	@ (8003508 <xTimerCreateTimerTask+0x74>)
 80034bc:	f7fe ffe5 	bl	800248a <xTaskCreate>
 80034c0:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d10d      	bne.n	80034e4 <xTimerCreateTimerTask+0x50>
    __asm volatile
 80034c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80034cc:	b672      	cpsid	i
 80034ce:	f383 8811 	msr	BASEPRI, r3
 80034d2:	f3bf 8f6f 	isb	sy
 80034d6:	f3bf 8f4f 	dsb	sy
 80034da:	b662      	cpsie	i
 80034dc:	603b      	str	r3, [r7, #0]
}
 80034de:	bf00      	nop
 80034e0:	bf00      	nop
 80034e2:	e7fd      	b.n	80034e0 <xTimerCreateTimerTask+0x4c>

        traceRETURN_xTimerCreateTimerTask( xReturn );
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	4619      	mov	r1, r3
 80034e8:	f44f 7084 	mov.w	r0, #264	@ 0x108
 80034ec:	f002 fae6 	bl	8005abc <SEGGER_SYSVIEW_RecordEndCallU32>

        return xReturn;
 80034f0:	687b      	ldr	r3, [r7, #4]
    }
 80034f2:	4618      	mov	r0, r3
 80034f4:	3708      	adds	r7, #8
 80034f6:	46bd      	mov	sp, r7
 80034f8:	bd80      	pop	{r7, pc}
 80034fa:	bf00      	nop
 80034fc:	20000250 	.word	0x20000250
 8003500:	20000254 	.word	0x20000254
 8003504:	08006a94 	.word	0x08006a94
 8003508:	080035b1 	.word	0x080035b1

0800350c <prvReloadTimer>:
/*-----------------------------------------------------------*/

    static void prvReloadTimer( Timer_t * const pxTimer,
                                TickType_t xExpiredTime,
                                const TickType_t xTimeNow )
    {
 800350c:	b580      	push	{r7, lr}
 800350e:	b084      	sub	sp, #16
 8003510:	af00      	add	r7, sp, #0
 8003512:	60f8      	str	r0, [r7, #12]
 8003514:	60b9      	str	r1, [r7, #8]
 8003516:	607a      	str	r2, [r7, #4]
        /* Insert the timer into the appropriate list for the next expiry time.
         * If the next expiry time has already passed, advance the expiry time,
         * call the callback function, and try again. */
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8003518:	e008      	b.n	800352c <prvReloadTimer+0x20>
        {
            /* Advance the expiry time. */
            xExpiredTime += pxTimer->xTimerPeriodInTicks;
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	699b      	ldr	r3, [r3, #24]
 800351e:	68ba      	ldr	r2, [r7, #8]
 8003520:	4413      	add	r3, r2
 8003522:	60bb      	str	r3, [r7, #8]

            /* Call the timer callback. */
            traceTIMER_EXPIRED( pxTimer );
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	6a1b      	ldr	r3, [r3, #32]
 8003528:	68f8      	ldr	r0, [r7, #12]
 800352a:	4798      	blx	r3
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	699a      	ldr	r2, [r3, #24]
 8003530:	68bb      	ldr	r3, [r7, #8]
 8003532:	18d1      	adds	r1, r2, r3
 8003534:	68bb      	ldr	r3, [r7, #8]
 8003536:	687a      	ldr	r2, [r7, #4]
 8003538:	68f8      	ldr	r0, [r7, #12]
 800353a:	f000 f8df 	bl	80036fc <prvInsertTimerInActiveList>
 800353e:	4603      	mov	r3, r0
 8003540:	2b00      	cmp	r3, #0
 8003542:	d1ea      	bne.n	800351a <prvReloadTimer+0xe>
        }
    }
 8003544:	bf00      	nop
 8003546:	bf00      	nop
 8003548:	3710      	adds	r7, #16
 800354a:	46bd      	mov	sp, r7
 800354c:	bd80      	pop	{r7, pc}
	...

08003550 <prvProcessExpiredTimer>:
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 8003550:	b580      	push	{r7, lr}
 8003552:	b084      	sub	sp, #16
 8003554:	af00      	add	r7, sp, #0
 8003556:	6078      	str	r0, [r7, #4]
 8003558:	6039      	str	r1, [r7, #0]
        /* MISRA Ref 11.5.3 [Void pointer assignment] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
        /* coverity[misra_c_2012_rule_11_5_violation] */
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800355a:	4b14      	ldr	r3, [pc, #80]	@ (80035ac <prvProcessExpiredTimer+0x5c>)
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	68db      	ldr	r3, [r3, #12]
 8003560:	68db      	ldr	r3, [r3, #12]
 8003562:	60fb      	str	r3, [r7, #12]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	3304      	adds	r3, #4
 8003568:	4618      	mov	r0, r3
 800356a:	f7fe fc17 	bl	8001d9c <uxListRemove>

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0U )
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003574:	f003 0304 	and.w	r3, r3, #4
 8003578:	2b00      	cmp	r3, #0
 800357a:	d005      	beq.n	8003588 <prvProcessExpiredTimer+0x38>
        {
            prvReloadTimer( pxTimer, xNextExpireTime, xTimeNow );
 800357c:	683a      	ldr	r2, [r7, #0]
 800357e:	6879      	ldr	r1, [r7, #4]
 8003580:	68f8      	ldr	r0, [r7, #12]
 8003582:	f7ff ffc3 	bl	800350c <prvReloadTimer>
 8003586:	e008      	b.n	800359a <prvProcessExpiredTimer+0x4a>
        }
        else
        {
            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800358e:	f023 0301 	bic.w	r3, r3, #1
 8003592:	b2da      	uxtb	r2, r3
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
        }

        /* Call the timer callback. */
        traceTIMER_EXPIRED( pxTimer );
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	6a1b      	ldr	r3, [r3, #32]
 800359e:	68f8      	ldr	r0, [r7, #12]
 80035a0:	4798      	blx	r3
    }
 80035a2:	bf00      	nop
 80035a4:	3710      	adds	r7, #16
 80035a6:	46bd      	mov	sp, r7
 80035a8:	bd80      	pop	{r7, pc}
 80035aa:	bf00      	nop
 80035ac:	20000248 	.word	0x20000248

080035b0 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 80035b0:	b580      	push	{r7, lr}
 80035b2:	b084      	sub	sp, #16
 80035b4:	af00      	add	r7, sp, #0
 80035b6:	6078      	str	r0, [r7, #4]

        for( ; configCONTROL_INFINITE_LOOP(); )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80035b8:	f107 0308 	add.w	r3, r7, #8
 80035bc:	4618      	mov	r0, r3
 80035be:	f000 f859 	bl	8003674 <prvGetNextExpireTime>
 80035c2:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80035c4:	68bb      	ldr	r3, [r7, #8]
 80035c6:	4619      	mov	r1, r3
 80035c8:	68f8      	ldr	r0, [r7, #12]
 80035ca:	f000 f805 	bl	80035d8 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 80035ce:	f000 f8d7 	bl	8003780 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80035d2:	bf00      	nop
 80035d4:	e7f0      	b.n	80035b8 <prvTimerTask+0x8>
	...

080035d8 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 80035d8:	b580      	push	{r7, lr}
 80035da:	b084      	sub	sp, #16
 80035dc:	af00      	add	r7, sp, #0
 80035de:	6078      	str	r0, [r7, #4]
 80035e0:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 80035e2:	f7ff f965 	bl	80028b0 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80035e6:	f107 0308 	add.w	r3, r7, #8
 80035ea:	4618      	mov	r0, r3
 80035ec:	f000 f866 	bl	80036bc <prvSampleTimeNow>
 80035f0:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 80035f2:	68bb      	ldr	r3, [r7, #8]
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d130      	bne.n	800365a <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80035f8:	683b      	ldr	r3, [r7, #0]
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d10a      	bne.n	8003614 <prvProcessTimerOrBlockTask+0x3c>
 80035fe:	687a      	ldr	r2, [r7, #4]
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	429a      	cmp	r2, r3
 8003604:	d806      	bhi.n	8003614 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 8003606:	f7ff f961 	bl	80028cc <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800360a:	68f9      	ldr	r1, [r7, #12]
 800360c:	6878      	ldr	r0, [r7, #4]
 800360e:	f7ff ff9f 	bl	8003550 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 8003612:	e024      	b.n	800365e <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 8003614:	683b      	ldr	r3, [r7, #0]
 8003616:	2b00      	cmp	r3, #0
 8003618:	d008      	beq.n	800362c <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800361a:	4b13      	ldr	r3, [pc, #76]	@ (8003668 <prvProcessTimerOrBlockTask+0x90>)
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	2b00      	cmp	r3, #0
 8003622:	d101      	bne.n	8003628 <prvProcessTimerOrBlockTask+0x50>
 8003624:	2301      	movs	r3, #1
 8003626:	e000      	b.n	800362a <prvProcessTimerOrBlockTask+0x52>
 8003628:	2300      	movs	r3, #0
 800362a:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800362c:	4b0f      	ldr	r3, [pc, #60]	@ (800366c <prvProcessTimerOrBlockTask+0x94>)
 800362e:	6818      	ldr	r0, [r3, #0]
 8003630:	687a      	ldr	r2, [r7, #4]
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	1ad3      	subs	r3, r2, r3
 8003636:	683a      	ldr	r2, [r7, #0]
 8003638:	4619      	mov	r1, r3
 800363a:	f7fe feb3 	bl	80023a4 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 800363e:	f7ff f945 	bl	80028cc <xTaskResumeAll>
 8003642:	4603      	mov	r3, r0
 8003644:	2b00      	cmp	r3, #0
 8003646:	d10a      	bne.n	800365e <prvProcessTimerOrBlockTask+0x86>
                        taskYIELD_WITHIN_API();
 8003648:	4b09      	ldr	r3, [pc, #36]	@ (8003670 <prvProcessTimerOrBlockTask+0x98>)
 800364a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800364e:	601a      	str	r2, [r3, #0]
 8003650:	f3bf 8f4f 	dsb	sy
 8003654:	f3bf 8f6f 	isb	sy
    }
 8003658:	e001      	b.n	800365e <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 800365a:	f7ff f937 	bl	80028cc <xTaskResumeAll>
    }
 800365e:	bf00      	nop
 8003660:	3710      	adds	r7, #16
 8003662:	46bd      	mov	sp, r7
 8003664:	bd80      	pop	{r7, pc}
 8003666:	bf00      	nop
 8003668:	2000024c 	.word	0x2000024c
 800366c:	20000250 	.word	0x20000250
 8003670:	e000ed04 	.word	0xe000ed04

08003674 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 8003674:	b480      	push	{r7}
 8003676:	b085      	sub	sp, #20
 8003678:	af00      	add	r7, sp, #0
 800367a:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800367c:	4b0e      	ldr	r3, [pc, #56]	@ (80036b8 <prvGetNextExpireTime+0x44>)
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	2b00      	cmp	r3, #0
 8003684:	d101      	bne.n	800368a <prvGetNextExpireTime+0x16>
 8003686:	2201      	movs	r2, #1
 8003688:	e000      	b.n	800368c <prvGetNextExpireTime+0x18>
 800368a:	2200      	movs	r2, #0
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	2b00      	cmp	r3, #0
 8003696:	d105      	bne.n	80036a4 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003698:	4b07      	ldr	r3, [pc, #28]	@ (80036b8 <prvGetNextExpireTime+0x44>)
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	68db      	ldr	r3, [r3, #12]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	60fb      	str	r3, [r7, #12]
 80036a2:	e001      	b.n	80036a8 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 80036a4:	2300      	movs	r3, #0
 80036a6:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 80036a8:	68fb      	ldr	r3, [r7, #12]
    }
 80036aa:	4618      	mov	r0, r3
 80036ac:	3714      	adds	r7, #20
 80036ae:	46bd      	mov	sp, r7
 80036b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b4:	4770      	bx	lr
 80036b6:	bf00      	nop
 80036b8:	20000248 	.word	0x20000248

080036bc <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 80036bc:	b580      	push	{r7, lr}
 80036be:	b084      	sub	sp, #16
 80036c0:	af00      	add	r7, sp, #0
 80036c2:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U;

        xTimeNow = xTaskGetTickCount();
 80036c4:	f7ff fa06 	bl	8002ad4 <xTaskGetTickCount>
 80036c8:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 80036ca:	4b0b      	ldr	r3, [pc, #44]	@ (80036f8 <prvSampleTimeNow+0x3c>)
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	68fa      	ldr	r2, [r7, #12]
 80036d0:	429a      	cmp	r2, r3
 80036d2:	d205      	bcs.n	80036e0 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 80036d4:	f000 f922 	bl	800391c <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	2201      	movs	r2, #1
 80036dc:	601a      	str	r2, [r3, #0]
 80036de:	e002      	b.n	80036e6 <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	2200      	movs	r2, #0
 80036e4:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 80036e6:	4a04      	ldr	r2, [pc, #16]	@ (80036f8 <prvSampleTimeNow+0x3c>)
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 80036ec:	68fb      	ldr	r3, [r7, #12]
    }
 80036ee:	4618      	mov	r0, r3
 80036f0:	3710      	adds	r7, #16
 80036f2:	46bd      	mov	sp, r7
 80036f4:	bd80      	pop	{r7, pc}
 80036f6:	bf00      	nop
 80036f8:	20000258 	.word	0x20000258

080036fc <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 80036fc:	b580      	push	{r7, lr}
 80036fe:	b086      	sub	sp, #24
 8003700:	af00      	add	r7, sp, #0
 8003702:	60f8      	str	r0, [r7, #12]
 8003704:	60b9      	str	r1, [r7, #8]
 8003706:	607a      	str	r2, [r7, #4]
 8003708:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 800370a:	2300      	movs	r3, #0
 800370c:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	68ba      	ldr	r2, [r7, #8]
 8003712:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	68fa      	ldr	r2, [r7, #12]
 8003718:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 800371a:	68ba      	ldr	r2, [r7, #8]
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	429a      	cmp	r2, r3
 8003720:	d812      	bhi.n	8003748 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks )
 8003722:	687a      	ldr	r2, [r7, #4]
 8003724:	683b      	ldr	r3, [r7, #0]
 8003726:	1ad2      	subs	r2, r2, r3
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	699b      	ldr	r3, [r3, #24]
 800372c:	429a      	cmp	r2, r3
 800372e:	d302      	bcc.n	8003736 <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 8003730:	2301      	movs	r3, #1
 8003732:	617b      	str	r3, [r7, #20]
 8003734:	e01b      	b.n	800376e <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8003736:	4b10      	ldr	r3, [pc, #64]	@ (8003778 <prvInsertTimerInActiveList+0x7c>)
 8003738:	681a      	ldr	r2, [r3, #0]
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	3304      	adds	r3, #4
 800373e:	4619      	mov	r1, r3
 8003740:	4610      	mov	r0, r2
 8003742:	f7fe faf0 	bl	8001d26 <vListInsert>
 8003746:	e012      	b.n	800376e <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8003748:	687a      	ldr	r2, [r7, #4]
 800374a:	683b      	ldr	r3, [r7, #0]
 800374c:	429a      	cmp	r2, r3
 800374e:	d206      	bcs.n	800375e <prvInsertTimerInActiveList+0x62>
 8003750:	68ba      	ldr	r2, [r7, #8]
 8003752:	683b      	ldr	r3, [r7, #0]
 8003754:	429a      	cmp	r2, r3
 8003756:	d302      	bcc.n	800375e <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 8003758:	2301      	movs	r3, #1
 800375a:	617b      	str	r3, [r7, #20]
 800375c:	e007      	b.n	800376e <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800375e:	4b07      	ldr	r3, [pc, #28]	@ (800377c <prvInsertTimerInActiveList+0x80>)
 8003760:	681a      	ldr	r2, [r3, #0]
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	3304      	adds	r3, #4
 8003766:	4619      	mov	r1, r3
 8003768:	4610      	mov	r0, r2
 800376a:	f7fe fadc 	bl	8001d26 <vListInsert>
            }
        }

        return xProcessTimerNow;
 800376e:	697b      	ldr	r3, [r7, #20]
    }
 8003770:	4618      	mov	r0, r3
 8003772:	3718      	adds	r7, #24
 8003774:	46bd      	mov	sp, r7
 8003776:	bd80      	pop	{r7, pc}
 8003778:	2000024c 	.word	0x2000024c
 800377c:	20000248 	.word	0x20000248

08003780 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 8003780:	b580      	push	{r7, lr}
 8003782:	b088      	sub	sp, #32
 8003784:	af00      	add	r7, sp, #0
        DaemonTaskMessage_t xMessage = { 0 };
 8003786:	f107 0308 	add.w	r3, r7, #8
 800378a:	2200      	movs	r2, #0
 800378c:	601a      	str	r2, [r3, #0]
 800378e:	605a      	str	r2, [r3, #4]
 8003790:	609a      	str	r2, [r3, #8]
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL )
 8003792:	e0af      	b.n	80038f4 <prvProcessReceivedCommands+0x174>
            }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8003794:	68bb      	ldr	r3, [r7, #8]
 8003796:	2b00      	cmp	r3, #0
 8003798:	f2c0 80ac 	blt.w	80038f4 <prvProcessReceivedCommands+0x174>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800379c:	693b      	ldr	r3, [r7, #16]
 800379e:	61fb      	str	r3, [r7, #28]

                if( pxTimer != NULL )
 80037a0:	69fb      	ldr	r3, [r7, #28]
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	f000 80a6 	beq.w	80038f4 <prvProcessReceivedCommands+0x174>
                {
                    if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE )
 80037a8:	69fb      	ldr	r3, [r7, #28]
 80037aa:	695b      	ldr	r3, [r3, #20]
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d004      	beq.n	80037ba <prvProcessReceivedCommands+0x3a>
                    {
                        /* The timer is in a list, remove it. */
                        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80037b0:	69fb      	ldr	r3, [r7, #28]
 80037b2:	3304      	adds	r3, #4
 80037b4:	4618      	mov	r0, r3
 80037b6:	f7fe faf1 	bl	8001d9c <uxListRemove>
                     *  it must be present in the function call.  prvSampleTimeNow() must be
                     *  called after the message is received from xTimerQueue so there is no
                     *  possibility of a higher priority task adding a message to the message
                     *  queue with a time that is ahead of the timer daemon task (because it
                     *  pre-empted the timer daemon task after the xTimeNow value was set). */
                    xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80037ba:	1d3b      	adds	r3, r7, #4
 80037bc:	4618      	mov	r0, r3
 80037be:	f7ff ff7d 	bl	80036bc <prvSampleTimeNow>
 80037c2:	61b8      	str	r0, [r7, #24]

                    switch( xMessage.xMessageID )
 80037c4:	68bb      	ldr	r3, [r7, #8]
 80037c6:	3b01      	subs	r3, #1
 80037c8:	2b08      	cmp	r3, #8
 80037ca:	f200 8090 	bhi.w	80038ee <prvProcessReceivedCommands+0x16e>
 80037ce:	a201      	add	r2, pc, #4	@ (adr r2, 80037d4 <prvProcessReceivedCommands+0x54>)
 80037d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037d4:	080037f9 	.word	0x080037f9
 80037d8:	080037f9 	.word	0x080037f9
 80037dc:	08003861 	.word	0x08003861
 80037e0:	08003875 	.word	0x08003875
 80037e4:	080038c5 	.word	0x080038c5
 80037e8:	080037f9 	.word	0x080037f9
 80037ec:	080037f9 	.word	0x080037f9
 80037f0:	08003861 	.word	0x08003861
 80037f4:	08003875 	.word	0x08003875
                        case tmrCOMMAND_START:
                        case tmrCOMMAND_START_FROM_ISR:
                        case tmrCOMMAND_RESET:
                        case tmrCOMMAND_RESET_FROM_ISR:
                            /* Start or restart a timer. */
                            pxTimer->ucStatus |= ( uint8_t ) tmrSTATUS_IS_ACTIVE;
 80037f8:	69fb      	ldr	r3, [r7, #28]
 80037fa:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80037fe:	f043 0301 	orr.w	r3, r3, #1
 8003802:	b2da      	uxtb	r2, r3
 8003804:	69fb      	ldr	r3, [r7, #28]
 8003806:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

                            if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800380a:	68fa      	ldr	r2, [r7, #12]
 800380c:	69fb      	ldr	r3, [r7, #28]
 800380e:	699b      	ldr	r3, [r3, #24]
 8003810:	18d1      	adds	r1, r2, r3
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	69ba      	ldr	r2, [r7, #24]
 8003816:	69f8      	ldr	r0, [r7, #28]
 8003818:	f7ff ff70 	bl	80036fc <prvInsertTimerInActiveList>
 800381c:	4603      	mov	r3, r0
 800381e:	2b00      	cmp	r3, #0
 8003820:	d067      	beq.n	80038f2 <prvProcessReceivedCommands+0x172>
                            {
                                /* The timer expired before it was added to the active
                                 * timer list.  Process it now. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0U )
 8003822:	69fb      	ldr	r3, [r7, #28]
 8003824:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003828:	f003 0304 	and.w	r3, r3, #4
 800382c:	2b00      	cmp	r3, #0
 800382e:	d009      	beq.n	8003844 <prvProcessReceivedCommands+0xc4>
                                {
                                    prvReloadTimer( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow );
 8003830:	68fa      	ldr	r2, [r7, #12]
 8003832:	69fb      	ldr	r3, [r7, #28]
 8003834:	699b      	ldr	r3, [r3, #24]
 8003836:	4413      	add	r3, r2
 8003838:	69ba      	ldr	r2, [r7, #24]
 800383a:	4619      	mov	r1, r3
 800383c:	69f8      	ldr	r0, [r7, #28]
 800383e:	f7ff fe65 	bl	800350c <prvReloadTimer>
 8003842:	e008      	b.n	8003856 <prvProcessReceivedCommands+0xd6>
                                }
                                else
                                {
                                    pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8003844:	69fb      	ldr	r3, [r7, #28]
 8003846:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800384a:	f023 0301 	bic.w	r3, r3, #1
 800384e:	b2da      	uxtb	r2, r3
 8003850:	69fb      	ldr	r3, [r7, #28]
 8003852:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                                }

                                /* Call the timer callback. */
                                traceTIMER_EXPIRED( pxTimer );
                                pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003856:	69fb      	ldr	r3, [r7, #28]
 8003858:	6a1b      	ldr	r3, [r3, #32]
 800385a:	69f8      	ldr	r0, [r7, #28]
 800385c:	4798      	blx	r3
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            break;
 800385e:	e048      	b.n	80038f2 <prvProcessReceivedCommands+0x172>

                        case tmrCOMMAND_STOP:
                        case tmrCOMMAND_STOP_FROM_ISR:
                            /* The timer has already been removed from the active list. */
                            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8003860:	69fb      	ldr	r3, [r7, #28]
 8003862:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003866:	f023 0301 	bic.w	r3, r3, #1
 800386a:	b2da      	uxtb	r2, r3
 800386c:	69fb      	ldr	r3, [r7, #28]
 800386e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                            break;
 8003872:	e03f      	b.n	80038f4 <prvProcessReceivedCommands+0x174>

                        case tmrCOMMAND_CHANGE_PERIOD:
                        case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                            pxTimer->ucStatus |= ( uint8_t ) tmrSTATUS_IS_ACTIVE;
 8003874:	69fb      	ldr	r3, [r7, #28]
 8003876:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800387a:	f043 0301 	orr.w	r3, r3, #1
 800387e:	b2da      	uxtb	r2, r3
 8003880:	69fb      	ldr	r3, [r7, #28]
 8003882:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                            pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8003886:	68fa      	ldr	r2, [r7, #12]
 8003888:	69fb      	ldr	r3, [r7, #28]
 800388a:	619a      	str	r2, [r3, #24]
                            configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800388c:	69fb      	ldr	r3, [r7, #28]
 800388e:	699b      	ldr	r3, [r3, #24]
 8003890:	2b00      	cmp	r3, #0
 8003892:	d10d      	bne.n	80038b0 <prvProcessReceivedCommands+0x130>
    __asm volatile
 8003894:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003898:	b672      	cpsid	i
 800389a:	f383 8811 	msr	BASEPRI, r3
 800389e:	f3bf 8f6f 	isb	sy
 80038a2:	f3bf 8f4f 	dsb	sy
 80038a6:	b662      	cpsie	i
 80038a8:	617b      	str	r3, [r7, #20]
}
 80038aa:	bf00      	nop
 80038ac:	bf00      	nop
 80038ae:	e7fd      	b.n	80038ac <prvProcessReceivedCommands+0x12c>
                             * be longer or shorter than the old one.  The command time is
                             * therefore set to the current time, and as the period cannot
                             * be zero the next expiry time can only be in the future,
                             * meaning (unlike for the xTimerStart() case above) there is
                             * no fail case that needs to be handled here. */
                            ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80038b0:	69fb      	ldr	r3, [r7, #28]
 80038b2:	699a      	ldr	r2, [r3, #24]
 80038b4:	69bb      	ldr	r3, [r7, #24]
 80038b6:	18d1      	adds	r1, r2, r3
 80038b8:	69bb      	ldr	r3, [r7, #24]
 80038ba:	69ba      	ldr	r2, [r7, #24]
 80038bc:	69f8      	ldr	r0, [r7, #28]
 80038be:	f7ff ff1d 	bl	80036fc <prvInsertTimerInActiveList>
                            break;
 80038c2:	e017      	b.n	80038f4 <prvProcessReceivedCommands+0x174>
                            #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80038c4:	69fb      	ldr	r3, [r7, #28]
 80038c6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80038ca:	f003 0302 	and.w	r3, r3, #2
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d103      	bne.n	80038da <prvProcessReceivedCommands+0x15a>
                                {
                                    vPortFree( pxTimer );
 80038d2:	69f8      	ldr	r0, [r7, #28]
 80038d4:	f000 fc5e 	bl	8004194 <vPortFree>
                                 * no need to free the memory - just mark the timer as
                                 * "not active". */
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
                            }
                            #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                            break;
 80038d8:	e00c      	b.n	80038f4 <prvProcessReceivedCommands+0x174>
                                    pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 80038da:	69fb      	ldr	r3, [r7, #28]
 80038dc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80038e0:	f023 0301 	bic.w	r3, r3, #1
 80038e4:	b2da      	uxtb	r2, r3
 80038e6:	69fb      	ldr	r3, [r7, #28]
 80038e8:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                            break;
 80038ec:	e002      	b.n	80038f4 <prvProcessReceivedCommands+0x174>

                        default:
                            /* Don't expect to get here. */
                            break;
 80038ee:	bf00      	nop
 80038f0:	e000      	b.n	80038f4 <prvProcessReceivedCommands+0x174>
                            break;
 80038f2:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL )
 80038f4:	4b08      	ldr	r3, [pc, #32]	@ (8003918 <prvProcessReceivedCommands+0x198>)
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	f107 0108 	add.w	r1, r7, #8
 80038fc:	2200      	movs	r2, #0
 80038fe:	4618      	mov	r0, r3
 8003900:	f7fe fb86 	bl	8002010 <xQueueReceive>
 8003904:	4603      	mov	r3, r0
 8003906:	2b00      	cmp	r3, #0
 8003908:	f47f af44 	bne.w	8003794 <prvProcessReceivedCommands+0x14>
                {
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
    }
 800390c:	bf00      	nop
 800390e:	bf00      	nop
 8003910:	3720      	adds	r7, #32
 8003912:	46bd      	mov	sp, r7
 8003914:	bd80      	pop	{r7, pc}
 8003916:	bf00      	nop
 8003918:	20000250 	.word	0x20000250

0800391c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 800391c:	b580      	push	{r7, lr}
 800391e:	b082      	sub	sp, #8
 8003920:	af00      	add	r7, sp, #0

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003922:	e009      	b.n	8003938 <prvSwitchTimerLists+0x1c>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003924:	4b0e      	ldr	r3, [pc, #56]	@ (8003960 <prvSwitchTimerLists+0x44>)
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	68db      	ldr	r3, [r3, #12]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	603b      	str	r3, [r7, #0]

            /* Process the expired timer.  For auto-reload timers, be careful to
             * process only expirations that occur on the current list.  Further
             * expirations must wait until after the lists are switched. */
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
 800392e:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8003932:	6838      	ldr	r0, [r7, #0]
 8003934:	f7ff fe0c 	bl	8003550 <prvProcessExpiredTimer>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003938:	4b09      	ldr	r3, [pc, #36]	@ (8003960 <prvSwitchTimerLists+0x44>)
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	2b00      	cmp	r3, #0
 8003940:	d1f0      	bne.n	8003924 <prvSwitchTimerLists+0x8>
        }

        pxTemp = pxCurrentTimerList;
 8003942:	4b07      	ldr	r3, [pc, #28]	@ (8003960 <prvSwitchTimerLists+0x44>)
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	607b      	str	r3, [r7, #4]
        pxCurrentTimerList = pxOverflowTimerList;
 8003948:	4b06      	ldr	r3, [pc, #24]	@ (8003964 <prvSwitchTimerLists+0x48>)
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	4a04      	ldr	r2, [pc, #16]	@ (8003960 <prvSwitchTimerLists+0x44>)
 800394e:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 8003950:	4a04      	ldr	r2, [pc, #16]	@ (8003964 <prvSwitchTimerLists+0x48>)
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	6013      	str	r3, [r2, #0]
    }
 8003956:	bf00      	nop
 8003958:	3708      	adds	r7, #8
 800395a:	46bd      	mov	sp, r7
 800395c:	bd80      	pop	{r7, pc}
 800395e:	bf00      	nop
 8003960:	20000248 	.word	0x20000248
 8003964:	2000024c 	.word	0x2000024c

08003968 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 8003968:	b580      	push	{r7, lr}
 800396a:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 800396c:	f000 f992 	bl	8003c94 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 8003970:	4b12      	ldr	r3, [pc, #72]	@ (80039bc <prvCheckForValidListAndQueue+0x54>)
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	2b00      	cmp	r3, #0
 8003976:	d11d      	bne.n	80039b4 <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 8003978:	4811      	ldr	r0, [pc, #68]	@ (80039c0 <prvCheckForValidListAndQueue+0x58>)
 800397a:	f7fe f9a3 	bl	8001cc4 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 800397e:	4811      	ldr	r0, [pc, #68]	@ (80039c4 <prvCheckForValidListAndQueue+0x5c>)
 8003980:	f7fe f9a0 	bl	8001cc4 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 8003984:	4b10      	ldr	r3, [pc, #64]	@ (80039c8 <prvCheckForValidListAndQueue+0x60>)
 8003986:	4a0e      	ldr	r2, [pc, #56]	@ (80039c0 <prvCheckForValidListAndQueue+0x58>)
 8003988:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 800398a:	4b10      	ldr	r3, [pc, #64]	@ (80039cc <prvCheckForValidListAndQueue+0x64>)
 800398c:	4a0d      	ldr	r2, [pc, #52]	@ (80039c4 <prvCheckForValidListAndQueue+0x5c>)
 800398e:	601a      	str	r2, [r3, #0]

                    xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                }
                #else
                {
                    xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ) );
 8003990:	2200      	movs	r2, #0
 8003992:	210c      	movs	r1, #12
 8003994:	200a      	movs	r0, #10
 8003996:	f7fe fabd 	bl	8001f14 <xQueueGenericCreate>
 800399a:	4603      	mov	r3, r0
 800399c:	4a07      	ldr	r2, [pc, #28]	@ (80039bc <prvCheckForValidListAndQueue+0x54>)
 800399e:	6013      	str	r3, [r2, #0]
                }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                {
                    if( xTimerQueue != NULL )
 80039a0:	4b06      	ldr	r3, [pc, #24]	@ (80039bc <prvCheckForValidListAndQueue+0x54>)
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d005      	beq.n	80039b4 <prvCheckForValidListAndQueue+0x4c>
                    {
                        vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80039a8:	4b04      	ldr	r3, [pc, #16]	@ (80039bc <prvCheckForValidListAndQueue+0x54>)
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	4908      	ldr	r1, [pc, #32]	@ (80039d0 <prvCheckForValidListAndQueue+0x68>)
 80039ae:	4618      	mov	r0, r3
 80039b0:	f7fe fca6 	bl	8002300 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 80039b4:	f000 f9a4 	bl	8003d00 <vPortExitCritical>
    }
 80039b8:	bf00      	nop
 80039ba:	bd80      	pop	{r7, pc}
 80039bc:	20000250 	.word	0x20000250
 80039c0:	20000220 	.word	0x20000220
 80039c4:	20000234 	.word	0x20000234
 80039c8:	20000248 	.word	0x20000248
 80039cc:	2000024c 	.word	0x2000024c
 80039d0:	08006a9c 	.word	0x08006a9c

080039d4 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 80039d4:	b480      	push	{r7}
 80039d6:	b085      	sub	sp, #20
 80039d8:	af00      	add	r7, sp, #0
 80039da:	60f8      	str	r0, [r7, #12]
 80039dc:	60b9      	str	r1, [r7, #8]
 80039de:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	3b04      	subs	r3, #4
 80039e4:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80039ec:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	3b04      	subs	r3, #4
 80039f2:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 80039f4:	68bb      	ldr	r3, [r7, #8]
 80039f6:	f023 0201 	bic.w	r2, r3, #1
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	3b04      	subs	r3, #4
 8003a02:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8003a04:	4a0c      	ldr	r2, [pc, #48]	@ (8003a38 <pxPortInitialiseStack+0x64>)
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	3b14      	subs	r3, #20
 8003a0e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8003a10:	687a      	ldr	r2, [r7, #4]
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	3b04      	subs	r3, #4
 8003a1a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	f06f 0202 	mvn.w	r2, #2
 8003a22:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	3b20      	subs	r3, #32
 8003a28:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8003a2a:	68fb      	ldr	r3, [r7, #12]
}
 8003a2c:	4618      	mov	r0, r3
 8003a2e:	3714      	adds	r7, #20
 8003a30:	46bd      	mov	sp, r7
 8003a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a36:	4770      	bx	lr
 8003a38:	08003a3d 	.word	0x08003a3d

08003a3c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8003a3c:	b480      	push	{r7}
 8003a3e:	b085      	sub	sp, #20
 8003a40:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8003a42:	2300      	movs	r3, #0
 8003a44:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8003a46:	4b15      	ldr	r3, [pc, #84]	@ (8003a9c <prvTaskExitError+0x60>)
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003a4e:	d00d      	beq.n	8003a6c <prvTaskExitError+0x30>
    __asm volatile
 8003a50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003a54:	b672      	cpsid	i
 8003a56:	f383 8811 	msr	BASEPRI, r3
 8003a5a:	f3bf 8f6f 	isb	sy
 8003a5e:	f3bf 8f4f 	dsb	sy
 8003a62:	b662      	cpsie	i
 8003a64:	60fb      	str	r3, [r7, #12]
}
 8003a66:	bf00      	nop
 8003a68:	bf00      	nop
 8003a6a:	e7fd      	b.n	8003a68 <prvTaskExitError+0x2c>
    __asm volatile
 8003a6c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003a70:	b672      	cpsid	i
 8003a72:	f383 8811 	msr	BASEPRI, r3
 8003a76:	f3bf 8f6f 	isb	sy
 8003a7a:	f3bf 8f4f 	dsb	sy
 8003a7e:	b662      	cpsie	i
 8003a80:	60bb      	str	r3, [r7, #8]
}
 8003a82:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8003a84:	bf00      	nop
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d0fc      	beq.n	8003a86 <prvTaskExitError+0x4a>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8003a8c:	bf00      	nop
 8003a8e:	bf00      	nop
 8003a90:	3714      	adds	r7, #20
 8003a92:	46bd      	mov	sp, r7
 8003a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a98:	4770      	bx	lr
 8003a9a:	bf00      	nop
 8003a9c:	2000000c 	.word	0x2000000c

08003aa0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8003aa0:	4b07      	ldr	r3, [pc, #28]	@ (8003ac0 <pxCurrentTCBConst2>)
 8003aa2:	6819      	ldr	r1, [r3, #0]
 8003aa4:	6808      	ldr	r0, [r1, #0]
 8003aa6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003aaa:	f380 8809 	msr	PSP, r0
 8003aae:	f3bf 8f6f 	isb	sy
 8003ab2:	f04f 0000 	mov.w	r0, #0
 8003ab6:	f380 8811 	msr	BASEPRI, r0
 8003aba:	4770      	bx	lr
 8003abc:	f3af 8000 	nop.w

08003ac0 <pxCurrentTCBConst2>:
 8003ac0:	2000011c 	.word	0x2000011c
        "   bx r14                          \n"
        "                                   \n"
        "   .align 4                        \n"
        "pxCurrentTCBConst2: .word pxCurrentTCB             \n"
        );
}
 8003ac4:	bf00      	nop
 8003ac6:	bf00      	nop

08003ac8 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8003ac8:	4808      	ldr	r0, [pc, #32]	@ (8003aec <prvPortStartFirstTask+0x24>)
 8003aca:	6800      	ldr	r0, [r0, #0]
 8003acc:	6800      	ldr	r0, [r0, #0]
 8003ace:	f380 8808 	msr	MSP, r0
 8003ad2:	f04f 0000 	mov.w	r0, #0
 8003ad6:	f380 8814 	msr	CONTROL, r0
 8003ada:	b662      	cpsie	i
 8003adc:	b661      	cpsie	f
 8003ade:	f3bf 8f4f 	dsb	sy
 8003ae2:	f3bf 8f6f 	isb	sy
 8003ae6:	df00      	svc	0
 8003ae8:	bf00      	nop
 8003aea:	0000      	.short	0x0000
 8003aec:	e000ed08 	.word	0xe000ed08
        " isb                   \n"
        " svc 0                 \n" /* System call to start first task. */
        " nop                   \n"
        " .ltorg                \n"
        );
}
 8003af0:	bf00      	nop
 8003af2:	bf00      	nop

08003af4 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8003af4:	b580      	push	{r7, lr}
 8003af6:	b08a      	sub	sp, #40	@ 0x28
 8003af8:	af00      	add	r7, sp, #0
     * configCHECK_HANDLER_INSTALLATION to 0 in their FreeRTOSConfig.h. Direct
     * routing, which is validated here when configCHECK_HANDLER_INSTALLATION
     * is 1, should be preferred when possible. */
    #if ( configCHECK_HANDLER_INSTALLATION == 1 )
    {
        const portISR_t * const pxVectorTable = portSCB_VTOR_REG;
 8003afa:	4b5c      	ldr	r3, [pc, #368]	@ (8003c6c <xPortStartScheduler+0x178>)
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	627b      	str	r3, [r7, #36]	@ 0x24
         * https://www.FreeRTOS.org/FAQHelp.html.
         *
         * Systems with a configurable address for the interrupt vector table
         * can also encounter assertion failures or even system faults here if
         * VTOR is not set correctly to point to the application's vector table. */
        configASSERT( pxVectorTable[ portVECTOR_INDEX_SVC ] == vPortSVCHandler );
 8003b00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b02:	332c      	adds	r3, #44	@ 0x2c
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	4a5a      	ldr	r2, [pc, #360]	@ (8003c70 <xPortStartScheduler+0x17c>)
 8003b08:	4293      	cmp	r3, r2
 8003b0a:	d00d      	beq.n	8003b28 <xPortStartScheduler+0x34>
    __asm volatile
 8003b0c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003b10:	b672      	cpsid	i
 8003b12:	f383 8811 	msr	BASEPRI, r3
 8003b16:	f3bf 8f6f 	isb	sy
 8003b1a:	f3bf 8f4f 	dsb	sy
 8003b1e:	b662      	cpsie	i
 8003b20:	61bb      	str	r3, [r7, #24]
}
 8003b22:	bf00      	nop
 8003b24:	bf00      	nop
 8003b26:	e7fd      	b.n	8003b24 <xPortStartScheduler+0x30>
        configASSERT( pxVectorTable[ portVECTOR_INDEX_PENDSV ] == xPortPendSVHandler );
 8003b28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b2a:	3338      	adds	r3, #56	@ 0x38
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	4a51      	ldr	r2, [pc, #324]	@ (8003c74 <xPortStartScheduler+0x180>)
 8003b30:	4293      	cmp	r3, r2
 8003b32:	d00d      	beq.n	8003b50 <xPortStartScheduler+0x5c>
    __asm volatile
 8003b34:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003b38:	b672      	cpsid	i
 8003b3a:	f383 8811 	msr	BASEPRI, r3
 8003b3e:	f3bf 8f6f 	isb	sy
 8003b42:	f3bf 8f4f 	dsb	sy
 8003b46:	b662      	cpsie	i
 8003b48:	61fb      	str	r3, [r7, #28]
}
 8003b4a:	bf00      	nop
 8003b4c:	bf00      	nop
 8003b4e:	e7fd      	b.n	8003b4c <xPortStartScheduler+0x58>
    #endif /* configCHECK_HANDLER_INSTALLATION */

    #if ( configASSERT_DEFINED == 1 )
    {
        volatile uint8_t ucOriginalPriority;
        volatile uint32_t ulImplementedPrioBits = 0;
 8003b50:	2300      	movs	r3, #0
 8003b52:	60bb      	str	r3, [r7, #8]
        volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8003b54:	4b48      	ldr	r3, [pc, #288]	@ (8003c78 <xPortStartScheduler+0x184>)
 8003b56:	623b      	str	r3, [r7, #32]
         * functions can be called.  ISR safe functions are those that end in
         * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
         * ensure interrupt entry is as fast and simple as possible.
         *
         * Save the interrupt priority value that is about to be clobbered. */
        ucOriginalPriority = *pucFirstUserPriorityRegister;
 8003b58:	6a3b      	ldr	r3, [r7, #32]
 8003b5a:	781b      	ldrb	r3, [r3, #0]
 8003b5c:	b2db      	uxtb	r3, r3
 8003b5e:	73fb      	strb	r3, [r7, #15]

        /* Determine the number of priority bits available.  First write to all
         * possible bits. */
        *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8003b60:	6a3b      	ldr	r3, [r7, #32]
 8003b62:	22ff      	movs	r2, #255	@ 0xff
 8003b64:	701a      	strb	r2, [r3, #0]

        /* Read the value back to see how many bits stuck. */
        ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8003b66:	6a3b      	ldr	r3, [r7, #32]
 8003b68:	781b      	ldrb	r3, [r3, #0]
 8003b6a:	b2db      	uxtb	r3, r3
 8003b6c:	71fb      	strb	r3, [r7, #7]

        /* Use the same mask on the maximum system call priority. */
        ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003b6e:	79fb      	ldrb	r3, [r7, #7]
 8003b70:	b2db      	uxtb	r3, r3
 8003b72:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8003b76:	b2da      	uxtb	r2, r3
 8003b78:	4b40      	ldr	r3, [pc, #256]	@ (8003c7c <xPortStartScheduler+0x188>)
 8003b7a:	701a      	strb	r2, [r3, #0]
         * accounting for the number of priority bits supported by the
         * hardware. A priority of 0 is invalid because setting the BASEPRI
         * register to 0 unmasks all interrupts, and interrupts with priority 0
         * cannot be masked using BASEPRI.
         * See https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
        configASSERT( ucMaxSysCallPriority );
 8003b7c:	4b3f      	ldr	r3, [pc, #252]	@ (8003c7c <xPortStartScheduler+0x188>)
 8003b7e:	781b      	ldrb	r3, [r3, #0]
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d10d      	bne.n	8003ba0 <xPortStartScheduler+0xac>
    __asm volatile
 8003b84:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003b88:	b672      	cpsid	i
 8003b8a:	f383 8811 	msr	BASEPRI, r3
 8003b8e:	f3bf 8f6f 	isb	sy
 8003b92:	f3bf 8f4f 	dsb	sy
 8003b96:	b662      	cpsie	i
 8003b98:	617b      	str	r3, [r7, #20]
}
 8003b9a:	bf00      	nop
 8003b9c:	bf00      	nop
 8003b9e:	e7fd      	b.n	8003b9c <xPortStartScheduler+0xa8>

        /* Check that the bits not implemented in hardware are zero in
         * configMAX_SYSCALL_INTERRUPT_PRIORITY. */
        configASSERT( ( configMAX_SYSCALL_INTERRUPT_PRIORITY & ( ~ucMaxPriorityValue ) ) == 0U );
 8003ba0:	79fb      	ldrb	r3, [r7, #7]
 8003ba2:	b2db      	uxtb	r3, r3
 8003ba4:	43db      	mvns	r3, r3
 8003ba6:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d015      	beq.n	8003bda <xPortStartScheduler+0xe6>
    __asm volatile
 8003bae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003bb2:	b672      	cpsid	i
 8003bb4:	f383 8811 	msr	BASEPRI, r3
 8003bb8:	f3bf 8f6f 	isb	sy
 8003bbc:	f3bf 8f4f 	dsb	sy
 8003bc0:	b662      	cpsie	i
 8003bc2:	613b      	str	r3, [r7, #16]
}
 8003bc4:	bf00      	nop
 8003bc6:	bf00      	nop
 8003bc8:	e7fd      	b.n	8003bc6 <xPortStartScheduler+0xd2>
        /* Calculate the maximum acceptable priority group value for the number
         * of bits read back. */

        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
        {
            ulImplementedPrioBits++;
 8003bca:	68bb      	ldr	r3, [r7, #8]
 8003bcc:	3301      	adds	r3, #1
 8003bce:	60bb      	str	r3, [r7, #8]
            ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8003bd0:	79fb      	ldrb	r3, [r7, #7]
 8003bd2:	b2db      	uxtb	r3, r3
 8003bd4:	005b      	lsls	r3, r3, #1
 8003bd6:	b2db      	uxtb	r3, r3
 8003bd8:	71fb      	strb	r3, [r7, #7]
        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003bda:	79fb      	ldrb	r3, [r7, #7]
 8003bdc:	b2db      	uxtb	r3, r3
 8003bde:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003be2:	2b80      	cmp	r3, #128	@ 0x80
 8003be4:	d0f1      	beq.n	8003bca <xPortStartScheduler+0xd6>
        }

        if( ulImplementedPrioBits == 8 )
 8003be6:	68bb      	ldr	r3, [r7, #8]
 8003be8:	2b08      	cmp	r3, #8
 8003bea:	d103      	bne.n	8003bf4 <xPortStartScheduler+0x100>
             *
             * The following assert ensures that the sub-priority bit in the
             * configMAX_SYSCALL_INTERRUPT_PRIORITY is clear to avoid the above mentioned
             * confusion. */
            configASSERT( ( configMAX_SYSCALL_INTERRUPT_PRIORITY & 0x1U ) == 0U );
            ulMaxPRIGROUPValue = 0;
 8003bec:	4b24      	ldr	r3, [pc, #144]	@ (8003c80 <xPortStartScheduler+0x18c>)
 8003bee:	2200      	movs	r2, #0
 8003bf0:	601a      	str	r2, [r3, #0]
 8003bf2:	e004      	b.n	8003bfe <xPortStartScheduler+0x10a>
        }
        else
        {
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS - ulImplementedPrioBits;
 8003bf4:	68bb      	ldr	r3, [r7, #8]
 8003bf6:	f1c3 0307 	rsb	r3, r3, #7
 8003bfa:	4a21      	ldr	r2, [pc, #132]	@ (8003c80 <xPortStartScheduler+0x18c>)
 8003bfc:	6013      	str	r3, [r2, #0]
        }

        /* Shift the priority group value back to its position within the AIRCR
         * register. */
        ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8003bfe:	4b20      	ldr	r3, [pc, #128]	@ (8003c80 <xPortStartScheduler+0x18c>)
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	021b      	lsls	r3, r3, #8
 8003c04:	4a1e      	ldr	r2, [pc, #120]	@ (8003c80 <xPortStartScheduler+0x18c>)
 8003c06:	6013      	str	r3, [r2, #0]
        ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8003c08:	4b1d      	ldr	r3, [pc, #116]	@ (8003c80 <xPortStartScheduler+0x18c>)
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8003c10:	4a1b      	ldr	r2, [pc, #108]	@ (8003c80 <xPortStartScheduler+0x18c>)
 8003c12:	6013      	str	r3, [r2, #0]

        /* Restore the clobbered interrupt priority register to its original
         * value. */
        *pucFirstUserPriorityRegister = ucOriginalPriority;
 8003c14:	7bfb      	ldrb	r3, [r7, #15]
 8003c16:	b2da      	uxtb	r2, r3
 8003c18:	6a3b      	ldr	r3, [r7, #32]
 8003c1a:	701a      	strb	r2, [r3, #0]
    }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts, and make SVCall
     * the highest priority. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8003c1c:	4b19      	ldr	r3, [pc, #100]	@ (8003c84 <xPortStartScheduler+0x190>)
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	4a18      	ldr	r2, [pc, #96]	@ (8003c84 <xPortStartScheduler+0x190>)
 8003c22:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003c26:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8003c28:	4b16      	ldr	r3, [pc, #88]	@ (8003c84 <xPortStartScheduler+0x190>)
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	4a15      	ldr	r2, [pc, #84]	@ (8003c84 <xPortStartScheduler+0x190>)
 8003c2e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003c32:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR2_REG = 0;
 8003c34:	4b14      	ldr	r3, [pc, #80]	@ (8003c88 <xPortStartScheduler+0x194>)
 8003c36:	2200      	movs	r2, #0
 8003c38:	601a      	str	r2, [r3, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8003c3a:	f000 f8f1 	bl	8003e20 <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8003c3e:	4b13      	ldr	r3, [pc, #76]	@ (8003c8c <xPortStartScheduler+0x198>)
 8003c40:	2200      	movs	r2, #0
 8003c42:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 8003c44:	f000 f910 	bl	8003e68 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8003c48:	4b11      	ldr	r3, [pc, #68]	@ (8003c90 <xPortStartScheduler+0x19c>)
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	4a10      	ldr	r2, [pc, #64]	@ (8003c90 <xPortStartScheduler+0x19c>)
 8003c4e:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8003c52:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8003c54:	f7ff ff38 	bl	8003ac8 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8003c58:	f7ff f866 	bl	8002d28 <vTaskSwitchContext>
    prvTaskExitError();
 8003c5c:	f7ff feee 	bl	8003a3c <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8003c60:	2300      	movs	r3, #0
}
 8003c62:	4618      	mov	r0, r3
 8003c64:	3728      	adds	r7, #40	@ 0x28
 8003c66:	46bd      	mov	sp, r7
 8003c68:	bd80      	pop	{r7, pc}
 8003c6a:	bf00      	nop
 8003c6c:	e000ed08 	.word	0xe000ed08
 8003c70:	08003aa1 	.word	0x08003aa1
 8003c74:	08003d61 	.word	0x08003d61
 8003c78:	e000e400 	.word	0xe000e400
 8003c7c:	2000025c 	.word	0x2000025c
 8003c80:	20000260 	.word	0x20000260
 8003c84:	e000ed20 	.word	0xe000ed20
 8003c88:	e000ed1c 	.word	0xe000ed1c
 8003c8c:	2000000c 	.word	0x2000000c
 8003c90:	e000ef34 	.word	0xe000ef34

08003c94 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8003c94:	b480      	push	{r7}
 8003c96:	b083      	sub	sp, #12
 8003c98:	af00      	add	r7, sp, #0
    __asm volatile
 8003c9a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003c9e:	b672      	cpsid	i
 8003ca0:	f383 8811 	msr	BASEPRI, r3
 8003ca4:	f3bf 8f6f 	isb	sy
 8003ca8:	f3bf 8f4f 	dsb	sy
 8003cac:	b662      	cpsie	i
 8003cae:	607b      	str	r3, [r7, #4]
}
 8003cb0:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8003cb2:	4b11      	ldr	r3, [pc, #68]	@ (8003cf8 <vPortEnterCritical+0x64>)
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	3301      	adds	r3, #1
 8003cb8:	4a0f      	ldr	r2, [pc, #60]	@ (8003cf8 <vPortEnterCritical+0x64>)
 8003cba:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8003cbc:	4b0e      	ldr	r3, [pc, #56]	@ (8003cf8 <vPortEnterCritical+0x64>)
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	2b01      	cmp	r3, #1
 8003cc2:	d112      	bne.n	8003cea <vPortEnterCritical+0x56>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8003cc4:	4b0d      	ldr	r3, [pc, #52]	@ (8003cfc <vPortEnterCritical+0x68>)
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	b2db      	uxtb	r3, r3
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d00d      	beq.n	8003cea <vPortEnterCritical+0x56>
    __asm volatile
 8003cce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003cd2:	b672      	cpsid	i
 8003cd4:	f383 8811 	msr	BASEPRI, r3
 8003cd8:	f3bf 8f6f 	isb	sy
 8003cdc:	f3bf 8f4f 	dsb	sy
 8003ce0:	b662      	cpsie	i
 8003ce2:	603b      	str	r3, [r7, #0]
}
 8003ce4:	bf00      	nop
 8003ce6:	bf00      	nop
 8003ce8:	e7fd      	b.n	8003ce6 <vPortEnterCritical+0x52>
    }
}
 8003cea:	bf00      	nop
 8003cec:	370c      	adds	r7, #12
 8003cee:	46bd      	mov	sp, r7
 8003cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf4:	4770      	bx	lr
 8003cf6:	bf00      	nop
 8003cf8:	2000000c 	.word	0x2000000c
 8003cfc:	e000ed04 	.word	0xe000ed04

08003d00 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8003d00:	b480      	push	{r7}
 8003d02:	b083      	sub	sp, #12
 8003d04:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 8003d06:	4b13      	ldr	r3, [pc, #76]	@ (8003d54 <vPortExitCritical+0x54>)
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d10d      	bne.n	8003d2a <vPortExitCritical+0x2a>
    __asm volatile
 8003d0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d12:	b672      	cpsid	i
 8003d14:	f383 8811 	msr	BASEPRI, r3
 8003d18:	f3bf 8f6f 	isb	sy
 8003d1c:	f3bf 8f4f 	dsb	sy
 8003d20:	b662      	cpsie	i
 8003d22:	607b      	str	r3, [r7, #4]
}
 8003d24:	bf00      	nop
 8003d26:	bf00      	nop
 8003d28:	e7fd      	b.n	8003d26 <vPortExitCritical+0x26>
    uxCriticalNesting--;
 8003d2a:	4b0a      	ldr	r3, [pc, #40]	@ (8003d54 <vPortExitCritical+0x54>)
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	3b01      	subs	r3, #1
 8003d30:	4a08      	ldr	r2, [pc, #32]	@ (8003d54 <vPortExitCritical+0x54>)
 8003d32:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8003d34:	4b07      	ldr	r3, [pc, #28]	@ (8003d54 <vPortExitCritical+0x54>)
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d105      	bne.n	8003d48 <vPortExitCritical+0x48>
 8003d3c:	2300      	movs	r3, #0
 8003d3e:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
    __asm volatile
 8003d40:	683b      	ldr	r3, [r7, #0]
 8003d42:	f383 8811 	msr	BASEPRI, r3
    (
        "   msr basepri, %0 " ::"r" ( ulNewMaskValue ) : "memory"
    );
}
 8003d46:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8003d48:	bf00      	nop
 8003d4a:	370c      	adds	r7, #12
 8003d4c:	46bd      	mov	sp, r7
 8003d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d52:	4770      	bx	lr
 8003d54:	2000000c 	.word	0x2000000c
	...

08003d60 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8003d60:	f3ef 8009 	mrs	r0, PSP
 8003d64:	f3bf 8f6f 	isb	sy
 8003d68:	4b15      	ldr	r3, [pc, #84]	@ (8003dc0 <pxCurrentTCBConst>)
 8003d6a:	681a      	ldr	r2, [r3, #0]
 8003d6c:	f01e 0f10 	tst.w	lr, #16
 8003d70:	bf08      	it	eq
 8003d72:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8003d76:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003d7a:	6010      	str	r0, [r2, #0]
 8003d7c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8003d80:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8003d84:	b672      	cpsid	i
 8003d86:	f380 8811 	msr	BASEPRI, r0
 8003d8a:	f3bf 8f4f 	dsb	sy
 8003d8e:	f3bf 8f6f 	isb	sy
 8003d92:	b662      	cpsie	i
 8003d94:	f7fe ffc8 	bl	8002d28 <vTaskSwitchContext>
 8003d98:	f04f 0000 	mov.w	r0, #0
 8003d9c:	f380 8811 	msr	BASEPRI, r0
 8003da0:	bc09      	pop	{r0, r3}
 8003da2:	6819      	ldr	r1, [r3, #0]
 8003da4:	6808      	ldr	r0, [r1, #0]
 8003da6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003daa:	f01e 0f10 	tst.w	lr, #16
 8003dae:	bf08      	it	eq
 8003db0:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8003db4:	f380 8809 	msr	PSP, r0
 8003db8:	f3bf 8f6f 	isb	sy
 8003dbc:	4770      	bx	lr
 8003dbe:	bf00      	nop

08003dc0 <pxCurrentTCBConst>:
 8003dc0:	2000011c 	.word	0x2000011c
        "                                       \n"
        "   .align 4                            \n"
        "pxCurrentTCBConst: .word pxCurrentTCB  \n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8003dc4:	bf00      	nop
 8003dc6:	bf00      	nop

08003dc8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8003dc8:	b580      	push	{r7, lr}
 8003dca:	b082      	sub	sp, #8
 8003dcc:	af00      	add	r7, sp, #0
    __asm volatile
 8003dce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003dd2:	b672      	cpsid	i
 8003dd4:	f383 8811 	msr	BASEPRI, r3
 8003dd8:	f3bf 8f6f 	isb	sy
 8003ddc:	f3bf 8f4f 	dsb	sy
 8003de0:	b662      	cpsie	i
 8003de2:	607b      	str	r3, [r7, #4]
}
 8003de4:	bf00      	nop
    /* The SysTick runs at the lowest interrupt priority, so when this interrupt
     * executes all interrupts must be unmasked.  There is therefore no need to
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
    traceISR_ENTER();
 8003de6:	f001 fdb3 	bl	8005950 <SEGGER_SYSVIEW_RecordEnterISR>
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8003dea:	f7fe fe9b 	bl	8002b24 <xTaskIncrementTick>
 8003dee:	4603      	mov	r3, r0
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d006      	beq.n	8003e02 <SysTick_Handler+0x3a>
        {
            traceISR_EXIT_TO_SCHEDULER();
 8003df4:	f001 fe0a 	bl	8005a0c <SEGGER_SYSVIEW_RecordExitISRToScheduler>

            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8003df8:	4b08      	ldr	r3, [pc, #32]	@ (8003e1c <SysTick_Handler+0x54>)
 8003dfa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003dfe:	601a      	str	r2, [r3, #0]
 8003e00:	e001      	b.n	8003e06 <SysTick_Handler+0x3e>
        }
        else
        {
            traceISR_EXIT();
 8003e02:	f001 fde7 	bl	80059d4 <SEGGER_SYSVIEW_RecordExitISR>
 8003e06:	2300      	movs	r3, #0
 8003e08:	603b      	str	r3, [r7, #0]
    __asm volatile
 8003e0a:	683b      	ldr	r3, [r7, #0]
 8003e0c:	f383 8811 	msr	BASEPRI, r3
}
 8003e10:	bf00      	nop
        }
    }
    portENABLE_INTERRUPTS();
}
 8003e12:	bf00      	nop
 8003e14:	3708      	adds	r7, #8
 8003e16:	46bd      	mov	sp, r7
 8003e18:	bd80      	pop	{r7, pc}
 8003e1a:	bf00      	nop
 8003e1c:	e000ed04 	.word	0xe000ed04

08003e20 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 8003e20:	b480      	push	{r7}
 8003e22:	af00      	add	r7, sp, #0
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
    }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8003e24:	4b0b      	ldr	r3, [pc, #44]	@ (8003e54 <vPortSetupTimerInterrupt+0x34>)
 8003e26:	2200      	movs	r2, #0
 8003e28:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8003e2a:	4b0b      	ldr	r3, [pc, #44]	@ (8003e58 <vPortSetupTimerInterrupt+0x38>)
 8003e2c:	2200      	movs	r2, #0
 8003e2e:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8003e30:	4b0a      	ldr	r3, [pc, #40]	@ (8003e5c <vPortSetupTimerInterrupt+0x3c>)
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	4a0a      	ldr	r2, [pc, #40]	@ (8003e60 <vPortSetupTimerInterrupt+0x40>)
 8003e36:	fba2 2303 	umull	r2, r3, r2, r3
 8003e3a:	099b      	lsrs	r3, r3, #6
 8003e3c:	4a09      	ldr	r2, [pc, #36]	@ (8003e64 <vPortSetupTimerInterrupt+0x44>)
 8003e3e:	3b01      	subs	r3, #1
 8003e40:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8003e42:	4b04      	ldr	r3, [pc, #16]	@ (8003e54 <vPortSetupTimerInterrupt+0x34>)
 8003e44:	2207      	movs	r2, #7
 8003e46:	601a      	str	r2, [r3, #0]
}
 8003e48:	bf00      	nop
 8003e4a:	46bd      	mov	sp, r7
 8003e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e50:	4770      	bx	lr
 8003e52:	bf00      	nop
 8003e54:	e000e010 	.word	0xe000e010
 8003e58:	e000e018 	.word	0xe000e018
 8003e5c:	20000000 	.word	0x20000000
 8003e60:	10624dd3 	.word	0x10624dd3
 8003e64:	e000e014 	.word	0xe000e014

08003e68 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8003e68:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8003e78 <vPortEnableVFP+0x10>
 8003e6c:	6801      	ldr	r1, [r0, #0]
 8003e6e:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8003e72:	6001      	str	r1, [r0, #0]
 8003e74:	4770      	bx	lr
 8003e76:	0000      	.short	0x0000
 8003e78:	e000ed88 	.word	0xe000ed88
        "   orr r1, r1, #( 0xf << 20 )  \n" /* Enable CP10 and CP11 coprocessors, then save back. */
        "   str r1, [r0]                \n"
        "   bx r14                      \n"
        "   .ltorg                      \n"
    );
}
 8003e7c:	bf00      	nop
 8003e7e:	bf00      	nop

08003e80 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 8003e80:	b480      	push	{r7}
 8003e82:	b085      	sub	sp, #20
 8003e84:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8003e86:	f3ef 8305 	mrs	r3, IPSR
 8003e8a:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	2b0f      	cmp	r3, #15
 8003e90:	d917      	bls.n	8003ec2 <vPortValidateInterruptPriority+0x42>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8003e92:	4a1a      	ldr	r2, [pc, #104]	@ (8003efc <vPortValidateInterruptPriority+0x7c>)
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	4413      	add	r3, r2
 8003e98:	781b      	ldrb	r3, [r3, #0]
 8003e9a:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8003e9c:	4b18      	ldr	r3, [pc, #96]	@ (8003f00 <vPortValidateInterruptPriority+0x80>)
 8003e9e:	781b      	ldrb	r3, [r3, #0]
 8003ea0:	7afa      	ldrb	r2, [r7, #11]
 8003ea2:	429a      	cmp	r2, r3
 8003ea4:	d20d      	bcs.n	8003ec2 <vPortValidateInterruptPriority+0x42>
    __asm volatile
 8003ea6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003eaa:	b672      	cpsid	i
 8003eac:	f383 8811 	msr	BASEPRI, r3
 8003eb0:	f3bf 8f6f 	isb	sy
 8003eb4:	f3bf 8f4f 	dsb	sy
 8003eb8:	b662      	cpsie	i
 8003eba:	607b      	str	r3, [r7, #4]
}
 8003ebc:	bf00      	nop
 8003ebe:	bf00      	nop
 8003ec0:	e7fd      	b.n	8003ebe <vPortValidateInterruptPriority+0x3e>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8003ec2:	4b10      	ldr	r3, [pc, #64]	@ (8003f04 <vPortValidateInterruptPriority+0x84>)
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8003eca:	4b0f      	ldr	r3, [pc, #60]	@ (8003f08 <vPortValidateInterruptPriority+0x88>)
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	429a      	cmp	r2, r3
 8003ed0:	d90d      	bls.n	8003eee <vPortValidateInterruptPriority+0x6e>
    __asm volatile
 8003ed2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003ed6:	b672      	cpsid	i
 8003ed8:	f383 8811 	msr	BASEPRI, r3
 8003edc:	f3bf 8f6f 	isb	sy
 8003ee0:	f3bf 8f4f 	dsb	sy
 8003ee4:	b662      	cpsie	i
 8003ee6:	603b      	str	r3, [r7, #0]
}
 8003ee8:	bf00      	nop
 8003eea:	bf00      	nop
 8003eec:	e7fd      	b.n	8003eea <vPortValidateInterruptPriority+0x6a>
    }
 8003eee:	bf00      	nop
 8003ef0:	3714      	adds	r7, #20
 8003ef2:	46bd      	mov	sp, r7
 8003ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef8:	4770      	bx	lr
 8003efa:	bf00      	nop
 8003efc:	e000e3f0 	.word	0xe000e3f0
 8003f00:	2000025c 	.word	0x2000025c
 8003f04:	e000ed0c 	.word	0xe000ed0c
 8003f08:	20000260 	.word	0x20000260

08003f0c <pvPortMalloc>:
PRIVILEGED_DATA static size_t xNumberOfSuccessfulFrees = ( size_t ) 0U;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8003f0c:	b580      	push	{r7, lr}
 8003f0e:	b08e      	sub	sp, #56	@ 0x38
 8003f10:	af00      	add	r7, sp, #0
 8003f12:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock;
    BlockLink_t * pxPreviousBlock;
    BlockLink_t * pxNewBlockLink;
    void * pvReturn = NULL;
 8003f14:	2300      	movs	r3, #0
 8003f16:	62fb      	str	r3, [r7, #44]	@ 0x2c
    size_t xAdditionalRequiredSize;
    size_t xAllocatedBlockSize = 0;
 8003f18:	2300      	movs	r3, #0
 8003f1a:	62bb      	str	r3, [r7, #40]	@ 0x28

    if( xWantedSize > 0 )
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d022      	beq.n	8003f68 <pvPortMalloc+0x5c>
    {
        /* The wanted size must be increased so it can contain a BlockLink_t
         * structure in addition to the requested amount of bytes. */
        if( heapADD_WILL_OVERFLOW( xWantedSize, xHeapStructSize ) == 0 )
 8003f22:	2308      	movs	r3, #8
 8003f24:	43db      	mvns	r3, r3
 8003f26:	687a      	ldr	r2, [r7, #4]
 8003f28:	429a      	cmp	r2, r3
 8003f2a:	d81b      	bhi.n	8003f64 <pvPortMalloc+0x58>
        {
            xWantedSize += xHeapStructSize;
 8003f2c:	2208      	movs	r2, #8
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	4413      	add	r3, r2
 8003f32:	607b      	str	r3, [r7, #4]

            /* Ensure that blocks are always aligned to the required number
             * of bytes. */
            if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	f003 0307 	and.w	r3, r3, #7
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d014      	beq.n	8003f68 <pvPortMalloc+0x5c>
            {
                /* Byte alignment required. */
                xAdditionalRequiredSize = portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK );
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	f003 0307 	and.w	r3, r3, #7
 8003f44:	f1c3 0308 	rsb	r3, r3, #8
 8003f48:	627b      	str	r3, [r7, #36]	@ 0x24

                if( heapADD_WILL_OVERFLOW( xWantedSize, xAdditionalRequiredSize ) == 0 )
 8003f4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f4c:	43db      	mvns	r3, r3
 8003f4e:	687a      	ldr	r2, [r7, #4]
 8003f50:	429a      	cmp	r2, r3
 8003f52:	d804      	bhi.n	8003f5e <pvPortMalloc+0x52>
                {
                    xWantedSize += xAdditionalRequiredSize;
 8003f54:	687a      	ldr	r2, [r7, #4]
 8003f56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f58:	4413      	add	r3, r2
 8003f5a:	607b      	str	r3, [r7, #4]
 8003f5c:	e004      	b.n	8003f68 <pvPortMalloc+0x5c>
                }
                else
                {
                    xWantedSize = 0;
 8003f5e:	2300      	movs	r3, #0
 8003f60:	607b      	str	r3, [r7, #4]
 8003f62:	e001      	b.n	8003f68 <pvPortMalloc+0x5c>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            xWantedSize = 0;
 8003f64:	2300      	movs	r3, #0
 8003f66:	607b      	str	r3, [r7, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    vTaskSuspendAll();
 8003f68:	f7fe fca2 	bl	80028b0 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 8003f6c:	4b82      	ldr	r3, [pc, #520]	@ (8004178 <pvPortMalloc+0x26c>)
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d101      	bne.n	8003f78 <pvPortMalloc+0x6c>
        {
            prvHeapInit();
 8003f74:	f000 f98a 	bl	800428c <prvHeapInit>

        /* Check the block size we are trying to allocate is not so large that the
         * top bit is set.  The top bit of the block size member of the BlockLink_t
         * structure is used to determine who owns the block - the application or
         * the kernel, so it must be free. */
        if( heapBLOCK_SIZE_IS_VALID( xWantedSize ) != 0 )
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	f2c0 80e1 	blt.w	8004142 <pvPortMalloc+0x236>
        {
            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	f000 80dd 	beq.w	8004142 <pvPortMalloc+0x236>
 8003f88:	4b7c      	ldr	r3, [pc, #496]	@ (800417c <pvPortMalloc+0x270>)
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	687a      	ldr	r2, [r7, #4]
 8003f8e:	429a      	cmp	r2, r3
 8003f90:	f200 80d7 	bhi.w	8004142 <pvPortMalloc+0x236>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8003f94:	4b7a      	ldr	r3, [pc, #488]	@ (8004180 <pvPortMalloc+0x274>)
 8003f96:	633b      	str	r3, [r7, #48]	@ 0x30
                pxBlock = heapPROTECT_BLOCK_POINTER( xStart.pxNextFreeBlock );
 8003f98:	4b79      	ldr	r3, [pc, #484]	@ (8004180 <pvPortMalloc+0x274>)
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	637b      	str	r3, [r7, #52]	@ 0x34
                heapVALIDATE_BLOCK_POINTER( pxBlock );
 8003f9e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003fa0:	4a78      	ldr	r2, [pc, #480]	@ (8004184 <pvPortMalloc+0x278>)
 8003fa2:	4293      	cmp	r3, r2
 8003fa4:	d305      	bcc.n	8003fb2 <pvPortMalloc+0xa6>
 8003fa6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003fa8:	4a77      	ldr	r2, [pc, #476]	@ (8004188 <pvPortMalloc+0x27c>)
 8003faa:	4293      	cmp	r3, r2
 8003fac:	d801      	bhi.n	8003fb2 <pvPortMalloc+0xa6>
 8003fae:	2301      	movs	r3, #1
 8003fb0:	e000      	b.n	8003fb4 <pvPortMalloc+0xa8>
 8003fb2:	2300      	movs	r3, #0
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d12d      	bne.n	8004014 <pvPortMalloc+0x108>
    __asm volatile
 8003fb8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003fbc:	b672      	cpsid	i
 8003fbe:	f383 8811 	msr	BASEPRI, r3
 8003fc2:	f3bf 8f6f 	isb	sy
 8003fc6:	f3bf 8f4f 	dsb	sy
 8003fca:	b662      	cpsie	i
 8003fcc:	61fb      	str	r3, [r7, #28]
}
 8003fce:	bf00      	nop
 8003fd0:	bf00      	nop
 8003fd2:	e7fd      	b.n	8003fd0 <pvPortMalloc+0xc4>

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != heapPROTECT_BLOCK_POINTER( NULL ) ) )
                {
                    pxPreviousBlock = pxBlock;
 8003fd4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003fd6:	633b      	str	r3, [r7, #48]	@ 0x30
                    pxBlock = heapPROTECT_BLOCK_POINTER( pxBlock->pxNextFreeBlock );
 8003fd8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	637b      	str	r3, [r7, #52]	@ 0x34
                    heapVALIDATE_BLOCK_POINTER( pxBlock );
 8003fde:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003fe0:	4a68      	ldr	r2, [pc, #416]	@ (8004184 <pvPortMalloc+0x278>)
 8003fe2:	4293      	cmp	r3, r2
 8003fe4:	d305      	bcc.n	8003ff2 <pvPortMalloc+0xe6>
 8003fe6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003fe8:	4a67      	ldr	r2, [pc, #412]	@ (8004188 <pvPortMalloc+0x27c>)
 8003fea:	4293      	cmp	r3, r2
 8003fec:	d801      	bhi.n	8003ff2 <pvPortMalloc+0xe6>
 8003fee:	2301      	movs	r3, #1
 8003ff0:	e000      	b.n	8003ff4 <pvPortMalloc+0xe8>
 8003ff2:	2300      	movs	r3, #0
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d10d      	bne.n	8004014 <pvPortMalloc+0x108>
    __asm volatile
 8003ff8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003ffc:	b672      	cpsid	i
 8003ffe:	f383 8811 	msr	BASEPRI, r3
 8004002:	f3bf 8f6f 	isb	sy
 8004006:	f3bf 8f4f 	dsb	sy
 800400a:	b662      	cpsie	i
 800400c:	61bb      	str	r3, [r7, #24]
}
 800400e:	bf00      	nop
 8004010:	bf00      	nop
 8004012:	e7fd      	b.n	8004010 <pvPortMalloc+0x104>
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != heapPROTECT_BLOCK_POINTER( NULL ) ) )
 8004014:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004016:	685b      	ldr	r3, [r3, #4]
 8004018:	687a      	ldr	r2, [r7, #4]
 800401a:	429a      	cmp	r2, r3
 800401c:	d903      	bls.n	8004026 <pvPortMalloc+0x11a>
 800401e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	2b00      	cmp	r3, #0
 8004024:	d1d6      	bne.n	8003fd4 <pvPortMalloc+0xc8>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8004026:	4b54      	ldr	r3, [pc, #336]	@ (8004178 <pvPortMalloc+0x26c>)
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800402c:	429a      	cmp	r2, r3
 800402e:	f000 8088 	beq.w	8004142 <pvPortMalloc+0x236>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) heapPROTECT_BLOCK_POINTER( pxPreviousBlock->pxNextFreeBlock ) ) + xHeapStructSize );
 8004032:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	2208      	movs	r2, #8
 8004038:	4413      	add	r3, r2
 800403a:	62fb      	str	r3, [r7, #44]	@ 0x2c
                    heapVALIDATE_BLOCK_POINTER( pvReturn );
 800403c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800403e:	4a51      	ldr	r2, [pc, #324]	@ (8004184 <pvPortMalloc+0x278>)
 8004040:	4293      	cmp	r3, r2
 8004042:	d305      	bcc.n	8004050 <pvPortMalloc+0x144>
 8004044:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004046:	4a50      	ldr	r2, [pc, #320]	@ (8004188 <pvPortMalloc+0x27c>)
 8004048:	4293      	cmp	r3, r2
 800404a:	d801      	bhi.n	8004050 <pvPortMalloc+0x144>
 800404c:	2301      	movs	r3, #1
 800404e:	e000      	b.n	8004052 <pvPortMalloc+0x146>
 8004050:	2300      	movs	r3, #0
 8004052:	2b00      	cmp	r3, #0
 8004054:	d10d      	bne.n	8004072 <pvPortMalloc+0x166>
    __asm volatile
 8004056:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800405a:	b672      	cpsid	i
 800405c:	f383 8811 	msr	BASEPRI, r3
 8004060:	f3bf 8f6f 	isb	sy
 8004064:	f3bf 8f4f 	dsb	sy
 8004068:	b662      	cpsie	i
 800406a:	617b      	str	r3, [r7, #20]
}
 800406c:	bf00      	nop
 800406e:	bf00      	nop
 8004070:	e7fd      	b.n	800406e <pvPortMalloc+0x162>

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004072:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004074:	681a      	ldr	r2, [r3, #0]
 8004076:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004078:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    configASSERT( heapSUBTRACT_WILL_UNDERFLOW( pxBlock->xBlockSize, xWantedSize ) == 0 );
 800407a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800407c:	685b      	ldr	r3, [r3, #4]
 800407e:	687a      	ldr	r2, [r7, #4]
 8004080:	429a      	cmp	r2, r3
 8004082:	d90d      	bls.n	80040a0 <pvPortMalloc+0x194>
    __asm volatile
 8004084:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004088:	b672      	cpsid	i
 800408a:	f383 8811 	msr	BASEPRI, r3
 800408e:	f3bf 8f6f 	isb	sy
 8004092:	f3bf 8f4f 	dsb	sy
 8004096:	b662      	cpsie	i
 8004098:	613b      	str	r3, [r7, #16]
}
 800409a:	bf00      	nop
 800409c:	bf00      	nop
 800409e:	e7fd      	b.n	800409c <pvPortMalloc+0x190>

                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80040a0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80040a2:	685a      	ldr	r2, [r3, #4]
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	1ad2      	subs	r2, r2, r3
 80040a8:	2308      	movs	r3, #8
 80040aa:	005b      	lsls	r3, r3, #1
 80040ac:	429a      	cmp	r2, r3
 80040ae:	d926      	bls.n	80040fe <pvPortMalloc+0x1f2>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80040b0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	4413      	add	r3, r2
 80040b6:	623b      	str	r3, [r7, #32]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80040b8:	6a3b      	ldr	r3, [r7, #32]
 80040ba:	f003 0307 	and.w	r3, r3, #7
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d00d      	beq.n	80040de <pvPortMalloc+0x1d2>
    __asm volatile
 80040c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80040c6:	b672      	cpsid	i
 80040c8:	f383 8811 	msr	BASEPRI, r3
 80040cc:	f3bf 8f6f 	isb	sy
 80040d0:	f3bf 8f4f 	dsb	sy
 80040d4:	b662      	cpsie	i
 80040d6:	60fb      	str	r3, [r7, #12]
}
 80040d8:	bf00      	nop
 80040da:	bf00      	nop
 80040dc:	e7fd      	b.n	80040da <pvPortMalloc+0x1ce>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80040de:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80040e0:	685a      	ldr	r2, [r3, #4]
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	1ad2      	subs	r2, r2, r3
 80040e6:	6a3b      	ldr	r3, [r7, #32]
 80040e8:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 80040ea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80040ec:	687a      	ldr	r2, [r7, #4]
 80040ee:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        pxNewBlockLink->pxNextFreeBlock = pxPreviousBlock->pxNextFreeBlock;
 80040f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80040f2:	681a      	ldr	r2, [r3, #0]
 80040f4:	6a3b      	ldr	r3, [r7, #32]
 80040f6:	601a      	str	r2, [r3, #0]
                        pxPreviousBlock->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxNewBlockLink );
 80040f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80040fa:	6a3a      	ldr	r2, [r7, #32]
 80040fc:	601a      	str	r2, [r3, #0]
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 80040fe:	4b1f      	ldr	r3, [pc, #124]	@ (800417c <pvPortMalloc+0x270>)
 8004100:	681a      	ldr	r2, [r3, #0]
 8004102:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004104:	685b      	ldr	r3, [r3, #4]
 8004106:	1ad3      	subs	r3, r2, r3
 8004108:	4a1c      	ldr	r2, [pc, #112]	@ (800417c <pvPortMalloc+0x270>)
 800410a:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800410c:	4b1b      	ldr	r3, [pc, #108]	@ (800417c <pvPortMalloc+0x270>)
 800410e:	681a      	ldr	r2, [r3, #0]
 8004110:	4b1e      	ldr	r3, [pc, #120]	@ (800418c <pvPortMalloc+0x280>)
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	429a      	cmp	r2, r3
 8004116:	d203      	bcs.n	8004120 <pvPortMalloc+0x214>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004118:	4b18      	ldr	r3, [pc, #96]	@ (800417c <pvPortMalloc+0x270>)
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	4a1b      	ldr	r2, [pc, #108]	@ (800418c <pvPortMalloc+0x280>)
 800411e:	6013      	str	r3, [r2, #0]
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xAllocatedBlockSize = pxBlock->xBlockSize;
 8004120:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004122:	685b      	ldr	r3, [r3, #4]
 8004124:	62bb      	str	r3, [r7, #40]	@ 0x28

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    heapALLOCATE_BLOCK( pxBlock );
 8004126:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004128:	685b      	ldr	r3, [r3, #4]
 800412a:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800412e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004130:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( NULL );
 8004132:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004134:	2200      	movs	r2, #0
 8004136:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 8004138:	4b15      	ldr	r3, [pc, #84]	@ (8004190 <pvPortMalloc+0x284>)
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	3301      	adds	r3, #1
 800413e:	4a14      	ldr	r2, [pc, #80]	@ (8004190 <pvPortMalloc+0x284>)
 8004140:	6013      	str	r3, [r2, #0]
        traceMALLOC( pvReturn, xAllocatedBlockSize );

        /* Prevent compiler warnings when trace macros are not used. */
        ( void ) xAllocatedBlockSize;
    }
    ( void ) xTaskResumeAll();
 8004142:	f7fe fbc3 	bl	80028cc <xTaskResumeAll>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004146:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004148:	f003 0307 	and.w	r3, r3, #7
 800414c:	2b00      	cmp	r3, #0
 800414e:	d00d      	beq.n	800416c <pvPortMalloc+0x260>
    __asm volatile
 8004150:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004154:	b672      	cpsid	i
 8004156:	f383 8811 	msr	BASEPRI, r3
 800415a:	f3bf 8f6f 	isb	sy
 800415e:	f3bf 8f4f 	dsb	sy
 8004162:	b662      	cpsie	i
 8004164:	60bb      	str	r3, [r7, #8]
}
 8004166:	bf00      	nop
 8004168:	bf00      	nop
 800416a:	e7fd      	b.n	8004168 <pvPortMalloc+0x25c>
    return pvReturn;
 800416c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 800416e:	4618      	mov	r0, r3
 8004170:	3738      	adds	r7, #56	@ 0x38
 8004172:	46bd      	mov	sp, r7
 8004174:	bd80      	pop	{r7, pc}
 8004176:	bf00      	nop
 8004178:	20012e6c 	.word	0x20012e6c
 800417c:	20012e70 	.word	0x20012e70
 8004180:	20012e64 	.word	0x20012e64
 8004184:	20000264 	.word	0x20000264
 8004188:	20012e63 	.word	0x20012e63
 800418c:	20012e74 	.word	0x20012e74
 8004190:	20012e78 	.word	0x20012e78

08004194 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8004194:	b580      	push	{r7, lr}
 8004196:	b088      	sub	sp, #32
 8004198:	af00      	add	r7, sp, #0
 800419a:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	61fb      	str	r3, [r7, #28]
    BlockLink_t * pxLink;

    if( pv != NULL )
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d066      	beq.n	8004274 <vPortFree+0xe0>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 80041a6:	2308      	movs	r3, #8
 80041a8:	425b      	negs	r3, r3
 80041aa:	69fa      	ldr	r2, [r7, #28]
 80041ac:	4413      	add	r3, r2
 80041ae:	61fb      	str	r3, [r7, #28]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 80041b0:	69fb      	ldr	r3, [r7, #28]
 80041b2:	61bb      	str	r3, [r7, #24]

        heapVALIDATE_BLOCK_POINTER( pxLink );
 80041b4:	69bb      	ldr	r3, [r7, #24]
 80041b6:	4a31      	ldr	r2, [pc, #196]	@ (800427c <vPortFree+0xe8>)
 80041b8:	4293      	cmp	r3, r2
 80041ba:	d305      	bcc.n	80041c8 <vPortFree+0x34>
 80041bc:	69bb      	ldr	r3, [r7, #24]
 80041be:	4a30      	ldr	r2, [pc, #192]	@ (8004280 <vPortFree+0xec>)
 80041c0:	4293      	cmp	r3, r2
 80041c2:	d801      	bhi.n	80041c8 <vPortFree+0x34>
 80041c4:	2301      	movs	r3, #1
 80041c6:	e000      	b.n	80041ca <vPortFree+0x36>
 80041c8:	2300      	movs	r3, #0
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d10d      	bne.n	80041ea <vPortFree+0x56>
    __asm volatile
 80041ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80041d2:	b672      	cpsid	i
 80041d4:	f383 8811 	msr	BASEPRI, r3
 80041d8:	f3bf 8f6f 	isb	sy
 80041dc:	f3bf 8f4f 	dsb	sy
 80041e0:	b662      	cpsie	i
 80041e2:	617b      	str	r3, [r7, #20]
}
 80041e4:	bf00      	nop
 80041e6:	bf00      	nop
 80041e8:	e7fd      	b.n	80041e6 <vPortFree+0x52>
        configASSERT( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 );
 80041ea:	69bb      	ldr	r3, [r7, #24]
 80041ec:	685b      	ldr	r3, [r3, #4]
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	db0d      	blt.n	800420e <vPortFree+0x7a>
    __asm volatile
 80041f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80041f6:	b672      	cpsid	i
 80041f8:	f383 8811 	msr	BASEPRI, r3
 80041fc:	f3bf 8f6f 	isb	sy
 8004200:	f3bf 8f4f 	dsb	sy
 8004204:	b662      	cpsie	i
 8004206:	613b      	str	r3, [r7, #16]
}
 8004208:	bf00      	nop
 800420a:	bf00      	nop
 800420c:	e7fd      	b.n	800420a <vPortFree+0x76>
        configASSERT( pxLink->pxNextFreeBlock == heapPROTECT_BLOCK_POINTER( NULL ) );
 800420e:	69bb      	ldr	r3, [r7, #24]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	2b00      	cmp	r3, #0
 8004214:	d00d      	beq.n	8004232 <vPortFree+0x9e>
    __asm volatile
 8004216:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800421a:	b672      	cpsid	i
 800421c:	f383 8811 	msr	BASEPRI, r3
 8004220:	f3bf 8f6f 	isb	sy
 8004224:	f3bf 8f4f 	dsb	sy
 8004228:	b662      	cpsie	i
 800422a:	60fb      	str	r3, [r7, #12]
}
 800422c:	bf00      	nop
 800422e:	bf00      	nop
 8004230:	e7fd      	b.n	800422e <vPortFree+0x9a>

        if( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 )
 8004232:	69bb      	ldr	r3, [r7, #24]
 8004234:	685b      	ldr	r3, [r3, #4]
 8004236:	2b00      	cmp	r3, #0
 8004238:	da1c      	bge.n	8004274 <vPortFree+0xe0>
        {
            if( pxLink->pxNextFreeBlock == heapPROTECT_BLOCK_POINTER( NULL ) )
 800423a:	69bb      	ldr	r3, [r7, #24]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	2b00      	cmp	r3, #0
 8004240:	d118      	bne.n	8004274 <vPortFree+0xe0>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                heapFREE_BLOCK( pxLink );
 8004242:	69bb      	ldr	r3, [r7, #24]
 8004244:	685b      	ldr	r3, [r3, #4]
 8004246:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800424a:	69bb      	ldr	r3, [r7, #24]
 800424c:	605a      	str	r2, [r3, #4]
                        ( void ) memset( puc + xHeapStructSize, 0, pxLink->xBlockSize - xHeapStructSize );
                    }
                }
                #endif

                vTaskSuspendAll();
 800424e:	f7fe fb2f 	bl	80028b0 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8004252:	69bb      	ldr	r3, [r7, #24]
 8004254:	685a      	ldr	r2, [r3, #4]
 8004256:	4b0b      	ldr	r3, [pc, #44]	@ (8004284 <vPortFree+0xf0>)
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	4413      	add	r3, r2
 800425c:	4a09      	ldr	r2, [pc, #36]	@ (8004284 <vPortFree+0xf0>)
 800425e:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004260:	69b8      	ldr	r0, [r7, #24]
 8004262:	f000 f86d 	bl	8004340 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8004266:	4b08      	ldr	r3, [pc, #32]	@ (8004288 <vPortFree+0xf4>)
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	3301      	adds	r3, #1
 800426c:	4a06      	ldr	r2, [pc, #24]	@ (8004288 <vPortFree+0xf4>)
 800426e:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8004270:	f7fe fb2c 	bl	80028cc <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 8004274:	bf00      	nop
 8004276:	3720      	adds	r7, #32
 8004278:	46bd      	mov	sp, r7
 800427a:	bd80      	pop	{r7, pc}
 800427c:	20000264 	.word	0x20000264
 8004280:	20012e63 	.word	0x20012e63
 8004284:	20012e70 	.word	0x20012e70
 8004288:	20012e7c 	.word	0x20012e7c

0800428c <prvHeapInit>:
    return pv;
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 800428c:	b480      	push	{r7}
 800428e:	b085      	sub	sp, #20
 8004290:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    portPOINTER_SIZE_TYPE uxStartAddress, uxEndAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004292:	f44f 3396 	mov.w	r3, #76800	@ 0x12c00
 8004296:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxStartAddress = ( portPOINTER_SIZE_TYPE ) ucHeap;
 8004298:	4b24      	ldr	r3, [pc, #144]	@ (800432c <prvHeapInit+0xa0>)
 800429a:	60fb      	str	r3, [r7, #12]

    if( ( uxStartAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	f003 0307 	and.w	r3, r3, #7
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d00c      	beq.n	80042c0 <prvHeapInit+0x34>
    {
        uxStartAddress += ( portBYTE_ALIGNMENT - 1 );
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	3307      	adds	r3, #7
 80042aa:	60fb      	str	r3, [r7, #12]
        uxStartAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	f023 0307 	bic.w	r3, r3, #7
 80042b2:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= ( size_t ) ( uxStartAddress - ( portPOINTER_SIZE_TYPE ) ucHeap );
 80042b4:	68ba      	ldr	r2, [r7, #8]
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	1ad3      	subs	r3, r2, r3
 80042ba:	4a1c      	ldr	r2, [pc, #112]	@ (800432c <prvHeapInit+0xa0>)
 80042bc:	4413      	add	r3, r2
 80042be:	60bb      	str	r3, [r7, #8]
    }
    #endif

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) heapPROTECT_BLOCK_POINTER( uxStartAddress );
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	4a1b      	ldr	r2, [pc, #108]	@ (8004330 <prvHeapInit+0xa4>)
 80042c4:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 80042c6:	4b1a      	ldr	r3, [pc, #104]	@ (8004330 <prvHeapInit+0xa4>)
 80042c8:	2200      	movs	r2, #0
 80042ca:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxEndAddress = uxStartAddress + ( portPOINTER_SIZE_TYPE ) xTotalHeapSize;
 80042cc:	68fa      	ldr	r2, [r7, #12]
 80042ce:	68bb      	ldr	r3, [r7, #8]
 80042d0:	4413      	add	r3, r2
 80042d2:	607b      	str	r3, [r7, #4]
    uxEndAddress -= ( portPOINTER_SIZE_TYPE ) xHeapStructSize;
 80042d4:	2208      	movs	r2, #8
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	1a9b      	subs	r3, r3, r2
 80042da:	607b      	str	r3, [r7, #4]
    uxEndAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	f023 0307 	bic.w	r3, r3, #7
 80042e2:	607b      	str	r3, [r7, #4]
    pxEnd = ( BlockLink_t * ) uxEndAddress;
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	4a13      	ldr	r2, [pc, #76]	@ (8004334 <prvHeapInit+0xa8>)
 80042e8:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 80042ea:	4b12      	ldr	r3, [pc, #72]	@ (8004334 <prvHeapInit+0xa8>)
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	2200      	movs	r2, #0
 80042f0:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( NULL );
 80042f2:	4b10      	ldr	r3, [pc, #64]	@ (8004334 <prvHeapInit+0xa8>)
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	2200      	movs	r2, #0
 80042f8:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( BlockLink_t * ) uxStartAddress;
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = ( size_t ) ( uxEndAddress - ( portPOINTER_SIZE_TYPE ) pxFirstFreeBlock );
 80042fe:	683b      	ldr	r3, [r7, #0]
 8004300:	687a      	ldr	r2, [r7, #4]
 8004302:	1ad2      	subs	r2, r2, r3
 8004304:	683b      	ldr	r3, [r7, #0]
 8004306:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxEnd );
 8004308:	4b0a      	ldr	r3, [pc, #40]	@ (8004334 <prvHeapInit+0xa8>)
 800430a:	681a      	ldr	r2, [r3, #0]
 800430c:	683b      	ldr	r3, [r7, #0]
 800430e:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004310:	683b      	ldr	r3, [r7, #0]
 8004312:	685b      	ldr	r3, [r3, #4]
 8004314:	4a08      	ldr	r2, [pc, #32]	@ (8004338 <prvHeapInit+0xac>)
 8004316:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004318:	683b      	ldr	r3, [r7, #0]
 800431a:	685b      	ldr	r3, [r3, #4]
 800431c:	4a07      	ldr	r2, [pc, #28]	@ (800433c <prvHeapInit+0xb0>)
 800431e:	6013      	str	r3, [r2, #0]
}
 8004320:	bf00      	nop
 8004322:	3714      	adds	r7, #20
 8004324:	46bd      	mov	sp, r7
 8004326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800432a:	4770      	bx	lr
 800432c:	20000264 	.word	0x20000264
 8004330:	20012e64 	.word	0x20012e64
 8004334:	20012e6c 	.word	0x20012e6c
 8004338:	20012e74 	.word	0x20012e74
 800433c:	20012e70 	.word	0x20012e70

08004340 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8004340:	b480      	push	{r7}
 8004342:	b087      	sub	sp, #28
 8004344:	af00      	add	r7, sp, #0
 8004346:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) < pxBlockToInsert; pxIterator = heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) )
 8004348:	4b37      	ldr	r3, [pc, #220]	@ (8004428 <prvInsertBlockIntoFreeList+0xe8>)
 800434a:	617b      	str	r3, [r7, #20]
 800434c:	e002      	b.n	8004354 <prvInsertBlockIntoFreeList+0x14>
 800434e:	697b      	ldr	r3, [r7, #20]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	617b      	str	r3, [r7, #20]
 8004354:	697b      	ldr	r3, [r7, #20]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	687a      	ldr	r2, [r7, #4]
 800435a:	429a      	cmp	r2, r3
 800435c:	d8f7      	bhi.n	800434e <prvInsertBlockIntoFreeList+0xe>
    {
        /* Nothing to do here, just iterate to the right position. */
    }

    if( pxIterator != &xStart )
 800435e:	697b      	ldr	r3, [r7, #20]
 8004360:	4a31      	ldr	r2, [pc, #196]	@ (8004428 <prvInsertBlockIntoFreeList+0xe8>)
 8004362:	4293      	cmp	r3, r2
 8004364:	d01a      	beq.n	800439c <prvInsertBlockIntoFreeList+0x5c>
    {
        heapVALIDATE_BLOCK_POINTER( pxIterator );
 8004366:	697b      	ldr	r3, [r7, #20]
 8004368:	4a30      	ldr	r2, [pc, #192]	@ (800442c <prvInsertBlockIntoFreeList+0xec>)
 800436a:	4293      	cmp	r3, r2
 800436c:	d305      	bcc.n	800437a <prvInsertBlockIntoFreeList+0x3a>
 800436e:	697b      	ldr	r3, [r7, #20]
 8004370:	4a2f      	ldr	r2, [pc, #188]	@ (8004430 <prvInsertBlockIntoFreeList+0xf0>)
 8004372:	4293      	cmp	r3, r2
 8004374:	d801      	bhi.n	800437a <prvInsertBlockIntoFreeList+0x3a>
 8004376:	2301      	movs	r3, #1
 8004378:	e000      	b.n	800437c <prvInsertBlockIntoFreeList+0x3c>
 800437a:	2300      	movs	r3, #0
 800437c:	2b00      	cmp	r3, #0
 800437e:	d10d      	bne.n	800439c <prvInsertBlockIntoFreeList+0x5c>
    __asm volatile
 8004380:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004384:	b672      	cpsid	i
 8004386:	f383 8811 	msr	BASEPRI, r3
 800438a:	f3bf 8f6f 	isb	sy
 800438e:	f3bf 8f4f 	dsb	sy
 8004392:	b662      	cpsie	i
 8004394:	60fb      	str	r3, [r7, #12]
}
 8004396:	bf00      	nop
 8004398:	bf00      	nop
 800439a:	e7fd      	b.n	8004398 <prvInsertBlockIntoFreeList+0x58>
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 800439c:	697b      	ldr	r3, [r7, #20]
 800439e:	613b      	str	r3, [r7, #16]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80043a0:	697b      	ldr	r3, [r7, #20]
 80043a2:	685b      	ldr	r3, [r3, #4]
 80043a4:	693a      	ldr	r2, [r7, #16]
 80043a6:	4413      	add	r3, r2
 80043a8:	687a      	ldr	r2, [r7, #4]
 80043aa:	429a      	cmp	r2, r3
 80043ac:	d108      	bne.n	80043c0 <prvInsertBlockIntoFreeList+0x80>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80043ae:	697b      	ldr	r3, [r7, #20]
 80043b0:	685a      	ldr	r2, [r3, #4]
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	685b      	ldr	r3, [r3, #4]
 80043b6:	441a      	add	r2, r3
 80043b8:	697b      	ldr	r3, [r7, #20]
 80043ba:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 80043bc:	697b      	ldr	r3, [r7, #20]
 80043be:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	613b      	str	r3, [r7, #16]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) )
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	685b      	ldr	r3, [r3, #4]
 80043c8:	693a      	ldr	r2, [r7, #16]
 80043ca:	441a      	add	r2, r3
 80043cc:	697b      	ldr	r3, [r7, #20]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	429a      	cmp	r2, r3
 80043d2:	d118      	bne.n	8004406 <prvInsertBlockIntoFreeList+0xc6>
    {
        if( heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) != pxEnd )
 80043d4:	697b      	ldr	r3, [r7, #20]
 80043d6:	681a      	ldr	r2, [r3, #0]
 80043d8:	4b16      	ldr	r3, [pc, #88]	@ (8004434 <prvInsertBlockIntoFreeList+0xf4>)
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	429a      	cmp	r2, r3
 80043de:	d00d      	beq.n	80043fc <prvInsertBlockIntoFreeList+0xbc>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock )->xBlockSize;
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	685a      	ldr	r2, [r3, #4]
 80043e4:	697b      	ldr	r3, [r7, #20]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	685b      	ldr	r3, [r3, #4]
 80043ea:	441a      	add	r2, r3
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock )->pxNextFreeBlock;
 80043f0:	697b      	ldr	r3, [r7, #20]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	681a      	ldr	r2, [r3, #0]
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	601a      	str	r2, [r3, #0]
 80043fa:	e008      	b.n	800440e <prvInsertBlockIntoFreeList+0xce>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxEnd );
 80043fc:	4b0d      	ldr	r3, [pc, #52]	@ (8004434 <prvInsertBlockIntoFreeList+0xf4>)
 80043fe:	681a      	ldr	r2, [r3, #0]
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	601a      	str	r2, [r3, #0]
 8004404:	e003      	b.n	800440e <prvInsertBlockIntoFreeList+0xce>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004406:	697b      	ldr	r3, [r7, #20]
 8004408:	681a      	ldr	r2, [r3, #0]
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gap, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 800440e:	697a      	ldr	r2, [r7, #20]
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	429a      	cmp	r2, r3
 8004414:	d002      	beq.n	800441c <prvInsertBlockIntoFreeList+0xdc>
    {
        pxIterator->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxBlockToInsert );
 8004416:	697b      	ldr	r3, [r7, #20]
 8004418:	687a      	ldr	r2, [r7, #4]
 800441a:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800441c:	bf00      	nop
 800441e:	371c      	adds	r7, #28
 8004420:	46bd      	mov	sp, r7
 8004422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004426:	4770      	bx	lr
 8004428:	20012e64 	.word	0x20012e64
 800442c:	20000264 	.word	0x20000264
 8004430:	20012e63 	.word	0x20012e63
 8004434:	20012e6c 	.word	0x20012e6c

08004438 <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 8004438:	b580      	push	{r7, lr}
 800443a:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 800443c:	4803      	ldr	r0, [pc, #12]	@ (800444c <_cbSendSystemDesc+0x14>)
 800443e:	f001 fa31 	bl	80058a4 <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 8004442:	4803      	ldr	r0, [pc, #12]	@ (8004450 <_cbSendSystemDesc+0x18>)
 8004444:	f001 fa2e 	bl	80058a4 <SEGGER_SYSVIEW_SendSysDesc>
}
 8004448:	bf00      	nop
 800444a:	bd80      	pop	{r7, pc}
 800444c:	08006aa4 	.word	0x08006aa4
 8004450:	08006ae4 	.word	0x08006ae4

08004454 <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 8004454:	b580      	push	{r7, lr}
 8004456:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 8004458:	4b06      	ldr	r3, [pc, #24]	@ (8004474 <SEGGER_SYSVIEW_Conf+0x20>)
 800445a:	6818      	ldr	r0, [r3, #0]
 800445c:	4b05      	ldr	r3, [pc, #20]	@ (8004474 <SEGGER_SYSVIEW_Conf+0x20>)
 800445e:	6819      	ldr	r1, [r3, #0]
 8004460:	4b05      	ldr	r3, [pc, #20]	@ (8004478 <SEGGER_SYSVIEW_Conf+0x24>)
 8004462:	4a06      	ldr	r2, [pc, #24]	@ (800447c <SEGGER_SYSVIEW_Conf+0x28>)
 8004464:	f000 fea4 	bl	80051b0 <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 8004468:	f04f 5080 	mov.w	r0, #268435456	@ 0x10000000
 800446c:	f000 fee4 	bl	8005238 <SEGGER_SYSVIEW_SetRAMBase>
}
 8004470:	bf00      	nop
 8004472:	bd80      	pop	{r7, pc}
 8004474:	20000000 	.word	0x20000000
 8004478:	08004439 	.word	0x08004439
 800447c:	08006b84 	.word	0x08006b84

08004480 <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 8004480:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004482:	b085      	sub	sp, #20
 8004484:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 8004486:	2300      	movs	r3, #0
 8004488:	607b      	str	r3, [r7, #4]
 800448a:	e033      	b.n	80044f4 <_cbSendTaskList+0x74>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 800448c:	491e      	ldr	r1, [pc, #120]	@ (8004508 <_cbSendTaskList+0x88>)
 800448e:	687a      	ldr	r2, [r7, #4]
 8004490:	4613      	mov	r3, r2
 8004492:	009b      	lsls	r3, r3, #2
 8004494:	4413      	add	r3, r2
 8004496:	009b      	lsls	r3, r3, #2
 8004498:	440b      	add	r3, r1
 800449a:	6818      	ldr	r0, [r3, #0]
 800449c:	491a      	ldr	r1, [pc, #104]	@ (8004508 <_cbSendTaskList+0x88>)
 800449e:	687a      	ldr	r2, [r7, #4]
 80044a0:	4613      	mov	r3, r2
 80044a2:	009b      	lsls	r3, r3, #2
 80044a4:	4413      	add	r3, r2
 80044a6:	009b      	lsls	r3, r3, #2
 80044a8:	440b      	add	r3, r1
 80044aa:	3304      	adds	r3, #4
 80044ac:	6819      	ldr	r1, [r3, #0]
 80044ae:	4c16      	ldr	r4, [pc, #88]	@ (8004508 <_cbSendTaskList+0x88>)
 80044b0:	687a      	ldr	r2, [r7, #4]
 80044b2:	4613      	mov	r3, r2
 80044b4:	009b      	lsls	r3, r3, #2
 80044b6:	4413      	add	r3, r2
 80044b8:	009b      	lsls	r3, r3, #2
 80044ba:	4423      	add	r3, r4
 80044bc:	3308      	adds	r3, #8
 80044be:	681c      	ldr	r4, [r3, #0]
 80044c0:	4d11      	ldr	r5, [pc, #68]	@ (8004508 <_cbSendTaskList+0x88>)
 80044c2:	687a      	ldr	r2, [r7, #4]
 80044c4:	4613      	mov	r3, r2
 80044c6:	009b      	lsls	r3, r3, #2
 80044c8:	4413      	add	r3, r2
 80044ca:	009b      	lsls	r3, r3, #2
 80044cc:	442b      	add	r3, r5
 80044ce:	330c      	adds	r3, #12
 80044d0:	681d      	ldr	r5, [r3, #0]
 80044d2:	4e0d      	ldr	r6, [pc, #52]	@ (8004508 <_cbSendTaskList+0x88>)
 80044d4:	687a      	ldr	r2, [r7, #4]
 80044d6:	4613      	mov	r3, r2
 80044d8:	009b      	lsls	r3, r3, #2
 80044da:	4413      	add	r3, r2
 80044dc:	009b      	lsls	r3, r3, #2
 80044de:	4433      	add	r3, r6
 80044e0:	3310      	adds	r3, #16
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	9300      	str	r3, [sp, #0]
 80044e6:	462b      	mov	r3, r5
 80044e8:	4622      	mov	r2, r4
 80044ea:	f000 f8bd 	bl	8004668 <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	3301      	adds	r3, #1
 80044f2:	607b      	str	r3, [r7, #4]
 80044f4:	4b05      	ldr	r3, [pc, #20]	@ (800450c <_cbSendTaskList+0x8c>)
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	687a      	ldr	r2, [r7, #4]
 80044fa:	429a      	cmp	r2, r3
 80044fc:	d3c6      	bcc.n	800448c <_cbSendTaskList+0xc>
  }
}
 80044fe:	bf00      	nop
 8004500:	bf00      	nop
 8004502:	370c      	adds	r7, #12
 8004504:	46bd      	mov	sp, r7
 8004506:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004508:	20012e80 	.word	0x20012e80
 800450c:	20012f20 	.word	0x20012f20

08004510 <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 8004510:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004514:	b082      	sub	sp, #8
 8004516:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 8004518:	f7fe faee 	bl	8002af8 <xTaskGetTickCountFromISR>
 800451c:	4603      	mov	r3, r0
 800451e:	2200      	movs	r2, #0
 8004520:	469a      	mov	sl, r3
 8004522:	4693      	mov	fp, r2
 8004524:	e9c7 ab00 	strd	sl, fp, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 8004528:	e9d7 0100 	ldrd	r0, r1, [r7]
 800452c:	4602      	mov	r2, r0
 800452e:	460b      	mov	r3, r1
 8004530:	f04f 0a00 	mov.w	sl, #0
 8004534:	f04f 0b00 	mov.w	fp, #0
 8004538:	ea4f 1b43 	mov.w	fp, r3, lsl #5
 800453c:	ea4b 6bd2 	orr.w	fp, fp, r2, lsr #27
 8004540:	ea4f 1a42 	mov.w	sl, r2, lsl #5
 8004544:	4652      	mov	r2, sl
 8004546:	465b      	mov	r3, fp
 8004548:	1a14      	subs	r4, r2, r0
 800454a:	eb63 0501 	sbc.w	r5, r3, r1
 800454e:	f04f 0200 	mov.w	r2, #0
 8004552:	f04f 0300 	mov.w	r3, #0
 8004556:	00ab      	lsls	r3, r5, #2
 8004558:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 800455c:	00a2      	lsls	r2, r4, #2
 800455e:	4614      	mov	r4, r2
 8004560:	461d      	mov	r5, r3
 8004562:	eb14 0800 	adds.w	r8, r4, r0
 8004566:	eb45 0901 	adc.w	r9, r5, r1
 800456a:	f04f 0200 	mov.w	r2, #0
 800456e:	f04f 0300 	mov.w	r3, #0
 8004572:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004576:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800457a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800457e:	4690      	mov	r8, r2
 8004580:	4699      	mov	r9, r3
 8004582:	e9c7 8900 	strd	r8, r9, [r7]
  return Time;
 8004586:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 800458a:	4610      	mov	r0, r2
 800458c:	4619      	mov	r1, r3
 800458e:	3708      	adds	r7, #8
 8004590:	46bd      	mov	sp, r7
 8004592:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

08004598 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 8004598:	b580      	push	{r7, lr}
 800459a:	b086      	sub	sp, #24
 800459c:	af02      	add	r7, sp, #8
 800459e:	60f8      	str	r0, [r7, #12]
 80045a0:	60b9      	str	r1, [r7, #8]
 80045a2:	607a      	str	r2, [r7, #4]
 80045a4:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 80045a6:	2205      	movs	r2, #5
 80045a8:	492b      	ldr	r1, [pc, #172]	@ (8004658 <SYSVIEW_AddTask+0xc0>)
 80045aa:	68b8      	ldr	r0, [r7, #8]
 80045ac:	f001 ff7c 	bl	80064a8 <memcmp>
 80045b0:	4603      	mov	r3, r0
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d04b      	beq.n	800464e <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 80045b6:	4b29      	ldr	r3, [pc, #164]	@ (800465c <SYSVIEW_AddTask+0xc4>)
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	2b07      	cmp	r3, #7
 80045bc:	d903      	bls.n	80045c6 <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 80045be:	4828      	ldr	r0, [pc, #160]	@ (8004660 <SYSVIEW_AddTask+0xc8>)
 80045c0:	f001 fd0c 	bl	8005fdc <SEGGER_SYSVIEW_Warn>
    return;
 80045c4:	e044      	b.n	8004650 <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 80045c6:	4b25      	ldr	r3, [pc, #148]	@ (800465c <SYSVIEW_AddTask+0xc4>)
 80045c8:	681a      	ldr	r2, [r3, #0]
 80045ca:	4926      	ldr	r1, [pc, #152]	@ (8004664 <SYSVIEW_AddTask+0xcc>)
 80045cc:	4613      	mov	r3, r2
 80045ce:	009b      	lsls	r3, r3, #2
 80045d0:	4413      	add	r3, r2
 80045d2:	009b      	lsls	r3, r3, #2
 80045d4:	440b      	add	r3, r1
 80045d6:	68fa      	ldr	r2, [r7, #12]
 80045d8:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 80045da:	4b20      	ldr	r3, [pc, #128]	@ (800465c <SYSVIEW_AddTask+0xc4>)
 80045dc:	681a      	ldr	r2, [r3, #0]
 80045de:	4921      	ldr	r1, [pc, #132]	@ (8004664 <SYSVIEW_AddTask+0xcc>)
 80045e0:	4613      	mov	r3, r2
 80045e2:	009b      	lsls	r3, r3, #2
 80045e4:	4413      	add	r3, r2
 80045e6:	009b      	lsls	r3, r3, #2
 80045e8:	440b      	add	r3, r1
 80045ea:	3304      	adds	r3, #4
 80045ec:	68ba      	ldr	r2, [r7, #8]
 80045ee:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 80045f0:	4b1a      	ldr	r3, [pc, #104]	@ (800465c <SYSVIEW_AddTask+0xc4>)
 80045f2:	681a      	ldr	r2, [r3, #0]
 80045f4:	491b      	ldr	r1, [pc, #108]	@ (8004664 <SYSVIEW_AddTask+0xcc>)
 80045f6:	4613      	mov	r3, r2
 80045f8:	009b      	lsls	r3, r3, #2
 80045fa:	4413      	add	r3, r2
 80045fc:	009b      	lsls	r3, r3, #2
 80045fe:	440b      	add	r3, r1
 8004600:	3308      	adds	r3, #8
 8004602:	687a      	ldr	r2, [r7, #4]
 8004604:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 8004606:	4b15      	ldr	r3, [pc, #84]	@ (800465c <SYSVIEW_AddTask+0xc4>)
 8004608:	681a      	ldr	r2, [r3, #0]
 800460a:	4916      	ldr	r1, [pc, #88]	@ (8004664 <SYSVIEW_AddTask+0xcc>)
 800460c:	4613      	mov	r3, r2
 800460e:	009b      	lsls	r3, r3, #2
 8004610:	4413      	add	r3, r2
 8004612:	009b      	lsls	r3, r3, #2
 8004614:	440b      	add	r3, r1
 8004616:	330c      	adds	r3, #12
 8004618:	683a      	ldr	r2, [r7, #0]
 800461a:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 800461c:	4b0f      	ldr	r3, [pc, #60]	@ (800465c <SYSVIEW_AddTask+0xc4>)
 800461e:	681a      	ldr	r2, [r3, #0]
 8004620:	4910      	ldr	r1, [pc, #64]	@ (8004664 <SYSVIEW_AddTask+0xcc>)
 8004622:	4613      	mov	r3, r2
 8004624:	009b      	lsls	r3, r3, #2
 8004626:	4413      	add	r3, r2
 8004628:	009b      	lsls	r3, r3, #2
 800462a:	440b      	add	r3, r1
 800462c:	3310      	adds	r3, #16
 800462e:	69ba      	ldr	r2, [r7, #24]
 8004630:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 8004632:	4b0a      	ldr	r3, [pc, #40]	@ (800465c <SYSVIEW_AddTask+0xc4>)
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	3301      	adds	r3, #1
 8004638:	4a08      	ldr	r2, [pc, #32]	@ (800465c <SYSVIEW_AddTask+0xc4>)
 800463a:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 800463c:	69bb      	ldr	r3, [r7, #24]
 800463e:	9300      	str	r3, [sp, #0]
 8004640:	683b      	ldr	r3, [r7, #0]
 8004642:	687a      	ldr	r2, [r7, #4]
 8004644:	68b9      	ldr	r1, [r7, #8]
 8004646:	68f8      	ldr	r0, [r7, #12]
 8004648:	f000 f80e 	bl	8004668 <SYSVIEW_SendTaskInfo>
 800464c:	e000      	b.n	8004650 <SYSVIEW_AddTask+0xb8>
    return;
 800464e:	bf00      	nop

}
 8004650:	3710      	adds	r7, #16
 8004652:	46bd      	mov	sp, r7
 8004654:	bd80      	pop	{r7, pc}
 8004656:	bf00      	nop
 8004658:	08006af4 	.word	0x08006af4
 800465c:	20012f20 	.word	0x20012f20
 8004660:	08006afc 	.word	0x08006afc
 8004664:	20012e80 	.word	0x20012e80

08004668 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 8004668:	b580      	push	{r7, lr}
 800466a:	b08a      	sub	sp, #40	@ 0x28
 800466c:	af00      	add	r7, sp, #0
 800466e:	60f8      	str	r0, [r7, #12]
 8004670:	60b9      	str	r1, [r7, #8]
 8004672:	607a      	str	r2, [r7, #4]
 8004674:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 8004676:	f107 0310 	add.w	r3, r7, #16
 800467a:	2218      	movs	r2, #24
 800467c:	2100      	movs	r1, #0
 800467e:	4618      	mov	r0, r3
 8004680:	f001 ff22 	bl	80064c8 <memset>
  TaskInfo.TaskID     = TaskID;
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	613b      	str	r3, [r7, #16]
  TaskInfo.sName      = sName;
 8004688:	68bb      	ldr	r3, [r7, #8]
 800468a:	617b      	str	r3, [r7, #20]
  TaskInfo.Prio       = Prio;
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	61bb      	str	r3, [r7, #24]
  TaskInfo.StackBase  = StackBase;
 8004690:	683b      	ldr	r3, [r7, #0]
 8004692:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackSize  = StackSize;
 8004694:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004696:	623b      	str	r3, [r7, #32]
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 8004698:	f107 0310 	add.w	r3, r7, #16
 800469c:	4618      	mov	r0, r3
 800469e:	f001 f809 	bl	80056b4 <SEGGER_SYSVIEW_SendTaskInfo>
}
 80046a2:	bf00      	nop
 80046a4:	3728      	adds	r7, #40	@ 0x28
 80046a6:	46bd      	mov	sp, r7
 80046a8:	bd80      	pop	{r7, pc}
	...

080046ac <_DoInit>:
      if (pRTTCBInit->acID[0] != 'S') {                                                      \
        _DoInit();                                                                           \
      }                                                                                      \
    } while (0)

static void _DoInit(void) {
 80046ac:	b580      	push	{r7, lr}
 80046ae:	b082      	sub	sp, #8
 80046b0:	af00      	add	r7, sp, #0
  static const char _aInitStr[] = "\0\0\0\0\0\0TTR REGGES";  // Init complete ID string to make sure that things also work if RTT is linked to a no-init memory area
  unsigned i;
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 80046b2:	4b26      	ldr	r3, [pc, #152]	@ (800474c <_DoInit+0xa0>)
 80046b4:	603b      	str	r3, [r7, #0]
  memset((SEGGER_RTT_CB*)p, 0, sizeof(_SEGGER_RTT));         // Make sure that the RTT CB is always zero initialized.
 80046b6:	22a8      	movs	r2, #168	@ 0xa8
 80046b8:	2100      	movs	r1, #0
 80046ba:	6838      	ldr	r0, [r7, #0]
 80046bc:	f001 ff04 	bl	80064c8 <memset>
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 80046c0:	683b      	ldr	r3, [r7, #0]
 80046c2:	2203      	movs	r2, #3
 80046c4:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 80046c6:	683b      	ldr	r3, [r7, #0]
 80046c8:	2203      	movs	r2, #3
 80046ca:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 80046cc:	683b      	ldr	r3, [r7, #0]
 80046ce:	4a20      	ldr	r2, [pc, #128]	@ (8004750 <_DoInit+0xa4>)
 80046d0:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 80046d2:	683b      	ldr	r3, [r7, #0]
 80046d4:	4a1f      	ldr	r2, [pc, #124]	@ (8004754 <_DoInit+0xa8>)
 80046d6:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 80046d8:	683b      	ldr	r3, [r7, #0]
 80046da:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80046de:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 80046e0:	683b      	ldr	r3, [r7, #0]
 80046e2:	2200      	movs	r2, #0
 80046e4:	629a      	str	r2, [r3, #40]	@ 0x28
  p->aUp[0].WrOff         = 0u;
 80046e6:	683b      	ldr	r3, [r7, #0]
 80046e8:	2200      	movs	r2, #0
 80046ea:	625a      	str	r2, [r3, #36]	@ 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 80046ec:	683b      	ldr	r3, [r7, #0]
 80046ee:	2200      	movs	r2, #0
 80046f0:	62da      	str	r2, [r3, #44]	@ 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 80046f2:	683b      	ldr	r3, [r7, #0]
 80046f4:	4a16      	ldr	r2, [pc, #88]	@ (8004750 <_DoInit+0xa4>)
 80046f6:	661a      	str	r2, [r3, #96]	@ 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 80046f8:	683b      	ldr	r3, [r7, #0]
 80046fa:	4a17      	ldr	r2, [pc, #92]	@ (8004758 <_DoInit+0xac>)
 80046fc:	665a      	str	r2, [r3, #100]	@ 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 80046fe:	683b      	ldr	r3, [r7, #0]
 8004700:	2210      	movs	r2, #16
 8004702:	669a      	str	r2, [r3, #104]	@ 0x68
  p->aDown[0].RdOff         = 0u;
 8004704:	683b      	ldr	r3, [r7, #0]
 8004706:	2200      	movs	r2, #0
 8004708:	671a      	str	r2, [r3, #112]	@ 0x70
  p->aDown[0].WrOff         = 0u;
 800470a:	683b      	ldr	r3, [r7, #0]
 800470c:	2200      	movs	r2, #0
 800470e:	66da      	str	r2, [r3, #108]	@ 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8004710:	683b      	ldr	r3, [r7, #0]
 8004712:	2200      	movs	r2, #0
 8004714:	675a      	str	r2, [r3, #116]	@ 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string backwards to make sure that "SEGGER RTT" is not found in initializer memory (usually flash),
  // as this would cause J-Link to "find" the control block at a wrong address.
  //
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 8004716:	f3bf 8f5f 	dmb	sy
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 800471a:	2300      	movs	r3, #0
 800471c:	607b      	str	r3, [r7, #4]
 800471e:	e00c      	b.n	800473a <_DoInit+0x8e>
    p->acID[i] = _aInitStr[sizeof(_aInitStr) - 2 - i];  // Skip terminating \0 at the end of the array
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	f1c3 030f 	rsb	r3, r3, #15
 8004726:	4a0d      	ldr	r2, [pc, #52]	@ (800475c <_DoInit+0xb0>)
 8004728:	5cd1      	ldrb	r1, [r2, r3]
 800472a:	683a      	ldr	r2, [r7, #0]
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	4413      	add	r3, r2
 8004730:	460a      	mov	r2, r1
 8004732:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	3301      	adds	r3, #1
 8004738:	607b      	str	r3, [r7, #4]
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	2b0f      	cmp	r3, #15
 800473e:	d9ef      	bls.n	8004720 <_DoInit+0x74>
  }
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 8004740:	f3bf 8f5f 	dmb	sy
}
 8004744:	bf00      	nop
 8004746:	3708      	adds	r7, #8
 8004748:	46bd      	mov	sp, r7
 800474a:	bd80      	pop	{r7, pc}
 800474c:	20012f24 	.word	0x20012f24
 8004750:	08006b4c 	.word	0x08006b4c
 8004754:	20012fcc 	.word	0x20012fcc
 8004758:	200133cc 	.word	0x200133cc
 800475c:	08006b8c 	.word	0x08006b8c

08004760 <_WriteBlocking>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Return value
*    >= 0 - Number of bytes written into buffer.
*/
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
 8004760:	b580      	push	{r7, lr}
 8004762:	b08a      	sub	sp, #40	@ 0x28
 8004764:	af00      	add	r7, sp, #0
 8004766:	60f8      	str	r0, [r7, #12]
 8004768:	60b9      	str	r1, [r7, #8]
 800476a:	607a      	str	r2, [r7, #4]
  unsigned WrOff;
  volatile char* pDst;
  //
  // Write data to buffer and handle wrap-around if necessary
  //
  NumBytesWritten = 0u;
 800476c:	2300      	movs	r3, #0
 800476e:	623b      	str	r3, [r7, #32]
  WrOff = pRing->WrOff;
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	68db      	ldr	r3, [r3, #12]
 8004774:	61fb      	str	r3, [r7, #28]
  do {
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	691b      	ldr	r3, [r3, #16]
 800477a:	61bb      	str	r3, [r7, #24]
    if (RdOff > WrOff) {
 800477c:	69ba      	ldr	r2, [r7, #24]
 800477e:	69fb      	ldr	r3, [r7, #28]
 8004780:	429a      	cmp	r2, r3
 8004782:	d905      	bls.n	8004790 <_WriteBlocking+0x30>
      NumBytesToWrite = RdOff - WrOff - 1u;
 8004784:	69ba      	ldr	r2, [r7, #24]
 8004786:	69fb      	ldr	r3, [r7, #28]
 8004788:	1ad3      	subs	r3, r2, r3
 800478a:	3b01      	subs	r3, #1
 800478c:	627b      	str	r3, [r7, #36]	@ 0x24
 800478e:	e007      	b.n	80047a0 <_WriteBlocking+0x40>
    } else {
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	689a      	ldr	r2, [r3, #8]
 8004794:	69b9      	ldr	r1, [r7, #24]
 8004796:	69fb      	ldr	r3, [r7, #28]
 8004798:	1acb      	subs	r3, r1, r3
 800479a:	4413      	add	r3, r2
 800479c:	3b01      	subs	r3, #1
 800479e:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	689a      	ldr	r2, [r3, #8]
 80047a4:	69fb      	ldr	r3, [r7, #28]
 80047a6:	1ad3      	subs	r3, r2, r3
 80047a8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80047aa:	4293      	cmp	r3, r2
 80047ac:	bf28      	it	cs
 80047ae:	4613      	movcs	r3, r2
 80047b0:	627b      	str	r3, [r7, #36]	@ 0x24
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
 80047b2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	4293      	cmp	r3, r2
 80047b8:	bf28      	it	cs
 80047ba:	4613      	movcs	r3, r2
 80047bc:	627b      	str	r3, [r7, #36]	@ 0x24
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	685a      	ldr	r2, [r3, #4]
 80047c2:	69fb      	ldr	r3, [r7, #28]
 80047c4:	4413      	add	r3, r2
 80047c6:	617b      	str	r3, [r7, #20]
    WrOff           += NumBytesToWrite;
    while (NumBytesToWrite--) {
      *pDst++ = *pBuffer++;
    };
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pBuffer, NumBytesToWrite);
 80047c8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80047ca:	68b9      	ldr	r1, [r7, #8]
 80047cc:	6978      	ldr	r0, [r7, #20]
 80047ce:	f001 fee4 	bl	800659a <memcpy>
    NumBytesWritten += NumBytesToWrite;
 80047d2:	6a3a      	ldr	r2, [r7, #32]
 80047d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047d6:	4413      	add	r3, r2
 80047d8:	623b      	str	r3, [r7, #32]
    pBuffer         += NumBytesToWrite;
 80047da:	68ba      	ldr	r2, [r7, #8]
 80047dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047de:	4413      	add	r3, r2
 80047e0:	60bb      	str	r3, [r7, #8]
    NumBytes        -= NumBytesToWrite;
 80047e2:	687a      	ldr	r2, [r7, #4]
 80047e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047e6:	1ad3      	subs	r3, r2, r3
 80047e8:	607b      	str	r3, [r7, #4]
    WrOff           += NumBytesToWrite;
 80047ea:	69fa      	ldr	r2, [r7, #28]
 80047ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047ee:	4413      	add	r3, r2
 80047f0:	61fb      	str	r3, [r7, #28]
#endif
    if (WrOff == pRing->SizeOfBuffer) {
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	689b      	ldr	r3, [r3, #8]
 80047f6:	69fa      	ldr	r2, [r7, #28]
 80047f8:	429a      	cmp	r2, r3
 80047fa:	d101      	bne.n	8004800 <_WriteBlocking+0xa0>
      WrOff = 0u;
 80047fc:	2300      	movs	r3, #0
 80047fe:	61fb      	str	r3, [r7, #28]
    }
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8004800:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff;
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	69fa      	ldr	r2, [r7, #28]
 8004808:	60da      	str	r2, [r3, #12]
  } while (NumBytes);
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	2b00      	cmp	r3, #0
 800480e:	d1b2      	bne.n	8004776 <_WriteBlocking+0x16>
  return NumBytesWritten;
 8004810:	6a3b      	ldr	r3, [r7, #32]
}
 8004812:	4618      	mov	r0, r3
 8004814:	3728      	adds	r7, #40	@ 0x28
 8004816:	46bd      	mov	sp, r7
 8004818:	bd80      	pop	{r7, pc}

0800481a <_WriteNoCheck>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Notes
*    (1) If there might not be enough space in the "Up"-buffer, call _WriteBlocking
*/
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
 800481a:	b580      	push	{r7, lr}
 800481c:	b088      	sub	sp, #32
 800481e:	af00      	add	r7, sp, #0
 8004820:	60f8      	str	r0, [r7, #12]
 8004822:	60b9      	str	r1, [r7, #8]
 8004824:	607a      	str	r2, [r7, #4]
  unsigned NumBytesAtOnce;
  unsigned WrOff;
  unsigned Rem;
  volatile char* pDst;

  WrOff = pRing->WrOff;
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	68db      	ldr	r3, [r3, #12]
 800482a:	61fb      	str	r3, [r7, #28]
  Rem = pRing->SizeOfBuffer - WrOff;
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	689a      	ldr	r2, [r3, #8]
 8004830:	69fb      	ldr	r3, [r7, #28]
 8004832:	1ad3      	subs	r3, r2, r3
 8004834:	61bb      	str	r3, [r7, #24]
  if (Rem > NumBytes) {
 8004836:	69ba      	ldr	r2, [r7, #24]
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	429a      	cmp	r2, r3
 800483c:	d911      	bls.n	8004862 <_WriteNoCheck+0x48>
    //
    // All data fits before wrap around
    //
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	685a      	ldr	r2, [r3, #4]
 8004842:	69fb      	ldr	r3, [r7, #28]
 8004844:	4413      	add	r3, r2
 8004846:	613b      	str	r3, [r7, #16]
      *pDst++ = *pData++;
    };
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = WrOff;
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytes);
 8004848:	687a      	ldr	r2, [r7, #4]
 800484a:	68b9      	ldr	r1, [r7, #8]
 800484c:	6938      	ldr	r0, [r7, #16]
 800484e:	f001 fea4 	bl	800659a <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8004852:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff + NumBytes;
 8004856:	69fa      	ldr	r2, [r7, #28]
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	441a      	add	r2, r3
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	60da      	str	r2, [r3, #12]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = NumBytesAtOnce;
#endif
  }
}
 8004860:	e01f      	b.n	80048a2 <_WriteNoCheck+0x88>
    NumBytesAtOnce = Rem;
 8004862:	69bb      	ldr	r3, [r7, #24]
 8004864:	617b      	str	r3, [r7, #20]
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	685a      	ldr	r2, [r3, #4]
 800486a:	69fb      	ldr	r3, [r7, #28]
 800486c:	4413      	add	r3, r2
 800486e:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
 8004870:	697a      	ldr	r2, [r7, #20]
 8004872:	68b9      	ldr	r1, [r7, #8]
 8004874:	6938      	ldr	r0, [r7, #16]
 8004876:	f001 fe90 	bl	800659a <memcpy>
    NumBytesAtOnce = NumBytes - Rem;
 800487a:	687a      	ldr	r2, [r7, #4]
 800487c:	69bb      	ldr	r3, [r7, #24]
 800487e:	1ad3      	subs	r3, r2, r3
 8004880:	617b      	str	r3, [r7, #20]
    pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	685b      	ldr	r3, [r3, #4]
 8004886:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
 8004888:	68ba      	ldr	r2, [r7, #8]
 800488a:	69bb      	ldr	r3, [r7, #24]
 800488c:	4413      	add	r3, r2
 800488e:	697a      	ldr	r2, [r7, #20]
 8004890:	4619      	mov	r1, r3
 8004892:	6938      	ldr	r0, [r7, #16]
 8004894:	f001 fe81 	bl	800659a <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8004898:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = NumBytesAtOnce;
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	697a      	ldr	r2, [r7, #20]
 80048a0:	60da      	str	r2, [r3, #12]
}
 80048a2:	bf00      	nop
 80048a4:	3720      	adds	r7, #32
 80048a6:	46bd      	mov	sp, r7
 80048a8:	bd80      	pop	{r7, pc}

080048aa <_GetAvailWriteSpace>:
*    pRing        Ring buffer to check.
*
*  Return value
*    Number of bytes that are free in the buffer.
*/
static unsigned _GetAvailWriteSpace(SEGGER_RTT_BUFFER_UP* pRing) {
 80048aa:	b480      	push	{r7}
 80048ac:	b087      	sub	sp, #28
 80048ae:	af00      	add	r7, sp, #0
 80048b0:	6078      	str	r0, [r7, #4]
  unsigned r;
  //
  // Avoid warnings regarding volatile access order.  It's not a problem
  // in this case, but dampen compiler enthusiasm.
  //
  RdOff = pRing->RdOff;
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	691b      	ldr	r3, [r3, #16]
 80048b6:	613b      	str	r3, [r7, #16]
  WrOff = pRing->WrOff;
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	68db      	ldr	r3, [r3, #12]
 80048bc:	60fb      	str	r3, [r7, #12]
  if (RdOff <= WrOff) {
 80048be:	693a      	ldr	r2, [r7, #16]
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	429a      	cmp	r2, r3
 80048c4:	d808      	bhi.n	80048d8 <_GetAvailWriteSpace+0x2e>
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	689a      	ldr	r2, [r3, #8]
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	1ad2      	subs	r2, r2, r3
 80048ce:	693b      	ldr	r3, [r7, #16]
 80048d0:	4413      	add	r3, r2
 80048d2:	3b01      	subs	r3, #1
 80048d4:	617b      	str	r3, [r7, #20]
 80048d6:	e004      	b.n	80048e2 <_GetAvailWriteSpace+0x38>
  } else {
    r = RdOff - WrOff - 1u;
 80048d8:	693a      	ldr	r2, [r7, #16]
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	1ad3      	subs	r3, r2, r3
 80048de:	3b01      	subs	r3, #1
 80048e0:	617b      	str	r3, [r7, #20]
  }
  return r;
 80048e2:	697b      	ldr	r3, [r7, #20]
}
 80048e4:	4618      	mov	r0, r3
 80048e6:	371c      	adds	r7, #28
 80048e8:	46bd      	mov	sp, r7
 80048ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ee:	4770      	bx	lr

080048f0 <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 80048f0:	b580      	push	{r7, lr}
 80048f2:	b08c      	sub	sp, #48	@ 0x30
 80048f4:	af00      	add	r7, sp, #0
 80048f6:	60f8      	str	r0, [r7, #12]
 80048f8:	60b9      	str	r1, [r7, #8]
 80048fa:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 80048fc:	4b3e      	ldr	r3, [pc, #248]	@ (80049f8 <SEGGER_RTT_ReadNoLock+0x108>)
 80048fe:	623b      	str	r3, [r7, #32]
 8004900:	6a3b      	ldr	r3, [r7, #32]
 8004902:	781b      	ldrb	r3, [r3, #0]
 8004904:	b2db      	uxtb	r3, r3
 8004906:	2b53      	cmp	r3, #83	@ 0x53
 8004908:	d001      	beq.n	800490e <SEGGER_RTT_ReadNoLock+0x1e>
 800490a:	f7ff fecf 	bl	80046ac <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((uintptr_t)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 800490e:	68fa      	ldr	r2, [r7, #12]
 8004910:	4613      	mov	r3, r2
 8004912:	005b      	lsls	r3, r3, #1
 8004914:	4413      	add	r3, r2
 8004916:	00db      	lsls	r3, r3, #3
 8004918:	3360      	adds	r3, #96	@ 0x60
 800491a:	4a37      	ldr	r2, [pc, #220]	@ (80049f8 <SEGGER_RTT_ReadNoLock+0x108>)
 800491c:	4413      	add	r3, r2
 800491e:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 8004920:	68bb      	ldr	r3, [r7, #8]
 8004922:	627b      	str	r3, [r7, #36]	@ 0x24
  RdOff = pRing->RdOff;
 8004924:	69fb      	ldr	r3, [r7, #28]
 8004926:	691b      	ldr	r3, [r3, #16]
 8004928:	62bb      	str	r3, [r7, #40]	@ 0x28
  WrOff = pRing->WrOff;
 800492a:	69fb      	ldr	r3, [r7, #28]
 800492c:	68db      	ldr	r3, [r3, #12]
 800492e:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 8004930:	2300      	movs	r3, #0
 8004932:	62fb      	str	r3, [r7, #44]	@ 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8004934:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004936:	69bb      	ldr	r3, [r7, #24]
 8004938:	429a      	cmp	r2, r3
 800493a:	d92b      	bls.n	8004994 <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 800493c:	69fb      	ldr	r3, [r7, #28]
 800493e:	689a      	ldr	r2, [r3, #8]
 8004940:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004942:	1ad3      	subs	r3, r2, r3
 8004944:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8004946:	697a      	ldr	r2, [r7, #20]
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	4293      	cmp	r3, r2
 800494c:	bf28      	it	cs
 800494e:	4613      	movcs	r3, r2
 8004950:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8004952:	69fb      	ldr	r3, [r7, #28]
 8004954:	685a      	ldr	r2, [r3, #4]
 8004956:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004958:	4413      	add	r3, r2
 800495a:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 800495c:	697a      	ldr	r2, [r7, #20]
 800495e:	6939      	ldr	r1, [r7, #16]
 8004960:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8004962:	f001 fe1a 	bl	800659a <memcpy>
    NumBytesRead += NumBytesRem;
 8004966:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004968:	697b      	ldr	r3, [r7, #20]
 800496a:	4413      	add	r3, r2
 800496c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    pBuffer      += NumBytesRem;
 800496e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004970:	697b      	ldr	r3, [r7, #20]
 8004972:	4413      	add	r3, r2
 8004974:	627b      	str	r3, [r7, #36]	@ 0x24
    BufferSize   -= NumBytesRem;
 8004976:	687a      	ldr	r2, [r7, #4]
 8004978:	697b      	ldr	r3, [r7, #20]
 800497a:	1ad3      	subs	r3, r2, r3
 800497c:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 800497e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004980:	697b      	ldr	r3, [r7, #20]
 8004982:	4413      	add	r3, r2
 8004984:	62bb      	str	r3, [r7, #40]	@ 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 8004986:	69fb      	ldr	r3, [r7, #28]
 8004988:	689b      	ldr	r3, [r3, #8]
 800498a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800498c:	429a      	cmp	r2, r3
 800498e:	d101      	bne.n	8004994 <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 8004990:	2300      	movs	r3, #0
 8004992:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8004994:	69ba      	ldr	r2, [r7, #24]
 8004996:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004998:	1ad3      	subs	r3, r2, r3
 800499a:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 800499c:	697a      	ldr	r2, [r7, #20]
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	4293      	cmp	r3, r2
 80049a2:	bf28      	it	cs
 80049a4:	4613      	movcs	r3, r2
 80049a6:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 80049a8:	697b      	ldr	r3, [r7, #20]
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d019      	beq.n	80049e2 <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 80049ae:	69fb      	ldr	r3, [r7, #28]
 80049b0:	685a      	ldr	r2, [r3, #4]
 80049b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80049b4:	4413      	add	r3, r2
 80049b6:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 80049b8:	697a      	ldr	r2, [r7, #20]
 80049ba:	6939      	ldr	r1, [r7, #16]
 80049bc:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80049be:	f001 fdec 	bl	800659a <memcpy>
    NumBytesRead += NumBytesRem;
 80049c2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80049c4:	697b      	ldr	r3, [r7, #20]
 80049c6:	4413      	add	r3, r2
 80049c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    pBuffer      += NumBytesRem;
 80049ca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80049cc:	697b      	ldr	r3, [r7, #20]
 80049ce:	4413      	add	r3, r2
 80049d0:	627b      	str	r3, [r7, #36]	@ 0x24
    BufferSize   -= NumBytesRem;
 80049d2:	687a      	ldr	r2, [r7, #4]
 80049d4:	697b      	ldr	r3, [r7, #20]
 80049d6:	1ad3      	subs	r3, r2, r3
 80049d8:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 80049da:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80049dc:	697b      	ldr	r3, [r7, #20]
 80049de:	4413      	add	r3, r2
 80049e0:	62bb      	str	r3, [r7, #40]	@ 0x28
#endif
  }
  if (NumBytesRead) {
 80049e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d002      	beq.n	80049ee <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 80049e8:	69fb      	ldr	r3, [r7, #28]
 80049ea:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80049ec:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 80049ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 80049f0:	4618      	mov	r0, r3
 80049f2:	3730      	adds	r7, #48	@ 0x30
 80049f4:	46bd      	mov	sp, r7
 80049f6:	bd80      	pop	{r7, pc}
 80049f8:	20012f24 	.word	0x20012f24

080049fc <SEGGER_RTT_WriteNoLock>:
*    (1) Data is stored according to buffer flags.
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 80049fc:	b580      	push	{r7, lr}
 80049fe:	b088      	sub	sp, #32
 8004a00:	af00      	add	r7, sp, #0
 8004a02:	60f8      	str	r0, [r7, #12]
 8004a04:	60b9      	str	r1, [r7, #8]
 8004a06:	607a      	str	r2, [r7, #4]
  const char*           pData;
  SEGGER_RTT_BUFFER_UP* pRing;
  //
  // Get "to-host" ring buffer.
  //
  pData = (const char *)pBuffer;
 8004a08:	68bb      	ldr	r3, [r7, #8]
 8004a0a:	61bb      	str	r3, [r7, #24]
  pRing = (SEGGER_RTT_BUFFER_UP*)((uintptr_t)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	1c5a      	adds	r2, r3, #1
 8004a10:	4613      	mov	r3, r2
 8004a12:	005b      	lsls	r3, r3, #1
 8004a14:	4413      	add	r3, r2
 8004a16:	00db      	lsls	r3, r3, #3
 8004a18:	4a1f      	ldr	r2, [pc, #124]	@ (8004a98 <SEGGER_RTT_WriteNoLock+0x9c>)
 8004a1a:	4413      	add	r3, r2
 8004a1c:	617b      	str	r3, [r7, #20]
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
 8004a1e:	697b      	ldr	r3, [r7, #20]
 8004a20:	695b      	ldr	r3, [r3, #20]
 8004a22:	2b02      	cmp	r3, #2
 8004a24:	d029      	beq.n	8004a7a <SEGGER_RTT_WriteNoLock+0x7e>
 8004a26:	2b02      	cmp	r3, #2
 8004a28:	d82e      	bhi.n	8004a88 <SEGGER_RTT_WriteNoLock+0x8c>
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d002      	beq.n	8004a34 <SEGGER_RTT_WriteNoLock+0x38>
 8004a2e:	2b01      	cmp	r3, #1
 8004a30:	d013      	beq.n	8004a5a <SEGGER_RTT_WriteNoLock+0x5e>
 8004a32:	e029      	b.n	8004a88 <SEGGER_RTT_WriteNoLock+0x8c>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
 8004a34:	6978      	ldr	r0, [r7, #20]
 8004a36:	f7ff ff38 	bl	80048aa <_GetAvailWriteSpace>
 8004a3a:	6138      	str	r0, [r7, #16]
    if (Avail < NumBytes) {
 8004a3c:	693a      	ldr	r2, [r7, #16]
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	429a      	cmp	r2, r3
 8004a42:	d202      	bcs.n	8004a4a <SEGGER_RTT_WriteNoLock+0x4e>
      Status = 0u;
 8004a44:	2300      	movs	r3, #0
 8004a46:	61fb      	str	r3, [r7, #28]
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
    }
    break;
 8004a48:	e021      	b.n	8004a8e <SEGGER_RTT_WriteNoLock+0x92>
      Status = NumBytes;
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	61fb      	str	r3, [r7, #28]
      _WriteNoCheck(pRing, pData, NumBytes);
 8004a4e:	687a      	ldr	r2, [r7, #4]
 8004a50:	69b9      	ldr	r1, [r7, #24]
 8004a52:	6978      	ldr	r0, [r7, #20]
 8004a54:	f7ff fee1 	bl	800481a <_WriteNoCheck>
    break;
 8004a58:	e019      	b.n	8004a8e <SEGGER_RTT_WriteNoLock+0x92>
  case SEGGER_RTT_MODE_NO_BLOCK_TRIM:
    //
    // If we are in trim mode, trim to what we can output without blocking.
    //
    Avail = _GetAvailWriteSpace(pRing);
 8004a5a:	6978      	ldr	r0, [r7, #20]
 8004a5c:	f7ff ff25 	bl	80048aa <_GetAvailWriteSpace>
 8004a60:	6138      	str	r0, [r7, #16]
    Status = Avail < NumBytes ? Avail : NumBytes;
 8004a62:	687a      	ldr	r2, [r7, #4]
 8004a64:	693b      	ldr	r3, [r7, #16]
 8004a66:	4293      	cmp	r3, r2
 8004a68:	bf28      	it	cs
 8004a6a:	4613      	movcs	r3, r2
 8004a6c:	61fb      	str	r3, [r7, #28]
    _WriteNoCheck(pRing, pData, Status);
 8004a6e:	69fa      	ldr	r2, [r7, #28]
 8004a70:	69b9      	ldr	r1, [r7, #24]
 8004a72:	6978      	ldr	r0, [r7, #20]
 8004a74:	f7ff fed1 	bl	800481a <_WriteNoCheck>
    break;
 8004a78:	e009      	b.n	8004a8e <SEGGER_RTT_WriteNoLock+0x92>
  case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
    //
    // If we are in blocking mode, output everything.
    //
    Status = _WriteBlocking(pRing, pData, NumBytes);
 8004a7a:	687a      	ldr	r2, [r7, #4]
 8004a7c:	69b9      	ldr	r1, [r7, #24]
 8004a7e:	6978      	ldr	r0, [r7, #20]
 8004a80:	f7ff fe6e 	bl	8004760 <_WriteBlocking>
 8004a84:	61f8      	str	r0, [r7, #28]
    break;
 8004a86:	e002      	b.n	8004a8e <SEGGER_RTT_WriteNoLock+0x92>
  default:
    Status = 0u;
 8004a88:	2300      	movs	r3, #0
 8004a8a:	61fb      	str	r3, [r7, #28]
    break;
 8004a8c:	bf00      	nop
  }
  //
  // Finish up.
  //
  return Status;
 8004a8e:	69fb      	ldr	r3, [r7, #28]
}
 8004a90:	4618      	mov	r0, r3
 8004a92:	3720      	adds	r7, #32
 8004a94:	46bd      	mov	sp, r7
 8004a96:	bd80      	pop	{r7, pc}
 8004a98:	20012f24 	.word	0x20012f24

08004a9c <SEGGER_RTT_Write>:
*    Number of bytes which have been stored in the "Up"-buffer.
*
*  Notes
*    (1) Data is stored according to buffer flags.
*/
unsigned SEGGER_RTT_Write(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8004a9c:	b580      	push	{r7, lr}
 8004a9e:	b088      	sub	sp, #32
 8004aa0:	af00      	add	r7, sp, #0
 8004aa2:	60f8      	str	r0, [r7, #12]
 8004aa4:	60b9      	str	r1, [r7, #8]
 8004aa6:	607a      	str	r2, [r7, #4]
  unsigned Status;

  INIT();
 8004aa8:	4b0e      	ldr	r3, [pc, #56]	@ (8004ae4 <SEGGER_RTT_Write+0x48>)
 8004aaa:	61fb      	str	r3, [r7, #28]
 8004aac:	69fb      	ldr	r3, [r7, #28]
 8004aae:	781b      	ldrb	r3, [r3, #0]
 8004ab0:	b2db      	uxtb	r3, r3
 8004ab2:	2b53      	cmp	r3, #83	@ 0x53
 8004ab4:	d001      	beq.n	8004aba <SEGGER_RTT_Write+0x1e>
 8004ab6:	f7ff fdf9 	bl	80046ac <_DoInit>
  SEGGER_RTT_LOCK();
 8004aba:	f3ef 8311 	mrs	r3, BASEPRI
 8004abe:	f04f 0120 	mov.w	r1, #32
 8004ac2:	f381 8811 	msr	BASEPRI, r1
 8004ac6:	61bb      	str	r3, [r7, #24]
  Status = SEGGER_RTT_WriteNoLock(BufferIndex, pBuffer, NumBytes);  // Call the non-locking write function
 8004ac8:	687a      	ldr	r2, [r7, #4]
 8004aca:	68b9      	ldr	r1, [r7, #8]
 8004acc:	68f8      	ldr	r0, [r7, #12]
 8004ace:	f7ff ff95 	bl	80049fc <SEGGER_RTT_WriteNoLock>
 8004ad2:	6178      	str	r0, [r7, #20]
  SEGGER_RTT_UNLOCK();
 8004ad4:	69bb      	ldr	r3, [r7, #24]
 8004ad6:	f383 8811 	msr	BASEPRI, r3
  return Status;
 8004ada:	697b      	ldr	r3, [r7, #20]
}
 8004adc:	4618      	mov	r0, r3
 8004ade:	3720      	adds	r7, #32
 8004ae0:	46bd      	mov	sp, r7
 8004ae2:	bd80      	pop	{r7, pc}
 8004ae4:	20012f24 	.word	0x20012f24

08004ae8 <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8004ae8:	b580      	push	{r7, lr}
 8004aea:	b088      	sub	sp, #32
 8004aec:	af00      	add	r7, sp, #0
 8004aee:	60f8      	str	r0, [r7, #12]
 8004af0:	60b9      	str	r1, [r7, #8]
 8004af2:	607a      	str	r2, [r7, #4]
 8004af4:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 8004af6:	4b3d      	ldr	r3, [pc, #244]	@ (8004bec <SEGGER_RTT_AllocUpBuffer+0x104>)
 8004af8:	61bb      	str	r3, [r7, #24]
 8004afa:	69bb      	ldr	r3, [r7, #24]
 8004afc:	781b      	ldrb	r3, [r3, #0]
 8004afe:	b2db      	uxtb	r3, r3
 8004b00:	2b53      	cmp	r3, #83	@ 0x53
 8004b02:	d001      	beq.n	8004b08 <SEGGER_RTT_AllocUpBuffer+0x20>
 8004b04:	f7ff fdd2 	bl	80046ac <_DoInit>
  SEGGER_RTT_LOCK();
 8004b08:	f3ef 8311 	mrs	r3, BASEPRI
 8004b0c:	f04f 0120 	mov.w	r1, #32
 8004b10:	f381 8811 	msr	BASEPRI, r1
 8004b14:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8004b16:	4b35      	ldr	r3, [pc, #212]	@ (8004bec <SEGGER_RTT_AllocUpBuffer+0x104>)
 8004b18:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 8004b1a:	2300      	movs	r3, #0
 8004b1c:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 8004b1e:	6939      	ldr	r1, [r7, #16]
 8004b20:	69fb      	ldr	r3, [r7, #28]
 8004b22:	1c5a      	adds	r2, r3, #1
 8004b24:	4613      	mov	r3, r2
 8004b26:	005b      	lsls	r3, r3, #1
 8004b28:	4413      	add	r3, r2
 8004b2a:	00db      	lsls	r3, r3, #3
 8004b2c:	440b      	add	r3, r1
 8004b2e:	3304      	adds	r3, #4
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d008      	beq.n	8004b48 <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 8004b36:	69fb      	ldr	r3, [r7, #28]
 8004b38:	3301      	adds	r3, #1
 8004b3a:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 8004b3c:	693b      	ldr	r3, [r7, #16]
 8004b3e:	691b      	ldr	r3, [r3, #16]
 8004b40:	69fa      	ldr	r2, [r7, #28]
 8004b42:	429a      	cmp	r2, r3
 8004b44:	dbeb      	blt.n	8004b1e <SEGGER_RTT_AllocUpBuffer+0x36>
 8004b46:	e000      	b.n	8004b4a <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 8004b48:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 8004b4a:	693b      	ldr	r3, [r7, #16]
 8004b4c:	691b      	ldr	r3, [r3, #16]
 8004b4e:	69fa      	ldr	r2, [r7, #28]
 8004b50:	429a      	cmp	r2, r3
 8004b52:	da3f      	bge.n	8004bd4 <SEGGER_RTT_AllocUpBuffer+0xec>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 8004b54:	6939      	ldr	r1, [r7, #16]
 8004b56:	69fb      	ldr	r3, [r7, #28]
 8004b58:	1c5a      	adds	r2, r3, #1
 8004b5a:	4613      	mov	r3, r2
 8004b5c:	005b      	lsls	r3, r3, #1
 8004b5e:	4413      	add	r3, r2
 8004b60:	00db      	lsls	r3, r3, #3
 8004b62:	440b      	add	r3, r1
 8004b64:	68fa      	ldr	r2, [r7, #12]
 8004b66:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 8004b68:	6939      	ldr	r1, [r7, #16]
 8004b6a:	69fb      	ldr	r3, [r7, #28]
 8004b6c:	1c5a      	adds	r2, r3, #1
 8004b6e:	4613      	mov	r3, r2
 8004b70:	005b      	lsls	r3, r3, #1
 8004b72:	4413      	add	r3, r2
 8004b74:	00db      	lsls	r3, r3, #3
 8004b76:	440b      	add	r3, r1
 8004b78:	3304      	adds	r3, #4
 8004b7a:	68ba      	ldr	r2, [r7, #8]
 8004b7c:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 8004b7e:	6939      	ldr	r1, [r7, #16]
 8004b80:	69fa      	ldr	r2, [r7, #28]
 8004b82:	4613      	mov	r3, r2
 8004b84:	005b      	lsls	r3, r3, #1
 8004b86:	4413      	add	r3, r2
 8004b88:	00db      	lsls	r3, r3, #3
 8004b8a:	440b      	add	r3, r1
 8004b8c:	3320      	adds	r3, #32
 8004b8e:	687a      	ldr	r2, [r7, #4]
 8004b90:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 8004b92:	6939      	ldr	r1, [r7, #16]
 8004b94:	69fa      	ldr	r2, [r7, #28]
 8004b96:	4613      	mov	r3, r2
 8004b98:	005b      	lsls	r3, r3, #1
 8004b9a:	4413      	add	r3, r2
 8004b9c:	00db      	lsls	r3, r3, #3
 8004b9e:	440b      	add	r3, r1
 8004ba0:	3328      	adds	r3, #40	@ 0x28
 8004ba2:	2200      	movs	r2, #0
 8004ba4:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 8004ba6:	6939      	ldr	r1, [r7, #16]
 8004ba8:	69fa      	ldr	r2, [r7, #28]
 8004baa:	4613      	mov	r3, r2
 8004bac:	005b      	lsls	r3, r3, #1
 8004bae:	4413      	add	r3, r2
 8004bb0:	00db      	lsls	r3, r3, #3
 8004bb2:	440b      	add	r3, r1
 8004bb4:	3324      	adds	r3, #36	@ 0x24
 8004bb6:	2200      	movs	r2, #0
 8004bb8:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 8004bba:	6939      	ldr	r1, [r7, #16]
 8004bbc:	69fa      	ldr	r2, [r7, #28]
 8004bbe:	4613      	mov	r3, r2
 8004bc0:	005b      	lsls	r3, r3, #1
 8004bc2:	4413      	add	r3, r2
 8004bc4:	00db      	lsls	r3, r3, #3
 8004bc6:	440b      	add	r3, r1
 8004bc8:	332c      	adds	r3, #44	@ 0x2c
 8004bca:	683a      	ldr	r2, [r7, #0]
 8004bcc:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8004bce:	f3bf 8f5f 	dmb	sy
 8004bd2:	e002      	b.n	8004bda <SEGGER_RTT_AllocUpBuffer+0xf2>
  } else {
    BufferIndex = -1;
 8004bd4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8004bd8:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 8004bda:	697b      	ldr	r3, [r7, #20]
 8004bdc:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 8004be0:	69fb      	ldr	r3, [r7, #28]
}
 8004be2:	4618      	mov	r0, r3
 8004be4:	3720      	adds	r7, #32
 8004be6:	46bd      	mov	sp, r7
 8004be8:	bd80      	pop	{r7, pc}
 8004bea:	bf00      	nop
 8004bec:	20012f24 	.word	0x20012f24

08004bf0 <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8004bf0:	b580      	push	{r7, lr}
 8004bf2:	b08a      	sub	sp, #40	@ 0x28
 8004bf4:	af00      	add	r7, sp, #0
 8004bf6:	60f8      	str	r0, [r7, #12]
 8004bf8:	60b9      	str	r1, [r7, #8]
 8004bfa:	607a      	str	r2, [r7, #4]
 8004bfc:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;
  volatile SEGGER_RTT_BUFFER_DOWN* pDown;

  INIT();
 8004bfe:	4b21      	ldr	r3, [pc, #132]	@ (8004c84 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 8004c00:	623b      	str	r3, [r7, #32]
 8004c02:	6a3b      	ldr	r3, [r7, #32]
 8004c04:	781b      	ldrb	r3, [r3, #0]
 8004c06:	b2db      	uxtb	r3, r3
 8004c08:	2b53      	cmp	r3, #83	@ 0x53
 8004c0a:	d001      	beq.n	8004c10 <SEGGER_RTT_ConfigDownBuffer+0x20>
 8004c0c:	f7ff fd4e 	bl	80046ac <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8004c10:	4b1c      	ldr	r3, [pc, #112]	@ (8004c84 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 8004c12:	61fb      	str	r3, [r7, #28]
  if (BufferIndex < SEGGER_RTT_MAX_NUM_DOWN_BUFFERS) {
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	2b02      	cmp	r3, #2
 8004c18:	d82c      	bhi.n	8004c74 <SEGGER_RTT_ConfigDownBuffer+0x84>
    SEGGER_RTT_LOCK();
 8004c1a:	f3ef 8311 	mrs	r3, BASEPRI
 8004c1e:	f04f 0120 	mov.w	r1, #32
 8004c22:	f381 8811 	msr	BASEPRI, r1
 8004c26:	61bb      	str	r3, [r7, #24]
    pDown = &pRTTCB->aDown[BufferIndex];
 8004c28:	68fa      	ldr	r2, [r7, #12]
 8004c2a:	4613      	mov	r3, r2
 8004c2c:	005b      	lsls	r3, r3, #1
 8004c2e:	4413      	add	r3, r2
 8004c30:	00db      	lsls	r3, r3, #3
 8004c32:	3360      	adds	r3, #96	@ 0x60
 8004c34:	69fa      	ldr	r2, [r7, #28]
 8004c36:	4413      	add	r3, r2
 8004c38:	617b      	str	r3, [r7, #20]
    if (BufferIndex) {
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d00e      	beq.n	8004c5e <SEGGER_RTT_ConfigDownBuffer+0x6e>
      pDown->sName        = sName;
 8004c40:	697b      	ldr	r3, [r7, #20]
 8004c42:	68ba      	ldr	r2, [r7, #8]
 8004c44:	601a      	str	r2, [r3, #0]
      pDown->pBuffer      = (char*)pBuffer;
 8004c46:	697b      	ldr	r3, [r7, #20]
 8004c48:	687a      	ldr	r2, [r7, #4]
 8004c4a:	605a      	str	r2, [r3, #4]
      pDown->SizeOfBuffer = BufferSize;
 8004c4c:	697b      	ldr	r3, [r7, #20]
 8004c4e:	683a      	ldr	r2, [r7, #0]
 8004c50:	609a      	str	r2, [r3, #8]
      pDown->RdOff        = 0u;
 8004c52:	697b      	ldr	r3, [r7, #20]
 8004c54:	2200      	movs	r2, #0
 8004c56:	611a      	str	r2, [r3, #16]
      pDown->WrOff        = 0u;
 8004c58:	697b      	ldr	r3, [r7, #20]
 8004c5a:	2200      	movs	r2, #0
 8004c5c:	60da      	str	r2, [r3, #12]
    }
    pDown->Flags          = Flags;
 8004c5e:	697b      	ldr	r3, [r7, #20]
 8004c60:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004c62:	615a      	str	r2, [r3, #20]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8004c64:	f3bf 8f5f 	dmb	sy
    SEGGER_RTT_UNLOCK();
 8004c68:	69bb      	ldr	r3, [r7, #24]
 8004c6a:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 8004c6e:	2300      	movs	r3, #0
 8004c70:	627b      	str	r3, [r7, #36]	@ 0x24
 8004c72:	e002      	b.n	8004c7a <SEGGER_RTT_ConfigDownBuffer+0x8a>
  } else {
    r = -1;
 8004c74:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8004c78:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  return r;
 8004c7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8004c7c:	4618      	mov	r0, r3
 8004c7e:	3728      	adds	r7, #40	@ 0x28
 8004c80:	46bd      	mov	sp, r7
 8004c82:	bd80      	pop	{r7, pc}
 8004c84:	20012f24 	.word	0x20012f24

08004c88 <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 8004c88:	b480      	push	{r7}
 8004c8a:	b087      	sub	sp, #28
 8004c8c:	af00      	add	r7, sp, #0
 8004c8e:	60f8      	str	r0, [r7, #12]
 8004c90:	60b9      	str	r1, [r7, #8]
 8004c92:	607a      	str	r2, [r7, #4]
  U8* pLen;
  const char* sStart;

  if (pText == NULL) {
 8004c94:	68bb      	ldr	r3, [r7, #8]
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d105      	bne.n	8004ca6 <_EncodeStr+0x1e>
    *pPayload++ = (U8)0;
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	1c5a      	adds	r2, r3, #1
 8004c9e:	60fa      	str	r2, [r7, #12]
 8004ca0:	2200      	movs	r2, #0
 8004ca2:	701a      	strb	r2, [r3, #0]
 8004ca4:	e022      	b.n	8004cec <_EncodeStr+0x64>
  } else {
    sStart = pText; // Remember start of string.
 8004ca6:	68bb      	ldr	r3, [r7, #8]
 8004ca8:	617b      	str	r3, [r7, #20]
    //
    // Save space to store count byte(s).
    //
    pLen = pPayload++;
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	1c5a      	adds	r2, r3, #1
 8004cae:	60fa      	str	r2, [r7, #12]
 8004cb0:	613b      	str	r3, [r7, #16]
    pPayload += 2;
#endif
    //
    // Limit string to maximum length and copy into payload buffer.
    //
    if (Limit > SEGGER_SYSVIEW_MAX_STRING_LEN) {
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	2b80      	cmp	r3, #128	@ 0x80
 8004cb6:	d90a      	bls.n	8004cce <_EncodeStr+0x46>
      Limit = SEGGER_SYSVIEW_MAX_STRING_LEN;
 8004cb8:	2380      	movs	r3, #128	@ 0x80
 8004cba:	607b      	str	r3, [r7, #4]
    }
    while ((Limit-- > 0) && (*pText != '\0')) {
 8004cbc:	e007      	b.n	8004cce <_EncodeStr+0x46>
      *pPayload++ = *pText++;
 8004cbe:	68ba      	ldr	r2, [r7, #8]
 8004cc0:	1c53      	adds	r3, r2, #1
 8004cc2:	60bb      	str	r3, [r7, #8]
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	1c59      	adds	r1, r3, #1
 8004cc8:	60f9      	str	r1, [r7, #12]
 8004cca:	7812      	ldrb	r2, [r2, #0]
 8004ccc:	701a      	strb	r2, [r3, #0]
    while ((Limit-- > 0) && (*pText != '\0')) {
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	1e5a      	subs	r2, r3, #1
 8004cd2:	607a      	str	r2, [r7, #4]
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d003      	beq.n	8004ce0 <_EncodeStr+0x58>
 8004cd8:	68bb      	ldr	r3, [r7, #8]
 8004cda:	781b      	ldrb	r3, [r3, #0]
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d1ee      	bne.n	8004cbe <_EncodeStr+0x36>
    Limit = (unsigned int)(pText - sStart);
    *pLen++ = (U8)255;
    *pLen++ = (U8)((Limit >> 8) & 255);
    *pLen++ = (U8)(Limit & 255);
#else   // Length always encodes in 1 byte
    *pLen = (U8)(pText - sStart);
 8004ce0:	68ba      	ldr	r2, [r7, #8]
 8004ce2:	697b      	ldr	r3, [r7, #20]
 8004ce4:	1ad3      	subs	r3, r2, r3
 8004ce6:	b2da      	uxtb	r2, r3
 8004ce8:	693b      	ldr	r3, [r7, #16]
 8004cea:	701a      	strb	r2, [r3, #0]
#endif
  }
  //
  return pPayload;
 8004cec:	68fb      	ldr	r3, [r7, #12]
}
 8004cee:	4618      	mov	r0, r3
 8004cf0:	371c      	adds	r7, #28
 8004cf2:	46bd      	mov	sp, r7
 8004cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf8:	4770      	bx	lr

08004cfa <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 8004cfa:	b480      	push	{r7}
 8004cfc:	b083      	sub	sp, #12
 8004cfe:	af00      	add	r7, sp, #0
 8004d00:	6078      	str	r0, [r7, #4]
  return pPacket + _MAX_ID_BYTES + _MAX_DATA_BYTES;
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	3307      	adds	r3, #7
}
 8004d06:	4618      	mov	r0, r3
 8004d08:	370c      	adds	r7, #12
 8004d0a:	46bd      	mov	sp, r7
 8004d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d10:	4770      	bx	lr
	...

08004d14 <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 8004d14:	b580      	push	{r7, lr}
 8004d16:	b082      	sub	sp, #8
 8004d18:	af00      	add	r7, sp, #0
  U8  Cmd;
  unsigned int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8004d1a:	4b34      	ldr	r3, [pc, #208]	@ (8004dec <_HandleIncomingPacket+0xd8>)
 8004d1c:	7e1b      	ldrb	r3, [r3, #24]
 8004d1e:	4618      	mov	r0, r3
 8004d20:	1cfb      	adds	r3, r7, #3
 8004d22:	2201      	movs	r2, #1
 8004d24:	4619      	mov	r1, r3
 8004d26:	f7ff fde3 	bl	80048f0 <SEGGER_RTT_ReadNoLock>
 8004d2a:	6078      	str	r0, [r7, #4]
  if (Status > 0) {
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d057      	beq.n	8004de2 <_HandleIncomingPacket+0xce>
    switch (Cmd) {
 8004d32:	78fb      	ldrb	r3, [r7, #3]
 8004d34:	2b80      	cmp	r3, #128	@ 0x80
 8004d36:	d031      	beq.n	8004d9c <_HandleIncomingPacket+0x88>
 8004d38:	2b80      	cmp	r3, #128	@ 0x80
 8004d3a:	dc40      	bgt.n	8004dbe <_HandleIncomingPacket+0xaa>
 8004d3c:	2b07      	cmp	r3, #7
 8004d3e:	dc15      	bgt.n	8004d6c <_HandleIncomingPacket+0x58>
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	dd3c      	ble.n	8004dbe <_HandleIncomingPacket+0xaa>
 8004d44:	3b01      	subs	r3, #1
 8004d46:	2b06      	cmp	r3, #6
 8004d48:	d839      	bhi.n	8004dbe <_HandleIncomingPacket+0xaa>
 8004d4a:	a201      	add	r2, pc, #4	@ (adr r2, 8004d50 <_HandleIncomingPacket+0x3c>)
 8004d4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d50:	08004d73 	.word	0x08004d73
 8004d54:	08004d79 	.word	0x08004d79
 8004d58:	08004d7f 	.word	0x08004d7f
 8004d5c:	08004d85 	.word	0x08004d85
 8004d60:	08004d8b 	.word	0x08004d8b
 8004d64:	08004d91 	.word	0x08004d91
 8004d68:	08004d97 	.word	0x08004d97
 8004d6c:	2b7f      	cmp	r3, #127	@ 0x7f
 8004d6e:	d033      	beq.n	8004dd8 <_HandleIncomingPacket+0xc4>
 8004d70:	e025      	b.n	8004dbe <_HandleIncomingPacket+0xaa>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 8004d72:	f000 fb25 	bl	80053c0 <SEGGER_SYSVIEW_Start>
      break;
 8004d76:	e034      	b.n	8004de2 <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 8004d78:	f000 fbdc 	bl	8005534 <SEGGER_SYSVIEW_Stop>
      break;
 8004d7c:	e031      	b.n	8004de2 <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 8004d7e:	f000 fdb5 	bl	80058ec <SEGGER_SYSVIEW_RecordSystime>
      break;
 8004d82:	e02e      	b.n	8004de2 <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 8004d84:	f000 fd7a 	bl	800587c <SEGGER_SYSVIEW_SendTaskList>
      break;
 8004d88:	e02b      	b.n	8004de2 <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 8004d8a:	f000 fbf9 	bl	8005580 <SEGGER_SYSVIEW_GetSysDesc>
      break;
 8004d8e:	e028      	b.n	8004de2 <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 8004d90:	f001 f8e6 	bl	8005f60 <SEGGER_SYSVIEW_SendNumModules>
      break;
 8004d94:	e025      	b.n	8004de2 <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 8004d96:	f001 f8c5 	bl	8005f24 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 8004d9a:	e022      	b.n	8004de2 <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8004d9c:	4b13      	ldr	r3, [pc, #76]	@ (8004dec <_HandleIncomingPacket+0xd8>)
 8004d9e:	7e1b      	ldrb	r3, [r3, #24]
 8004da0:	4618      	mov	r0, r3
 8004da2:	1cfb      	adds	r3, r7, #3
 8004da4:	2201      	movs	r2, #1
 8004da6:	4619      	mov	r1, r3
 8004da8:	f7ff fda2 	bl	80048f0 <SEGGER_RTT_ReadNoLock>
 8004dac:	6078      	str	r0, [r7, #4]
      if (Status > 0) {
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d013      	beq.n	8004ddc <_HandleIncomingPacket+0xc8>
        SEGGER_SYSVIEW_SendModule(Cmd);
 8004db4:	78fb      	ldrb	r3, [r7, #3]
 8004db6:	4618      	mov	r0, r3
 8004db8:	f001 f82a 	bl	8005e10 <SEGGER_SYSVIEW_SendModule>
      }
      break;
 8004dbc:	e00e      	b.n	8004ddc <_HandleIncomingPacket+0xc8>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 8004dbe:	78fb      	ldrb	r3, [r7, #3]
 8004dc0:	b25b      	sxtb	r3, r3
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	da0c      	bge.n	8004de0 <_HandleIncomingPacket+0xcc>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8004dc6:	4b09      	ldr	r3, [pc, #36]	@ (8004dec <_HandleIncomingPacket+0xd8>)
 8004dc8:	7e1b      	ldrb	r3, [r3, #24]
 8004dca:	4618      	mov	r0, r3
 8004dcc:	1cfb      	adds	r3, r7, #3
 8004dce:	2201      	movs	r2, #1
 8004dd0:	4619      	mov	r1, r3
 8004dd2:	f7ff fd8d 	bl	80048f0 <SEGGER_RTT_ReadNoLock>
      }
      break;
 8004dd6:	e003      	b.n	8004de0 <_HandleIncomingPacket+0xcc>
      break;
 8004dd8:	bf00      	nop
 8004dda:	e002      	b.n	8004de2 <_HandleIncomingPacket+0xce>
      break;
 8004ddc:	bf00      	nop
 8004dde:	e000      	b.n	8004de2 <_HandleIncomingPacket+0xce>
      break;
 8004de0:	bf00      	nop
    }
  }
}
 8004de2:	bf00      	nop
 8004de4:	3708      	adds	r7, #8
 8004de6:	46bd      	mov	sp, r7
 8004de8:	bd80      	pop	{r7, pc}
 8004dea:	bf00      	nop
 8004dec:	200143e4 	.word	0x200143e4

08004df0 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 8004df0:	b580      	push	{r7, lr}
 8004df2:	b08c      	sub	sp, #48	@ 0x30
 8004df4:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 8004df6:	2301      	movs	r3, #1
 8004df8:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 8004dfa:	1d3b      	adds	r3, r7, #4
 8004dfc:	3301      	adds	r3, #1
 8004dfe:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 8004e00:	69fb      	ldr	r3, [r7, #28]
 8004e02:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004e04:	4b31      	ldr	r3, [pc, #196]	@ (8004ecc <_TrySendOverflowPacket+0xdc>)
 8004e06:	695b      	ldr	r3, [r3, #20]
 8004e08:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004e0a:	e00b      	b.n	8004e24 <_TrySendOverflowPacket+0x34>
 8004e0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e0e:	b2da      	uxtb	r2, r3
 8004e10:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004e12:	1c59      	adds	r1, r3, #1
 8004e14:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8004e16:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004e1a:	b2d2      	uxtb	r2, r2
 8004e1c:	701a      	strb	r2, [r3, #0]
 8004e1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e20:	09db      	lsrs	r3, r3, #7
 8004e22:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004e24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e26:	2b7f      	cmp	r3, #127	@ 0x7f
 8004e28:	d8f0      	bhi.n	8004e0c <_TrySendOverflowPacket+0x1c>
 8004e2a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004e2c:	1c5a      	adds	r2, r3, #1
 8004e2e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004e30:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004e32:	b2d2      	uxtb	r2, r2
 8004e34:	701a      	strb	r2, [r3, #0]
 8004e36:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004e38:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8004e3a:	4b25      	ldr	r3, [pc, #148]	@ (8004ed0 <_TrySendOverflowPacket+0xe0>)
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	61bb      	str	r3, [r7, #24]
  Delta = (I32)(TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp);
 8004e40:	4b22      	ldr	r3, [pc, #136]	@ (8004ecc <_TrySendOverflowPacket+0xdc>)
 8004e42:	68db      	ldr	r3, [r3, #12]
 8004e44:	69ba      	ldr	r2, [r7, #24]
 8004e46:	1ad3      	subs	r3, r2, r3
 8004e48:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 8004e4a:	69fb      	ldr	r3, [r7, #28]
 8004e4c:	627b      	str	r3, [r7, #36]	@ 0x24
 8004e4e:	697b      	ldr	r3, [r7, #20]
 8004e50:	623b      	str	r3, [r7, #32]
 8004e52:	e00b      	b.n	8004e6c <_TrySendOverflowPacket+0x7c>
 8004e54:	6a3b      	ldr	r3, [r7, #32]
 8004e56:	b2da      	uxtb	r2, r3
 8004e58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e5a:	1c59      	adds	r1, r3, #1
 8004e5c:	6279      	str	r1, [r7, #36]	@ 0x24
 8004e5e:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004e62:	b2d2      	uxtb	r2, r2
 8004e64:	701a      	strb	r2, [r3, #0]
 8004e66:	6a3b      	ldr	r3, [r7, #32]
 8004e68:	09db      	lsrs	r3, r3, #7
 8004e6a:	623b      	str	r3, [r7, #32]
 8004e6c:	6a3b      	ldr	r3, [r7, #32]
 8004e6e:	2b7f      	cmp	r3, #127	@ 0x7f
 8004e70:	d8f0      	bhi.n	8004e54 <_TrySendOverflowPacket+0x64>
 8004e72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e74:	1c5a      	adds	r2, r3, #1
 8004e76:	627a      	str	r2, [r7, #36]	@ 0x24
 8004e78:	6a3a      	ldr	r2, [r7, #32]
 8004e7a:	b2d2      	uxtb	r2, r2
 8004e7c:	701a      	strb	r2, [r3, #0]
 8004e7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e80:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = (int)SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, (unsigned int)(pPayload - aPacket));
 8004e82:	4b12      	ldr	r3, [pc, #72]	@ (8004ecc <_TrySendOverflowPacket+0xdc>)
 8004e84:	785b      	ldrb	r3, [r3, #1]
 8004e86:	4618      	mov	r0, r3
 8004e88:	1d3b      	adds	r3, r7, #4
 8004e8a:	69fa      	ldr	r2, [r7, #28]
 8004e8c:	1ad3      	subs	r3, r2, r3
 8004e8e:	461a      	mov	r2, r3
 8004e90:	1d3b      	adds	r3, r7, #4
 8004e92:	4619      	mov	r1, r3
 8004e94:	f7fb f9c4 	bl	8000220 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8004e98:	4603      	mov	r3, r0
 8004e9a:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
  if (Status) {
 8004e9c:	693b      	ldr	r3, [r7, #16]
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d009      	beq.n	8004eb6 <_TrySendOverflowPacket+0xc6>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8004ea2:	4a0a      	ldr	r2, [pc, #40]	@ (8004ecc <_TrySendOverflowPacket+0xdc>)
 8004ea4:	69bb      	ldr	r3, [r7, #24]
 8004ea6:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 8004ea8:	4b08      	ldr	r3, [pc, #32]	@ (8004ecc <_TrySendOverflowPacket+0xdc>)
 8004eaa:	781b      	ldrb	r3, [r3, #0]
 8004eac:	3b01      	subs	r3, #1
 8004eae:	b2da      	uxtb	r2, r3
 8004eb0:	4b06      	ldr	r3, [pc, #24]	@ (8004ecc <_TrySendOverflowPacket+0xdc>)
 8004eb2:	701a      	strb	r2, [r3, #0]
 8004eb4:	e004      	b.n	8004ec0 <_TrySendOverflowPacket+0xd0>
  } else {
    _SYSVIEW_Globals.DropCount++;
 8004eb6:	4b05      	ldr	r3, [pc, #20]	@ (8004ecc <_TrySendOverflowPacket+0xdc>)
 8004eb8:	695b      	ldr	r3, [r3, #20]
 8004eba:	3301      	adds	r3, #1
 8004ebc:	4a03      	ldr	r2, [pc, #12]	@ (8004ecc <_TrySendOverflowPacket+0xdc>)
 8004ebe:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 8004ec0:	693b      	ldr	r3, [r7, #16]
}
 8004ec2:	4618      	mov	r0, r3
 8004ec4:	3730      	adds	r7, #48	@ 0x30
 8004ec6:	46bd      	mov	sp, r7
 8004ec8:	bd80      	pop	{r7, pc}
 8004eca:	bf00      	nop
 8004ecc:	200143e4 	.word	0x200143e4
 8004ed0:	e0001004 	.word	0xe0001004

08004ed4 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 8004ed4:	b580      	push	{r7, lr}
 8004ed6:	b08a      	sub	sp, #40	@ 0x28
 8004ed8:	af00      	add	r7, sp, #0
 8004eda:	60f8      	str	r0, [r7, #12]
 8004edc:	60b9      	str	r1, [r7, #8]
 8004ede:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 8004ee0:	4b98      	ldr	r3, [pc, #608]	@ (8005144 <_SendPacket+0x270>)
 8004ee2:	781b      	ldrb	r3, [r3, #0]
 8004ee4:	2b01      	cmp	r3, #1
 8004ee6:	d010      	beq.n	8004f0a <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 8004ee8:	4b96      	ldr	r3, [pc, #600]	@ (8005144 <_SendPacket+0x270>)
 8004eea:	781b      	ldrb	r3, [r3, #0]
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	f000 812d 	beq.w	800514c <_SendPacket+0x278>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 8004ef2:	4b94      	ldr	r3, [pc, #592]	@ (8005144 <_SendPacket+0x270>)
 8004ef4:	781b      	ldrb	r3, [r3, #0]
 8004ef6:	2b02      	cmp	r3, #2
 8004ef8:	d109      	bne.n	8004f0e <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 8004efa:	f7ff ff79 	bl	8004df0 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 8004efe:	4b91      	ldr	r3, [pc, #580]	@ (8005144 <_SendPacket+0x270>)
 8004f00:	781b      	ldrb	r3, [r3, #0]
 8004f02:	2b01      	cmp	r3, #1
 8004f04:	f040 8124 	bne.w	8005150 <_SendPacket+0x27c>
      goto SendDone;
    }
  }
Send:
 8004f08:	e001      	b.n	8004f0e <_SendPacket+0x3a>
    goto Send;
 8004f0a:	bf00      	nop
 8004f0c:	e000      	b.n	8004f10 <_SendPacket+0x3c>
Send:
 8004f0e:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	2b1f      	cmp	r3, #31
 8004f14:	d809      	bhi.n	8004f2a <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 8004f16:	4b8b      	ldr	r3, [pc, #556]	@ (8005144 <_SendPacket+0x270>)
 8004f18:	69da      	ldr	r2, [r3, #28]
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	fa22 f303 	lsr.w	r3, r2, r3
 8004f20:	f003 0301 	and.w	r3, r3, #1
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	f040 8115 	bne.w	8005154 <_SendPacket+0x280>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	2b17      	cmp	r3, #23
 8004f2e:	d807      	bhi.n	8004f40 <_SendPacket+0x6c>
    *--pStartPacket = (U8)EventId;
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	3b01      	subs	r3, #1
 8004f34:	60fb      	str	r3, [r7, #12]
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	b2da      	uxtb	r2, r3
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	701a      	strb	r2, [r3, #0]
 8004f3e:	e0c4      	b.n	80050ca <_SendPacket+0x1f6>
  } else {
    //
    // Get data length and prepend it.
    //
    NumBytes = (unsigned int)(pEndPacket - pStartPacket);
 8004f40:	68ba      	ldr	r2, [r7, #8]
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	1ad3      	subs	r3, r2, r3
 8004f46:	61fb      	str	r3, [r7, #28]
        *--pStartPacket = (U8)((NumBytes >>  7) | 0x80);
        *--pStartPacket = (U8)(NumBytes | 0x80);
      }
    }
#else
    if (NumBytes > 127) {
 8004f48:	69fb      	ldr	r3, [r7, #28]
 8004f4a:	2b7f      	cmp	r3, #127	@ 0x7f
 8004f4c:	d912      	bls.n	8004f74 <_SendPacket+0xa0>
      *--pStartPacket = (U8)(NumBytes >> 7);
 8004f4e:	69fb      	ldr	r3, [r7, #28]
 8004f50:	09da      	lsrs	r2, r3, #7
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	3b01      	subs	r3, #1
 8004f56:	60fb      	str	r3, [r7, #12]
 8004f58:	b2d2      	uxtb	r2, r2
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = (U8)(NumBytes | 0x80);
 8004f5e:	69fb      	ldr	r3, [r7, #28]
 8004f60:	b2db      	uxtb	r3, r3
 8004f62:	68fa      	ldr	r2, [r7, #12]
 8004f64:	3a01      	subs	r2, #1
 8004f66:	60fa      	str	r2, [r7, #12]
 8004f68:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8004f6c:	b2da      	uxtb	r2, r3
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	701a      	strb	r2, [r3, #0]
 8004f72:	e006      	b.n	8004f82 <_SendPacket+0xae>
    } else {
      *--pStartPacket = (U8)NumBytes;
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	3b01      	subs	r3, #1
 8004f78:	60fb      	str	r3, [r7, #12]
 8004f7a:	69fb      	ldr	r3, [r7, #28]
 8004f7c:	b2da      	uxtb	r2, r3
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	701a      	strb	r2, [r3, #0]
#endif
    //
    // Prepend EventId.
    //
#if SEGGER_SYSVIEW_SUPPORT_LONG_ID
    if (EventId < 127) {
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	2b7e      	cmp	r3, #126	@ 0x7e
 8004f86:	d807      	bhi.n	8004f98 <_SendPacket+0xc4>
      *--pStartPacket = (U8)EventId;
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	3b01      	subs	r3, #1
 8004f8c:	60fb      	str	r3, [r7, #12]
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	b2da      	uxtb	r2, r3
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	701a      	strb	r2, [r3, #0]
 8004f96:	e098      	b.n	80050ca <_SendPacket+0x1f6>
    } else {
      //
      // Backwards U32 encode EventId.
      //
      if (EventId < (1u << 14)) { // Encodes in 2 bytes
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004f9e:	d212      	bcs.n	8004fc6 <_SendPacket+0xf2>
        *--pStartPacket = (U8)(EventId >>  7);
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	09da      	lsrs	r2, r3, #7
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	3b01      	subs	r3, #1
 8004fa8:	60fb      	str	r3, [r7, #12]
 8004faa:	b2d2      	uxtb	r2, r2
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	b2db      	uxtb	r3, r3
 8004fb4:	68fa      	ldr	r2, [r7, #12]
 8004fb6:	3a01      	subs	r2, #1
 8004fb8:	60fa      	str	r2, [r7, #12]
 8004fba:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8004fbe:	b2da      	uxtb	r2, r3
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	701a      	strb	r2, [r3, #0]
 8004fc4:	e081      	b.n	80050ca <_SendPacket+0x1f6>
      } else if (EventId < (1ul << 21)) {    // Encodes in 3 bytes
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004fcc:	d21d      	bcs.n	800500a <_SendPacket+0x136>
        *--pStartPacket = (U8)(EventId >> 14);
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	0b9a      	lsrs	r2, r3, #14
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	3b01      	subs	r3, #1
 8004fd6:	60fb      	str	r3, [r7, #12]
 8004fd8:	b2d2      	uxtb	r2, r2
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	09db      	lsrs	r3, r3, #7
 8004fe2:	b2db      	uxtb	r3, r3
 8004fe4:	68fa      	ldr	r2, [r7, #12]
 8004fe6:	3a01      	subs	r2, #1
 8004fe8:	60fa      	str	r2, [r7, #12]
 8004fea:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8004fee:	b2da      	uxtb	r2, r3
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	b2db      	uxtb	r3, r3
 8004ff8:	68fa      	ldr	r2, [r7, #12]
 8004ffa:	3a01      	subs	r2, #1
 8004ffc:	60fa      	str	r2, [r7, #12]
 8004ffe:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8005002:	b2da      	uxtb	r2, r3
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	701a      	strb	r2, [r3, #0]
 8005008:	e05f      	b.n	80050ca <_SendPacket+0x1f6>
      } else if (EventId < (1ul << 28)) {    // Encodes in 4 bytes
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005010:	d228      	bcs.n	8005064 <_SendPacket+0x190>
        *--pStartPacket = (U8)(EventId >> 21);
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	0d5a      	lsrs	r2, r3, #21
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	3b01      	subs	r3, #1
 800501a:	60fb      	str	r3, [r7, #12]
 800501c:	b2d2      	uxtb	r2, r2
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	0b9b      	lsrs	r3, r3, #14
 8005026:	b2db      	uxtb	r3, r3
 8005028:	68fa      	ldr	r2, [r7, #12]
 800502a:	3a01      	subs	r2, #1
 800502c:	60fa      	str	r2, [r7, #12]
 800502e:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8005032:	b2da      	uxtb	r2, r3
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	09db      	lsrs	r3, r3, #7
 800503c:	b2db      	uxtb	r3, r3
 800503e:	68fa      	ldr	r2, [r7, #12]
 8005040:	3a01      	subs	r2, #1
 8005042:	60fa      	str	r2, [r7, #12]
 8005044:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8005048:	b2da      	uxtb	r2, r3
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	b2db      	uxtb	r3, r3
 8005052:	68fa      	ldr	r2, [r7, #12]
 8005054:	3a01      	subs	r2, #1
 8005056:	60fa      	str	r2, [r7, #12]
 8005058:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800505c:	b2da      	uxtb	r2, r3
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	701a      	strb	r2, [r3, #0]
 8005062:	e032      	b.n	80050ca <_SendPacket+0x1f6>
      } else {                              // Encodes in 5 bytes
        *--pStartPacket = (U8)(EventId >> 28);
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	0f1a      	lsrs	r2, r3, #28
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	3b01      	subs	r3, #1
 800506c:	60fb      	str	r3, [r7, #12]
 800506e:	b2d2      	uxtb	r2, r2
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 21) | 0x80);
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	0d5b      	lsrs	r3, r3, #21
 8005078:	b2db      	uxtb	r3, r3
 800507a:	68fa      	ldr	r2, [r7, #12]
 800507c:	3a01      	subs	r2, #1
 800507e:	60fa      	str	r2, [r7, #12]
 8005080:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8005084:	b2da      	uxtb	r2, r3
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	0b9b      	lsrs	r3, r3, #14
 800508e:	b2db      	uxtb	r3, r3
 8005090:	68fa      	ldr	r2, [r7, #12]
 8005092:	3a01      	subs	r2, #1
 8005094:	60fa      	str	r2, [r7, #12]
 8005096:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800509a:	b2da      	uxtb	r2, r3
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	09db      	lsrs	r3, r3, #7
 80050a4:	b2db      	uxtb	r3, r3
 80050a6:	68fa      	ldr	r2, [r7, #12]
 80050a8:	3a01      	subs	r2, #1
 80050aa:	60fa      	str	r2, [r7, #12]
 80050ac:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80050b0:	b2da      	uxtb	r2, r3
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	b2db      	uxtb	r3, r3
 80050ba:	68fa      	ldr	r2, [r7, #12]
 80050bc:	3a01      	subs	r2, #1
 80050be:	60fa      	str	r2, [r7, #12]
 80050c0:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80050c4:	b2da      	uxtb	r2, r3
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	701a      	strb	r2, [r3, #0]
#endif
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 80050ca:	4b1f      	ldr	r3, [pc, #124]	@ (8005148 <_SendPacket+0x274>)
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 80050d0:	4b1c      	ldr	r3, [pc, #112]	@ (8005144 <_SendPacket+0x270>)
 80050d2:	68db      	ldr	r3, [r3, #12]
 80050d4:	69ba      	ldr	r2, [r7, #24]
 80050d6:	1ad3      	subs	r3, r2, r3
 80050d8:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 80050da:	68bb      	ldr	r3, [r7, #8]
 80050dc:	627b      	str	r3, [r7, #36]	@ 0x24
 80050de:	697b      	ldr	r3, [r7, #20]
 80050e0:	623b      	str	r3, [r7, #32]
 80050e2:	e00b      	b.n	80050fc <_SendPacket+0x228>
 80050e4:	6a3b      	ldr	r3, [r7, #32]
 80050e6:	b2da      	uxtb	r2, r3
 80050e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050ea:	1c59      	adds	r1, r3, #1
 80050ec:	6279      	str	r1, [r7, #36]	@ 0x24
 80050ee:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80050f2:	b2d2      	uxtb	r2, r2
 80050f4:	701a      	strb	r2, [r3, #0]
 80050f6:	6a3b      	ldr	r3, [r7, #32]
 80050f8:	09db      	lsrs	r3, r3, #7
 80050fa:	623b      	str	r3, [r7, #32]
 80050fc:	6a3b      	ldr	r3, [r7, #32]
 80050fe:	2b7f      	cmp	r3, #127	@ 0x7f
 8005100:	d8f0      	bhi.n	80050e4 <_SendPacket+0x210>
 8005102:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005104:	1c5a      	adds	r2, r3, #1
 8005106:	627a      	str	r2, [r7, #36]	@ 0x24
 8005108:	6a3a      	ldr	r2, [r7, #32]
 800510a:	b2d2      	uxtb	r2, r2
 800510c:	701a      	strb	r2, [r3, #0]
 800510e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005110:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, (unsigned int)(pEndPacket - pStartPacket));
 8005112:	4b0c      	ldr	r3, [pc, #48]	@ (8005144 <_SendPacket+0x270>)
 8005114:	785b      	ldrb	r3, [r3, #1]
 8005116:	4618      	mov	r0, r3
 8005118:	68ba      	ldr	r2, [r7, #8]
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	1ad3      	subs	r3, r2, r3
 800511e:	461a      	mov	r2, r3
 8005120:	68f9      	ldr	r1, [r7, #12]
 8005122:	f7fb f87d 	bl	8000220 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8005126:	6138      	str	r0, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
  if (Status) {
 8005128:	693b      	ldr	r3, [r7, #16]
 800512a:	2b00      	cmp	r3, #0
 800512c:	d003      	beq.n	8005136 <_SendPacket+0x262>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 800512e:	4a05      	ldr	r2, [pc, #20]	@ (8005144 <_SendPacket+0x270>)
 8005130:	69bb      	ldr	r3, [r7, #24]
 8005132:	60d3      	str	r3, [r2, #12]
 8005134:	e00f      	b.n	8005156 <_SendPacket+0x282>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 8005136:	4b03      	ldr	r3, [pc, #12]	@ (8005144 <_SendPacket+0x270>)
 8005138:	781b      	ldrb	r3, [r3, #0]
 800513a:	3301      	adds	r3, #1
 800513c:	b2da      	uxtb	r2, r3
 800513e:	4b01      	ldr	r3, [pc, #4]	@ (8005144 <_SendPacket+0x270>)
 8005140:	701a      	strb	r2, [r3, #0]
 8005142:	e008      	b.n	8005156 <_SendPacket+0x282>
 8005144:	200143e4 	.word	0x200143e4
 8005148:	e0001004 	.word	0xe0001004
    goto SendDone;
 800514c:	bf00      	nop
 800514e:	e002      	b.n	8005156 <_SendPacket+0x282>
      goto SendDone;
 8005150:	bf00      	nop
 8005152:	e000      	b.n	8005156 <_SendPacket+0x282>
      goto SendDone;
 8005154:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 8005156:	4b14      	ldr	r3, [pc, #80]	@ (80051a8 <_SendPacket+0x2d4>)
 8005158:	7e1b      	ldrb	r3, [r3, #24]
 800515a:	4619      	mov	r1, r3
 800515c:	4a13      	ldr	r2, [pc, #76]	@ (80051ac <_SendPacket+0x2d8>)
 800515e:	460b      	mov	r3, r1
 8005160:	005b      	lsls	r3, r3, #1
 8005162:	440b      	add	r3, r1
 8005164:	00db      	lsls	r3, r3, #3
 8005166:	4413      	add	r3, r2
 8005168:	336c      	adds	r3, #108	@ 0x6c
 800516a:	681a      	ldr	r2, [r3, #0]
 800516c:	4b0e      	ldr	r3, [pc, #56]	@ (80051a8 <_SendPacket+0x2d4>)
 800516e:	7e1b      	ldrb	r3, [r3, #24]
 8005170:	4618      	mov	r0, r3
 8005172:	490e      	ldr	r1, [pc, #56]	@ (80051ac <_SendPacket+0x2d8>)
 8005174:	4603      	mov	r3, r0
 8005176:	005b      	lsls	r3, r3, #1
 8005178:	4403      	add	r3, r0
 800517a:	00db      	lsls	r3, r3, #3
 800517c:	440b      	add	r3, r1
 800517e:	3370      	adds	r3, #112	@ 0x70
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	429a      	cmp	r2, r3
 8005184:	d00b      	beq.n	800519e <_SendPacket+0x2ca>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 8005186:	4b08      	ldr	r3, [pc, #32]	@ (80051a8 <_SendPacket+0x2d4>)
 8005188:	789b      	ldrb	r3, [r3, #2]
 800518a:	2b00      	cmp	r3, #0
 800518c:	d107      	bne.n	800519e <_SendPacket+0x2ca>
      _SYSVIEW_Globals.RecursionCnt = 1;
 800518e:	4b06      	ldr	r3, [pc, #24]	@ (80051a8 <_SendPacket+0x2d4>)
 8005190:	2201      	movs	r2, #1
 8005192:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8005194:	f7ff fdbe 	bl	8004d14 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8005198:	4b03      	ldr	r3, [pc, #12]	@ (80051a8 <_SendPacket+0x2d4>)
 800519a:	2200      	movs	r2, #0
 800519c:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 800519e:	bf00      	nop
 80051a0:	3728      	adds	r7, #40	@ 0x28
 80051a2:	46bd      	mov	sp, r7
 80051a4:	bd80      	pop	{r7, pc}
 80051a6:	bf00      	nop
 80051a8:	200143e4 	.word	0x200143e4
 80051ac:	20012f24 	.word	0x20012f24

080051b0 <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 80051b0:	b580      	push	{r7, lr}
 80051b2:	b086      	sub	sp, #24
 80051b4:	af02      	add	r7, sp, #8
 80051b6:	60f8      	str	r0, [r7, #12]
 80051b8:	60b9      	str	r1, [r7, #8]
 80051ba:	607a      	str	r2, [r7, #4]
 80051bc:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = (U8)SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 80051be:	2300      	movs	r3, #0
 80051c0:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80051c4:	4917      	ldr	r1, [pc, #92]	@ (8005224 <SEGGER_SYSVIEW_Init+0x74>)
 80051c6:	4818      	ldr	r0, [pc, #96]	@ (8005228 <SEGGER_SYSVIEW_Init+0x78>)
 80051c8:	f7ff fc8e 	bl	8004ae8 <SEGGER_RTT_AllocUpBuffer>
 80051cc:	4603      	mov	r3, r0
 80051ce:	b2da      	uxtb	r2, r3
 80051d0:	4b16      	ldr	r3, [pc, #88]	@ (800522c <SEGGER_SYSVIEW_Init+0x7c>)
 80051d2:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 80051d4:	4b15      	ldr	r3, [pc, #84]	@ (800522c <SEGGER_SYSVIEW_Init+0x7c>)
 80051d6:	785a      	ldrb	r2, [r3, #1]
 80051d8:	4b14      	ldr	r3, [pc, #80]	@ (800522c <SEGGER_SYSVIEW_Init+0x7c>)
 80051da:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 80051dc:	4b13      	ldr	r3, [pc, #76]	@ (800522c <SEGGER_SYSVIEW_Init+0x7c>)
 80051de:	7e1b      	ldrb	r3, [r3, #24]
 80051e0:	4618      	mov	r0, r3
 80051e2:	2300      	movs	r3, #0
 80051e4:	9300      	str	r3, [sp, #0]
 80051e6:	2308      	movs	r3, #8
 80051e8:	4a11      	ldr	r2, [pc, #68]	@ (8005230 <SEGGER_SYSVIEW_Init+0x80>)
 80051ea:	490f      	ldr	r1, [pc, #60]	@ (8005228 <SEGGER_SYSVIEW_Init+0x78>)
 80051ec:	f7ff fd00 	bl	8004bf0 <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 80051f0:	4b0e      	ldr	r3, [pc, #56]	@ (800522c <SEGGER_SYSVIEW_Init+0x7c>)
 80051f2:	2200      	movs	r2, #0
 80051f4:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 80051f6:	4b0f      	ldr	r3, [pc, #60]	@ (8005234 <SEGGER_SYSVIEW_Init+0x84>)
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	4a0c      	ldr	r2, [pc, #48]	@ (800522c <SEGGER_SYSVIEW_Init+0x7c>)
 80051fc:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 80051fe:	4a0b      	ldr	r2, [pc, #44]	@ (800522c <SEGGER_SYSVIEW_Init+0x7c>)
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 8005204:	4a09      	ldr	r2, [pc, #36]	@ (800522c <SEGGER_SYSVIEW_Init+0x7c>)
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 800520a:	4a08      	ldr	r2, [pc, #32]	@ (800522c <SEGGER_SYSVIEW_Init+0x7c>)
 800520c:	68bb      	ldr	r3, [r7, #8]
 800520e:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 8005210:	4a06      	ldr	r2, [pc, #24]	@ (800522c <SEGGER_SYSVIEW_Init+0x7c>)
 8005212:	683b      	ldr	r3, [r7, #0]
 8005214:	6253      	str	r3, [r2, #36]	@ 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 8005216:	4b05      	ldr	r3, [pc, #20]	@ (800522c <SEGGER_SYSVIEW_Init+0x7c>)
 8005218:	2200      	movs	r2, #0
 800521a:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 800521c:	bf00      	nop
 800521e:	3710      	adds	r7, #16
 8005220:	46bd      	mov	sp, r7
 8005222:	bd80      	pop	{r7, pc}
 8005224:	200133dc 	.word	0x200133dc
 8005228:	08006b60 	.word	0x08006b60
 800522c:	200143e4 	.word	0x200143e4
 8005230:	200143dc 	.word	0x200143dc
 8005234:	e0001004 	.word	0xe0001004

08005238 <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 8005238:	b480      	push	{r7}
 800523a:	b083      	sub	sp, #12
 800523c:	af00      	add	r7, sp, #0
 800523e:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 8005240:	4a04      	ldr	r2, [pc, #16]	@ (8005254 <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	6113      	str	r3, [r2, #16]
}
 8005246:	bf00      	nop
 8005248:	370c      	adds	r7, #12
 800524a:	46bd      	mov	sp, r7
 800524c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005250:	4770      	bx	lr
 8005252:	bf00      	nop
 8005254:	200143e4 	.word	0x200143e4

08005258 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 8005258:	b580      	push	{r7, lr}
 800525a:	b084      	sub	sp, #16
 800525c:	af00      	add	r7, sp, #0
 800525e:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8005260:	f3ef 8311 	mrs	r3, BASEPRI
 8005264:	f04f 0120 	mov.w	r1, #32
 8005268:	f381 8811 	msr	BASEPRI, r1
 800526c:	60fb      	str	r3, [r7, #12]
 800526e:	4808      	ldr	r0, [pc, #32]	@ (8005290 <SEGGER_SYSVIEW_RecordVoid+0x38>)
 8005270:	f7ff fd43 	bl	8004cfa <_PreparePacket>
 8005274:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 8005276:	687a      	ldr	r2, [r7, #4]
 8005278:	68b9      	ldr	r1, [r7, #8]
 800527a:	68b8      	ldr	r0, [r7, #8]
 800527c:	f7ff fe2a 	bl	8004ed4 <_SendPacket>
  RECORD_END();
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	f383 8811 	msr	BASEPRI, r3
}
 8005286:	bf00      	nop
 8005288:	3710      	adds	r7, #16
 800528a:	46bd      	mov	sp, r7
 800528c:	bd80      	pop	{r7, pc}
 800528e:	bf00      	nop
 8005290:	20014414 	.word	0x20014414

08005294 <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 8005294:	b580      	push	{r7, lr}
 8005296:	b088      	sub	sp, #32
 8005298:	af00      	add	r7, sp, #0
 800529a:	6078      	str	r0, [r7, #4]
 800529c:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800529e:	f3ef 8311 	mrs	r3, BASEPRI
 80052a2:	f04f 0120 	mov.w	r1, #32
 80052a6:	f381 8811 	msr	BASEPRI, r1
 80052aa:	617b      	str	r3, [r7, #20]
 80052ac:	4816      	ldr	r0, [pc, #88]	@ (8005308 <SEGGER_SYSVIEW_RecordU32+0x74>)
 80052ae:	f7ff fd24 	bl	8004cfa <_PreparePacket>
 80052b2:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80052b4:	693b      	ldr	r3, [r7, #16]
 80052b6:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	61fb      	str	r3, [r7, #28]
 80052bc:	683b      	ldr	r3, [r7, #0]
 80052be:	61bb      	str	r3, [r7, #24]
 80052c0:	e00b      	b.n	80052da <SEGGER_SYSVIEW_RecordU32+0x46>
 80052c2:	69bb      	ldr	r3, [r7, #24]
 80052c4:	b2da      	uxtb	r2, r3
 80052c6:	69fb      	ldr	r3, [r7, #28]
 80052c8:	1c59      	adds	r1, r3, #1
 80052ca:	61f9      	str	r1, [r7, #28]
 80052cc:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80052d0:	b2d2      	uxtb	r2, r2
 80052d2:	701a      	strb	r2, [r3, #0]
 80052d4:	69bb      	ldr	r3, [r7, #24]
 80052d6:	09db      	lsrs	r3, r3, #7
 80052d8:	61bb      	str	r3, [r7, #24]
 80052da:	69bb      	ldr	r3, [r7, #24]
 80052dc:	2b7f      	cmp	r3, #127	@ 0x7f
 80052de:	d8f0      	bhi.n	80052c2 <SEGGER_SYSVIEW_RecordU32+0x2e>
 80052e0:	69fb      	ldr	r3, [r7, #28]
 80052e2:	1c5a      	adds	r2, r3, #1
 80052e4:	61fa      	str	r2, [r7, #28]
 80052e6:	69ba      	ldr	r2, [r7, #24]
 80052e8:	b2d2      	uxtb	r2, r2
 80052ea:	701a      	strb	r2, [r3, #0]
 80052ec:	69fb      	ldr	r3, [r7, #28]
 80052ee:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 80052f0:	687a      	ldr	r2, [r7, #4]
 80052f2:	68f9      	ldr	r1, [r7, #12]
 80052f4:	6938      	ldr	r0, [r7, #16]
 80052f6:	f7ff fded 	bl	8004ed4 <_SendPacket>
  RECORD_END();
 80052fa:	697b      	ldr	r3, [r7, #20]
 80052fc:	f383 8811 	msr	BASEPRI, r3
}
 8005300:	bf00      	nop
 8005302:	3720      	adds	r7, #32
 8005304:	46bd      	mov	sp, r7
 8005306:	bd80      	pop	{r7, pc}
 8005308:	20014414 	.word	0x20014414

0800530c <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 800530c:	b580      	push	{r7, lr}
 800530e:	b08c      	sub	sp, #48	@ 0x30
 8005310:	af00      	add	r7, sp, #0
 8005312:	60f8      	str	r0, [r7, #12]
 8005314:	60b9      	str	r1, [r7, #8]
 8005316:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8005318:	f3ef 8311 	mrs	r3, BASEPRI
 800531c:	f04f 0120 	mov.w	r1, #32
 8005320:	f381 8811 	msr	BASEPRI, r1
 8005324:	61fb      	str	r3, [r7, #28]
 8005326:	4825      	ldr	r0, [pc, #148]	@ (80053bc <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 8005328:	f7ff fce7 	bl	8004cfa <_PreparePacket>
 800532c:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 800532e:	69bb      	ldr	r3, [r7, #24]
 8005330:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8005332:	697b      	ldr	r3, [r7, #20]
 8005334:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005336:	68bb      	ldr	r3, [r7, #8]
 8005338:	62bb      	str	r3, [r7, #40]	@ 0x28
 800533a:	e00b      	b.n	8005354 <SEGGER_SYSVIEW_RecordU32x2+0x48>
 800533c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800533e:	b2da      	uxtb	r2, r3
 8005340:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005342:	1c59      	adds	r1, r3, #1
 8005344:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8005346:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800534a:	b2d2      	uxtb	r2, r2
 800534c:	701a      	strb	r2, [r3, #0]
 800534e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005350:	09db      	lsrs	r3, r3, #7
 8005352:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005354:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005356:	2b7f      	cmp	r3, #127	@ 0x7f
 8005358:	d8f0      	bhi.n	800533c <SEGGER_SYSVIEW_RecordU32x2+0x30>
 800535a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800535c:	1c5a      	adds	r2, r3, #1
 800535e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005360:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005362:	b2d2      	uxtb	r2, r2
 8005364:	701a      	strb	r2, [r3, #0]
 8005366:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005368:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 800536a:	697b      	ldr	r3, [r7, #20]
 800536c:	627b      	str	r3, [r7, #36]	@ 0x24
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	623b      	str	r3, [r7, #32]
 8005372:	e00b      	b.n	800538c <SEGGER_SYSVIEW_RecordU32x2+0x80>
 8005374:	6a3b      	ldr	r3, [r7, #32]
 8005376:	b2da      	uxtb	r2, r3
 8005378:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800537a:	1c59      	adds	r1, r3, #1
 800537c:	6279      	str	r1, [r7, #36]	@ 0x24
 800537e:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005382:	b2d2      	uxtb	r2, r2
 8005384:	701a      	strb	r2, [r3, #0]
 8005386:	6a3b      	ldr	r3, [r7, #32]
 8005388:	09db      	lsrs	r3, r3, #7
 800538a:	623b      	str	r3, [r7, #32]
 800538c:	6a3b      	ldr	r3, [r7, #32]
 800538e:	2b7f      	cmp	r3, #127	@ 0x7f
 8005390:	d8f0      	bhi.n	8005374 <SEGGER_SYSVIEW_RecordU32x2+0x68>
 8005392:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005394:	1c5a      	adds	r2, r3, #1
 8005396:	627a      	str	r2, [r7, #36]	@ 0x24
 8005398:	6a3a      	ldr	r2, [r7, #32]
 800539a:	b2d2      	uxtb	r2, r2
 800539c:	701a      	strb	r2, [r3, #0]
 800539e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053a0:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 80053a2:	68fa      	ldr	r2, [r7, #12]
 80053a4:	6979      	ldr	r1, [r7, #20]
 80053a6:	69b8      	ldr	r0, [r7, #24]
 80053a8:	f7ff fd94 	bl	8004ed4 <_SendPacket>
  RECORD_END();
 80053ac:	69fb      	ldr	r3, [r7, #28]
 80053ae:	f383 8811 	msr	BASEPRI, r3
}
 80053b2:	bf00      	nop
 80053b4:	3730      	adds	r7, #48	@ 0x30
 80053b6:	46bd      	mov	sp, r7
 80053b8:	bd80      	pop	{r7, pc}
 80053ba:	bf00      	nop
 80053bc:	20014414 	.word	0x20014414

080053c0 <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 80053c0:	b580      	push	{r7, lr}
 80053c2:	b08c      	sub	sp, #48	@ 0x30
 80053c4:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 80053c6:	4b58      	ldr	r3, [pc, #352]	@ (8005528 <SEGGER_SYSVIEW_Start+0x168>)
 80053c8:	2201      	movs	r2, #1
 80053ca:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 80053cc:	f3ef 8311 	mrs	r3, BASEPRI
 80053d0:	f04f 0120 	mov.w	r1, #32
 80053d4:	f381 8811 	msr	BASEPRI, r1
 80053d8:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 80053da:	4b53      	ldr	r3, [pc, #332]	@ (8005528 <SEGGER_SYSVIEW_Start+0x168>)
 80053dc:	785b      	ldrb	r3, [r3, #1]
 80053de:	220a      	movs	r2, #10
 80053e0:	4952      	ldr	r1, [pc, #328]	@ (800552c <SEGGER_SYSVIEW_Start+0x16c>)
 80053e2:	4618      	mov	r0, r3
 80053e4:	f7fa ff1c 	bl	8000220 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 80053ee:	200a      	movs	r0, #10
 80053f0:	f7ff ff32 	bl	8005258 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 80053f4:	f3ef 8311 	mrs	r3, BASEPRI
 80053f8:	f04f 0120 	mov.w	r1, #32
 80053fc:	f381 8811 	msr	BASEPRI, r1
 8005400:	60bb      	str	r3, [r7, #8]
 8005402:	484b      	ldr	r0, [pc, #300]	@ (8005530 <SEGGER_SYSVIEW_Start+0x170>)
 8005404:	f7ff fc79 	bl	8004cfa <_PreparePacket>
 8005408:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 800540e:	683b      	ldr	r3, [r7, #0]
 8005410:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005412:	4b45      	ldr	r3, [pc, #276]	@ (8005528 <SEGGER_SYSVIEW_Start+0x168>)
 8005414:	685b      	ldr	r3, [r3, #4]
 8005416:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005418:	e00b      	b.n	8005432 <SEGGER_SYSVIEW_Start+0x72>
 800541a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800541c:	b2da      	uxtb	r2, r3
 800541e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005420:	1c59      	adds	r1, r3, #1
 8005422:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8005424:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005428:	b2d2      	uxtb	r2, r2
 800542a:	701a      	strb	r2, [r3, #0]
 800542c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800542e:	09db      	lsrs	r3, r3, #7
 8005430:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005432:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005434:	2b7f      	cmp	r3, #127	@ 0x7f
 8005436:	d8f0      	bhi.n	800541a <SEGGER_SYSVIEW_Start+0x5a>
 8005438:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800543a:	1c5a      	adds	r2, r3, #1
 800543c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800543e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005440:	b2d2      	uxtb	r2, r2
 8005442:	701a      	strb	r2, [r3, #0]
 8005444:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005446:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8005448:	683b      	ldr	r3, [r7, #0]
 800544a:	627b      	str	r3, [r7, #36]	@ 0x24
 800544c:	4b36      	ldr	r3, [pc, #216]	@ (8005528 <SEGGER_SYSVIEW_Start+0x168>)
 800544e:	689b      	ldr	r3, [r3, #8]
 8005450:	623b      	str	r3, [r7, #32]
 8005452:	e00b      	b.n	800546c <SEGGER_SYSVIEW_Start+0xac>
 8005454:	6a3b      	ldr	r3, [r7, #32]
 8005456:	b2da      	uxtb	r2, r3
 8005458:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800545a:	1c59      	adds	r1, r3, #1
 800545c:	6279      	str	r1, [r7, #36]	@ 0x24
 800545e:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005462:	b2d2      	uxtb	r2, r2
 8005464:	701a      	strb	r2, [r3, #0]
 8005466:	6a3b      	ldr	r3, [r7, #32]
 8005468:	09db      	lsrs	r3, r3, #7
 800546a:	623b      	str	r3, [r7, #32]
 800546c:	6a3b      	ldr	r3, [r7, #32]
 800546e:	2b7f      	cmp	r3, #127	@ 0x7f
 8005470:	d8f0      	bhi.n	8005454 <SEGGER_SYSVIEW_Start+0x94>
 8005472:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005474:	1c5a      	adds	r2, r3, #1
 8005476:	627a      	str	r2, [r7, #36]	@ 0x24
 8005478:	6a3a      	ldr	r2, [r7, #32]
 800547a:	b2d2      	uxtb	r2, r2
 800547c:	701a      	strb	r2, [r3, #0]
 800547e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005480:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8005482:	683b      	ldr	r3, [r7, #0]
 8005484:	61fb      	str	r3, [r7, #28]
 8005486:	4b28      	ldr	r3, [pc, #160]	@ (8005528 <SEGGER_SYSVIEW_Start+0x168>)
 8005488:	691b      	ldr	r3, [r3, #16]
 800548a:	61bb      	str	r3, [r7, #24]
 800548c:	e00b      	b.n	80054a6 <SEGGER_SYSVIEW_Start+0xe6>
 800548e:	69bb      	ldr	r3, [r7, #24]
 8005490:	b2da      	uxtb	r2, r3
 8005492:	69fb      	ldr	r3, [r7, #28]
 8005494:	1c59      	adds	r1, r3, #1
 8005496:	61f9      	str	r1, [r7, #28]
 8005498:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800549c:	b2d2      	uxtb	r2, r2
 800549e:	701a      	strb	r2, [r3, #0]
 80054a0:	69bb      	ldr	r3, [r7, #24]
 80054a2:	09db      	lsrs	r3, r3, #7
 80054a4:	61bb      	str	r3, [r7, #24]
 80054a6:	69bb      	ldr	r3, [r7, #24]
 80054a8:	2b7f      	cmp	r3, #127	@ 0x7f
 80054aa:	d8f0      	bhi.n	800548e <SEGGER_SYSVIEW_Start+0xce>
 80054ac:	69fb      	ldr	r3, [r7, #28]
 80054ae:	1c5a      	adds	r2, r3, #1
 80054b0:	61fa      	str	r2, [r7, #28]
 80054b2:	69ba      	ldr	r2, [r7, #24]
 80054b4:	b2d2      	uxtb	r2, r2
 80054b6:	701a      	strb	r2, [r3, #0]
 80054b8:	69fb      	ldr	r3, [r7, #28]
 80054ba:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 80054bc:	683b      	ldr	r3, [r7, #0]
 80054be:	617b      	str	r3, [r7, #20]
 80054c0:	2300      	movs	r3, #0
 80054c2:	613b      	str	r3, [r7, #16]
 80054c4:	e00b      	b.n	80054de <SEGGER_SYSVIEW_Start+0x11e>
 80054c6:	693b      	ldr	r3, [r7, #16]
 80054c8:	b2da      	uxtb	r2, r3
 80054ca:	697b      	ldr	r3, [r7, #20]
 80054cc:	1c59      	adds	r1, r3, #1
 80054ce:	6179      	str	r1, [r7, #20]
 80054d0:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80054d4:	b2d2      	uxtb	r2, r2
 80054d6:	701a      	strb	r2, [r3, #0]
 80054d8:	693b      	ldr	r3, [r7, #16]
 80054da:	09db      	lsrs	r3, r3, #7
 80054dc:	613b      	str	r3, [r7, #16]
 80054de:	693b      	ldr	r3, [r7, #16]
 80054e0:	2b7f      	cmp	r3, #127	@ 0x7f
 80054e2:	d8f0      	bhi.n	80054c6 <SEGGER_SYSVIEW_Start+0x106>
 80054e4:	697b      	ldr	r3, [r7, #20]
 80054e6:	1c5a      	adds	r2, r3, #1
 80054e8:	617a      	str	r2, [r7, #20]
 80054ea:	693a      	ldr	r2, [r7, #16]
 80054ec:	b2d2      	uxtb	r2, r2
 80054ee:	701a      	strb	r2, [r3, #0]
 80054f0:	697b      	ldr	r3, [r7, #20]
 80054f2:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 80054f4:	2218      	movs	r2, #24
 80054f6:	6839      	ldr	r1, [r7, #0]
 80054f8:	6878      	ldr	r0, [r7, #4]
 80054fa:	f7ff fceb 	bl	8004ed4 <_SendPacket>
      RECORD_END();
 80054fe:	68bb      	ldr	r3, [r7, #8]
 8005500:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 8005504:	4b08      	ldr	r3, [pc, #32]	@ (8005528 <SEGGER_SYSVIEW_Start+0x168>)
 8005506:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005508:	2b00      	cmp	r3, #0
 800550a:	d002      	beq.n	8005512 <SEGGER_SYSVIEW_Start+0x152>
      _SYSVIEW_Globals.pfSendSysDesc();
 800550c:	4b06      	ldr	r3, [pc, #24]	@ (8005528 <SEGGER_SYSVIEW_Start+0x168>)
 800550e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005510:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 8005512:	f000 f9eb 	bl	80058ec <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 8005516:	f000 f9b1 	bl	800587c <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 800551a:	f000 fd21 	bl	8005f60 <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 800551e:	bf00      	nop
 8005520:	3730      	adds	r7, #48	@ 0x30
 8005522:	46bd      	mov	sp, r7
 8005524:	bd80      	pop	{r7, pc}
 8005526:	bf00      	nop
 8005528:	200143e4 	.word	0x200143e4
 800552c:	08006ba0 	.word	0x08006ba0
 8005530:	20014414 	.word	0x20014414

08005534 <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 8005534:	b580      	push	{r7, lr}
 8005536:	b082      	sub	sp, #8
 8005538:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800553a:	f3ef 8311 	mrs	r3, BASEPRI
 800553e:	f04f 0120 	mov.w	r1, #32
 8005542:	f381 8811 	msr	BASEPRI, r1
 8005546:	607b      	str	r3, [r7, #4]
 8005548:	480b      	ldr	r0, [pc, #44]	@ (8005578 <SEGGER_SYSVIEW_Stop+0x44>)
 800554a:	f7ff fbd6 	bl	8004cfa <_PreparePacket>
 800554e:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 8005550:	4b0a      	ldr	r3, [pc, #40]	@ (800557c <SEGGER_SYSVIEW_Stop+0x48>)
 8005552:	781b      	ldrb	r3, [r3, #0]
 8005554:	2b00      	cmp	r3, #0
 8005556:	d007      	beq.n	8005568 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 8005558:	220b      	movs	r2, #11
 800555a:	6839      	ldr	r1, [r7, #0]
 800555c:	6838      	ldr	r0, [r7, #0]
 800555e:	f7ff fcb9 	bl	8004ed4 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 8005562:	4b06      	ldr	r3, [pc, #24]	@ (800557c <SEGGER_SYSVIEW_Stop+0x48>)
 8005564:	2200      	movs	r2, #0
 8005566:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	f383 8811 	msr	BASEPRI, r3
}
 800556e:	bf00      	nop
 8005570:	3708      	adds	r7, #8
 8005572:	46bd      	mov	sp, r7
 8005574:	bd80      	pop	{r7, pc}
 8005576:	bf00      	nop
 8005578:	20014414 	.word	0x20014414
 800557c:	200143e4 	.word	0x200143e4

08005580 <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 8005580:	b580      	push	{r7, lr}
 8005582:	b08c      	sub	sp, #48	@ 0x30
 8005584:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8005586:	f3ef 8311 	mrs	r3, BASEPRI
 800558a:	f04f 0120 	mov.w	r1, #32
 800558e:	f381 8811 	msr	BASEPRI, r1
 8005592:	60fb      	str	r3, [r7, #12]
 8005594:	4845      	ldr	r0, [pc, #276]	@ (80056ac <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 8005596:	f7ff fbb0 	bl	8004cfa <_PreparePacket>
 800559a:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 800559c:	68bb      	ldr	r3, [r7, #8]
 800559e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80055a4:	4b42      	ldr	r3, [pc, #264]	@ (80056b0 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80055a6:	685b      	ldr	r3, [r3, #4]
 80055a8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80055aa:	e00b      	b.n	80055c4 <SEGGER_SYSVIEW_GetSysDesc+0x44>
 80055ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80055ae:	b2da      	uxtb	r2, r3
 80055b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80055b2:	1c59      	adds	r1, r3, #1
 80055b4:	62f9      	str	r1, [r7, #44]	@ 0x2c
 80055b6:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80055ba:	b2d2      	uxtb	r2, r2
 80055bc:	701a      	strb	r2, [r3, #0]
 80055be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80055c0:	09db      	lsrs	r3, r3, #7
 80055c2:	62bb      	str	r3, [r7, #40]	@ 0x28
 80055c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80055c6:	2b7f      	cmp	r3, #127	@ 0x7f
 80055c8:	d8f0      	bhi.n	80055ac <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 80055ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80055cc:	1c5a      	adds	r2, r3, #1
 80055ce:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80055d0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80055d2:	b2d2      	uxtb	r2, r2
 80055d4:	701a      	strb	r2, [r3, #0]
 80055d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80055d8:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	627b      	str	r3, [r7, #36]	@ 0x24
 80055de:	4b34      	ldr	r3, [pc, #208]	@ (80056b0 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80055e0:	689b      	ldr	r3, [r3, #8]
 80055e2:	623b      	str	r3, [r7, #32]
 80055e4:	e00b      	b.n	80055fe <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 80055e6:	6a3b      	ldr	r3, [r7, #32]
 80055e8:	b2da      	uxtb	r2, r3
 80055ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055ec:	1c59      	adds	r1, r3, #1
 80055ee:	6279      	str	r1, [r7, #36]	@ 0x24
 80055f0:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80055f4:	b2d2      	uxtb	r2, r2
 80055f6:	701a      	strb	r2, [r3, #0]
 80055f8:	6a3b      	ldr	r3, [r7, #32]
 80055fa:	09db      	lsrs	r3, r3, #7
 80055fc:	623b      	str	r3, [r7, #32]
 80055fe:	6a3b      	ldr	r3, [r7, #32]
 8005600:	2b7f      	cmp	r3, #127	@ 0x7f
 8005602:	d8f0      	bhi.n	80055e6 <SEGGER_SYSVIEW_GetSysDesc+0x66>
 8005604:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005606:	1c5a      	adds	r2, r3, #1
 8005608:	627a      	str	r2, [r7, #36]	@ 0x24
 800560a:	6a3a      	ldr	r2, [r7, #32]
 800560c:	b2d2      	uxtb	r2, r2
 800560e:	701a      	strb	r2, [r3, #0]
 8005610:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005612:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	61fb      	str	r3, [r7, #28]
 8005618:	4b25      	ldr	r3, [pc, #148]	@ (80056b0 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800561a:	691b      	ldr	r3, [r3, #16]
 800561c:	61bb      	str	r3, [r7, #24]
 800561e:	e00b      	b.n	8005638 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 8005620:	69bb      	ldr	r3, [r7, #24]
 8005622:	b2da      	uxtb	r2, r3
 8005624:	69fb      	ldr	r3, [r7, #28]
 8005626:	1c59      	adds	r1, r3, #1
 8005628:	61f9      	str	r1, [r7, #28]
 800562a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800562e:	b2d2      	uxtb	r2, r2
 8005630:	701a      	strb	r2, [r3, #0]
 8005632:	69bb      	ldr	r3, [r7, #24]
 8005634:	09db      	lsrs	r3, r3, #7
 8005636:	61bb      	str	r3, [r7, #24]
 8005638:	69bb      	ldr	r3, [r7, #24]
 800563a:	2b7f      	cmp	r3, #127	@ 0x7f
 800563c:	d8f0      	bhi.n	8005620 <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 800563e:	69fb      	ldr	r3, [r7, #28]
 8005640:	1c5a      	adds	r2, r3, #1
 8005642:	61fa      	str	r2, [r7, #28]
 8005644:	69ba      	ldr	r2, [r7, #24]
 8005646:	b2d2      	uxtb	r2, r2
 8005648:	701a      	strb	r2, [r3, #0]
 800564a:	69fb      	ldr	r3, [r7, #28]
 800564c:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	617b      	str	r3, [r7, #20]
 8005652:	2300      	movs	r3, #0
 8005654:	613b      	str	r3, [r7, #16]
 8005656:	e00b      	b.n	8005670 <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 8005658:	693b      	ldr	r3, [r7, #16]
 800565a:	b2da      	uxtb	r2, r3
 800565c:	697b      	ldr	r3, [r7, #20]
 800565e:	1c59      	adds	r1, r3, #1
 8005660:	6179      	str	r1, [r7, #20]
 8005662:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005666:	b2d2      	uxtb	r2, r2
 8005668:	701a      	strb	r2, [r3, #0]
 800566a:	693b      	ldr	r3, [r7, #16]
 800566c:	09db      	lsrs	r3, r3, #7
 800566e:	613b      	str	r3, [r7, #16]
 8005670:	693b      	ldr	r3, [r7, #16]
 8005672:	2b7f      	cmp	r3, #127	@ 0x7f
 8005674:	d8f0      	bhi.n	8005658 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 8005676:	697b      	ldr	r3, [r7, #20]
 8005678:	1c5a      	adds	r2, r3, #1
 800567a:	617a      	str	r2, [r7, #20]
 800567c:	693a      	ldr	r2, [r7, #16]
 800567e:	b2d2      	uxtb	r2, r2
 8005680:	701a      	strb	r2, [r3, #0]
 8005682:	697b      	ldr	r3, [r7, #20]
 8005684:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8005686:	2218      	movs	r2, #24
 8005688:	6879      	ldr	r1, [r7, #4]
 800568a:	68b8      	ldr	r0, [r7, #8]
 800568c:	f7ff fc22 	bl	8004ed4 <_SendPacket>
  RECORD_END();
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 8005696:	4b06      	ldr	r3, [pc, #24]	@ (80056b0 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8005698:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800569a:	2b00      	cmp	r3, #0
 800569c:	d002      	beq.n	80056a4 <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 800569e:	4b04      	ldr	r3, [pc, #16]	@ (80056b0 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80056a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80056a2:	4798      	blx	r3
  }
}
 80056a4:	bf00      	nop
 80056a6:	3730      	adds	r7, #48	@ 0x30
 80056a8:	46bd      	mov	sp, r7
 80056aa:	bd80      	pop	{r7, pc}
 80056ac:	20014414 	.word	0x20014414
 80056b0:	200143e4 	.word	0x200143e4

080056b4 <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 80056b4:	b580      	push	{r7, lr}
 80056b6:	b092      	sub	sp, #72	@ 0x48
 80056b8:	af00      	add	r7, sp, #0
 80056ba:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 80056bc:	f3ef 8311 	mrs	r3, BASEPRI
 80056c0:	f04f 0120 	mov.w	r1, #32
 80056c4:	f381 8811 	msr	BASEPRI, r1
 80056c8:	617b      	str	r3, [r7, #20]
 80056ca:	486a      	ldr	r0, [pc, #424]	@ (8005874 <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 80056cc:	f7ff fb15 	bl	8004cfa <_PreparePacket>
 80056d0:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80056d2:	693b      	ldr	r3, [r7, #16]
 80056d4:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	647b      	str	r3, [r7, #68]	@ 0x44
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681a      	ldr	r2, [r3, #0]
 80056de:	4b66      	ldr	r3, [pc, #408]	@ (8005878 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 80056e0:	691b      	ldr	r3, [r3, #16]
 80056e2:	1ad3      	subs	r3, r2, r3
 80056e4:	643b      	str	r3, [r7, #64]	@ 0x40
 80056e6:	e00b      	b.n	8005700 <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 80056e8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80056ea:	b2da      	uxtb	r2, r3
 80056ec:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80056ee:	1c59      	adds	r1, r3, #1
 80056f0:	6479      	str	r1, [r7, #68]	@ 0x44
 80056f2:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80056f6:	b2d2      	uxtb	r2, r2
 80056f8:	701a      	strb	r2, [r3, #0]
 80056fa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80056fc:	09db      	lsrs	r3, r3, #7
 80056fe:	643b      	str	r3, [r7, #64]	@ 0x40
 8005700:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005702:	2b7f      	cmp	r3, #127	@ 0x7f
 8005704:	d8f0      	bhi.n	80056e8 <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 8005706:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005708:	1c5a      	adds	r2, r3, #1
 800570a:	647a      	str	r2, [r7, #68]	@ 0x44
 800570c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800570e:	b2d2      	uxtb	r2, r2
 8005710:	701a      	strb	r2, [r3, #0]
 8005712:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005714:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	689b      	ldr	r3, [r3, #8]
 800571e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005720:	e00b      	b.n	800573a <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 8005722:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005724:	b2da      	uxtb	r2, r3
 8005726:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005728:	1c59      	adds	r1, r3, #1
 800572a:	63f9      	str	r1, [r7, #60]	@ 0x3c
 800572c:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005730:	b2d2      	uxtb	r2, r2
 8005732:	701a      	strb	r2, [r3, #0]
 8005734:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005736:	09db      	lsrs	r3, r3, #7
 8005738:	63bb      	str	r3, [r7, #56]	@ 0x38
 800573a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800573c:	2b7f      	cmp	r3, #127	@ 0x7f
 800573e:	d8f0      	bhi.n	8005722 <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 8005740:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005742:	1c5a      	adds	r2, r3, #1
 8005744:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8005746:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005748:	b2d2      	uxtb	r2, r2
 800574a:	701a      	strb	r2, [r3, #0]
 800574c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800574e:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	685b      	ldr	r3, [r3, #4]
 8005754:	2220      	movs	r2, #32
 8005756:	4619      	mov	r1, r3
 8005758:	68f8      	ldr	r0, [r7, #12]
 800575a:	f7ff fa95 	bl	8004c88 <_EncodeStr>
 800575e:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 8005760:	2209      	movs	r2, #9
 8005762:	68f9      	ldr	r1, [r7, #12]
 8005764:	6938      	ldr	r0, [r7, #16]
 8005766:	f7ff fbb5 	bl	8004ed4 <_SendPacket>
  //
  pPayload = pPayloadStart;
 800576a:	693b      	ldr	r3, [r7, #16]
 800576c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	637b      	str	r3, [r7, #52]	@ 0x34
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	681a      	ldr	r2, [r3, #0]
 8005776:	4b40      	ldr	r3, [pc, #256]	@ (8005878 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8005778:	691b      	ldr	r3, [r3, #16]
 800577a:	1ad3      	subs	r3, r2, r3
 800577c:	633b      	str	r3, [r7, #48]	@ 0x30
 800577e:	e00b      	b.n	8005798 <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 8005780:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005782:	b2da      	uxtb	r2, r3
 8005784:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005786:	1c59      	adds	r1, r3, #1
 8005788:	6379      	str	r1, [r7, #52]	@ 0x34
 800578a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800578e:	b2d2      	uxtb	r2, r2
 8005790:	701a      	strb	r2, [r3, #0]
 8005792:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005794:	09db      	lsrs	r3, r3, #7
 8005796:	633b      	str	r3, [r7, #48]	@ 0x30
 8005798:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800579a:	2b7f      	cmp	r3, #127	@ 0x7f
 800579c:	d8f0      	bhi.n	8005780 <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 800579e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80057a0:	1c5a      	adds	r2, r3, #1
 80057a2:	637a      	str	r2, [r7, #52]	@ 0x34
 80057a4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80057a6:	b2d2      	uxtb	r2, r2
 80057a8:	701a      	strb	r2, [r3, #0]
 80057aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80057ac:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	68db      	ldr	r3, [r3, #12]
 80057b6:	62bb      	str	r3, [r7, #40]	@ 0x28
 80057b8:	e00b      	b.n	80057d2 <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 80057ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80057bc:	b2da      	uxtb	r2, r3
 80057be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80057c0:	1c59      	adds	r1, r3, #1
 80057c2:	62f9      	str	r1, [r7, #44]	@ 0x2c
 80057c4:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80057c8:	b2d2      	uxtb	r2, r2
 80057ca:	701a      	strb	r2, [r3, #0]
 80057cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80057ce:	09db      	lsrs	r3, r3, #7
 80057d0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80057d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80057d4:	2b7f      	cmp	r3, #127	@ 0x7f
 80057d6:	d8f0      	bhi.n	80057ba <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 80057d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80057da:	1c5a      	adds	r2, r3, #1
 80057dc:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80057de:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80057e0:	b2d2      	uxtb	r2, r2
 80057e2:	701a      	strb	r2, [r3, #0]
 80057e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80057e6:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	627b      	str	r3, [r7, #36]	@ 0x24
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	691b      	ldr	r3, [r3, #16]
 80057f0:	623b      	str	r3, [r7, #32]
 80057f2:	e00b      	b.n	800580c <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 80057f4:	6a3b      	ldr	r3, [r7, #32]
 80057f6:	b2da      	uxtb	r2, r3
 80057f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057fa:	1c59      	adds	r1, r3, #1
 80057fc:	6279      	str	r1, [r7, #36]	@ 0x24
 80057fe:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005802:	b2d2      	uxtb	r2, r2
 8005804:	701a      	strb	r2, [r3, #0]
 8005806:	6a3b      	ldr	r3, [r7, #32]
 8005808:	09db      	lsrs	r3, r3, #7
 800580a:	623b      	str	r3, [r7, #32]
 800580c:	6a3b      	ldr	r3, [r7, #32]
 800580e:	2b7f      	cmp	r3, #127	@ 0x7f
 8005810:	d8f0      	bhi.n	80057f4 <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 8005812:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005814:	1c5a      	adds	r2, r3, #1
 8005816:	627a      	str	r2, [r7, #36]	@ 0x24
 8005818:	6a3a      	ldr	r2, [r7, #32]
 800581a:	b2d2      	uxtb	r2, r2
 800581c:	701a      	strb	r2, [r3, #0]
 800581e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005820:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackUsage);
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	61fb      	str	r3, [r7, #28]
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	695b      	ldr	r3, [r3, #20]
 800582a:	61bb      	str	r3, [r7, #24]
 800582c:	e00b      	b.n	8005846 <SEGGER_SYSVIEW_SendTaskInfo+0x192>
 800582e:	69bb      	ldr	r3, [r7, #24]
 8005830:	b2da      	uxtb	r2, r3
 8005832:	69fb      	ldr	r3, [r7, #28]
 8005834:	1c59      	adds	r1, r3, #1
 8005836:	61f9      	str	r1, [r7, #28]
 8005838:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800583c:	b2d2      	uxtb	r2, r2
 800583e:	701a      	strb	r2, [r3, #0]
 8005840:	69bb      	ldr	r3, [r7, #24]
 8005842:	09db      	lsrs	r3, r3, #7
 8005844:	61bb      	str	r3, [r7, #24]
 8005846:	69bb      	ldr	r3, [r7, #24]
 8005848:	2b7f      	cmp	r3, #127	@ 0x7f
 800584a:	d8f0      	bhi.n	800582e <SEGGER_SYSVIEW_SendTaskInfo+0x17a>
 800584c:	69fb      	ldr	r3, [r7, #28]
 800584e:	1c5a      	adds	r2, r3, #1
 8005850:	61fa      	str	r2, [r7, #28]
 8005852:	69ba      	ldr	r2, [r7, #24]
 8005854:	b2d2      	uxtb	r2, r2
 8005856:	701a      	strb	r2, [r3, #0]
 8005858:	69fb      	ldr	r3, [r7, #28]
 800585a:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 800585c:	2215      	movs	r2, #21
 800585e:	68f9      	ldr	r1, [r7, #12]
 8005860:	6938      	ldr	r0, [r7, #16]
 8005862:	f7ff fb37 	bl	8004ed4 <_SendPacket>
  RECORD_END();
 8005866:	697b      	ldr	r3, [r7, #20]
 8005868:	f383 8811 	msr	BASEPRI, r3
}
 800586c:	bf00      	nop
 800586e:	3748      	adds	r7, #72	@ 0x48
 8005870:	46bd      	mov	sp, r7
 8005872:	bd80      	pop	{r7, pc}
 8005874:	20014414 	.word	0x20014414
 8005878:	200143e4 	.word	0x200143e4

0800587c <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 800587c:	b580      	push	{r7, lr}
 800587e:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 8005880:	4b07      	ldr	r3, [pc, #28]	@ (80058a0 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8005882:	6a1b      	ldr	r3, [r3, #32]
 8005884:	2b00      	cmp	r3, #0
 8005886:	d008      	beq.n	800589a <SEGGER_SYSVIEW_SendTaskList+0x1e>
 8005888:	4b05      	ldr	r3, [pc, #20]	@ (80058a0 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 800588a:	6a1b      	ldr	r3, [r3, #32]
 800588c:	685b      	ldr	r3, [r3, #4]
 800588e:	2b00      	cmp	r3, #0
 8005890:	d003      	beq.n	800589a <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 8005892:	4b03      	ldr	r3, [pc, #12]	@ (80058a0 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8005894:	6a1b      	ldr	r3, [r3, #32]
 8005896:	685b      	ldr	r3, [r3, #4]
 8005898:	4798      	blx	r3
  }
}
 800589a:	bf00      	nop
 800589c:	bd80      	pop	{r7, pc}
 800589e:	bf00      	nop
 80058a0:	200143e4 	.word	0x200143e4

080058a4 <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 80058a4:	b580      	push	{r7, lr}
 80058a6:	b086      	sub	sp, #24
 80058a8:	af00      	add	r7, sp, #0
 80058aa:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 80058ac:	f3ef 8311 	mrs	r3, BASEPRI
 80058b0:	f04f 0120 	mov.w	r1, #32
 80058b4:	f381 8811 	msr	BASEPRI, r1
 80058b8:	617b      	str	r3, [r7, #20]
 80058ba:	480b      	ldr	r0, [pc, #44]	@ (80058e8 <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 80058bc:	f7ff fa1d 	bl	8004cfa <_PreparePacket>
 80058c0:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 80058c2:	2280      	movs	r2, #128	@ 0x80
 80058c4:	6879      	ldr	r1, [r7, #4]
 80058c6:	6938      	ldr	r0, [r7, #16]
 80058c8:	f7ff f9de 	bl	8004c88 <_EncodeStr>
 80058cc:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 80058ce:	220e      	movs	r2, #14
 80058d0:	68f9      	ldr	r1, [r7, #12]
 80058d2:	6938      	ldr	r0, [r7, #16]
 80058d4:	f7ff fafe 	bl	8004ed4 <_SendPacket>
  RECORD_END();
 80058d8:	697b      	ldr	r3, [r7, #20]
 80058da:	f383 8811 	msr	BASEPRI, r3
}
 80058de:	bf00      	nop
 80058e0:	3718      	adds	r7, #24
 80058e2:	46bd      	mov	sp, r7
 80058e4:	bd80      	pop	{r7, pc}
 80058e6:	bf00      	nop
 80058e8:	20014414 	.word	0x20014414

080058ec <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 80058ec:	b590      	push	{r4, r7, lr}
 80058ee:	b083      	sub	sp, #12
 80058f0:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 80058f2:	4b15      	ldr	r3, [pc, #84]	@ (8005948 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 80058f4:	6a1b      	ldr	r3, [r3, #32]
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d01a      	beq.n	8005930 <SEGGER_SYSVIEW_RecordSystime+0x44>
 80058fa:	4b13      	ldr	r3, [pc, #76]	@ (8005948 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 80058fc:	6a1b      	ldr	r3, [r3, #32]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	2b00      	cmp	r3, #0
 8005902:	d015      	beq.n	8005930 <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 8005904:	4b10      	ldr	r3, [pc, #64]	@ (8005948 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8005906:	6a1b      	ldr	r3, [r3, #32]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	4798      	blx	r3
 800590c:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8005910:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 8005912:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005916:	f04f 0200 	mov.w	r2, #0
 800591a:	f04f 0300 	mov.w	r3, #0
 800591e:	000a      	movs	r2, r1
 8005920:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8005922:	4613      	mov	r3, r2
 8005924:	461a      	mov	r2, r3
 8005926:	4621      	mov	r1, r4
 8005928:	200d      	movs	r0, #13
 800592a:	f7ff fcef 	bl	800530c <SEGGER_SYSVIEW_RecordU32x2>
 800592e:	e006      	b.n	800593e <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 8005930:	4b06      	ldr	r3, [pc, #24]	@ (800594c <SEGGER_SYSVIEW_RecordSystime+0x60>)
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	4619      	mov	r1, r3
 8005936:	200c      	movs	r0, #12
 8005938:	f7ff fcac 	bl	8005294 <SEGGER_SYSVIEW_RecordU32>
  }
}
 800593c:	bf00      	nop
 800593e:	bf00      	nop
 8005940:	370c      	adds	r7, #12
 8005942:	46bd      	mov	sp, r7
 8005944:	bd90      	pop	{r4, r7, pc}
 8005946:	bf00      	nop
 8005948:	200143e4 	.word	0x200143e4
 800594c:	e0001004 	.word	0xe0001004

08005950 <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 8005950:	b580      	push	{r7, lr}
 8005952:	b086      	sub	sp, #24
 8005954:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8005956:	f3ef 8311 	mrs	r3, BASEPRI
 800595a:	f04f 0120 	mov.w	r1, #32
 800595e:	f381 8811 	msr	BASEPRI, r1
 8005962:	60fb      	str	r3, [r7, #12]
 8005964:	4819      	ldr	r0, [pc, #100]	@ (80059cc <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 8005966:	f7ff f9c8 	bl	8004cfa <_PreparePacket>
 800596a:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 800596c:	68bb      	ldr	r3, [r7, #8]
 800596e:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 8005970:	4b17      	ldr	r3, [pc, #92]	@ (80059d0 <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005978:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	617b      	str	r3, [r7, #20]
 800597e:	683b      	ldr	r3, [r7, #0]
 8005980:	613b      	str	r3, [r7, #16]
 8005982:	e00b      	b.n	800599c <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 8005984:	693b      	ldr	r3, [r7, #16]
 8005986:	b2da      	uxtb	r2, r3
 8005988:	697b      	ldr	r3, [r7, #20]
 800598a:	1c59      	adds	r1, r3, #1
 800598c:	6179      	str	r1, [r7, #20]
 800598e:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005992:	b2d2      	uxtb	r2, r2
 8005994:	701a      	strb	r2, [r3, #0]
 8005996:	693b      	ldr	r3, [r7, #16]
 8005998:	09db      	lsrs	r3, r3, #7
 800599a:	613b      	str	r3, [r7, #16]
 800599c:	693b      	ldr	r3, [r7, #16]
 800599e:	2b7f      	cmp	r3, #127	@ 0x7f
 80059a0:	d8f0      	bhi.n	8005984 <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 80059a2:	697b      	ldr	r3, [r7, #20]
 80059a4:	1c5a      	adds	r2, r3, #1
 80059a6:	617a      	str	r2, [r7, #20]
 80059a8:	693a      	ldr	r2, [r7, #16]
 80059aa:	b2d2      	uxtb	r2, r2
 80059ac:	701a      	strb	r2, [r3, #0]
 80059ae:	697b      	ldr	r3, [r7, #20]
 80059b0:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 80059b2:	2202      	movs	r2, #2
 80059b4:	6879      	ldr	r1, [r7, #4]
 80059b6:	68b8      	ldr	r0, [r7, #8]
 80059b8:	f7ff fa8c 	bl	8004ed4 <_SendPacket>
  RECORD_END();
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	f383 8811 	msr	BASEPRI, r3
}
 80059c2:	bf00      	nop
 80059c4:	3718      	adds	r7, #24
 80059c6:	46bd      	mov	sp, r7
 80059c8:	bd80      	pop	{r7, pc}
 80059ca:	bf00      	nop
 80059cc:	20014414 	.word	0x20014414
 80059d0:	e000ed04 	.word	0xe000ed04

080059d4 <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 80059d4:	b580      	push	{r7, lr}
 80059d6:	b082      	sub	sp, #8
 80059d8:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80059da:	f3ef 8311 	mrs	r3, BASEPRI
 80059de:	f04f 0120 	mov.w	r1, #32
 80059e2:	f381 8811 	msr	BASEPRI, r1
 80059e6:	607b      	str	r3, [r7, #4]
 80059e8:	4807      	ldr	r0, [pc, #28]	@ (8005a08 <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 80059ea:	f7ff f986 	bl	8004cfa <_PreparePacket>
 80059ee:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 80059f0:	2203      	movs	r2, #3
 80059f2:	6839      	ldr	r1, [r7, #0]
 80059f4:	6838      	ldr	r0, [r7, #0]
 80059f6:	f7ff fa6d 	bl	8004ed4 <_SendPacket>
  RECORD_END();
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	f383 8811 	msr	BASEPRI, r3
}
 8005a00:	bf00      	nop
 8005a02:	3708      	adds	r7, #8
 8005a04:	46bd      	mov	sp, r7
 8005a06:	bd80      	pop	{r7, pc}
 8005a08:	20014414 	.word	0x20014414

08005a0c <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 8005a0c:	b580      	push	{r7, lr}
 8005a0e:	b082      	sub	sp, #8
 8005a10:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8005a12:	f3ef 8311 	mrs	r3, BASEPRI
 8005a16:	f04f 0120 	mov.w	r1, #32
 8005a1a:	f381 8811 	msr	BASEPRI, r1
 8005a1e:	607b      	str	r3, [r7, #4]
 8005a20:	4807      	ldr	r0, [pc, #28]	@ (8005a40 <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 8005a22:	f7ff f96a 	bl	8004cfa <_PreparePacket>
 8005a26:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 8005a28:	2212      	movs	r2, #18
 8005a2a:	6839      	ldr	r1, [r7, #0]
 8005a2c:	6838      	ldr	r0, [r7, #0]
 8005a2e:	f7ff fa51 	bl	8004ed4 <_SendPacket>
  RECORD_END();
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	f383 8811 	msr	BASEPRI, r3
}
 8005a38:	bf00      	nop
 8005a3a:	3708      	adds	r7, #8
 8005a3c:	46bd      	mov	sp, r7
 8005a3e:	bd80      	pop	{r7, pc}
 8005a40:	20014414 	.word	0x20014414

08005a44 <SEGGER_SYSVIEW_RecordEndCall>:
*    Format and send an End API Call event without return value.
*
*  Parameters
*    EventID - Id of API function which ends.
*/
void SEGGER_SYSVIEW_RecordEndCall(unsigned int EventID) {
 8005a44:	b580      	push	{r7, lr}
 8005a46:	b088      	sub	sp, #32
 8005a48:	af00      	add	r7, sp, #0
 8005a4a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8005a4c:	f3ef 8311 	mrs	r3, BASEPRI
 8005a50:	f04f 0120 	mov.w	r1, #32
 8005a54:	f381 8811 	msr	BASEPRI, r1
 8005a58:	617b      	str	r3, [r7, #20]
 8005a5a:	4817      	ldr	r0, [pc, #92]	@ (8005ab8 <SEGGER_SYSVIEW_RecordEndCall+0x74>)
 8005a5c:	f7ff f94d 	bl	8004cfa <_PreparePacket>
 8005a60:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8005a62:	693b      	ldr	r3, [r7, #16]
 8005a64:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, EventID);
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	61fb      	str	r3, [r7, #28]
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	61bb      	str	r3, [r7, #24]
 8005a6e:	e00b      	b.n	8005a88 <SEGGER_SYSVIEW_RecordEndCall+0x44>
 8005a70:	69bb      	ldr	r3, [r7, #24]
 8005a72:	b2da      	uxtb	r2, r3
 8005a74:	69fb      	ldr	r3, [r7, #28]
 8005a76:	1c59      	adds	r1, r3, #1
 8005a78:	61f9      	str	r1, [r7, #28]
 8005a7a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005a7e:	b2d2      	uxtb	r2, r2
 8005a80:	701a      	strb	r2, [r3, #0]
 8005a82:	69bb      	ldr	r3, [r7, #24]
 8005a84:	09db      	lsrs	r3, r3, #7
 8005a86:	61bb      	str	r3, [r7, #24]
 8005a88:	69bb      	ldr	r3, [r7, #24]
 8005a8a:	2b7f      	cmp	r3, #127	@ 0x7f
 8005a8c:	d8f0      	bhi.n	8005a70 <SEGGER_SYSVIEW_RecordEndCall+0x2c>
 8005a8e:	69fb      	ldr	r3, [r7, #28]
 8005a90:	1c5a      	adds	r2, r3, #1
 8005a92:	61fa      	str	r2, [r7, #28]
 8005a94:	69ba      	ldr	r2, [r7, #24]
 8005a96:	b2d2      	uxtb	r2, r2
 8005a98:	701a      	strb	r2, [r3, #0]
 8005a9a:	69fb      	ldr	r3, [r7, #28]
 8005a9c:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_END_CALL);
 8005a9e:	221c      	movs	r2, #28
 8005aa0:	68f9      	ldr	r1, [r7, #12]
 8005aa2:	6938      	ldr	r0, [r7, #16]
 8005aa4:	f7ff fa16 	bl	8004ed4 <_SendPacket>
  RECORD_END();
 8005aa8:	697b      	ldr	r3, [r7, #20]
 8005aaa:	f383 8811 	msr	BASEPRI, r3
}
 8005aae:	bf00      	nop
 8005ab0:	3720      	adds	r7, #32
 8005ab2:	46bd      	mov	sp, r7
 8005ab4:	bd80      	pop	{r7, pc}
 8005ab6:	bf00      	nop
 8005ab8:	20014414 	.word	0x20014414

08005abc <SEGGER_SYSVIEW_RecordEndCallU32>:
*
*  Parameters
*    EventID      - Id of API function which ends.
*    Para0        - Return value which will be returned by the API function.
*/
void SEGGER_SYSVIEW_RecordEndCallU32(unsigned int EventID, U32 Para0) {
 8005abc:	b580      	push	{r7, lr}
 8005abe:	b08a      	sub	sp, #40	@ 0x28
 8005ac0:	af00      	add	r7, sp, #0
 8005ac2:	6078      	str	r0, [r7, #4]
 8005ac4:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8005ac6:	f3ef 8311 	mrs	r3, BASEPRI
 8005aca:	f04f 0120 	mov.w	r1, #32
 8005ace:	f381 8811 	msr	BASEPRI, r1
 8005ad2:	617b      	str	r3, [r7, #20]
 8005ad4:	4824      	ldr	r0, [pc, #144]	@ (8005b68 <SEGGER_SYSVIEW_RecordEndCallU32+0xac>)
 8005ad6:	f7ff f910 	bl	8004cfa <_PreparePacket>
 8005ada:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8005adc:	693b      	ldr	r3, [r7, #16]
 8005ade:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, EventID);
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	627b      	str	r3, [r7, #36]	@ 0x24
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	623b      	str	r3, [r7, #32]
 8005ae8:	e00b      	b.n	8005b02 <SEGGER_SYSVIEW_RecordEndCallU32+0x46>
 8005aea:	6a3b      	ldr	r3, [r7, #32]
 8005aec:	b2da      	uxtb	r2, r3
 8005aee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005af0:	1c59      	adds	r1, r3, #1
 8005af2:	6279      	str	r1, [r7, #36]	@ 0x24
 8005af4:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005af8:	b2d2      	uxtb	r2, r2
 8005afa:	701a      	strb	r2, [r3, #0]
 8005afc:	6a3b      	ldr	r3, [r7, #32]
 8005afe:	09db      	lsrs	r3, r3, #7
 8005b00:	623b      	str	r3, [r7, #32]
 8005b02:	6a3b      	ldr	r3, [r7, #32]
 8005b04:	2b7f      	cmp	r3, #127	@ 0x7f
 8005b06:	d8f0      	bhi.n	8005aea <SEGGER_SYSVIEW_RecordEndCallU32+0x2e>
 8005b08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b0a:	1c5a      	adds	r2, r3, #1
 8005b0c:	627a      	str	r2, [r7, #36]	@ 0x24
 8005b0e:	6a3a      	ldr	r2, [r7, #32]
 8005b10:	b2d2      	uxtb	r2, r2
 8005b12:	701a      	strb	r2, [r3, #0]
 8005b14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b16:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Para0);
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	61fb      	str	r3, [r7, #28]
 8005b1c:	683b      	ldr	r3, [r7, #0]
 8005b1e:	61bb      	str	r3, [r7, #24]
 8005b20:	e00b      	b.n	8005b3a <SEGGER_SYSVIEW_RecordEndCallU32+0x7e>
 8005b22:	69bb      	ldr	r3, [r7, #24]
 8005b24:	b2da      	uxtb	r2, r3
 8005b26:	69fb      	ldr	r3, [r7, #28]
 8005b28:	1c59      	adds	r1, r3, #1
 8005b2a:	61f9      	str	r1, [r7, #28]
 8005b2c:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005b30:	b2d2      	uxtb	r2, r2
 8005b32:	701a      	strb	r2, [r3, #0]
 8005b34:	69bb      	ldr	r3, [r7, #24]
 8005b36:	09db      	lsrs	r3, r3, #7
 8005b38:	61bb      	str	r3, [r7, #24]
 8005b3a:	69bb      	ldr	r3, [r7, #24]
 8005b3c:	2b7f      	cmp	r3, #127	@ 0x7f
 8005b3e:	d8f0      	bhi.n	8005b22 <SEGGER_SYSVIEW_RecordEndCallU32+0x66>
 8005b40:	69fb      	ldr	r3, [r7, #28]
 8005b42:	1c5a      	adds	r2, r3, #1
 8005b44:	61fa      	str	r2, [r7, #28]
 8005b46:	69ba      	ldr	r2, [r7, #24]
 8005b48:	b2d2      	uxtb	r2, r2
 8005b4a:	701a      	strb	r2, [r3, #0]
 8005b4c:	69fb      	ldr	r3, [r7, #28]
 8005b4e:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_END_CALL);
 8005b50:	221c      	movs	r2, #28
 8005b52:	68f9      	ldr	r1, [r7, #12]
 8005b54:	6938      	ldr	r0, [r7, #16]
 8005b56:	f7ff f9bd 	bl	8004ed4 <_SendPacket>
  RECORD_END();
 8005b5a:	697b      	ldr	r3, [r7, #20]
 8005b5c:	f383 8811 	msr	BASEPRI, r3
}
 8005b60:	bf00      	nop
 8005b62:	3728      	adds	r7, #40	@ 0x28
 8005b64:	46bd      	mov	sp, r7
 8005b66:	bd80      	pop	{r7, pc}
 8005b68:	20014414 	.word	0x20014414

08005b6c <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 8005b6c:	b580      	push	{r7, lr}
 8005b6e:	b082      	sub	sp, #8
 8005b70:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8005b72:	f3ef 8311 	mrs	r3, BASEPRI
 8005b76:	f04f 0120 	mov.w	r1, #32
 8005b7a:	f381 8811 	msr	BASEPRI, r1
 8005b7e:	607b      	str	r3, [r7, #4]
 8005b80:	4807      	ldr	r0, [pc, #28]	@ (8005ba0 <SEGGER_SYSVIEW_OnIdle+0x34>)
 8005b82:	f7ff f8ba 	bl	8004cfa <_PreparePacket>
 8005b86:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 8005b88:	2211      	movs	r2, #17
 8005b8a:	6839      	ldr	r1, [r7, #0]
 8005b8c:	6838      	ldr	r0, [r7, #0]
 8005b8e:	f7ff f9a1 	bl	8004ed4 <_SendPacket>
  RECORD_END();
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	f383 8811 	msr	BASEPRI, r3
}
 8005b98:	bf00      	nop
 8005b9a:	3708      	adds	r7, #8
 8005b9c:	46bd      	mov	sp, r7
 8005b9e:	bd80      	pop	{r7, pc}
 8005ba0:	20014414 	.word	0x20014414

08005ba4 <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 8005ba4:	b580      	push	{r7, lr}
 8005ba6:	b088      	sub	sp, #32
 8005ba8:	af00      	add	r7, sp, #0
 8005baa:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8005bac:	f3ef 8311 	mrs	r3, BASEPRI
 8005bb0:	f04f 0120 	mov.w	r1, #32
 8005bb4:	f381 8811 	msr	BASEPRI, r1
 8005bb8:	617b      	str	r3, [r7, #20]
 8005bba:	4819      	ldr	r0, [pc, #100]	@ (8005c20 <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 8005bbc:	f7ff f89d 	bl	8004cfa <_PreparePacket>
 8005bc0:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8005bc2:	693b      	ldr	r3, [r7, #16]
 8005bc4:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8005bc6:	4b17      	ldr	r3, [pc, #92]	@ (8005c24 <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 8005bc8:	691b      	ldr	r3, [r3, #16]
 8005bca:	687a      	ldr	r2, [r7, #4]
 8005bcc:	1ad3      	subs	r3, r2, r3
 8005bce:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	61fb      	str	r3, [r7, #28]
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	61bb      	str	r3, [r7, #24]
 8005bd8:	e00b      	b.n	8005bf2 <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 8005bda:	69bb      	ldr	r3, [r7, #24]
 8005bdc:	b2da      	uxtb	r2, r3
 8005bde:	69fb      	ldr	r3, [r7, #28]
 8005be0:	1c59      	adds	r1, r3, #1
 8005be2:	61f9      	str	r1, [r7, #28]
 8005be4:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005be8:	b2d2      	uxtb	r2, r2
 8005bea:	701a      	strb	r2, [r3, #0]
 8005bec:	69bb      	ldr	r3, [r7, #24]
 8005bee:	09db      	lsrs	r3, r3, #7
 8005bf0:	61bb      	str	r3, [r7, #24]
 8005bf2:	69bb      	ldr	r3, [r7, #24]
 8005bf4:	2b7f      	cmp	r3, #127	@ 0x7f
 8005bf6:	d8f0      	bhi.n	8005bda <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 8005bf8:	69fb      	ldr	r3, [r7, #28]
 8005bfa:	1c5a      	adds	r2, r3, #1
 8005bfc:	61fa      	str	r2, [r7, #28]
 8005bfe:	69ba      	ldr	r2, [r7, #24]
 8005c00:	b2d2      	uxtb	r2, r2
 8005c02:	701a      	strb	r2, [r3, #0]
 8005c04:	69fb      	ldr	r3, [r7, #28]
 8005c06:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 8005c08:	2208      	movs	r2, #8
 8005c0a:	68f9      	ldr	r1, [r7, #12]
 8005c0c:	6938      	ldr	r0, [r7, #16]
 8005c0e:	f7ff f961 	bl	8004ed4 <_SendPacket>
  RECORD_END();
 8005c12:	697b      	ldr	r3, [r7, #20]
 8005c14:	f383 8811 	msr	BASEPRI, r3
}
 8005c18:	bf00      	nop
 8005c1a:	3720      	adds	r7, #32
 8005c1c:	46bd      	mov	sp, r7
 8005c1e:	bd80      	pop	{r7, pc}
 8005c20:	20014414 	.word	0x20014414
 8005c24:	200143e4 	.word	0x200143e4

08005c28 <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 8005c28:	b580      	push	{r7, lr}
 8005c2a:	b088      	sub	sp, #32
 8005c2c:	af00      	add	r7, sp, #0
 8005c2e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8005c30:	f3ef 8311 	mrs	r3, BASEPRI
 8005c34:	f04f 0120 	mov.w	r1, #32
 8005c38:	f381 8811 	msr	BASEPRI, r1
 8005c3c:	617b      	str	r3, [r7, #20]
 8005c3e:	4819      	ldr	r0, [pc, #100]	@ (8005ca4 <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 8005c40:	f7ff f85b 	bl	8004cfa <_PreparePacket>
 8005c44:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8005c46:	693b      	ldr	r3, [r7, #16]
 8005c48:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8005c4a:	4b17      	ldr	r3, [pc, #92]	@ (8005ca8 <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 8005c4c:	691b      	ldr	r3, [r3, #16]
 8005c4e:	687a      	ldr	r2, [r7, #4]
 8005c50:	1ad3      	subs	r3, r2, r3
 8005c52:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	61fb      	str	r3, [r7, #28]
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	61bb      	str	r3, [r7, #24]
 8005c5c:	e00b      	b.n	8005c76 <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 8005c5e:	69bb      	ldr	r3, [r7, #24]
 8005c60:	b2da      	uxtb	r2, r3
 8005c62:	69fb      	ldr	r3, [r7, #28]
 8005c64:	1c59      	adds	r1, r3, #1
 8005c66:	61f9      	str	r1, [r7, #28]
 8005c68:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005c6c:	b2d2      	uxtb	r2, r2
 8005c6e:	701a      	strb	r2, [r3, #0]
 8005c70:	69bb      	ldr	r3, [r7, #24]
 8005c72:	09db      	lsrs	r3, r3, #7
 8005c74:	61bb      	str	r3, [r7, #24]
 8005c76:	69bb      	ldr	r3, [r7, #24]
 8005c78:	2b7f      	cmp	r3, #127	@ 0x7f
 8005c7a:	d8f0      	bhi.n	8005c5e <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 8005c7c:	69fb      	ldr	r3, [r7, #28]
 8005c7e:	1c5a      	adds	r2, r3, #1
 8005c80:	61fa      	str	r2, [r7, #28]
 8005c82:	69ba      	ldr	r2, [r7, #24]
 8005c84:	b2d2      	uxtb	r2, r2
 8005c86:	701a      	strb	r2, [r3, #0]
 8005c88:	69fb      	ldr	r3, [r7, #28]
 8005c8a:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 8005c8c:	2204      	movs	r2, #4
 8005c8e:	68f9      	ldr	r1, [r7, #12]
 8005c90:	6938      	ldr	r0, [r7, #16]
 8005c92:	f7ff f91f 	bl	8004ed4 <_SendPacket>
  RECORD_END();
 8005c96:	697b      	ldr	r3, [r7, #20]
 8005c98:	f383 8811 	msr	BASEPRI, r3
}
 8005c9c:	bf00      	nop
 8005c9e:	3720      	adds	r7, #32
 8005ca0:	46bd      	mov	sp, r7
 8005ca2:	bd80      	pop	{r7, pc}
 8005ca4:	20014414 	.word	0x20014414
 8005ca8:	200143e4 	.word	0x200143e4

08005cac <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 8005cac:	b580      	push	{r7, lr}
 8005cae:	b088      	sub	sp, #32
 8005cb0:	af00      	add	r7, sp, #0
 8005cb2:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8005cb4:	f3ef 8311 	mrs	r3, BASEPRI
 8005cb8:	f04f 0120 	mov.w	r1, #32
 8005cbc:	f381 8811 	msr	BASEPRI, r1
 8005cc0:	617b      	str	r3, [r7, #20]
 8005cc2:	4819      	ldr	r0, [pc, #100]	@ (8005d28 <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 8005cc4:	f7ff f819 	bl	8004cfa <_PreparePacket>
 8005cc8:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8005cca:	693b      	ldr	r3, [r7, #16]
 8005ccc:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8005cce:	4b17      	ldr	r3, [pc, #92]	@ (8005d2c <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 8005cd0:	691b      	ldr	r3, [r3, #16]
 8005cd2:	687a      	ldr	r2, [r7, #4]
 8005cd4:	1ad3      	subs	r3, r2, r3
 8005cd6:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	61fb      	str	r3, [r7, #28]
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	61bb      	str	r3, [r7, #24]
 8005ce0:	e00b      	b.n	8005cfa <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 8005ce2:	69bb      	ldr	r3, [r7, #24]
 8005ce4:	b2da      	uxtb	r2, r3
 8005ce6:	69fb      	ldr	r3, [r7, #28]
 8005ce8:	1c59      	adds	r1, r3, #1
 8005cea:	61f9      	str	r1, [r7, #28]
 8005cec:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005cf0:	b2d2      	uxtb	r2, r2
 8005cf2:	701a      	strb	r2, [r3, #0]
 8005cf4:	69bb      	ldr	r3, [r7, #24]
 8005cf6:	09db      	lsrs	r3, r3, #7
 8005cf8:	61bb      	str	r3, [r7, #24]
 8005cfa:	69bb      	ldr	r3, [r7, #24]
 8005cfc:	2b7f      	cmp	r3, #127	@ 0x7f
 8005cfe:	d8f0      	bhi.n	8005ce2 <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 8005d00:	69fb      	ldr	r3, [r7, #28]
 8005d02:	1c5a      	adds	r2, r3, #1
 8005d04:	61fa      	str	r2, [r7, #28]
 8005d06:	69ba      	ldr	r2, [r7, #24]
 8005d08:	b2d2      	uxtb	r2, r2
 8005d0a:	701a      	strb	r2, [r3, #0]
 8005d0c:	69fb      	ldr	r3, [r7, #28]
 8005d0e:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 8005d10:	2206      	movs	r2, #6
 8005d12:	68f9      	ldr	r1, [r7, #12]
 8005d14:	6938      	ldr	r0, [r7, #16]
 8005d16:	f7ff f8dd 	bl	8004ed4 <_SendPacket>
  RECORD_END();
 8005d1a:	697b      	ldr	r3, [r7, #20]
 8005d1c:	f383 8811 	msr	BASEPRI, r3
}
 8005d20:	bf00      	nop
 8005d22:	3720      	adds	r7, #32
 8005d24:	46bd      	mov	sp, r7
 8005d26:	bd80      	pop	{r7, pc}
 8005d28:	20014414 	.word	0x20014414
 8005d2c:	200143e4 	.word	0x200143e4

08005d30 <SEGGER_SYSVIEW_OnTaskStopReady>:
*
*  Parameters
*    TaskId - Task ID of task that completed execution.
*    Cause  - Reason for task to stop (i.e. Idle/Sleep)
*/
void SEGGER_SYSVIEW_OnTaskStopReady(U32 TaskId, unsigned int Cause) {
 8005d30:	b580      	push	{r7, lr}
 8005d32:	b08a      	sub	sp, #40	@ 0x28
 8005d34:	af00      	add	r7, sp, #0
 8005d36:	6078      	str	r0, [r7, #4]
 8005d38:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8005d3a:	f3ef 8311 	mrs	r3, BASEPRI
 8005d3e:	f04f 0120 	mov.w	r1, #32
 8005d42:	f381 8811 	msr	BASEPRI, r1
 8005d46:	617b      	str	r3, [r7, #20]
 8005d48:	4827      	ldr	r0, [pc, #156]	@ (8005de8 <SEGGER_SYSVIEW_OnTaskStopReady+0xb8>)
 8005d4a:	f7fe ffd6 	bl	8004cfa <_PreparePacket>
 8005d4e:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8005d50:	693b      	ldr	r3, [r7, #16]
 8005d52:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8005d54:	4b25      	ldr	r3, [pc, #148]	@ (8005dec <SEGGER_SYSVIEW_OnTaskStopReady+0xbc>)
 8005d56:	691b      	ldr	r3, [r3, #16]
 8005d58:	687a      	ldr	r2, [r7, #4]
 8005d5a:	1ad3      	subs	r3, r2, r3
 8005d5c:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	627b      	str	r3, [r7, #36]	@ 0x24
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	623b      	str	r3, [r7, #32]
 8005d66:	e00b      	b.n	8005d80 <SEGGER_SYSVIEW_OnTaskStopReady+0x50>
 8005d68:	6a3b      	ldr	r3, [r7, #32]
 8005d6a:	b2da      	uxtb	r2, r3
 8005d6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d6e:	1c59      	adds	r1, r3, #1
 8005d70:	6279      	str	r1, [r7, #36]	@ 0x24
 8005d72:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005d76:	b2d2      	uxtb	r2, r2
 8005d78:	701a      	strb	r2, [r3, #0]
 8005d7a:	6a3b      	ldr	r3, [r7, #32]
 8005d7c:	09db      	lsrs	r3, r3, #7
 8005d7e:	623b      	str	r3, [r7, #32]
 8005d80:	6a3b      	ldr	r3, [r7, #32]
 8005d82:	2b7f      	cmp	r3, #127	@ 0x7f
 8005d84:	d8f0      	bhi.n	8005d68 <SEGGER_SYSVIEW_OnTaskStopReady+0x38>
 8005d86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d88:	1c5a      	adds	r2, r3, #1
 8005d8a:	627a      	str	r2, [r7, #36]	@ 0x24
 8005d8c:	6a3a      	ldr	r2, [r7, #32]
 8005d8e:	b2d2      	uxtb	r2, r2
 8005d90:	701a      	strb	r2, [r3, #0]
 8005d92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d94:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Cause);
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	61fb      	str	r3, [r7, #28]
 8005d9a:	683b      	ldr	r3, [r7, #0]
 8005d9c:	61bb      	str	r3, [r7, #24]
 8005d9e:	e00b      	b.n	8005db8 <SEGGER_SYSVIEW_OnTaskStopReady+0x88>
 8005da0:	69bb      	ldr	r3, [r7, #24]
 8005da2:	b2da      	uxtb	r2, r3
 8005da4:	69fb      	ldr	r3, [r7, #28]
 8005da6:	1c59      	adds	r1, r3, #1
 8005da8:	61f9      	str	r1, [r7, #28]
 8005daa:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005dae:	b2d2      	uxtb	r2, r2
 8005db0:	701a      	strb	r2, [r3, #0]
 8005db2:	69bb      	ldr	r3, [r7, #24]
 8005db4:	09db      	lsrs	r3, r3, #7
 8005db6:	61bb      	str	r3, [r7, #24]
 8005db8:	69bb      	ldr	r3, [r7, #24]
 8005dba:	2b7f      	cmp	r3, #127	@ 0x7f
 8005dbc:	d8f0      	bhi.n	8005da0 <SEGGER_SYSVIEW_OnTaskStopReady+0x70>
 8005dbe:	69fb      	ldr	r3, [r7, #28]
 8005dc0:	1c5a      	adds	r2, r3, #1
 8005dc2:	61fa      	str	r2, [r7, #28]
 8005dc4:	69ba      	ldr	r2, [r7, #24]
 8005dc6:	b2d2      	uxtb	r2, r2
 8005dc8:	701a      	strb	r2, [r3, #0]
 8005dca:	69fb      	ldr	r3, [r7, #28]
 8005dcc:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_STOP_READY);
 8005dce:	2207      	movs	r2, #7
 8005dd0:	68f9      	ldr	r1, [r7, #12]
 8005dd2:	6938      	ldr	r0, [r7, #16]
 8005dd4:	f7ff f87e 	bl	8004ed4 <_SendPacket>
  RECORD_END();
 8005dd8:	697b      	ldr	r3, [r7, #20]
 8005dda:	f383 8811 	msr	BASEPRI, r3
}
 8005dde:	bf00      	nop
 8005de0:	3728      	adds	r7, #40	@ 0x28
 8005de2:	46bd      	mov	sp, r7
 8005de4:	bd80      	pop	{r7, pc}
 8005de6:	bf00      	nop
 8005de8:	20014414 	.word	0x20014414
 8005dec:	200143e4 	.word	0x200143e4

08005df0 <SEGGER_SYSVIEW_ShrinkId>:
*     SEGGER_SYSVIEW_ID_BASE: Lowest Id reported by the application.
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
 8005df0:	b480      	push	{r7}
 8005df2:	b083      	sub	sp, #12
 8005df4:	af00      	add	r7, sp, #0
 8005df6:	6078      	str	r0, [r7, #4]
  return SHRINK_ID(Id);
 8005df8:	4b04      	ldr	r3, [pc, #16]	@ (8005e0c <SEGGER_SYSVIEW_ShrinkId+0x1c>)
 8005dfa:	691b      	ldr	r3, [r3, #16]
 8005dfc:	687a      	ldr	r2, [r7, #4]
 8005dfe:	1ad3      	subs	r3, r2, r3
}
 8005e00:	4618      	mov	r0, r3
 8005e02:	370c      	adds	r7, #12
 8005e04:	46bd      	mov	sp, r7
 8005e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e0a:	4770      	bx	lr
 8005e0c:	200143e4 	.word	0x200143e4

08005e10 <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 8005e10:	b580      	push	{r7, lr}
 8005e12:	b08c      	sub	sp, #48	@ 0x30
 8005e14:	af00      	add	r7, sp, #0
 8005e16:	4603      	mov	r3, r0
 8005e18:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 8005e1a:	4b40      	ldr	r3, [pc, #256]	@ (8005f1c <SEGGER_SYSVIEW_SendModule+0x10c>)
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d077      	beq.n	8005f12 <SEGGER_SYSVIEW_SendModule+0x102>
    pModule = _pFirstModule;
 8005e22:	4b3e      	ldr	r3, [pc, #248]	@ (8005f1c <SEGGER_SYSVIEW_SendModule+0x10c>)
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	62fb      	str	r3, [r7, #44]	@ 0x2c
    for (n = 0; n < ModuleId; n++) {
 8005e28:	2300      	movs	r3, #0
 8005e2a:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005e2c:	e008      	b.n	8005e40 <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 8005e2e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e30:	691b      	ldr	r3, [r3, #16]
 8005e32:	62fb      	str	r3, [r7, #44]	@ 0x2c
      if (pModule == 0) {
 8005e34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d007      	beq.n	8005e4a <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 8005e3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e3c:	3301      	adds	r3, #1
 8005e3e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005e40:	79fb      	ldrb	r3, [r7, #7]
 8005e42:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005e44:	429a      	cmp	r2, r3
 8005e46:	d3f2      	bcc.n	8005e2e <SEGGER_SYSVIEW_SendModule+0x1e>
 8005e48:	e000      	b.n	8005e4c <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 8005e4a:	bf00      	nop
      }
    }
    if (pModule != 0) {
 8005e4c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d055      	beq.n	8005efe <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8005e52:	f3ef 8311 	mrs	r3, BASEPRI
 8005e56:	f04f 0120 	mov.w	r1, #32
 8005e5a:	f381 8811 	msr	BASEPRI, r1
 8005e5e:	617b      	str	r3, [r7, #20]
 8005e60:	482f      	ldr	r0, [pc, #188]	@ (8005f20 <SEGGER_SYSVIEW_SendModule+0x110>)
 8005e62:	f7fe ff4a 	bl	8004cfa <_PreparePacket>
 8005e66:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 8005e68:	693b      	ldr	r3, [r7, #16]
 8005e6a:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	627b      	str	r3, [r7, #36]	@ 0x24
 8005e70:	79fb      	ldrb	r3, [r7, #7]
 8005e72:	623b      	str	r3, [r7, #32]
 8005e74:	e00b      	b.n	8005e8e <SEGGER_SYSVIEW_SendModule+0x7e>
 8005e76:	6a3b      	ldr	r3, [r7, #32]
 8005e78:	b2da      	uxtb	r2, r3
 8005e7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e7c:	1c59      	adds	r1, r3, #1
 8005e7e:	6279      	str	r1, [r7, #36]	@ 0x24
 8005e80:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005e84:	b2d2      	uxtb	r2, r2
 8005e86:	701a      	strb	r2, [r3, #0]
 8005e88:	6a3b      	ldr	r3, [r7, #32]
 8005e8a:	09db      	lsrs	r3, r3, #7
 8005e8c:	623b      	str	r3, [r7, #32]
 8005e8e:	6a3b      	ldr	r3, [r7, #32]
 8005e90:	2b7f      	cmp	r3, #127	@ 0x7f
 8005e92:	d8f0      	bhi.n	8005e76 <SEGGER_SYSVIEW_SendModule+0x66>
 8005e94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e96:	1c5a      	adds	r2, r3, #1
 8005e98:	627a      	str	r2, [r7, #36]	@ 0x24
 8005e9a:	6a3a      	ldr	r2, [r7, #32]
 8005e9c:	b2d2      	uxtb	r2, r2
 8005e9e:	701a      	strb	r2, [r3, #0]
 8005ea0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ea2:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	61fb      	str	r3, [r7, #28]
 8005ea8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005eaa:	689b      	ldr	r3, [r3, #8]
 8005eac:	61bb      	str	r3, [r7, #24]
 8005eae:	e00b      	b.n	8005ec8 <SEGGER_SYSVIEW_SendModule+0xb8>
 8005eb0:	69bb      	ldr	r3, [r7, #24]
 8005eb2:	b2da      	uxtb	r2, r3
 8005eb4:	69fb      	ldr	r3, [r7, #28]
 8005eb6:	1c59      	adds	r1, r3, #1
 8005eb8:	61f9      	str	r1, [r7, #28]
 8005eba:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005ebe:	b2d2      	uxtb	r2, r2
 8005ec0:	701a      	strb	r2, [r3, #0]
 8005ec2:	69bb      	ldr	r3, [r7, #24]
 8005ec4:	09db      	lsrs	r3, r3, #7
 8005ec6:	61bb      	str	r3, [r7, #24]
 8005ec8:	69bb      	ldr	r3, [r7, #24]
 8005eca:	2b7f      	cmp	r3, #127	@ 0x7f
 8005ecc:	d8f0      	bhi.n	8005eb0 <SEGGER_SYSVIEW_SendModule+0xa0>
 8005ece:	69fb      	ldr	r3, [r7, #28]
 8005ed0:	1c5a      	adds	r2, r3, #1
 8005ed2:	61fa      	str	r2, [r7, #28]
 8005ed4:	69ba      	ldr	r2, [r7, #24]
 8005ed6:	b2d2      	uxtb	r2, r2
 8005ed8:	701a      	strb	r2, [r3, #0]
 8005eda:	69fb      	ldr	r3, [r7, #28]
 8005edc:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8005ede:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	2280      	movs	r2, #128	@ 0x80
 8005ee4:	4619      	mov	r1, r3
 8005ee6:	68f8      	ldr	r0, [r7, #12]
 8005ee8:	f7fe fece 	bl	8004c88 <_EncodeStr>
 8005eec:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 8005eee:	2216      	movs	r2, #22
 8005ef0:	68f9      	ldr	r1, [r7, #12]
 8005ef2:	6938      	ldr	r0, [r7, #16]
 8005ef4:	f7fe ffee 	bl	8004ed4 <_SendPacket>
      RECORD_END();
 8005ef8:	697b      	ldr	r3, [r7, #20]
 8005efa:	f383 8811 	msr	BASEPRI, r3
    }
    if (pModule && pModule->pfSendModuleDesc) {
 8005efe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d006      	beq.n	8005f12 <SEGGER_SYSVIEW_SendModule+0x102>
 8005f04:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f06:	68db      	ldr	r3, [r3, #12]
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d002      	beq.n	8005f12 <SEGGER_SYSVIEW_SendModule+0x102>
      pModule->pfSendModuleDesc();
 8005f0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f0e:	68db      	ldr	r3, [r3, #12]
 8005f10:	4798      	blx	r3
    }
  }
}
 8005f12:	bf00      	nop
 8005f14:	3730      	adds	r7, #48	@ 0x30
 8005f16:	46bd      	mov	sp, r7
 8005f18:	bd80      	pop	{r7, pc}
 8005f1a:	bf00      	nop
 8005f1c:	2001440c 	.word	0x2001440c
 8005f20:	20014414 	.word	0x20014414

08005f24 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 8005f24:	b580      	push	{r7, lr}
 8005f26:	b082      	sub	sp, #8
 8005f28:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 8005f2a:	4b0c      	ldr	r3, [pc, #48]	@ (8005f5c <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d00f      	beq.n	8005f52 <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 8005f32:	4b0a      	ldr	r3, [pc, #40]	@ (8005f5c <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	68db      	ldr	r3, [r3, #12]
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d002      	beq.n	8005f46 <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	68db      	ldr	r3, [r3, #12]
 8005f44:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	691b      	ldr	r3, [r3, #16]
 8005f4a:	607b      	str	r3, [r7, #4]
    } while (pModule);
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d1f2      	bne.n	8005f38 <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 8005f52:	bf00      	nop
 8005f54:	3708      	adds	r7, #8
 8005f56:	46bd      	mov	sp, r7
 8005f58:	bd80      	pop	{r7, pc}
 8005f5a:	bf00      	nop
 8005f5c:	2001440c 	.word	0x2001440c

08005f60 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 8005f60:	b580      	push	{r7, lr}
 8005f62:	b086      	sub	sp, #24
 8005f64:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 8005f66:	f3ef 8311 	mrs	r3, BASEPRI
 8005f6a:	f04f 0120 	mov.w	r1, #32
 8005f6e:	f381 8811 	msr	BASEPRI, r1
 8005f72:	60fb      	str	r3, [r7, #12]
 8005f74:	4817      	ldr	r0, [pc, #92]	@ (8005fd4 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 8005f76:	f7fe fec0 	bl	8004cfa <_PreparePacket>
 8005f7a:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 8005f7c:	68bb      	ldr	r3, [r7, #8]
 8005f7e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	617b      	str	r3, [r7, #20]
 8005f84:	4b14      	ldr	r3, [pc, #80]	@ (8005fd8 <SEGGER_SYSVIEW_SendNumModules+0x78>)
 8005f86:	781b      	ldrb	r3, [r3, #0]
 8005f88:	613b      	str	r3, [r7, #16]
 8005f8a:	e00b      	b.n	8005fa4 <SEGGER_SYSVIEW_SendNumModules+0x44>
 8005f8c:	693b      	ldr	r3, [r7, #16]
 8005f8e:	b2da      	uxtb	r2, r3
 8005f90:	697b      	ldr	r3, [r7, #20]
 8005f92:	1c59      	adds	r1, r3, #1
 8005f94:	6179      	str	r1, [r7, #20]
 8005f96:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005f9a:	b2d2      	uxtb	r2, r2
 8005f9c:	701a      	strb	r2, [r3, #0]
 8005f9e:	693b      	ldr	r3, [r7, #16]
 8005fa0:	09db      	lsrs	r3, r3, #7
 8005fa2:	613b      	str	r3, [r7, #16]
 8005fa4:	693b      	ldr	r3, [r7, #16]
 8005fa6:	2b7f      	cmp	r3, #127	@ 0x7f
 8005fa8:	d8f0      	bhi.n	8005f8c <SEGGER_SYSVIEW_SendNumModules+0x2c>
 8005faa:	697b      	ldr	r3, [r7, #20]
 8005fac:	1c5a      	adds	r2, r3, #1
 8005fae:	617a      	str	r2, [r7, #20]
 8005fb0:	693a      	ldr	r2, [r7, #16]
 8005fb2:	b2d2      	uxtb	r2, r2
 8005fb4:	701a      	strb	r2, [r3, #0]
 8005fb6:	697b      	ldr	r3, [r7, #20]
 8005fb8:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 8005fba:	221b      	movs	r2, #27
 8005fbc:	6879      	ldr	r1, [r7, #4]
 8005fbe:	68b8      	ldr	r0, [r7, #8]
 8005fc0:	f7fe ff88 	bl	8004ed4 <_SendPacket>
  RECORD_END();
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	f383 8811 	msr	BASEPRI, r3
}
 8005fca:	bf00      	nop
 8005fcc:	3718      	adds	r7, #24
 8005fce:	46bd      	mov	sp, r7
 8005fd0:	bd80      	pop	{r7, pc}
 8005fd2:	bf00      	nop
 8005fd4:	20014414 	.word	0x20014414
 8005fd8:	20014410 	.word	0x20014410

08005fdc <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 8005fdc:	b580      	push	{r7, lr}
 8005fde:	b08a      	sub	sp, #40	@ 0x28
 8005fe0:	af00      	add	r7, sp, #0
 8005fe2:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8005fe4:	f3ef 8311 	mrs	r3, BASEPRI
 8005fe8:	f04f 0120 	mov.w	r1, #32
 8005fec:	f381 8811 	msr	BASEPRI, r1
 8005ff0:	617b      	str	r3, [r7, #20]
 8005ff2:	4827      	ldr	r0, [pc, #156]	@ (8006090 <SEGGER_SYSVIEW_Warn+0xb4>)
 8005ff4:	f7fe fe81 	bl	8004cfa <_PreparePacket>
 8005ff8:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8005ffa:	2280      	movs	r2, #128	@ 0x80
 8005ffc:	6879      	ldr	r1, [r7, #4]
 8005ffe:	6938      	ldr	r0, [r7, #16]
 8006000:	f7fe fe42 	bl	8004c88 <_EncodeStr>
 8006004:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	627b      	str	r3, [r7, #36]	@ 0x24
 800600a:	2301      	movs	r3, #1
 800600c:	623b      	str	r3, [r7, #32]
 800600e:	e00b      	b.n	8006028 <SEGGER_SYSVIEW_Warn+0x4c>
 8006010:	6a3b      	ldr	r3, [r7, #32]
 8006012:	b2da      	uxtb	r2, r3
 8006014:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006016:	1c59      	adds	r1, r3, #1
 8006018:	6279      	str	r1, [r7, #36]	@ 0x24
 800601a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800601e:	b2d2      	uxtb	r2, r2
 8006020:	701a      	strb	r2, [r3, #0]
 8006022:	6a3b      	ldr	r3, [r7, #32]
 8006024:	09db      	lsrs	r3, r3, #7
 8006026:	623b      	str	r3, [r7, #32]
 8006028:	6a3b      	ldr	r3, [r7, #32]
 800602a:	2b7f      	cmp	r3, #127	@ 0x7f
 800602c:	d8f0      	bhi.n	8006010 <SEGGER_SYSVIEW_Warn+0x34>
 800602e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006030:	1c5a      	adds	r2, r3, #1
 8006032:	627a      	str	r2, [r7, #36]	@ 0x24
 8006034:	6a3a      	ldr	r2, [r7, #32]
 8006036:	b2d2      	uxtb	r2, r2
 8006038:	701a      	strb	r2, [r3, #0]
 800603a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800603c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	61fb      	str	r3, [r7, #28]
 8006042:	2300      	movs	r3, #0
 8006044:	61bb      	str	r3, [r7, #24]
 8006046:	e00b      	b.n	8006060 <SEGGER_SYSVIEW_Warn+0x84>
 8006048:	69bb      	ldr	r3, [r7, #24]
 800604a:	b2da      	uxtb	r2, r3
 800604c:	69fb      	ldr	r3, [r7, #28]
 800604e:	1c59      	adds	r1, r3, #1
 8006050:	61f9      	str	r1, [r7, #28]
 8006052:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006056:	b2d2      	uxtb	r2, r2
 8006058:	701a      	strb	r2, [r3, #0]
 800605a:	69bb      	ldr	r3, [r7, #24]
 800605c:	09db      	lsrs	r3, r3, #7
 800605e:	61bb      	str	r3, [r7, #24]
 8006060:	69bb      	ldr	r3, [r7, #24]
 8006062:	2b7f      	cmp	r3, #127	@ 0x7f
 8006064:	d8f0      	bhi.n	8006048 <SEGGER_SYSVIEW_Warn+0x6c>
 8006066:	69fb      	ldr	r3, [r7, #28]
 8006068:	1c5a      	adds	r2, r3, #1
 800606a:	61fa      	str	r2, [r7, #28]
 800606c:	69ba      	ldr	r2, [r7, #24]
 800606e:	b2d2      	uxtb	r2, r2
 8006070:	701a      	strb	r2, [r3, #0]
 8006072:	69fb      	ldr	r3, [r7, #28]
 8006074:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8006076:	221a      	movs	r2, #26
 8006078:	68f9      	ldr	r1, [r7, #12]
 800607a:	6938      	ldr	r0, [r7, #16]
 800607c:	f7fe ff2a 	bl	8004ed4 <_SendPacket>
  RECORD_END();
 8006080:	697b      	ldr	r3, [r7, #20]
 8006082:	f383 8811 	msr	BASEPRI, r3
}
 8006086:	bf00      	nop
 8006088:	3728      	adds	r7, #40	@ 0x28
 800608a:	46bd      	mov	sp, r7
 800608c:	bd80      	pop	{r7, pc}
 800608e:	bf00      	nop
 8006090:	20014414 	.word	0x20014414

08006094 <_write_r>:
*   Low-level reentrant write function.
*   libc subroutines will use this system routine for output to all files,
*   including stdout.
*   Write data via RTT.
*/
_ssize_t _write_r(struct _reent *r, int file, const void *ptr, size_t len) {
 8006094:	b580      	push	{r7, lr}
 8006096:	b084      	sub	sp, #16
 8006098:	af00      	add	r7, sp, #0
 800609a:	60f8      	str	r0, [r7, #12]
 800609c:	60b9      	str	r1, [r7, #8]
 800609e:	607a      	str	r2, [r7, #4]
 80060a0:	603b      	str	r3, [r7, #0]
  (void) file;  /* Not used, avoid warning */
  (void) r;     /* Not used, avoid warning */
  SEGGER_RTT_Write(0, ptr, len);
 80060a2:	683a      	ldr	r2, [r7, #0]
 80060a4:	6879      	ldr	r1, [r7, #4]
 80060a6:	2000      	movs	r0, #0
 80060a8:	f7fe fcf8 	bl	8004a9c <SEGGER_RTT_Write>
  return len;
 80060ac:	683b      	ldr	r3, [r7, #0]
}
 80060ae:	4618      	mov	r0, r3
 80060b0:	3710      	adds	r7, #16
 80060b2:	46bd      	mov	sp, r7
 80060b4:	bd80      	pop	{r7, pc}
	...

080060b8 <std>:
 80060b8:	2300      	movs	r3, #0
 80060ba:	b510      	push	{r4, lr}
 80060bc:	4604      	mov	r4, r0
 80060be:	e9c0 3300 	strd	r3, r3, [r0]
 80060c2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80060c6:	6083      	str	r3, [r0, #8]
 80060c8:	8181      	strh	r1, [r0, #12]
 80060ca:	6643      	str	r3, [r0, #100]	@ 0x64
 80060cc:	81c2      	strh	r2, [r0, #14]
 80060ce:	6183      	str	r3, [r0, #24]
 80060d0:	4619      	mov	r1, r3
 80060d2:	2208      	movs	r2, #8
 80060d4:	305c      	adds	r0, #92	@ 0x5c
 80060d6:	f000 f9f7 	bl	80064c8 <memset>
 80060da:	4b0d      	ldr	r3, [pc, #52]	@ (8006110 <std+0x58>)
 80060dc:	6263      	str	r3, [r4, #36]	@ 0x24
 80060de:	4b0d      	ldr	r3, [pc, #52]	@ (8006114 <std+0x5c>)
 80060e0:	62a3      	str	r3, [r4, #40]	@ 0x28
 80060e2:	4b0d      	ldr	r3, [pc, #52]	@ (8006118 <std+0x60>)
 80060e4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80060e6:	4b0d      	ldr	r3, [pc, #52]	@ (800611c <std+0x64>)
 80060e8:	6323      	str	r3, [r4, #48]	@ 0x30
 80060ea:	4b0d      	ldr	r3, [pc, #52]	@ (8006120 <std+0x68>)
 80060ec:	6224      	str	r4, [r4, #32]
 80060ee:	429c      	cmp	r4, r3
 80060f0:	d006      	beq.n	8006100 <std+0x48>
 80060f2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80060f6:	4294      	cmp	r4, r2
 80060f8:	d002      	beq.n	8006100 <std+0x48>
 80060fa:	33d0      	adds	r3, #208	@ 0xd0
 80060fc:	429c      	cmp	r4, r3
 80060fe:	d105      	bne.n	800610c <std+0x54>
 8006100:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8006104:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006108:	f000 ba44 	b.w	8006594 <__retarget_lock_init_recursive>
 800610c:	bd10      	pop	{r4, pc}
 800610e:	bf00      	nop
 8006110:	080062f9 	.word	0x080062f9
 8006114:	0800631b 	.word	0x0800631b
 8006118:	08006353 	.word	0x08006353
 800611c:	08006377 	.word	0x08006377
 8006120:	200144f8 	.word	0x200144f8

08006124 <stdio_exit_handler>:
 8006124:	4a02      	ldr	r2, [pc, #8]	@ (8006130 <stdio_exit_handler+0xc>)
 8006126:	4903      	ldr	r1, [pc, #12]	@ (8006134 <stdio_exit_handler+0x10>)
 8006128:	4803      	ldr	r0, [pc, #12]	@ (8006138 <stdio_exit_handler+0x14>)
 800612a:	f000 b869 	b.w	8006200 <_fwalk_sglue>
 800612e:	bf00      	nop
 8006130:	20000010 	.word	0x20000010
 8006134:	080068b1 	.word	0x080068b1
 8006138:	20000020 	.word	0x20000020

0800613c <cleanup_stdio>:
 800613c:	6841      	ldr	r1, [r0, #4]
 800613e:	4b0c      	ldr	r3, [pc, #48]	@ (8006170 <cleanup_stdio+0x34>)
 8006140:	4299      	cmp	r1, r3
 8006142:	b510      	push	{r4, lr}
 8006144:	4604      	mov	r4, r0
 8006146:	d001      	beq.n	800614c <cleanup_stdio+0x10>
 8006148:	f000 fbb2 	bl	80068b0 <_fflush_r>
 800614c:	68a1      	ldr	r1, [r4, #8]
 800614e:	4b09      	ldr	r3, [pc, #36]	@ (8006174 <cleanup_stdio+0x38>)
 8006150:	4299      	cmp	r1, r3
 8006152:	d002      	beq.n	800615a <cleanup_stdio+0x1e>
 8006154:	4620      	mov	r0, r4
 8006156:	f000 fbab 	bl	80068b0 <_fflush_r>
 800615a:	68e1      	ldr	r1, [r4, #12]
 800615c:	4b06      	ldr	r3, [pc, #24]	@ (8006178 <cleanup_stdio+0x3c>)
 800615e:	4299      	cmp	r1, r3
 8006160:	d004      	beq.n	800616c <cleanup_stdio+0x30>
 8006162:	4620      	mov	r0, r4
 8006164:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006168:	f000 bba2 	b.w	80068b0 <_fflush_r>
 800616c:	bd10      	pop	{r4, pc}
 800616e:	bf00      	nop
 8006170:	200144f8 	.word	0x200144f8
 8006174:	20014560 	.word	0x20014560
 8006178:	200145c8 	.word	0x200145c8

0800617c <global_stdio_init.part.0>:
 800617c:	b510      	push	{r4, lr}
 800617e:	4b0b      	ldr	r3, [pc, #44]	@ (80061ac <global_stdio_init.part.0+0x30>)
 8006180:	4c0b      	ldr	r4, [pc, #44]	@ (80061b0 <global_stdio_init.part.0+0x34>)
 8006182:	4a0c      	ldr	r2, [pc, #48]	@ (80061b4 <global_stdio_init.part.0+0x38>)
 8006184:	601a      	str	r2, [r3, #0]
 8006186:	4620      	mov	r0, r4
 8006188:	2200      	movs	r2, #0
 800618a:	2104      	movs	r1, #4
 800618c:	f7ff ff94 	bl	80060b8 <std>
 8006190:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8006194:	2201      	movs	r2, #1
 8006196:	2109      	movs	r1, #9
 8006198:	f7ff ff8e 	bl	80060b8 <std>
 800619c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80061a0:	2202      	movs	r2, #2
 80061a2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80061a6:	2112      	movs	r1, #18
 80061a8:	f7ff bf86 	b.w	80060b8 <std>
 80061ac:	20014630 	.word	0x20014630
 80061b0:	200144f8 	.word	0x200144f8
 80061b4:	08006125 	.word	0x08006125

080061b8 <__sfp_lock_acquire>:
 80061b8:	4801      	ldr	r0, [pc, #4]	@ (80061c0 <__sfp_lock_acquire+0x8>)
 80061ba:	f000 b9ec 	b.w	8006596 <__retarget_lock_acquire_recursive>
 80061be:	bf00      	nop
 80061c0:	20014639 	.word	0x20014639

080061c4 <__sfp_lock_release>:
 80061c4:	4801      	ldr	r0, [pc, #4]	@ (80061cc <__sfp_lock_release+0x8>)
 80061c6:	f000 b9e7 	b.w	8006598 <__retarget_lock_release_recursive>
 80061ca:	bf00      	nop
 80061cc:	20014639 	.word	0x20014639

080061d0 <__sinit>:
 80061d0:	b510      	push	{r4, lr}
 80061d2:	4604      	mov	r4, r0
 80061d4:	f7ff fff0 	bl	80061b8 <__sfp_lock_acquire>
 80061d8:	6a23      	ldr	r3, [r4, #32]
 80061da:	b11b      	cbz	r3, 80061e4 <__sinit+0x14>
 80061dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80061e0:	f7ff bff0 	b.w	80061c4 <__sfp_lock_release>
 80061e4:	4b04      	ldr	r3, [pc, #16]	@ (80061f8 <__sinit+0x28>)
 80061e6:	6223      	str	r3, [r4, #32]
 80061e8:	4b04      	ldr	r3, [pc, #16]	@ (80061fc <__sinit+0x2c>)
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d1f5      	bne.n	80061dc <__sinit+0xc>
 80061f0:	f7ff ffc4 	bl	800617c <global_stdio_init.part.0>
 80061f4:	e7f2      	b.n	80061dc <__sinit+0xc>
 80061f6:	bf00      	nop
 80061f8:	0800613d 	.word	0x0800613d
 80061fc:	20014630 	.word	0x20014630

08006200 <_fwalk_sglue>:
 8006200:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006204:	4607      	mov	r7, r0
 8006206:	4688      	mov	r8, r1
 8006208:	4614      	mov	r4, r2
 800620a:	2600      	movs	r6, #0
 800620c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006210:	f1b9 0901 	subs.w	r9, r9, #1
 8006214:	d505      	bpl.n	8006222 <_fwalk_sglue+0x22>
 8006216:	6824      	ldr	r4, [r4, #0]
 8006218:	2c00      	cmp	r4, #0
 800621a:	d1f7      	bne.n	800620c <_fwalk_sglue+0xc>
 800621c:	4630      	mov	r0, r6
 800621e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006222:	89ab      	ldrh	r3, [r5, #12]
 8006224:	2b01      	cmp	r3, #1
 8006226:	d907      	bls.n	8006238 <_fwalk_sglue+0x38>
 8006228:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800622c:	3301      	adds	r3, #1
 800622e:	d003      	beq.n	8006238 <_fwalk_sglue+0x38>
 8006230:	4629      	mov	r1, r5
 8006232:	4638      	mov	r0, r7
 8006234:	47c0      	blx	r8
 8006236:	4306      	orrs	r6, r0
 8006238:	3568      	adds	r5, #104	@ 0x68
 800623a:	e7e9      	b.n	8006210 <_fwalk_sglue+0x10>

0800623c <_puts_r>:
 800623c:	6a03      	ldr	r3, [r0, #32]
 800623e:	b570      	push	{r4, r5, r6, lr}
 8006240:	6884      	ldr	r4, [r0, #8]
 8006242:	4605      	mov	r5, r0
 8006244:	460e      	mov	r6, r1
 8006246:	b90b      	cbnz	r3, 800624c <_puts_r+0x10>
 8006248:	f7ff ffc2 	bl	80061d0 <__sinit>
 800624c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800624e:	07db      	lsls	r3, r3, #31
 8006250:	d405      	bmi.n	800625e <_puts_r+0x22>
 8006252:	89a3      	ldrh	r3, [r4, #12]
 8006254:	0598      	lsls	r0, r3, #22
 8006256:	d402      	bmi.n	800625e <_puts_r+0x22>
 8006258:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800625a:	f000 f99c 	bl	8006596 <__retarget_lock_acquire_recursive>
 800625e:	89a3      	ldrh	r3, [r4, #12]
 8006260:	0719      	lsls	r1, r3, #28
 8006262:	d502      	bpl.n	800626a <_puts_r+0x2e>
 8006264:	6923      	ldr	r3, [r4, #16]
 8006266:	2b00      	cmp	r3, #0
 8006268:	d135      	bne.n	80062d6 <_puts_r+0x9a>
 800626a:	4621      	mov	r1, r4
 800626c:	4628      	mov	r0, r5
 800626e:	f000 f8c5 	bl	80063fc <__swsetup_r>
 8006272:	b380      	cbz	r0, 80062d6 <_puts_r+0x9a>
 8006274:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 8006278:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800627a:	07da      	lsls	r2, r3, #31
 800627c:	d405      	bmi.n	800628a <_puts_r+0x4e>
 800627e:	89a3      	ldrh	r3, [r4, #12]
 8006280:	059b      	lsls	r3, r3, #22
 8006282:	d402      	bmi.n	800628a <_puts_r+0x4e>
 8006284:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006286:	f000 f987 	bl	8006598 <__retarget_lock_release_recursive>
 800628a:	4628      	mov	r0, r5
 800628c:	bd70      	pop	{r4, r5, r6, pc}
 800628e:	2b00      	cmp	r3, #0
 8006290:	da04      	bge.n	800629c <_puts_r+0x60>
 8006292:	69a2      	ldr	r2, [r4, #24]
 8006294:	429a      	cmp	r2, r3
 8006296:	dc17      	bgt.n	80062c8 <_puts_r+0x8c>
 8006298:	290a      	cmp	r1, #10
 800629a:	d015      	beq.n	80062c8 <_puts_r+0x8c>
 800629c:	6823      	ldr	r3, [r4, #0]
 800629e:	1c5a      	adds	r2, r3, #1
 80062a0:	6022      	str	r2, [r4, #0]
 80062a2:	7019      	strb	r1, [r3, #0]
 80062a4:	68a3      	ldr	r3, [r4, #8]
 80062a6:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80062aa:	3b01      	subs	r3, #1
 80062ac:	60a3      	str	r3, [r4, #8]
 80062ae:	2900      	cmp	r1, #0
 80062b0:	d1ed      	bne.n	800628e <_puts_r+0x52>
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	da11      	bge.n	80062da <_puts_r+0x9e>
 80062b6:	4622      	mov	r2, r4
 80062b8:	210a      	movs	r1, #10
 80062ba:	4628      	mov	r0, r5
 80062bc:	f000 f85f 	bl	800637e <__swbuf_r>
 80062c0:	3001      	adds	r0, #1
 80062c2:	d0d7      	beq.n	8006274 <_puts_r+0x38>
 80062c4:	250a      	movs	r5, #10
 80062c6:	e7d7      	b.n	8006278 <_puts_r+0x3c>
 80062c8:	4622      	mov	r2, r4
 80062ca:	4628      	mov	r0, r5
 80062cc:	f000 f857 	bl	800637e <__swbuf_r>
 80062d0:	3001      	adds	r0, #1
 80062d2:	d1e7      	bne.n	80062a4 <_puts_r+0x68>
 80062d4:	e7ce      	b.n	8006274 <_puts_r+0x38>
 80062d6:	3e01      	subs	r6, #1
 80062d8:	e7e4      	b.n	80062a4 <_puts_r+0x68>
 80062da:	6823      	ldr	r3, [r4, #0]
 80062dc:	1c5a      	adds	r2, r3, #1
 80062de:	6022      	str	r2, [r4, #0]
 80062e0:	220a      	movs	r2, #10
 80062e2:	701a      	strb	r2, [r3, #0]
 80062e4:	e7ee      	b.n	80062c4 <_puts_r+0x88>
	...

080062e8 <puts>:
 80062e8:	4b02      	ldr	r3, [pc, #8]	@ (80062f4 <puts+0xc>)
 80062ea:	4601      	mov	r1, r0
 80062ec:	6818      	ldr	r0, [r3, #0]
 80062ee:	f7ff bfa5 	b.w	800623c <_puts_r>
 80062f2:	bf00      	nop
 80062f4:	2000001c 	.word	0x2000001c

080062f8 <__sread>:
 80062f8:	b510      	push	{r4, lr}
 80062fa:	460c      	mov	r4, r1
 80062fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006300:	f000 f90c 	bl	800651c <_read_r>
 8006304:	2800      	cmp	r0, #0
 8006306:	bfab      	itete	ge
 8006308:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800630a:	89a3      	ldrhlt	r3, [r4, #12]
 800630c:	181b      	addge	r3, r3, r0
 800630e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8006312:	bfac      	ite	ge
 8006314:	6563      	strge	r3, [r4, #84]	@ 0x54
 8006316:	81a3      	strhlt	r3, [r4, #12]
 8006318:	bd10      	pop	{r4, pc}

0800631a <__swrite>:
 800631a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800631e:	461f      	mov	r7, r3
 8006320:	898b      	ldrh	r3, [r1, #12]
 8006322:	05db      	lsls	r3, r3, #23
 8006324:	4605      	mov	r5, r0
 8006326:	460c      	mov	r4, r1
 8006328:	4616      	mov	r6, r2
 800632a:	d505      	bpl.n	8006338 <__swrite+0x1e>
 800632c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006330:	2302      	movs	r3, #2
 8006332:	2200      	movs	r2, #0
 8006334:	f000 f8e0 	bl	80064f8 <_lseek_r>
 8006338:	89a3      	ldrh	r3, [r4, #12]
 800633a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800633e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006342:	81a3      	strh	r3, [r4, #12]
 8006344:	4632      	mov	r2, r6
 8006346:	463b      	mov	r3, r7
 8006348:	4628      	mov	r0, r5
 800634a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800634e:	f7ff bea1 	b.w	8006094 <_write_r>

08006352 <__sseek>:
 8006352:	b510      	push	{r4, lr}
 8006354:	460c      	mov	r4, r1
 8006356:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800635a:	f000 f8cd 	bl	80064f8 <_lseek_r>
 800635e:	1c43      	adds	r3, r0, #1
 8006360:	89a3      	ldrh	r3, [r4, #12]
 8006362:	bf15      	itete	ne
 8006364:	6560      	strne	r0, [r4, #84]	@ 0x54
 8006366:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800636a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800636e:	81a3      	strheq	r3, [r4, #12]
 8006370:	bf18      	it	ne
 8006372:	81a3      	strhne	r3, [r4, #12]
 8006374:	bd10      	pop	{r4, pc}

08006376 <__sclose>:
 8006376:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800637a:	f000 b8ad 	b.w	80064d8 <_close_r>

0800637e <__swbuf_r>:
 800637e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006380:	460e      	mov	r6, r1
 8006382:	4614      	mov	r4, r2
 8006384:	4605      	mov	r5, r0
 8006386:	b118      	cbz	r0, 8006390 <__swbuf_r+0x12>
 8006388:	6a03      	ldr	r3, [r0, #32]
 800638a:	b90b      	cbnz	r3, 8006390 <__swbuf_r+0x12>
 800638c:	f7ff ff20 	bl	80061d0 <__sinit>
 8006390:	69a3      	ldr	r3, [r4, #24]
 8006392:	60a3      	str	r3, [r4, #8]
 8006394:	89a3      	ldrh	r3, [r4, #12]
 8006396:	071a      	lsls	r2, r3, #28
 8006398:	d501      	bpl.n	800639e <__swbuf_r+0x20>
 800639a:	6923      	ldr	r3, [r4, #16]
 800639c:	b943      	cbnz	r3, 80063b0 <__swbuf_r+0x32>
 800639e:	4621      	mov	r1, r4
 80063a0:	4628      	mov	r0, r5
 80063a2:	f000 f82b 	bl	80063fc <__swsetup_r>
 80063a6:	b118      	cbz	r0, 80063b0 <__swbuf_r+0x32>
 80063a8:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 80063ac:	4638      	mov	r0, r7
 80063ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80063b0:	6823      	ldr	r3, [r4, #0]
 80063b2:	6922      	ldr	r2, [r4, #16]
 80063b4:	1a98      	subs	r0, r3, r2
 80063b6:	6963      	ldr	r3, [r4, #20]
 80063b8:	b2f6      	uxtb	r6, r6
 80063ba:	4283      	cmp	r3, r0
 80063bc:	4637      	mov	r7, r6
 80063be:	dc05      	bgt.n	80063cc <__swbuf_r+0x4e>
 80063c0:	4621      	mov	r1, r4
 80063c2:	4628      	mov	r0, r5
 80063c4:	f000 fa74 	bl	80068b0 <_fflush_r>
 80063c8:	2800      	cmp	r0, #0
 80063ca:	d1ed      	bne.n	80063a8 <__swbuf_r+0x2a>
 80063cc:	68a3      	ldr	r3, [r4, #8]
 80063ce:	3b01      	subs	r3, #1
 80063d0:	60a3      	str	r3, [r4, #8]
 80063d2:	6823      	ldr	r3, [r4, #0]
 80063d4:	1c5a      	adds	r2, r3, #1
 80063d6:	6022      	str	r2, [r4, #0]
 80063d8:	701e      	strb	r6, [r3, #0]
 80063da:	6962      	ldr	r2, [r4, #20]
 80063dc:	1c43      	adds	r3, r0, #1
 80063de:	429a      	cmp	r2, r3
 80063e0:	d004      	beq.n	80063ec <__swbuf_r+0x6e>
 80063e2:	89a3      	ldrh	r3, [r4, #12]
 80063e4:	07db      	lsls	r3, r3, #31
 80063e6:	d5e1      	bpl.n	80063ac <__swbuf_r+0x2e>
 80063e8:	2e0a      	cmp	r6, #10
 80063ea:	d1df      	bne.n	80063ac <__swbuf_r+0x2e>
 80063ec:	4621      	mov	r1, r4
 80063ee:	4628      	mov	r0, r5
 80063f0:	f000 fa5e 	bl	80068b0 <_fflush_r>
 80063f4:	2800      	cmp	r0, #0
 80063f6:	d0d9      	beq.n	80063ac <__swbuf_r+0x2e>
 80063f8:	e7d6      	b.n	80063a8 <__swbuf_r+0x2a>
	...

080063fc <__swsetup_r>:
 80063fc:	b538      	push	{r3, r4, r5, lr}
 80063fe:	4b29      	ldr	r3, [pc, #164]	@ (80064a4 <__swsetup_r+0xa8>)
 8006400:	4605      	mov	r5, r0
 8006402:	6818      	ldr	r0, [r3, #0]
 8006404:	460c      	mov	r4, r1
 8006406:	b118      	cbz	r0, 8006410 <__swsetup_r+0x14>
 8006408:	6a03      	ldr	r3, [r0, #32]
 800640a:	b90b      	cbnz	r3, 8006410 <__swsetup_r+0x14>
 800640c:	f7ff fee0 	bl	80061d0 <__sinit>
 8006410:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006414:	0719      	lsls	r1, r3, #28
 8006416:	d422      	bmi.n	800645e <__swsetup_r+0x62>
 8006418:	06da      	lsls	r2, r3, #27
 800641a:	d407      	bmi.n	800642c <__swsetup_r+0x30>
 800641c:	2209      	movs	r2, #9
 800641e:	602a      	str	r2, [r5, #0]
 8006420:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006424:	81a3      	strh	r3, [r4, #12]
 8006426:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800642a:	e033      	b.n	8006494 <__swsetup_r+0x98>
 800642c:	0758      	lsls	r0, r3, #29
 800642e:	d512      	bpl.n	8006456 <__swsetup_r+0x5a>
 8006430:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006432:	b141      	cbz	r1, 8006446 <__swsetup_r+0x4a>
 8006434:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006438:	4299      	cmp	r1, r3
 800643a:	d002      	beq.n	8006442 <__swsetup_r+0x46>
 800643c:	4628      	mov	r0, r5
 800643e:	f000 f8bb 	bl	80065b8 <_free_r>
 8006442:	2300      	movs	r3, #0
 8006444:	6363      	str	r3, [r4, #52]	@ 0x34
 8006446:	89a3      	ldrh	r3, [r4, #12]
 8006448:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800644c:	81a3      	strh	r3, [r4, #12]
 800644e:	2300      	movs	r3, #0
 8006450:	6063      	str	r3, [r4, #4]
 8006452:	6923      	ldr	r3, [r4, #16]
 8006454:	6023      	str	r3, [r4, #0]
 8006456:	89a3      	ldrh	r3, [r4, #12]
 8006458:	f043 0308 	orr.w	r3, r3, #8
 800645c:	81a3      	strh	r3, [r4, #12]
 800645e:	6923      	ldr	r3, [r4, #16]
 8006460:	b94b      	cbnz	r3, 8006476 <__swsetup_r+0x7a>
 8006462:	89a3      	ldrh	r3, [r4, #12]
 8006464:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8006468:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800646c:	d003      	beq.n	8006476 <__swsetup_r+0x7a>
 800646e:	4621      	mov	r1, r4
 8006470:	4628      	mov	r0, r5
 8006472:	f000 fa6b 	bl	800694c <__smakebuf_r>
 8006476:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800647a:	f013 0201 	ands.w	r2, r3, #1
 800647e:	d00a      	beq.n	8006496 <__swsetup_r+0x9a>
 8006480:	2200      	movs	r2, #0
 8006482:	60a2      	str	r2, [r4, #8]
 8006484:	6962      	ldr	r2, [r4, #20]
 8006486:	4252      	negs	r2, r2
 8006488:	61a2      	str	r2, [r4, #24]
 800648a:	6922      	ldr	r2, [r4, #16]
 800648c:	b942      	cbnz	r2, 80064a0 <__swsetup_r+0xa4>
 800648e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8006492:	d1c5      	bne.n	8006420 <__swsetup_r+0x24>
 8006494:	bd38      	pop	{r3, r4, r5, pc}
 8006496:	0799      	lsls	r1, r3, #30
 8006498:	bf58      	it	pl
 800649a:	6962      	ldrpl	r2, [r4, #20]
 800649c:	60a2      	str	r2, [r4, #8]
 800649e:	e7f4      	b.n	800648a <__swsetup_r+0x8e>
 80064a0:	2000      	movs	r0, #0
 80064a2:	e7f7      	b.n	8006494 <__swsetup_r+0x98>
 80064a4:	2000001c 	.word	0x2000001c

080064a8 <memcmp>:
 80064a8:	b510      	push	{r4, lr}
 80064aa:	3901      	subs	r1, #1
 80064ac:	4402      	add	r2, r0
 80064ae:	4290      	cmp	r0, r2
 80064b0:	d101      	bne.n	80064b6 <memcmp+0xe>
 80064b2:	2000      	movs	r0, #0
 80064b4:	e005      	b.n	80064c2 <memcmp+0x1a>
 80064b6:	7803      	ldrb	r3, [r0, #0]
 80064b8:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80064bc:	42a3      	cmp	r3, r4
 80064be:	d001      	beq.n	80064c4 <memcmp+0x1c>
 80064c0:	1b18      	subs	r0, r3, r4
 80064c2:	bd10      	pop	{r4, pc}
 80064c4:	3001      	adds	r0, #1
 80064c6:	e7f2      	b.n	80064ae <memcmp+0x6>

080064c8 <memset>:
 80064c8:	4402      	add	r2, r0
 80064ca:	4603      	mov	r3, r0
 80064cc:	4293      	cmp	r3, r2
 80064ce:	d100      	bne.n	80064d2 <memset+0xa>
 80064d0:	4770      	bx	lr
 80064d2:	f803 1b01 	strb.w	r1, [r3], #1
 80064d6:	e7f9      	b.n	80064cc <memset+0x4>

080064d8 <_close_r>:
 80064d8:	b538      	push	{r3, r4, r5, lr}
 80064da:	4d06      	ldr	r5, [pc, #24]	@ (80064f4 <_close_r+0x1c>)
 80064dc:	2300      	movs	r3, #0
 80064de:	4604      	mov	r4, r0
 80064e0:	4608      	mov	r0, r1
 80064e2:	602b      	str	r3, [r5, #0]
 80064e4:	f7fa fa63 	bl	80009ae <_close>
 80064e8:	1c43      	adds	r3, r0, #1
 80064ea:	d102      	bne.n	80064f2 <_close_r+0x1a>
 80064ec:	682b      	ldr	r3, [r5, #0]
 80064ee:	b103      	cbz	r3, 80064f2 <_close_r+0x1a>
 80064f0:	6023      	str	r3, [r4, #0]
 80064f2:	bd38      	pop	{r3, r4, r5, pc}
 80064f4:	20014634 	.word	0x20014634

080064f8 <_lseek_r>:
 80064f8:	b538      	push	{r3, r4, r5, lr}
 80064fa:	4d07      	ldr	r5, [pc, #28]	@ (8006518 <_lseek_r+0x20>)
 80064fc:	4604      	mov	r4, r0
 80064fe:	4608      	mov	r0, r1
 8006500:	4611      	mov	r1, r2
 8006502:	2200      	movs	r2, #0
 8006504:	602a      	str	r2, [r5, #0]
 8006506:	461a      	mov	r2, r3
 8006508:	f7fa fa78 	bl	80009fc <_lseek>
 800650c:	1c43      	adds	r3, r0, #1
 800650e:	d102      	bne.n	8006516 <_lseek_r+0x1e>
 8006510:	682b      	ldr	r3, [r5, #0]
 8006512:	b103      	cbz	r3, 8006516 <_lseek_r+0x1e>
 8006514:	6023      	str	r3, [r4, #0]
 8006516:	bd38      	pop	{r3, r4, r5, pc}
 8006518:	20014634 	.word	0x20014634

0800651c <_read_r>:
 800651c:	b538      	push	{r3, r4, r5, lr}
 800651e:	4d07      	ldr	r5, [pc, #28]	@ (800653c <_read_r+0x20>)
 8006520:	4604      	mov	r4, r0
 8006522:	4608      	mov	r0, r1
 8006524:	4611      	mov	r1, r2
 8006526:	2200      	movs	r2, #0
 8006528:	602a      	str	r2, [r5, #0]
 800652a:	461a      	mov	r2, r3
 800652c:	f7fa fa22 	bl	8000974 <_read>
 8006530:	1c43      	adds	r3, r0, #1
 8006532:	d102      	bne.n	800653a <_read_r+0x1e>
 8006534:	682b      	ldr	r3, [r5, #0]
 8006536:	b103      	cbz	r3, 800653a <_read_r+0x1e>
 8006538:	6023      	str	r3, [r4, #0]
 800653a:	bd38      	pop	{r3, r4, r5, pc}
 800653c:	20014634 	.word	0x20014634

08006540 <__errno>:
 8006540:	4b01      	ldr	r3, [pc, #4]	@ (8006548 <__errno+0x8>)
 8006542:	6818      	ldr	r0, [r3, #0]
 8006544:	4770      	bx	lr
 8006546:	bf00      	nop
 8006548:	2000001c 	.word	0x2000001c

0800654c <__libc_init_array>:
 800654c:	b570      	push	{r4, r5, r6, lr}
 800654e:	4d0d      	ldr	r5, [pc, #52]	@ (8006584 <__libc_init_array+0x38>)
 8006550:	4c0d      	ldr	r4, [pc, #52]	@ (8006588 <__libc_init_array+0x3c>)
 8006552:	1b64      	subs	r4, r4, r5
 8006554:	10a4      	asrs	r4, r4, #2
 8006556:	2600      	movs	r6, #0
 8006558:	42a6      	cmp	r6, r4
 800655a:	d109      	bne.n	8006570 <__libc_init_array+0x24>
 800655c:	4d0b      	ldr	r5, [pc, #44]	@ (800658c <__libc_init_array+0x40>)
 800655e:	4c0c      	ldr	r4, [pc, #48]	@ (8006590 <__libc_init_array+0x44>)
 8006560:	f000 fa62 	bl	8006a28 <_init>
 8006564:	1b64      	subs	r4, r4, r5
 8006566:	10a4      	asrs	r4, r4, #2
 8006568:	2600      	movs	r6, #0
 800656a:	42a6      	cmp	r6, r4
 800656c:	d105      	bne.n	800657a <__libc_init_array+0x2e>
 800656e:	bd70      	pop	{r4, r5, r6, pc}
 8006570:	f855 3b04 	ldr.w	r3, [r5], #4
 8006574:	4798      	blx	r3
 8006576:	3601      	adds	r6, #1
 8006578:	e7ee      	b.n	8006558 <__libc_init_array+0xc>
 800657a:	f855 3b04 	ldr.w	r3, [r5], #4
 800657e:	4798      	blx	r3
 8006580:	3601      	adds	r6, #1
 8006582:	e7f2      	b.n	800656a <__libc_init_array+0x1e>
 8006584:	08006bb4 	.word	0x08006bb4
 8006588:	08006bb4 	.word	0x08006bb4
 800658c:	08006bb4 	.word	0x08006bb4
 8006590:	08006bb8 	.word	0x08006bb8

08006594 <__retarget_lock_init_recursive>:
 8006594:	4770      	bx	lr

08006596 <__retarget_lock_acquire_recursive>:
 8006596:	4770      	bx	lr

08006598 <__retarget_lock_release_recursive>:
 8006598:	4770      	bx	lr

0800659a <memcpy>:
 800659a:	440a      	add	r2, r1
 800659c:	4291      	cmp	r1, r2
 800659e:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 80065a2:	d100      	bne.n	80065a6 <memcpy+0xc>
 80065a4:	4770      	bx	lr
 80065a6:	b510      	push	{r4, lr}
 80065a8:	f811 4b01 	ldrb.w	r4, [r1], #1
 80065ac:	f803 4f01 	strb.w	r4, [r3, #1]!
 80065b0:	4291      	cmp	r1, r2
 80065b2:	d1f9      	bne.n	80065a8 <memcpy+0xe>
 80065b4:	bd10      	pop	{r4, pc}
	...

080065b8 <_free_r>:
 80065b8:	b538      	push	{r3, r4, r5, lr}
 80065ba:	4605      	mov	r5, r0
 80065bc:	2900      	cmp	r1, #0
 80065be:	d041      	beq.n	8006644 <_free_r+0x8c>
 80065c0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80065c4:	1f0c      	subs	r4, r1, #4
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	bfb8      	it	lt
 80065ca:	18e4      	addlt	r4, r4, r3
 80065cc:	f000 f8e0 	bl	8006790 <__malloc_lock>
 80065d0:	4a1d      	ldr	r2, [pc, #116]	@ (8006648 <_free_r+0x90>)
 80065d2:	6813      	ldr	r3, [r2, #0]
 80065d4:	b933      	cbnz	r3, 80065e4 <_free_r+0x2c>
 80065d6:	6063      	str	r3, [r4, #4]
 80065d8:	6014      	str	r4, [r2, #0]
 80065da:	4628      	mov	r0, r5
 80065dc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80065e0:	f000 b8dc 	b.w	800679c <__malloc_unlock>
 80065e4:	42a3      	cmp	r3, r4
 80065e6:	d908      	bls.n	80065fa <_free_r+0x42>
 80065e8:	6820      	ldr	r0, [r4, #0]
 80065ea:	1821      	adds	r1, r4, r0
 80065ec:	428b      	cmp	r3, r1
 80065ee:	bf01      	itttt	eq
 80065f0:	6819      	ldreq	r1, [r3, #0]
 80065f2:	685b      	ldreq	r3, [r3, #4]
 80065f4:	1809      	addeq	r1, r1, r0
 80065f6:	6021      	streq	r1, [r4, #0]
 80065f8:	e7ed      	b.n	80065d6 <_free_r+0x1e>
 80065fa:	461a      	mov	r2, r3
 80065fc:	685b      	ldr	r3, [r3, #4]
 80065fe:	b10b      	cbz	r3, 8006604 <_free_r+0x4c>
 8006600:	42a3      	cmp	r3, r4
 8006602:	d9fa      	bls.n	80065fa <_free_r+0x42>
 8006604:	6811      	ldr	r1, [r2, #0]
 8006606:	1850      	adds	r0, r2, r1
 8006608:	42a0      	cmp	r0, r4
 800660a:	d10b      	bne.n	8006624 <_free_r+0x6c>
 800660c:	6820      	ldr	r0, [r4, #0]
 800660e:	4401      	add	r1, r0
 8006610:	1850      	adds	r0, r2, r1
 8006612:	4283      	cmp	r3, r0
 8006614:	6011      	str	r1, [r2, #0]
 8006616:	d1e0      	bne.n	80065da <_free_r+0x22>
 8006618:	6818      	ldr	r0, [r3, #0]
 800661a:	685b      	ldr	r3, [r3, #4]
 800661c:	6053      	str	r3, [r2, #4]
 800661e:	4408      	add	r0, r1
 8006620:	6010      	str	r0, [r2, #0]
 8006622:	e7da      	b.n	80065da <_free_r+0x22>
 8006624:	d902      	bls.n	800662c <_free_r+0x74>
 8006626:	230c      	movs	r3, #12
 8006628:	602b      	str	r3, [r5, #0]
 800662a:	e7d6      	b.n	80065da <_free_r+0x22>
 800662c:	6820      	ldr	r0, [r4, #0]
 800662e:	1821      	adds	r1, r4, r0
 8006630:	428b      	cmp	r3, r1
 8006632:	bf04      	itt	eq
 8006634:	6819      	ldreq	r1, [r3, #0]
 8006636:	685b      	ldreq	r3, [r3, #4]
 8006638:	6063      	str	r3, [r4, #4]
 800663a:	bf04      	itt	eq
 800663c:	1809      	addeq	r1, r1, r0
 800663e:	6021      	streq	r1, [r4, #0]
 8006640:	6054      	str	r4, [r2, #4]
 8006642:	e7ca      	b.n	80065da <_free_r+0x22>
 8006644:	bd38      	pop	{r3, r4, r5, pc}
 8006646:	bf00      	nop
 8006648:	20014640 	.word	0x20014640

0800664c <sbrk_aligned>:
 800664c:	b570      	push	{r4, r5, r6, lr}
 800664e:	4e0f      	ldr	r6, [pc, #60]	@ (800668c <sbrk_aligned+0x40>)
 8006650:	460c      	mov	r4, r1
 8006652:	6831      	ldr	r1, [r6, #0]
 8006654:	4605      	mov	r5, r0
 8006656:	b911      	cbnz	r1, 800665e <sbrk_aligned+0x12>
 8006658:	f000 f9d6 	bl	8006a08 <_sbrk_r>
 800665c:	6030      	str	r0, [r6, #0]
 800665e:	4621      	mov	r1, r4
 8006660:	4628      	mov	r0, r5
 8006662:	f000 f9d1 	bl	8006a08 <_sbrk_r>
 8006666:	1c43      	adds	r3, r0, #1
 8006668:	d103      	bne.n	8006672 <sbrk_aligned+0x26>
 800666a:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800666e:	4620      	mov	r0, r4
 8006670:	bd70      	pop	{r4, r5, r6, pc}
 8006672:	1cc4      	adds	r4, r0, #3
 8006674:	f024 0403 	bic.w	r4, r4, #3
 8006678:	42a0      	cmp	r0, r4
 800667a:	d0f8      	beq.n	800666e <sbrk_aligned+0x22>
 800667c:	1a21      	subs	r1, r4, r0
 800667e:	4628      	mov	r0, r5
 8006680:	f000 f9c2 	bl	8006a08 <_sbrk_r>
 8006684:	3001      	adds	r0, #1
 8006686:	d1f2      	bne.n	800666e <sbrk_aligned+0x22>
 8006688:	e7ef      	b.n	800666a <sbrk_aligned+0x1e>
 800668a:	bf00      	nop
 800668c:	2001463c 	.word	0x2001463c

08006690 <_malloc_r>:
 8006690:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006694:	1ccd      	adds	r5, r1, #3
 8006696:	f025 0503 	bic.w	r5, r5, #3
 800669a:	3508      	adds	r5, #8
 800669c:	2d0c      	cmp	r5, #12
 800669e:	bf38      	it	cc
 80066a0:	250c      	movcc	r5, #12
 80066a2:	2d00      	cmp	r5, #0
 80066a4:	4606      	mov	r6, r0
 80066a6:	db01      	blt.n	80066ac <_malloc_r+0x1c>
 80066a8:	42a9      	cmp	r1, r5
 80066aa:	d904      	bls.n	80066b6 <_malloc_r+0x26>
 80066ac:	230c      	movs	r3, #12
 80066ae:	6033      	str	r3, [r6, #0]
 80066b0:	2000      	movs	r0, #0
 80066b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80066b6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800678c <_malloc_r+0xfc>
 80066ba:	f000 f869 	bl	8006790 <__malloc_lock>
 80066be:	f8d8 3000 	ldr.w	r3, [r8]
 80066c2:	461c      	mov	r4, r3
 80066c4:	bb44      	cbnz	r4, 8006718 <_malloc_r+0x88>
 80066c6:	4629      	mov	r1, r5
 80066c8:	4630      	mov	r0, r6
 80066ca:	f7ff ffbf 	bl	800664c <sbrk_aligned>
 80066ce:	1c43      	adds	r3, r0, #1
 80066d0:	4604      	mov	r4, r0
 80066d2:	d158      	bne.n	8006786 <_malloc_r+0xf6>
 80066d4:	f8d8 4000 	ldr.w	r4, [r8]
 80066d8:	4627      	mov	r7, r4
 80066da:	2f00      	cmp	r7, #0
 80066dc:	d143      	bne.n	8006766 <_malloc_r+0xd6>
 80066de:	2c00      	cmp	r4, #0
 80066e0:	d04b      	beq.n	800677a <_malloc_r+0xea>
 80066e2:	6823      	ldr	r3, [r4, #0]
 80066e4:	4639      	mov	r1, r7
 80066e6:	4630      	mov	r0, r6
 80066e8:	eb04 0903 	add.w	r9, r4, r3
 80066ec:	f000 f98c 	bl	8006a08 <_sbrk_r>
 80066f0:	4581      	cmp	r9, r0
 80066f2:	d142      	bne.n	800677a <_malloc_r+0xea>
 80066f4:	6821      	ldr	r1, [r4, #0]
 80066f6:	1a6d      	subs	r5, r5, r1
 80066f8:	4629      	mov	r1, r5
 80066fa:	4630      	mov	r0, r6
 80066fc:	f7ff ffa6 	bl	800664c <sbrk_aligned>
 8006700:	3001      	adds	r0, #1
 8006702:	d03a      	beq.n	800677a <_malloc_r+0xea>
 8006704:	6823      	ldr	r3, [r4, #0]
 8006706:	442b      	add	r3, r5
 8006708:	6023      	str	r3, [r4, #0]
 800670a:	f8d8 3000 	ldr.w	r3, [r8]
 800670e:	685a      	ldr	r2, [r3, #4]
 8006710:	bb62      	cbnz	r2, 800676c <_malloc_r+0xdc>
 8006712:	f8c8 7000 	str.w	r7, [r8]
 8006716:	e00f      	b.n	8006738 <_malloc_r+0xa8>
 8006718:	6822      	ldr	r2, [r4, #0]
 800671a:	1b52      	subs	r2, r2, r5
 800671c:	d420      	bmi.n	8006760 <_malloc_r+0xd0>
 800671e:	2a0b      	cmp	r2, #11
 8006720:	d917      	bls.n	8006752 <_malloc_r+0xc2>
 8006722:	1961      	adds	r1, r4, r5
 8006724:	42a3      	cmp	r3, r4
 8006726:	6025      	str	r5, [r4, #0]
 8006728:	bf18      	it	ne
 800672a:	6059      	strne	r1, [r3, #4]
 800672c:	6863      	ldr	r3, [r4, #4]
 800672e:	bf08      	it	eq
 8006730:	f8c8 1000 	streq.w	r1, [r8]
 8006734:	5162      	str	r2, [r4, r5]
 8006736:	604b      	str	r3, [r1, #4]
 8006738:	4630      	mov	r0, r6
 800673a:	f000 f82f 	bl	800679c <__malloc_unlock>
 800673e:	f104 000b 	add.w	r0, r4, #11
 8006742:	1d23      	adds	r3, r4, #4
 8006744:	f020 0007 	bic.w	r0, r0, #7
 8006748:	1ac2      	subs	r2, r0, r3
 800674a:	bf1c      	itt	ne
 800674c:	1a1b      	subne	r3, r3, r0
 800674e:	50a3      	strne	r3, [r4, r2]
 8006750:	e7af      	b.n	80066b2 <_malloc_r+0x22>
 8006752:	6862      	ldr	r2, [r4, #4]
 8006754:	42a3      	cmp	r3, r4
 8006756:	bf0c      	ite	eq
 8006758:	f8c8 2000 	streq.w	r2, [r8]
 800675c:	605a      	strne	r2, [r3, #4]
 800675e:	e7eb      	b.n	8006738 <_malloc_r+0xa8>
 8006760:	4623      	mov	r3, r4
 8006762:	6864      	ldr	r4, [r4, #4]
 8006764:	e7ae      	b.n	80066c4 <_malloc_r+0x34>
 8006766:	463c      	mov	r4, r7
 8006768:	687f      	ldr	r7, [r7, #4]
 800676a:	e7b6      	b.n	80066da <_malloc_r+0x4a>
 800676c:	461a      	mov	r2, r3
 800676e:	685b      	ldr	r3, [r3, #4]
 8006770:	42a3      	cmp	r3, r4
 8006772:	d1fb      	bne.n	800676c <_malloc_r+0xdc>
 8006774:	2300      	movs	r3, #0
 8006776:	6053      	str	r3, [r2, #4]
 8006778:	e7de      	b.n	8006738 <_malloc_r+0xa8>
 800677a:	230c      	movs	r3, #12
 800677c:	6033      	str	r3, [r6, #0]
 800677e:	4630      	mov	r0, r6
 8006780:	f000 f80c 	bl	800679c <__malloc_unlock>
 8006784:	e794      	b.n	80066b0 <_malloc_r+0x20>
 8006786:	6005      	str	r5, [r0, #0]
 8006788:	e7d6      	b.n	8006738 <_malloc_r+0xa8>
 800678a:	bf00      	nop
 800678c:	20014640 	.word	0x20014640

08006790 <__malloc_lock>:
 8006790:	4801      	ldr	r0, [pc, #4]	@ (8006798 <__malloc_lock+0x8>)
 8006792:	f7ff bf00 	b.w	8006596 <__retarget_lock_acquire_recursive>
 8006796:	bf00      	nop
 8006798:	20014638 	.word	0x20014638

0800679c <__malloc_unlock>:
 800679c:	4801      	ldr	r0, [pc, #4]	@ (80067a4 <__malloc_unlock+0x8>)
 800679e:	f7ff befb 	b.w	8006598 <__retarget_lock_release_recursive>
 80067a2:	bf00      	nop
 80067a4:	20014638 	.word	0x20014638

080067a8 <__sflush_r>:
 80067a8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80067ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80067b0:	0716      	lsls	r6, r2, #28
 80067b2:	4605      	mov	r5, r0
 80067b4:	460c      	mov	r4, r1
 80067b6:	d454      	bmi.n	8006862 <__sflush_r+0xba>
 80067b8:	684b      	ldr	r3, [r1, #4]
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	dc02      	bgt.n	80067c4 <__sflush_r+0x1c>
 80067be:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	dd48      	ble.n	8006856 <__sflush_r+0xae>
 80067c4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80067c6:	2e00      	cmp	r6, #0
 80067c8:	d045      	beq.n	8006856 <__sflush_r+0xae>
 80067ca:	2300      	movs	r3, #0
 80067cc:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80067d0:	682f      	ldr	r7, [r5, #0]
 80067d2:	6a21      	ldr	r1, [r4, #32]
 80067d4:	602b      	str	r3, [r5, #0]
 80067d6:	d030      	beq.n	800683a <__sflush_r+0x92>
 80067d8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80067da:	89a3      	ldrh	r3, [r4, #12]
 80067dc:	0759      	lsls	r1, r3, #29
 80067de:	d505      	bpl.n	80067ec <__sflush_r+0x44>
 80067e0:	6863      	ldr	r3, [r4, #4]
 80067e2:	1ad2      	subs	r2, r2, r3
 80067e4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80067e6:	b10b      	cbz	r3, 80067ec <__sflush_r+0x44>
 80067e8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80067ea:	1ad2      	subs	r2, r2, r3
 80067ec:	2300      	movs	r3, #0
 80067ee:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80067f0:	6a21      	ldr	r1, [r4, #32]
 80067f2:	4628      	mov	r0, r5
 80067f4:	47b0      	blx	r6
 80067f6:	1c43      	adds	r3, r0, #1
 80067f8:	89a3      	ldrh	r3, [r4, #12]
 80067fa:	d106      	bne.n	800680a <__sflush_r+0x62>
 80067fc:	6829      	ldr	r1, [r5, #0]
 80067fe:	291d      	cmp	r1, #29
 8006800:	d82b      	bhi.n	800685a <__sflush_r+0xb2>
 8006802:	4a2a      	ldr	r2, [pc, #168]	@ (80068ac <__sflush_r+0x104>)
 8006804:	40ca      	lsrs	r2, r1
 8006806:	07d6      	lsls	r6, r2, #31
 8006808:	d527      	bpl.n	800685a <__sflush_r+0xb2>
 800680a:	2200      	movs	r2, #0
 800680c:	6062      	str	r2, [r4, #4]
 800680e:	04d9      	lsls	r1, r3, #19
 8006810:	6922      	ldr	r2, [r4, #16]
 8006812:	6022      	str	r2, [r4, #0]
 8006814:	d504      	bpl.n	8006820 <__sflush_r+0x78>
 8006816:	1c42      	adds	r2, r0, #1
 8006818:	d101      	bne.n	800681e <__sflush_r+0x76>
 800681a:	682b      	ldr	r3, [r5, #0]
 800681c:	b903      	cbnz	r3, 8006820 <__sflush_r+0x78>
 800681e:	6560      	str	r0, [r4, #84]	@ 0x54
 8006820:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006822:	602f      	str	r7, [r5, #0]
 8006824:	b1b9      	cbz	r1, 8006856 <__sflush_r+0xae>
 8006826:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800682a:	4299      	cmp	r1, r3
 800682c:	d002      	beq.n	8006834 <__sflush_r+0x8c>
 800682e:	4628      	mov	r0, r5
 8006830:	f7ff fec2 	bl	80065b8 <_free_r>
 8006834:	2300      	movs	r3, #0
 8006836:	6363      	str	r3, [r4, #52]	@ 0x34
 8006838:	e00d      	b.n	8006856 <__sflush_r+0xae>
 800683a:	2301      	movs	r3, #1
 800683c:	4628      	mov	r0, r5
 800683e:	47b0      	blx	r6
 8006840:	4602      	mov	r2, r0
 8006842:	1c50      	adds	r0, r2, #1
 8006844:	d1c9      	bne.n	80067da <__sflush_r+0x32>
 8006846:	682b      	ldr	r3, [r5, #0]
 8006848:	2b00      	cmp	r3, #0
 800684a:	d0c6      	beq.n	80067da <__sflush_r+0x32>
 800684c:	2b1d      	cmp	r3, #29
 800684e:	d001      	beq.n	8006854 <__sflush_r+0xac>
 8006850:	2b16      	cmp	r3, #22
 8006852:	d11e      	bne.n	8006892 <__sflush_r+0xea>
 8006854:	602f      	str	r7, [r5, #0]
 8006856:	2000      	movs	r0, #0
 8006858:	e022      	b.n	80068a0 <__sflush_r+0xf8>
 800685a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800685e:	b21b      	sxth	r3, r3
 8006860:	e01b      	b.n	800689a <__sflush_r+0xf2>
 8006862:	690f      	ldr	r7, [r1, #16]
 8006864:	2f00      	cmp	r7, #0
 8006866:	d0f6      	beq.n	8006856 <__sflush_r+0xae>
 8006868:	0793      	lsls	r3, r2, #30
 800686a:	680e      	ldr	r6, [r1, #0]
 800686c:	bf08      	it	eq
 800686e:	694b      	ldreq	r3, [r1, #20]
 8006870:	600f      	str	r7, [r1, #0]
 8006872:	bf18      	it	ne
 8006874:	2300      	movne	r3, #0
 8006876:	eba6 0807 	sub.w	r8, r6, r7
 800687a:	608b      	str	r3, [r1, #8]
 800687c:	f1b8 0f00 	cmp.w	r8, #0
 8006880:	dde9      	ble.n	8006856 <__sflush_r+0xae>
 8006882:	6a21      	ldr	r1, [r4, #32]
 8006884:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8006886:	4643      	mov	r3, r8
 8006888:	463a      	mov	r2, r7
 800688a:	4628      	mov	r0, r5
 800688c:	47b0      	blx	r6
 800688e:	2800      	cmp	r0, #0
 8006890:	dc08      	bgt.n	80068a4 <__sflush_r+0xfc>
 8006892:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006896:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800689a:	81a3      	strh	r3, [r4, #12]
 800689c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80068a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80068a4:	4407      	add	r7, r0
 80068a6:	eba8 0800 	sub.w	r8, r8, r0
 80068aa:	e7e7      	b.n	800687c <__sflush_r+0xd4>
 80068ac:	20400001 	.word	0x20400001

080068b0 <_fflush_r>:
 80068b0:	b538      	push	{r3, r4, r5, lr}
 80068b2:	690b      	ldr	r3, [r1, #16]
 80068b4:	4605      	mov	r5, r0
 80068b6:	460c      	mov	r4, r1
 80068b8:	b913      	cbnz	r3, 80068c0 <_fflush_r+0x10>
 80068ba:	2500      	movs	r5, #0
 80068bc:	4628      	mov	r0, r5
 80068be:	bd38      	pop	{r3, r4, r5, pc}
 80068c0:	b118      	cbz	r0, 80068ca <_fflush_r+0x1a>
 80068c2:	6a03      	ldr	r3, [r0, #32]
 80068c4:	b90b      	cbnz	r3, 80068ca <_fflush_r+0x1a>
 80068c6:	f7ff fc83 	bl	80061d0 <__sinit>
 80068ca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d0f3      	beq.n	80068ba <_fflush_r+0xa>
 80068d2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80068d4:	07d0      	lsls	r0, r2, #31
 80068d6:	d404      	bmi.n	80068e2 <_fflush_r+0x32>
 80068d8:	0599      	lsls	r1, r3, #22
 80068da:	d402      	bmi.n	80068e2 <_fflush_r+0x32>
 80068dc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80068de:	f7ff fe5a 	bl	8006596 <__retarget_lock_acquire_recursive>
 80068e2:	4628      	mov	r0, r5
 80068e4:	4621      	mov	r1, r4
 80068e6:	f7ff ff5f 	bl	80067a8 <__sflush_r>
 80068ea:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80068ec:	07da      	lsls	r2, r3, #31
 80068ee:	4605      	mov	r5, r0
 80068f0:	d4e4      	bmi.n	80068bc <_fflush_r+0xc>
 80068f2:	89a3      	ldrh	r3, [r4, #12]
 80068f4:	059b      	lsls	r3, r3, #22
 80068f6:	d4e1      	bmi.n	80068bc <_fflush_r+0xc>
 80068f8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80068fa:	f7ff fe4d 	bl	8006598 <__retarget_lock_release_recursive>
 80068fe:	e7dd      	b.n	80068bc <_fflush_r+0xc>

08006900 <__swhatbuf_r>:
 8006900:	b570      	push	{r4, r5, r6, lr}
 8006902:	460c      	mov	r4, r1
 8006904:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006908:	2900      	cmp	r1, #0
 800690a:	b096      	sub	sp, #88	@ 0x58
 800690c:	4615      	mov	r5, r2
 800690e:	461e      	mov	r6, r3
 8006910:	da0d      	bge.n	800692e <__swhatbuf_r+0x2e>
 8006912:	89a3      	ldrh	r3, [r4, #12]
 8006914:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8006918:	f04f 0100 	mov.w	r1, #0
 800691c:	bf14      	ite	ne
 800691e:	2340      	movne	r3, #64	@ 0x40
 8006920:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8006924:	2000      	movs	r0, #0
 8006926:	6031      	str	r1, [r6, #0]
 8006928:	602b      	str	r3, [r5, #0]
 800692a:	b016      	add	sp, #88	@ 0x58
 800692c:	bd70      	pop	{r4, r5, r6, pc}
 800692e:	466a      	mov	r2, sp
 8006930:	f000 f848 	bl	80069c4 <_fstat_r>
 8006934:	2800      	cmp	r0, #0
 8006936:	dbec      	blt.n	8006912 <__swhatbuf_r+0x12>
 8006938:	9901      	ldr	r1, [sp, #4]
 800693a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800693e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8006942:	4259      	negs	r1, r3
 8006944:	4159      	adcs	r1, r3
 8006946:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800694a:	e7eb      	b.n	8006924 <__swhatbuf_r+0x24>

0800694c <__smakebuf_r>:
 800694c:	898b      	ldrh	r3, [r1, #12]
 800694e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006950:	079d      	lsls	r5, r3, #30
 8006952:	4606      	mov	r6, r0
 8006954:	460c      	mov	r4, r1
 8006956:	d507      	bpl.n	8006968 <__smakebuf_r+0x1c>
 8006958:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800695c:	6023      	str	r3, [r4, #0]
 800695e:	6123      	str	r3, [r4, #16]
 8006960:	2301      	movs	r3, #1
 8006962:	6163      	str	r3, [r4, #20]
 8006964:	b003      	add	sp, #12
 8006966:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006968:	ab01      	add	r3, sp, #4
 800696a:	466a      	mov	r2, sp
 800696c:	f7ff ffc8 	bl	8006900 <__swhatbuf_r>
 8006970:	9f00      	ldr	r7, [sp, #0]
 8006972:	4605      	mov	r5, r0
 8006974:	4639      	mov	r1, r7
 8006976:	4630      	mov	r0, r6
 8006978:	f7ff fe8a 	bl	8006690 <_malloc_r>
 800697c:	b948      	cbnz	r0, 8006992 <__smakebuf_r+0x46>
 800697e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006982:	059a      	lsls	r2, r3, #22
 8006984:	d4ee      	bmi.n	8006964 <__smakebuf_r+0x18>
 8006986:	f023 0303 	bic.w	r3, r3, #3
 800698a:	f043 0302 	orr.w	r3, r3, #2
 800698e:	81a3      	strh	r3, [r4, #12]
 8006990:	e7e2      	b.n	8006958 <__smakebuf_r+0xc>
 8006992:	89a3      	ldrh	r3, [r4, #12]
 8006994:	6020      	str	r0, [r4, #0]
 8006996:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800699a:	81a3      	strh	r3, [r4, #12]
 800699c:	9b01      	ldr	r3, [sp, #4]
 800699e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80069a2:	b15b      	cbz	r3, 80069bc <__smakebuf_r+0x70>
 80069a4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80069a8:	4630      	mov	r0, r6
 80069aa:	f000 f81d 	bl	80069e8 <_isatty_r>
 80069ae:	b128      	cbz	r0, 80069bc <__smakebuf_r+0x70>
 80069b0:	89a3      	ldrh	r3, [r4, #12]
 80069b2:	f023 0303 	bic.w	r3, r3, #3
 80069b6:	f043 0301 	orr.w	r3, r3, #1
 80069ba:	81a3      	strh	r3, [r4, #12]
 80069bc:	89a3      	ldrh	r3, [r4, #12]
 80069be:	431d      	orrs	r5, r3
 80069c0:	81a5      	strh	r5, [r4, #12]
 80069c2:	e7cf      	b.n	8006964 <__smakebuf_r+0x18>

080069c4 <_fstat_r>:
 80069c4:	b538      	push	{r3, r4, r5, lr}
 80069c6:	4d07      	ldr	r5, [pc, #28]	@ (80069e4 <_fstat_r+0x20>)
 80069c8:	2300      	movs	r3, #0
 80069ca:	4604      	mov	r4, r0
 80069cc:	4608      	mov	r0, r1
 80069ce:	4611      	mov	r1, r2
 80069d0:	602b      	str	r3, [r5, #0]
 80069d2:	f7f9 fff8 	bl	80009c6 <_fstat>
 80069d6:	1c43      	adds	r3, r0, #1
 80069d8:	d102      	bne.n	80069e0 <_fstat_r+0x1c>
 80069da:	682b      	ldr	r3, [r5, #0]
 80069dc:	b103      	cbz	r3, 80069e0 <_fstat_r+0x1c>
 80069de:	6023      	str	r3, [r4, #0]
 80069e0:	bd38      	pop	{r3, r4, r5, pc}
 80069e2:	bf00      	nop
 80069e4:	20014634 	.word	0x20014634

080069e8 <_isatty_r>:
 80069e8:	b538      	push	{r3, r4, r5, lr}
 80069ea:	4d06      	ldr	r5, [pc, #24]	@ (8006a04 <_isatty_r+0x1c>)
 80069ec:	2300      	movs	r3, #0
 80069ee:	4604      	mov	r4, r0
 80069f0:	4608      	mov	r0, r1
 80069f2:	602b      	str	r3, [r5, #0]
 80069f4:	f7f9 fff7 	bl	80009e6 <_isatty>
 80069f8:	1c43      	adds	r3, r0, #1
 80069fa:	d102      	bne.n	8006a02 <_isatty_r+0x1a>
 80069fc:	682b      	ldr	r3, [r5, #0]
 80069fe:	b103      	cbz	r3, 8006a02 <_isatty_r+0x1a>
 8006a00:	6023      	str	r3, [r4, #0]
 8006a02:	bd38      	pop	{r3, r4, r5, pc}
 8006a04:	20014634 	.word	0x20014634

08006a08 <_sbrk_r>:
 8006a08:	b538      	push	{r3, r4, r5, lr}
 8006a0a:	4d06      	ldr	r5, [pc, #24]	@ (8006a24 <_sbrk_r+0x1c>)
 8006a0c:	2300      	movs	r3, #0
 8006a0e:	4604      	mov	r4, r0
 8006a10:	4608      	mov	r0, r1
 8006a12:	602b      	str	r3, [r5, #0]
 8006a14:	f7fa f800 	bl	8000a18 <_sbrk>
 8006a18:	1c43      	adds	r3, r0, #1
 8006a1a:	d102      	bne.n	8006a22 <_sbrk_r+0x1a>
 8006a1c:	682b      	ldr	r3, [r5, #0]
 8006a1e:	b103      	cbz	r3, 8006a22 <_sbrk_r+0x1a>
 8006a20:	6023      	str	r3, [r4, #0]
 8006a22:	bd38      	pop	{r3, r4, r5, pc}
 8006a24:	20014634 	.word	0x20014634

08006a28 <_init>:
 8006a28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a2a:	bf00      	nop
 8006a2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006a2e:	bc08      	pop	{r3}
 8006a30:	469e      	mov	lr, r3
 8006a32:	4770      	bx	lr

08006a34 <_fini>:
 8006a34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a36:	bf00      	nop
 8006a38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006a3a:	bc08      	pop	{r3}
 8006a3c:	469e      	mov	lr, r3
 8006a3e:	4770      	bx	lr
