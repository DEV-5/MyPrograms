
FreeRTOS_HelloWorld.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004a48  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000080  08004c28  08004c28  00005c28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004ca8  08004ca8  0000606c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08004ca8  08004ca8  00005ca8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004cb0  08004cb0  0000606c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004cb0  08004cb0  00005cb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004cb4  08004cb4  00005cb4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000006c  20000000  08004cb8  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000f760  2000006c  08004d24  0000606c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000f7cc  08004d24  000067cc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000606c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010403  00000000  00000000  0000609c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002a5c  00000000  00000000  0001649f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010c0  00000000  00000000  00018f00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000ce5  00000000  00000000  00019fc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00025ee8  00000000  00000000  0001aca5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000121f0  00000000  00000000  00040b8d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ed3aa  00000000  00000000  00052d7d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00140127  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004b54  00000000  00000000  0014016c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000075  00000000  00000000  00144cc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	2000006c 	.word	0x2000006c
 80001fc:	00000000 	.word	0x00000000
 8000200:	08004c10 	.word	0x08004c10

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000070 	.word	0x20000070
 800021c:	08004c10 	.word	0x08004c10

08000220 <__aeabi_uldivmod>:
 8000220:	b953      	cbnz	r3, 8000238 <__aeabi_uldivmod+0x18>
 8000222:	b94a      	cbnz	r2, 8000238 <__aeabi_uldivmod+0x18>
 8000224:	2900      	cmp	r1, #0
 8000226:	bf08      	it	eq
 8000228:	2800      	cmpeq	r0, #0
 800022a:	bf1c      	itt	ne
 800022c:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000230:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000234:	f000 b988 	b.w	8000548 <__aeabi_idiv0>
 8000238:	f1ad 0c08 	sub.w	ip, sp, #8
 800023c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000240:	f000 f806 	bl	8000250 <__udivmoddi4>
 8000244:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000248:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800024c:	b004      	add	sp, #16
 800024e:	4770      	bx	lr

08000250 <__udivmoddi4>:
 8000250:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000254:	9d08      	ldr	r5, [sp, #32]
 8000256:	468e      	mov	lr, r1
 8000258:	4604      	mov	r4, r0
 800025a:	4688      	mov	r8, r1
 800025c:	2b00      	cmp	r3, #0
 800025e:	d14a      	bne.n	80002f6 <__udivmoddi4+0xa6>
 8000260:	428a      	cmp	r2, r1
 8000262:	4617      	mov	r7, r2
 8000264:	d962      	bls.n	800032c <__udivmoddi4+0xdc>
 8000266:	fab2 f682 	clz	r6, r2
 800026a:	b14e      	cbz	r6, 8000280 <__udivmoddi4+0x30>
 800026c:	f1c6 0320 	rsb	r3, r6, #32
 8000270:	fa01 f806 	lsl.w	r8, r1, r6
 8000274:	fa20 f303 	lsr.w	r3, r0, r3
 8000278:	40b7      	lsls	r7, r6
 800027a:	ea43 0808 	orr.w	r8, r3, r8
 800027e:	40b4      	lsls	r4, r6
 8000280:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000284:	fa1f fc87 	uxth.w	ip, r7
 8000288:	fbb8 f1fe 	udiv	r1, r8, lr
 800028c:	0c23      	lsrs	r3, r4, #16
 800028e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000292:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000296:	fb01 f20c 	mul.w	r2, r1, ip
 800029a:	429a      	cmp	r2, r3
 800029c:	d909      	bls.n	80002b2 <__udivmoddi4+0x62>
 800029e:	18fb      	adds	r3, r7, r3
 80002a0:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 80002a4:	f080 80ea 	bcs.w	800047c <__udivmoddi4+0x22c>
 80002a8:	429a      	cmp	r2, r3
 80002aa:	f240 80e7 	bls.w	800047c <__udivmoddi4+0x22c>
 80002ae:	3902      	subs	r1, #2
 80002b0:	443b      	add	r3, r7
 80002b2:	1a9a      	subs	r2, r3, r2
 80002b4:	b2a3      	uxth	r3, r4
 80002b6:	fbb2 f0fe 	udiv	r0, r2, lr
 80002ba:	fb0e 2210 	mls	r2, lr, r0, r2
 80002be:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80002c2:	fb00 fc0c 	mul.w	ip, r0, ip
 80002c6:	459c      	cmp	ip, r3
 80002c8:	d909      	bls.n	80002de <__udivmoddi4+0x8e>
 80002ca:	18fb      	adds	r3, r7, r3
 80002cc:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 80002d0:	f080 80d6 	bcs.w	8000480 <__udivmoddi4+0x230>
 80002d4:	459c      	cmp	ip, r3
 80002d6:	f240 80d3 	bls.w	8000480 <__udivmoddi4+0x230>
 80002da:	443b      	add	r3, r7
 80002dc:	3802      	subs	r0, #2
 80002de:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002e2:	eba3 030c 	sub.w	r3, r3, ip
 80002e6:	2100      	movs	r1, #0
 80002e8:	b11d      	cbz	r5, 80002f2 <__udivmoddi4+0xa2>
 80002ea:	40f3      	lsrs	r3, r6
 80002ec:	2200      	movs	r2, #0
 80002ee:	e9c5 3200 	strd	r3, r2, [r5]
 80002f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d905      	bls.n	8000306 <__udivmoddi4+0xb6>
 80002fa:	b10d      	cbz	r5, 8000300 <__udivmoddi4+0xb0>
 80002fc:	e9c5 0100 	strd	r0, r1, [r5]
 8000300:	2100      	movs	r1, #0
 8000302:	4608      	mov	r0, r1
 8000304:	e7f5      	b.n	80002f2 <__udivmoddi4+0xa2>
 8000306:	fab3 f183 	clz	r1, r3
 800030a:	2900      	cmp	r1, #0
 800030c:	d146      	bne.n	800039c <__udivmoddi4+0x14c>
 800030e:	4573      	cmp	r3, lr
 8000310:	d302      	bcc.n	8000318 <__udivmoddi4+0xc8>
 8000312:	4282      	cmp	r2, r0
 8000314:	f200 8105 	bhi.w	8000522 <__udivmoddi4+0x2d2>
 8000318:	1a84      	subs	r4, r0, r2
 800031a:	eb6e 0203 	sbc.w	r2, lr, r3
 800031e:	2001      	movs	r0, #1
 8000320:	4690      	mov	r8, r2
 8000322:	2d00      	cmp	r5, #0
 8000324:	d0e5      	beq.n	80002f2 <__udivmoddi4+0xa2>
 8000326:	e9c5 4800 	strd	r4, r8, [r5]
 800032a:	e7e2      	b.n	80002f2 <__udivmoddi4+0xa2>
 800032c:	2a00      	cmp	r2, #0
 800032e:	f000 8090 	beq.w	8000452 <__udivmoddi4+0x202>
 8000332:	fab2 f682 	clz	r6, r2
 8000336:	2e00      	cmp	r6, #0
 8000338:	f040 80a4 	bne.w	8000484 <__udivmoddi4+0x234>
 800033c:	1a8a      	subs	r2, r1, r2
 800033e:	0c03      	lsrs	r3, r0, #16
 8000340:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000344:	b280      	uxth	r0, r0
 8000346:	b2bc      	uxth	r4, r7
 8000348:	2101      	movs	r1, #1
 800034a:	fbb2 fcfe 	udiv	ip, r2, lr
 800034e:	fb0e 221c 	mls	r2, lr, ip, r2
 8000352:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000356:	fb04 f20c 	mul.w	r2, r4, ip
 800035a:	429a      	cmp	r2, r3
 800035c:	d907      	bls.n	800036e <__udivmoddi4+0x11e>
 800035e:	18fb      	adds	r3, r7, r3
 8000360:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 8000364:	d202      	bcs.n	800036c <__udivmoddi4+0x11c>
 8000366:	429a      	cmp	r2, r3
 8000368:	f200 80e0 	bhi.w	800052c <__udivmoddi4+0x2dc>
 800036c:	46c4      	mov	ip, r8
 800036e:	1a9b      	subs	r3, r3, r2
 8000370:	fbb3 f2fe 	udiv	r2, r3, lr
 8000374:	fb0e 3312 	mls	r3, lr, r2, r3
 8000378:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800037c:	fb02 f404 	mul.w	r4, r2, r4
 8000380:	429c      	cmp	r4, r3
 8000382:	d907      	bls.n	8000394 <__udivmoddi4+0x144>
 8000384:	18fb      	adds	r3, r7, r3
 8000386:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0x142>
 800038c:	429c      	cmp	r4, r3
 800038e:	f200 80ca 	bhi.w	8000526 <__udivmoddi4+0x2d6>
 8000392:	4602      	mov	r2, r0
 8000394:	1b1b      	subs	r3, r3, r4
 8000396:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800039a:	e7a5      	b.n	80002e8 <__udivmoddi4+0x98>
 800039c:	f1c1 0620 	rsb	r6, r1, #32
 80003a0:	408b      	lsls	r3, r1
 80003a2:	fa22 f706 	lsr.w	r7, r2, r6
 80003a6:	431f      	orrs	r7, r3
 80003a8:	fa0e f401 	lsl.w	r4, lr, r1
 80003ac:	fa20 f306 	lsr.w	r3, r0, r6
 80003b0:	fa2e fe06 	lsr.w	lr, lr, r6
 80003b4:	ea4f 4917 	mov.w	r9, r7, lsr #16
 80003b8:	4323      	orrs	r3, r4
 80003ba:	fa00 f801 	lsl.w	r8, r0, r1
 80003be:	fa1f fc87 	uxth.w	ip, r7
 80003c2:	fbbe f0f9 	udiv	r0, lr, r9
 80003c6:	0c1c      	lsrs	r4, r3, #16
 80003c8:	fb09 ee10 	mls	lr, r9, r0, lr
 80003cc:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 80003d0:	fb00 fe0c 	mul.w	lr, r0, ip
 80003d4:	45a6      	cmp	lr, r4
 80003d6:	fa02 f201 	lsl.w	r2, r2, r1
 80003da:	d909      	bls.n	80003f0 <__udivmoddi4+0x1a0>
 80003dc:	193c      	adds	r4, r7, r4
 80003de:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 80003e2:	f080 809c 	bcs.w	800051e <__udivmoddi4+0x2ce>
 80003e6:	45a6      	cmp	lr, r4
 80003e8:	f240 8099 	bls.w	800051e <__udivmoddi4+0x2ce>
 80003ec:	3802      	subs	r0, #2
 80003ee:	443c      	add	r4, r7
 80003f0:	eba4 040e 	sub.w	r4, r4, lr
 80003f4:	fa1f fe83 	uxth.w	lr, r3
 80003f8:	fbb4 f3f9 	udiv	r3, r4, r9
 80003fc:	fb09 4413 	mls	r4, r9, r3, r4
 8000400:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000404:	fb03 fc0c 	mul.w	ip, r3, ip
 8000408:	45a4      	cmp	ip, r4
 800040a:	d908      	bls.n	800041e <__udivmoddi4+0x1ce>
 800040c:	193c      	adds	r4, r7, r4
 800040e:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 8000412:	f080 8082 	bcs.w	800051a <__udivmoddi4+0x2ca>
 8000416:	45a4      	cmp	ip, r4
 8000418:	d97f      	bls.n	800051a <__udivmoddi4+0x2ca>
 800041a:	3b02      	subs	r3, #2
 800041c:	443c      	add	r4, r7
 800041e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000422:	eba4 040c 	sub.w	r4, r4, ip
 8000426:	fba0 ec02 	umull	lr, ip, r0, r2
 800042a:	4564      	cmp	r4, ip
 800042c:	4673      	mov	r3, lr
 800042e:	46e1      	mov	r9, ip
 8000430:	d362      	bcc.n	80004f8 <__udivmoddi4+0x2a8>
 8000432:	d05f      	beq.n	80004f4 <__udivmoddi4+0x2a4>
 8000434:	b15d      	cbz	r5, 800044e <__udivmoddi4+0x1fe>
 8000436:	ebb8 0203 	subs.w	r2, r8, r3
 800043a:	eb64 0409 	sbc.w	r4, r4, r9
 800043e:	fa04 f606 	lsl.w	r6, r4, r6
 8000442:	fa22 f301 	lsr.w	r3, r2, r1
 8000446:	431e      	orrs	r6, r3
 8000448:	40cc      	lsrs	r4, r1
 800044a:	e9c5 6400 	strd	r6, r4, [r5]
 800044e:	2100      	movs	r1, #0
 8000450:	e74f      	b.n	80002f2 <__udivmoddi4+0xa2>
 8000452:	fbb1 fcf2 	udiv	ip, r1, r2
 8000456:	0c01      	lsrs	r1, r0, #16
 8000458:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 800045c:	b280      	uxth	r0, r0
 800045e:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000462:	463b      	mov	r3, r7
 8000464:	4638      	mov	r0, r7
 8000466:	463c      	mov	r4, r7
 8000468:	46b8      	mov	r8, r7
 800046a:	46be      	mov	lr, r7
 800046c:	2620      	movs	r6, #32
 800046e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000472:	eba2 0208 	sub.w	r2, r2, r8
 8000476:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800047a:	e766      	b.n	800034a <__udivmoddi4+0xfa>
 800047c:	4601      	mov	r1, r0
 800047e:	e718      	b.n	80002b2 <__udivmoddi4+0x62>
 8000480:	4610      	mov	r0, r2
 8000482:	e72c      	b.n	80002de <__udivmoddi4+0x8e>
 8000484:	f1c6 0220 	rsb	r2, r6, #32
 8000488:	fa2e f302 	lsr.w	r3, lr, r2
 800048c:	40b7      	lsls	r7, r6
 800048e:	40b1      	lsls	r1, r6
 8000490:	fa20 f202 	lsr.w	r2, r0, r2
 8000494:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000498:	430a      	orrs	r2, r1
 800049a:	fbb3 f8fe 	udiv	r8, r3, lr
 800049e:	b2bc      	uxth	r4, r7
 80004a0:	fb0e 3318 	mls	r3, lr, r8, r3
 80004a4:	0c11      	lsrs	r1, r2, #16
 80004a6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004aa:	fb08 f904 	mul.w	r9, r8, r4
 80004ae:	40b0      	lsls	r0, r6
 80004b0:	4589      	cmp	r9, r1
 80004b2:	ea4f 4310 	mov.w	r3, r0, lsr #16
 80004b6:	b280      	uxth	r0, r0
 80004b8:	d93e      	bls.n	8000538 <__udivmoddi4+0x2e8>
 80004ba:	1879      	adds	r1, r7, r1
 80004bc:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 80004c0:	d201      	bcs.n	80004c6 <__udivmoddi4+0x276>
 80004c2:	4589      	cmp	r9, r1
 80004c4:	d81f      	bhi.n	8000506 <__udivmoddi4+0x2b6>
 80004c6:	eba1 0109 	sub.w	r1, r1, r9
 80004ca:	fbb1 f9fe 	udiv	r9, r1, lr
 80004ce:	fb09 f804 	mul.w	r8, r9, r4
 80004d2:	fb0e 1119 	mls	r1, lr, r9, r1
 80004d6:	b292      	uxth	r2, r2
 80004d8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004dc:	4542      	cmp	r2, r8
 80004de:	d229      	bcs.n	8000534 <__udivmoddi4+0x2e4>
 80004e0:	18ba      	adds	r2, r7, r2
 80004e2:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 80004e6:	d2c4      	bcs.n	8000472 <__udivmoddi4+0x222>
 80004e8:	4542      	cmp	r2, r8
 80004ea:	d2c2      	bcs.n	8000472 <__udivmoddi4+0x222>
 80004ec:	f1a9 0102 	sub.w	r1, r9, #2
 80004f0:	443a      	add	r2, r7
 80004f2:	e7be      	b.n	8000472 <__udivmoddi4+0x222>
 80004f4:	45f0      	cmp	r8, lr
 80004f6:	d29d      	bcs.n	8000434 <__udivmoddi4+0x1e4>
 80004f8:	ebbe 0302 	subs.w	r3, lr, r2
 80004fc:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000500:	3801      	subs	r0, #1
 8000502:	46e1      	mov	r9, ip
 8000504:	e796      	b.n	8000434 <__udivmoddi4+0x1e4>
 8000506:	eba7 0909 	sub.w	r9, r7, r9
 800050a:	4449      	add	r1, r9
 800050c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000510:	fbb1 f9fe 	udiv	r9, r1, lr
 8000514:	fb09 f804 	mul.w	r8, r9, r4
 8000518:	e7db      	b.n	80004d2 <__udivmoddi4+0x282>
 800051a:	4673      	mov	r3, lr
 800051c:	e77f      	b.n	800041e <__udivmoddi4+0x1ce>
 800051e:	4650      	mov	r0, sl
 8000520:	e766      	b.n	80003f0 <__udivmoddi4+0x1a0>
 8000522:	4608      	mov	r0, r1
 8000524:	e6fd      	b.n	8000322 <__udivmoddi4+0xd2>
 8000526:	443b      	add	r3, r7
 8000528:	3a02      	subs	r2, #2
 800052a:	e733      	b.n	8000394 <__udivmoddi4+0x144>
 800052c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000530:	443b      	add	r3, r7
 8000532:	e71c      	b.n	800036e <__udivmoddi4+0x11e>
 8000534:	4649      	mov	r1, r9
 8000536:	e79c      	b.n	8000472 <__udivmoddi4+0x222>
 8000538:	eba1 0109 	sub.w	r1, r1, r9
 800053c:	46c4      	mov	ip, r8
 800053e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000542:	fb09 f804 	mul.w	r8, r9, r4
 8000546:	e7c4      	b.n	80004d2 <__udivmoddi4+0x282>

08000548 <__aeabi_idiv0>:
 8000548:	4770      	bx	lr
 800054a:	bf00      	nop

0800054c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800054c:	b580      	push	{r7, lr}
 800054e:	b088      	sub	sp, #32
 8000550:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000552:	f000 faac 	bl	8000aae <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000556:	f000 f84f 	bl	80005f8 <SystemClock_Config>

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  /* USER CODE BEGIN 2 */
	printf("HEllo World\n");
 800055a:	4820      	ldr	r0, [pc, #128]	@ (80005dc <main+0x90>)
 800055c:	f003 ffb6 	bl	80044cc <puts>

	status =  xTaskCreate(task1handler,
 8000560:	f107 0308 	add.w	r3, r7, #8
 8000564:	9301      	str	r3, [sp, #4]
 8000566:	2302      	movs	r3, #2
 8000568:	9300      	str	r3, [sp, #0]
 800056a:	4b1d      	ldr	r3, [pc, #116]	@ (80005e0 <main+0x94>)
 800056c:	22c8      	movs	r2, #200	@ 0xc8
 800056e:	491d      	ldr	r1, [pc, #116]	@ (80005e4 <main+0x98>)
 8000570:	481d      	ldr	r0, [pc, #116]	@ (80005e8 <main+0x9c>)
 8000572:	f001 ff53 	bl	800241c <xTaskCreate>
 8000576:	6178      	str	r0, [r7, #20]
							"TASK-1",
							200,
							"Hello World from Task-1",
							2, /* priority 2 */
							&task1Handle);
	configASSERT(status == pdPASS);
 8000578:	697b      	ldr	r3, [r7, #20]
 800057a:	2b01      	cmp	r3, #1
 800057c:	d00d      	beq.n	800059a <main+0x4e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
    uint32_t ulNewBASEPRI;

    __asm volatile
 800057e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000582:	b672      	cpsid	i
 8000584:	f383 8811 	msr	BASEPRI, r3
 8000588:	f3bf 8f6f 	isb	sy
 800058c:	f3bf 8f4f 	dsb	sy
 8000590:	b662      	cpsie	i
 8000592:	613b      	str	r3, [r7, #16]
        "   isb                                                     \n" \
        "   dsb                                                     \n" \
        "   cpsie i                                                 \n" \
        : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
    );
}
 8000594:	bf00      	nop
 8000596:	bf00      	nop
 8000598:	e7fd      	b.n	8000596 <main+0x4a>

	status =  xTaskCreate(task2handler,
 800059a:	1d3b      	adds	r3, r7, #4
 800059c:	9301      	str	r3, [sp, #4]
 800059e:	2302      	movs	r3, #2
 80005a0:	9300      	str	r3, [sp, #0]
 80005a2:	4b12      	ldr	r3, [pc, #72]	@ (80005ec <main+0xa0>)
 80005a4:	22c8      	movs	r2, #200	@ 0xc8
 80005a6:	4912      	ldr	r1, [pc, #72]	@ (80005f0 <main+0xa4>)
 80005a8:	4812      	ldr	r0, [pc, #72]	@ (80005f4 <main+0xa8>)
 80005aa:	f001 ff37 	bl	800241c <xTaskCreate>
 80005ae:	6178      	str	r0, [r7, #20]
							"TASK-2",
							200,
							"Hello World from Task-2",
							2, /* priority 2 */
							&task2Handle);
	configASSERT(status == pdPASS);
 80005b0:	697b      	ldr	r3, [r7, #20]
 80005b2:	2b01      	cmp	r3, #1
 80005b4:	d00d      	beq.n	80005d2 <main+0x86>
    __asm volatile
 80005b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80005ba:	b672      	cpsid	i
 80005bc:	f383 8811 	msr	BASEPRI, r3
 80005c0:	f3bf 8f6f 	isb	sy
 80005c4:	f3bf 8f4f 	dsb	sy
 80005c8:	b662      	cpsie	i
 80005ca:	60fb      	str	r3, [r7, #12]
}
 80005cc:	bf00      	nop
 80005ce:	bf00      	nop
 80005d0:	e7fd      	b.n	80005ce <main+0x82>

	vTaskStartScheduler();
 80005d2:	f002 f8c7 	bl	8002764 <vTaskStartScheduler>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005d6:	bf00      	nop
 80005d8:	e7fd      	b.n	80005d6 <main+0x8a>
 80005da:	bf00      	nop
 80005dc:	08004c28 	.word	0x08004c28
 80005e0:	08004c34 	.word	0x08004c34
 80005e4:	08004c4c 	.word	0x08004c4c
 80005e8:	080006d9 	.word	0x080006d9
 80005ec:	08004c54 	.word	0x08004c54
 80005f0:	08004c6c 	.word	0x08004c6c
 80005f4:	080006e9 	.word	0x080006e9

080005f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	b094      	sub	sp, #80	@ 0x50
 80005fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005fe:	f107 0320 	add.w	r3, r7, #32
 8000602:	2230      	movs	r2, #48	@ 0x30
 8000604:	2100      	movs	r1, #0
 8000606:	4618      	mov	r0, r3
 8000608:	f004 f840 	bl	800468c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800060c:	f107 030c 	add.w	r3, r7, #12
 8000610:	2200      	movs	r2, #0
 8000612:	601a      	str	r2, [r3, #0]
 8000614:	605a      	str	r2, [r3, #4]
 8000616:	609a      	str	r2, [r3, #8]
 8000618:	60da      	str	r2, [r3, #12]
 800061a:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800061c:	f000 fb56 	bl	8000ccc <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000620:	4b2b      	ldr	r3, [pc, #172]	@ (80006d0 <SystemClock_Config+0xd8>)
 8000622:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000624:	4a2a      	ldr	r2, [pc, #168]	@ (80006d0 <SystemClock_Config+0xd8>)
 8000626:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800062a:	6413      	str	r3, [r2, #64]	@ 0x40
 800062c:	4b28      	ldr	r3, [pc, #160]	@ (80006d0 <SystemClock_Config+0xd8>)
 800062e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000630:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000634:	60bb      	str	r3, [r7, #8]
 8000636:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000638:	4b26      	ldr	r3, [pc, #152]	@ (80006d4 <SystemClock_Config+0xdc>)
 800063a:	681b      	ldr	r3, [r3, #0]
 800063c:	4a25      	ldr	r2, [pc, #148]	@ (80006d4 <SystemClock_Config+0xdc>)
 800063e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000642:	6013      	str	r3, [r2, #0]
 8000644:	4b23      	ldr	r3, [pc, #140]	@ (80006d4 <SystemClock_Config+0xdc>)
 8000646:	681b      	ldr	r3, [r3, #0]
 8000648:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800064c:	607b      	str	r3, [r7, #4]
 800064e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000650:	2301      	movs	r3, #1
 8000652:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000654:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000658:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800065a:	2302      	movs	r3, #2
 800065c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800065e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000662:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000664:	2319      	movs	r3, #25
 8000666:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 432;
 8000668:	f44f 73d8 	mov.w	r3, #432	@ 0x1b0
 800066c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800066e:	2302      	movs	r3, #2
 8000670:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8000672:	2309      	movs	r3, #9
 8000674:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000676:	f107 0320 	add.w	r3, r7, #32
 800067a:	4618      	mov	r0, r3
 800067c:	f000 fb86 	bl	8000d8c <HAL_RCC_OscConfig>
 8000680:	4603      	mov	r3, r0
 8000682:	2b00      	cmp	r3, #0
 8000684:	d001      	beq.n	800068a <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000686:	f000 f849 	bl	800071c <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800068a:	f000 fb2f 	bl	8000cec <HAL_PWREx_EnableOverDrive>
 800068e:	4603      	mov	r3, r0
 8000690:	2b00      	cmp	r3, #0
 8000692:	d001      	beq.n	8000698 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 8000694:	f000 f842 	bl	800071c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000698:	230f      	movs	r3, #15
 800069a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800069c:	2302      	movs	r3, #2
 800069e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006a0:	2300      	movs	r3, #0
 80006a2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80006a4:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80006a8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80006aa:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80006ae:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 80006b0:	f107 030c 	add.w	r3, r7, #12
 80006b4:	2107      	movs	r1, #7
 80006b6:	4618      	mov	r0, r3
 80006b8:	f000 fe0c 	bl	80012d4 <HAL_RCC_ClockConfig>
 80006bc:	4603      	mov	r3, r0
 80006be:	2b00      	cmp	r3, #0
 80006c0:	d001      	beq.n	80006c6 <SystemClock_Config+0xce>
  {
    Error_Handler();
 80006c2:	f000 f82b 	bl	800071c <Error_Handler>
  }
}
 80006c6:	bf00      	nop
 80006c8:	3750      	adds	r7, #80	@ 0x50
 80006ca:	46bd      	mov	sp, r7
 80006cc:	bd80      	pop	{r7, pc}
 80006ce:	bf00      	nop
 80006d0:	40023800 	.word	0x40023800
 80006d4:	40007000 	.word	0x40007000

080006d8 <task1handler>:

/* USER CODE BEGIN 4 */
static void task1handler(void *parameters)
{
 80006d8:	b580      	push	{r7, lr}
 80006da:	b082      	sub	sp, #8
 80006dc:	af00      	add	r7, sp, #0
 80006de:	6078      	str	r0, [r7, #4]
	while(1){
		printf("%s\n", (char *) parameters);
 80006e0:	6878      	ldr	r0, [r7, #4]
 80006e2:	f003 fef3 	bl	80044cc <puts>
 80006e6:	e7fb      	b.n	80006e0 <task1handler+0x8>

080006e8 <task2handler>:
	};
}

static void task2handler(void *parameters)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	b082      	sub	sp, #8
 80006ec:	af00      	add	r7, sp, #0
 80006ee:	6078      	str	r0, [r7, #4]
	while(1){
		printf("%s\n", (char *) parameters);
 80006f0:	6878      	ldr	r0, [r7, #4]
 80006f2:	f003 feeb 	bl	80044cc <puts>
 80006f6:	e7fb      	b.n	80006f0 <task2handler+0x8>

080006f8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	b082      	sub	sp, #8
 80006fc:	af00      	add	r7, sp, #0
 80006fe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1)
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	681b      	ldr	r3, [r3, #0]
 8000704:	4a04      	ldr	r2, [pc, #16]	@ (8000718 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000706:	4293      	cmp	r3, r2
 8000708:	d101      	bne.n	800070e <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 800070a:	f000 f9dd 	bl	8000ac8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800070e:	bf00      	nop
 8000710:	3708      	adds	r7, #8
 8000712:	46bd      	mov	sp, r7
 8000714:	bd80      	pop	{r7, pc}
 8000716:	bf00      	nop
 8000718:	40010000 	.word	0x40010000

0800071c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800071c:	b480      	push	{r7}
 800071e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000720:	b672      	cpsid	i
}
 8000722:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000724:	bf00      	nop
 8000726:	e7fd      	b.n	8000724 <Error_Handler+0x8>

08000728 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000728:	b480      	push	{r7}
 800072a:	b083      	sub	sp, #12
 800072c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800072e:	4b0f      	ldr	r3, [pc, #60]	@ (800076c <HAL_MspInit+0x44>)
 8000730:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000732:	4a0e      	ldr	r2, [pc, #56]	@ (800076c <HAL_MspInit+0x44>)
 8000734:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000738:	6413      	str	r3, [r2, #64]	@ 0x40
 800073a:	4b0c      	ldr	r3, [pc, #48]	@ (800076c <HAL_MspInit+0x44>)
 800073c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800073e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000742:	607b      	str	r3, [r7, #4]
 8000744:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000746:	4b09      	ldr	r3, [pc, #36]	@ (800076c <HAL_MspInit+0x44>)
 8000748:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800074a:	4a08      	ldr	r2, [pc, #32]	@ (800076c <HAL_MspInit+0x44>)
 800074c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000750:	6453      	str	r3, [r2, #68]	@ 0x44
 8000752:	4b06      	ldr	r3, [pc, #24]	@ (800076c <HAL_MspInit+0x44>)
 8000754:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000756:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800075a:	603b      	str	r3, [r7, #0]
 800075c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800075e:	bf00      	nop
 8000760:	370c      	adds	r7, #12
 8000762:	46bd      	mov	sp, r7
 8000764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000768:	4770      	bx	lr
 800076a:	bf00      	nop
 800076c:	40023800 	.word	0x40023800

08000770 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	b08c      	sub	sp, #48	@ 0x30
 8000774:	af00      	add	r7, sp, #0
 8000776:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8000778:	2300      	movs	r3, #0
 800077a:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 800077c:	2300      	movs	r3, #0
 800077e:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000780:	4b2f      	ldr	r3, [pc, #188]	@ (8000840 <HAL_InitTick+0xd0>)
 8000782:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000784:	4a2e      	ldr	r2, [pc, #184]	@ (8000840 <HAL_InitTick+0xd0>)
 8000786:	f043 0301 	orr.w	r3, r3, #1
 800078a:	6453      	str	r3, [r2, #68]	@ 0x44
 800078c:	4b2c      	ldr	r3, [pc, #176]	@ (8000840 <HAL_InitTick+0xd0>)
 800078e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000790:	f003 0301 	and.w	r3, r3, #1
 8000794:	60bb      	str	r3, [r7, #8]
 8000796:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000798:	f107 020c 	add.w	r2, r7, #12
 800079c:	f107 0310 	add.w	r3, r7, #16
 80007a0:	4611      	mov	r1, r2
 80007a2:	4618      	mov	r0, r3
 80007a4:	f000 ff68 	bl	8001678 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 80007a8:	f000 ff52 	bl	8001650 <HAL_RCC_GetPCLK2Freq>
 80007ac:	4603      	mov	r3, r0
 80007ae:	005b      	lsls	r3, r3, #1
 80007b0:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80007b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80007b4:	4a23      	ldr	r2, [pc, #140]	@ (8000844 <HAL_InitTick+0xd4>)
 80007b6:	fba2 2303 	umull	r2, r3, r2, r3
 80007ba:	0c9b      	lsrs	r3, r3, #18
 80007bc:	3b01      	subs	r3, #1
 80007be:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80007c0:	4b21      	ldr	r3, [pc, #132]	@ (8000848 <HAL_InitTick+0xd8>)
 80007c2:	4a22      	ldr	r2, [pc, #136]	@ (800084c <HAL_InitTick+0xdc>)
 80007c4:	601a      	str	r2, [r3, #0]
   * Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 80007c6:	4b20      	ldr	r3, [pc, #128]	@ (8000848 <HAL_InitTick+0xd8>)
 80007c8:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80007cc:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80007ce:	4a1e      	ldr	r2, [pc, #120]	@ (8000848 <HAL_InitTick+0xd8>)
 80007d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80007d2:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80007d4:	4b1c      	ldr	r3, [pc, #112]	@ (8000848 <HAL_InitTick+0xd8>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007da:	4b1b      	ldr	r3, [pc, #108]	@ (8000848 <HAL_InitTick+0xd8>)
 80007dc:	2200      	movs	r2, #0
 80007de:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007e0:	4b19      	ldr	r3, [pc, #100]	@ (8000848 <HAL_InitTick+0xd8>)
 80007e2:	2200      	movs	r2, #0
 80007e4:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 80007e6:	4818      	ldr	r0, [pc, #96]	@ (8000848 <HAL_InitTick+0xd8>)
 80007e8:	f000 ff78 	bl	80016dc <HAL_TIM_Base_Init>
 80007ec:	4603      	mov	r3, r0
 80007ee:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 80007f2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	d11b      	bne.n	8000832 <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 80007fa:	4813      	ldr	r0, [pc, #76]	@ (8000848 <HAL_InitTick+0xd8>)
 80007fc:	f000 ffd0 	bl	80017a0 <HAL_TIM_Base_Start_IT>
 8000800:	4603      	mov	r3, r0
 8000802:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8000806:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800080a:	2b00      	cmp	r3, #0
 800080c:	d111      	bne.n	8000832 <HAL_InitTick+0xc2>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800080e:	2019      	movs	r0, #25
 8000810:	f000 fa4e 	bl	8000cb0 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000814:	687b      	ldr	r3, [r7, #4]
 8000816:	2b0f      	cmp	r3, #15
 8000818:	d808      	bhi.n	800082c <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 800081a:	2200      	movs	r2, #0
 800081c:	6879      	ldr	r1, [r7, #4]
 800081e:	2019      	movs	r0, #25
 8000820:	f000 fa2a 	bl	8000c78 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000824:	4a0a      	ldr	r2, [pc, #40]	@ (8000850 <HAL_InitTick+0xe0>)
 8000826:	687b      	ldr	r3, [r7, #4]
 8000828:	6013      	str	r3, [r2, #0]
 800082a:	e002      	b.n	8000832 <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 800082c:	2301      	movs	r3, #1
 800082e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000832:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8000836:	4618      	mov	r0, r3
 8000838:	3730      	adds	r7, #48	@ 0x30
 800083a:	46bd      	mov	sp, r7
 800083c:	bd80      	pop	{r7, pc}
 800083e:	bf00      	nop
 8000840:	40023800 	.word	0x40023800
 8000844:	431bde83 	.word	0x431bde83
 8000848:	20000088 	.word	0x20000088
 800084c:	40010000 	.word	0x40010000
 8000850:	20000004 	.word	0x20000004

08000854 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000854:	b480      	push	{r7}
 8000856:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000858:	bf00      	nop
 800085a:	e7fd      	b.n	8000858 <NMI_Handler+0x4>

0800085c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800085c:	b480      	push	{r7}
 800085e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000860:	bf00      	nop
 8000862:	e7fd      	b.n	8000860 <HardFault_Handler+0x4>

08000864 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000864:	b480      	push	{r7}
 8000866:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000868:	bf00      	nop
 800086a:	e7fd      	b.n	8000868 <MemManage_Handler+0x4>

0800086c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800086c:	b480      	push	{r7}
 800086e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000870:	bf00      	nop
 8000872:	e7fd      	b.n	8000870 <BusFault_Handler+0x4>

08000874 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000874:	b480      	push	{r7}
 8000876:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000878:	bf00      	nop
 800087a:	e7fd      	b.n	8000878 <UsageFault_Handler+0x4>

0800087c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800087c:	b480      	push	{r7}
 800087e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000880:	bf00      	nop
 8000882:	46bd      	mov	sp, r7
 8000884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000888:	4770      	bx	lr
	...

0800088c <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000890:	4802      	ldr	r0, [pc, #8]	@ (800089c <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000892:	f000 fffd 	bl	8001890 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000896:	bf00      	nop
 8000898:	bd80      	pop	{r7, pc}
 800089a:	bf00      	nop
 800089c:	20000088 	.word	0x20000088

080008a0 <ITM_SendChar>:
/* ITM register addresses */
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)
{
 80008a0:	b480      	push	{r7}
 80008a2:	b083      	sub	sp, #12
 80008a4:	af00      	add	r7, sp, #0
 80008a6:	4603      	mov	r3, r0
 80008a8:	71fb      	strb	r3, [r7, #7]

	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 80008aa:	4b0f      	ldr	r3, [pc, #60]	@ (80008e8 <ITM_SendChar+0x48>)
 80008ac:	681b      	ldr	r3, [r3, #0]
 80008ae:	4a0e      	ldr	r2, [pc, #56]	@ (80008e8 <ITM_SendChar+0x48>)
 80008b0:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80008b4:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 80008b6:	4b0d      	ldr	r3, [pc, #52]	@ (80008ec <ITM_SendChar+0x4c>)
 80008b8:	681b      	ldr	r3, [r3, #0]
 80008ba:	4a0c      	ldr	r2, [pc, #48]	@ (80008ec <ITM_SendChar+0x4c>)
 80008bc:	f043 0301 	orr.w	r3, r3, #1
 80008c0:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 80008c2:	bf00      	nop
 80008c4:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80008c8:	681b      	ldr	r3, [r3, #0]
 80008ca:	f003 0301 	and.w	r3, r3, #1
 80008ce:	2b00      	cmp	r3, #0
 80008d0:	d0f8      	beq.n	80008c4 <ITM_SendChar+0x24>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 80008d2:	f04f 4260 	mov.w	r2, #3758096384	@ 0xe0000000
 80008d6:	79fb      	ldrb	r3, [r7, #7]
 80008d8:	6013      	str	r3, [r2, #0]
}
 80008da:	bf00      	nop
 80008dc:	370c      	adds	r7, #12
 80008de:	46bd      	mov	sp, r7
 80008e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e4:	4770      	bx	lr
 80008e6:	bf00      	nop
 80008e8:	e000edfc 	.word	0xe000edfc
 80008ec:	e0000e00 	.word	0xe0000e00

080008f0 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	b086      	sub	sp, #24
 80008f4:	af00      	add	r7, sp, #0
 80008f6:	60f8      	str	r0, [r7, #12]
 80008f8:	60b9      	str	r1, [r7, #8]
 80008fa:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80008fc:	2300      	movs	r3, #0
 80008fe:	617b      	str	r3, [r7, #20]
 8000900:	e00a      	b.n	8000918 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000902:	f3af 8000 	nop.w
 8000906:	4601      	mov	r1, r0
 8000908:	68bb      	ldr	r3, [r7, #8]
 800090a:	1c5a      	adds	r2, r3, #1
 800090c:	60ba      	str	r2, [r7, #8]
 800090e:	b2ca      	uxtb	r2, r1
 8000910:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000912:	697b      	ldr	r3, [r7, #20]
 8000914:	3301      	adds	r3, #1
 8000916:	617b      	str	r3, [r7, #20]
 8000918:	697a      	ldr	r2, [r7, #20]
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	429a      	cmp	r2, r3
 800091e:	dbf0      	blt.n	8000902 <_read+0x12>
  }

  return len;
 8000920:	687b      	ldr	r3, [r7, #4]
}
 8000922:	4618      	mov	r0, r3
 8000924:	3718      	adds	r7, #24
 8000926:	46bd      	mov	sp, r7
 8000928:	bd80      	pop	{r7, pc}

0800092a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800092a:	b580      	push	{r7, lr}
 800092c:	b086      	sub	sp, #24
 800092e:	af00      	add	r7, sp, #0
 8000930:	60f8      	str	r0, [r7, #12]
 8000932:	60b9      	str	r1, [r7, #8]
 8000934:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000936:	2300      	movs	r3, #0
 8000938:	617b      	str	r3, [r7, #20]
 800093a:	e009      	b.n	8000950 <_write+0x26>
  {
	  ITM_SendChar(*ptr++);
 800093c:	68bb      	ldr	r3, [r7, #8]
 800093e:	1c5a      	adds	r2, r3, #1
 8000940:	60ba      	str	r2, [r7, #8]
 8000942:	781b      	ldrb	r3, [r3, #0]
 8000944:	4618      	mov	r0, r3
 8000946:	f7ff ffab 	bl	80008a0 <ITM_SendChar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800094a:	697b      	ldr	r3, [r7, #20]
 800094c:	3301      	adds	r3, #1
 800094e:	617b      	str	r3, [r7, #20]
 8000950:	697a      	ldr	r2, [r7, #20]
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	429a      	cmp	r2, r3
 8000956:	dbf1      	blt.n	800093c <_write+0x12>
//    __io_putchar(*ptr++);
  }
  return len;
 8000958:	687b      	ldr	r3, [r7, #4]
}
 800095a:	4618      	mov	r0, r3
 800095c:	3718      	adds	r7, #24
 800095e:	46bd      	mov	sp, r7
 8000960:	bd80      	pop	{r7, pc}

08000962 <_close>:

int _close(int file)
{
 8000962:	b480      	push	{r7}
 8000964:	b083      	sub	sp, #12
 8000966:	af00      	add	r7, sp, #0
 8000968:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800096a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 800096e:	4618      	mov	r0, r3
 8000970:	370c      	adds	r7, #12
 8000972:	46bd      	mov	sp, r7
 8000974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000978:	4770      	bx	lr

0800097a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800097a:	b480      	push	{r7}
 800097c:	b083      	sub	sp, #12
 800097e:	af00      	add	r7, sp, #0
 8000980:	6078      	str	r0, [r7, #4]
 8000982:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000984:	683b      	ldr	r3, [r7, #0]
 8000986:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800098a:	605a      	str	r2, [r3, #4]
  return 0;
 800098c:	2300      	movs	r3, #0
}
 800098e:	4618      	mov	r0, r3
 8000990:	370c      	adds	r7, #12
 8000992:	46bd      	mov	sp, r7
 8000994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000998:	4770      	bx	lr

0800099a <_isatty>:

int _isatty(int file)
{
 800099a:	b480      	push	{r7}
 800099c:	b083      	sub	sp, #12
 800099e:	af00      	add	r7, sp, #0
 80009a0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80009a2:	2301      	movs	r3, #1
}
 80009a4:	4618      	mov	r0, r3
 80009a6:	370c      	adds	r7, #12
 80009a8:	46bd      	mov	sp, r7
 80009aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ae:	4770      	bx	lr

080009b0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80009b0:	b480      	push	{r7}
 80009b2:	b085      	sub	sp, #20
 80009b4:	af00      	add	r7, sp, #0
 80009b6:	60f8      	str	r0, [r7, #12]
 80009b8:	60b9      	str	r1, [r7, #8]
 80009ba:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80009bc:	2300      	movs	r3, #0
}
 80009be:	4618      	mov	r0, r3
 80009c0:	3714      	adds	r7, #20
 80009c2:	46bd      	mov	sp, r7
 80009c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c8:	4770      	bx	lr
	...

080009cc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	b086      	sub	sp, #24
 80009d0:	af00      	add	r7, sp, #0
 80009d2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80009d4:	4a14      	ldr	r2, [pc, #80]	@ (8000a28 <_sbrk+0x5c>)
 80009d6:	4b15      	ldr	r3, [pc, #84]	@ (8000a2c <_sbrk+0x60>)
 80009d8:	1ad3      	subs	r3, r2, r3
 80009da:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80009dc:	697b      	ldr	r3, [r7, #20]
 80009de:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80009e0:	4b13      	ldr	r3, [pc, #76]	@ (8000a30 <_sbrk+0x64>)
 80009e2:	681b      	ldr	r3, [r3, #0]
 80009e4:	2b00      	cmp	r3, #0
 80009e6:	d102      	bne.n	80009ee <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80009e8:	4b11      	ldr	r3, [pc, #68]	@ (8000a30 <_sbrk+0x64>)
 80009ea:	4a12      	ldr	r2, [pc, #72]	@ (8000a34 <_sbrk+0x68>)
 80009ec:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80009ee:	4b10      	ldr	r3, [pc, #64]	@ (8000a30 <_sbrk+0x64>)
 80009f0:	681a      	ldr	r2, [r3, #0]
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	4413      	add	r3, r2
 80009f6:	693a      	ldr	r2, [r7, #16]
 80009f8:	429a      	cmp	r2, r3
 80009fa:	d207      	bcs.n	8000a0c <_sbrk+0x40>
  {
    errno = ENOMEM;
 80009fc:	f003 fe94 	bl	8004728 <__errno>
 8000a00:	4603      	mov	r3, r0
 8000a02:	220c      	movs	r2, #12
 8000a04:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000a06:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000a0a:	e009      	b.n	8000a20 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000a0c:	4b08      	ldr	r3, [pc, #32]	@ (8000a30 <_sbrk+0x64>)
 8000a0e:	681b      	ldr	r3, [r3, #0]
 8000a10:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000a12:	4b07      	ldr	r3, [pc, #28]	@ (8000a30 <_sbrk+0x64>)
 8000a14:	681a      	ldr	r2, [r3, #0]
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	4413      	add	r3, r2
 8000a1a:	4a05      	ldr	r2, [pc, #20]	@ (8000a30 <_sbrk+0x64>)
 8000a1c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000a1e:	68fb      	ldr	r3, [r7, #12]
}
 8000a20:	4618      	mov	r0, r3
 8000a22:	3718      	adds	r7, #24
 8000a24:	46bd      	mov	sp, r7
 8000a26:	bd80      	pop	{r7, pc}
 8000a28:	20040000 	.word	0x20040000
 8000a2c:	00000400 	.word	0x00000400
 8000a30:	200000d4 	.word	0x200000d4
 8000a34:	2000f7d0 	.word	0x2000f7d0

08000a38 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a38:	b480      	push	{r7}
 8000a3a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a3c:	4b06      	ldr	r3, [pc, #24]	@ (8000a58 <SystemInit+0x20>)
 8000a3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000a42:	4a05      	ldr	r2, [pc, #20]	@ (8000a58 <SystemInit+0x20>)
 8000a44:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000a48:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a4c:	bf00      	nop
 8000a4e:	46bd      	mov	sp, r7
 8000a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a54:	4770      	bx	lr
 8000a56:	bf00      	nop
 8000a58:	e000ed00 	.word	0xe000ed00

08000a5c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000a5c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000a94 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit 
 8000a60:	f7ff ffea 	bl	8000a38 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000a64:	480c      	ldr	r0, [pc, #48]	@ (8000a98 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000a66:	490d      	ldr	r1, [pc, #52]	@ (8000a9c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000a68:	4a0d      	ldr	r2, [pc, #52]	@ (8000aa0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000a6a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a6c:	e002      	b.n	8000a74 <LoopCopyDataInit>

08000a6e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a6e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a70:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a72:	3304      	adds	r3, #4

08000a74 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a74:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a76:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a78:	d3f9      	bcc.n	8000a6e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a7a:	4a0a      	ldr	r2, [pc, #40]	@ (8000aa4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000a7c:	4c0a      	ldr	r4, [pc, #40]	@ (8000aa8 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000a7e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a80:	e001      	b.n	8000a86 <LoopFillZerobss>

08000a82 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a82:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a84:	3204      	adds	r2, #4

08000a86 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a86:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a88:	d3fb      	bcc.n	8000a82 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000a8a:	f003 fe53 	bl	8004734 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000a8e:	f7ff fd5d 	bl	800054c <main>
  bx  lr    
 8000a92:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000a94:	20040000 	.word	0x20040000
  ldr r0, =_sdata
 8000a98:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a9c:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8000aa0:	08004cb8 	.word	0x08004cb8
  ldr r2, =_sbss
 8000aa4:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8000aa8:	2000f7cc 	.word	0x2000f7cc

08000aac <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000aac:	e7fe      	b.n	8000aac <ADC_IRQHandler>

08000aae <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000aae:	b580      	push	{r7, lr}
 8000ab0:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ab2:	2003      	movs	r0, #3
 8000ab4:	f000 f8d5 	bl	8000c62 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ab8:	200f      	movs	r0, #15
 8000aba:	f7ff fe59 	bl	8000770 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000abe:	f7ff fe33 	bl	8000728 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ac2:	2300      	movs	r3, #0
}
 8000ac4:	4618      	mov	r0, r3
 8000ac6:	bd80      	pop	{r7, pc}

08000ac8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ac8:	b480      	push	{r7}
 8000aca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000acc:	4b06      	ldr	r3, [pc, #24]	@ (8000ae8 <HAL_IncTick+0x20>)
 8000ace:	781b      	ldrb	r3, [r3, #0]
 8000ad0:	461a      	mov	r2, r3
 8000ad2:	4b06      	ldr	r3, [pc, #24]	@ (8000aec <HAL_IncTick+0x24>)
 8000ad4:	681b      	ldr	r3, [r3, #0]
 8000ad6:	4413      	add	r3, r2
 8000ad8:	4a04      	ldr	r2, [pc, #16]	@ (8000aec <HAL_IncTick+0x24>)
 8000ada:	6013      	str	r3, [r2, #0]
}
 8000adc:	bf00      	nop
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop
 8000ae8:	20000008 	.word	0x20000008
 8000aec:	200000d8 	.word	0x200000d8

08000af0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000af0:	b480      	push	{r7}
 8000af2:	af00      	add	r7, sp, #0
  return uwTick;
 8000af4:	4b03      	ldr	r3, [pc, #12]	@ (8000b04 <HAL_GetTick+0x14>)
 8000af6:	681b      	ldr	r3, [r3, #0]
}
 8000af8:	4618      	mov	r0, r3
 8000afa:	46bd      	mov	sp, r7
 8000afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b00:	4770      	bx	lr
 8000b02:	bf00      	nop
 8000b04:	200000d8 	.word	0x200000d8

08000b08 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b08:	b480      	push	{r7}
 8000b0a:	b085      	sub	sp, #20
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	f003 0307 	and.w	r3, r3, #7
 8000b16:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b18:	4b0b      	ldr	r3, [pc, #44]	@ (8000b48 <__NVIC_SetPriorityGrouping+0x40>)
 8000b1a:	68db      	ldr	r3, [r3, #12]
 8000b1c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b1e:	68ba      	ldr	r2, [r7, #8]
 8000b20:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000b24:	4013      	ands	r3, r2
 8000b26:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b28:	68fb      	ldr	r3, [r7, #12]
 8000b2a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b2c:	68bb      	ldr	r3, [r7, #8]
 8000b2e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000b30:	4b06      	ldr	r3, [pc, #24]	@ (8000b4c <__NVIC_SetPriorityGrouping+0x44>)
 8000b32:	4313      	orrs	r3, r2
 8000b34:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b36:	4a04      	ldr	r2, [pc, #16]	@ (8000b48 <__NVIC_SetPriorityGrouping+0x40>)
 8000b38:	68bb      	ldr	r3, [r7, #8]
 8000b3a:	60d3      	str	r3, [r2, #12]
}
 8000b3c:	bf00      	nop
 8000b3e:	3714      	adds	r7, #20
 8000b40:	46bd      	mov	sp, r7
 8000b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b46:	4770      	bx	lr
 8000b48:	e000ed00 	.word	0xe000ed00
 8000b4c:	05fa0000 	.word	0x05fa0000

08000b50 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b50:	b480      	push	{r7}
 8000b52:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b54:	4b04      	ldr	r3, [pc, #16]	@ (8000b68 <__NVIC_GetPriorityGrouping+0x18>)
 8000b56:	68db      	ldr	r3, [r3, #12]
 8000b58:	0a1b      	lsrs	r3, r3, #8
 8000b5a:	f003 0307 	and.w	r3, r3, #7
}
 8000b5e:	4618      	mov	r0, r3
 8000b60:	46bd      	mov	sp, r7
 8000b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b66:	4770      	bx	lr
 8000b68:	e000ed00 	.word	0xe000ed00

08000b6c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b6c:	b480      	push	{r7}
 8000b6e:	b083      	sub	sp, #12
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	4603      	mov	r3, r0
 8000b74:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	db0b      	blt.n	8000b96 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b7e:	79fb      	ldrb	r3, [r7, #7]
 8000b80:	f003 021f 	and.w	r2, r3, #31
 8000b84:	4907      	ldr	r1, [pc, #28]	@ (8000ba4 <__NVIC_EnableIRQ+0x38>)
 8000b86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b8a:	095b      	lsrs	r3, r3, #5
 8000b8c:	2001      	movs	r0, #1
 8000b8e:	fa00 f202 	lsl.w	r2, r0, r2
 8000b92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000b96:	bf00      	nop
 8000b98:	370c      	adds	r7, #12
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba0:	4770      	bx	lr
 8000ba2:	bf00      	nop
 8000ba4:	e000e100 	.word	0xe000e100

08000ba8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ba8:	b480      	push	{r7}
 8000baa:	b083      	sub	sp, #12
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	4603      	mov	r3, r0
 8000bb0:	6039      	str	r1, [r7, #0]
 8000bb2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bb4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	db0a      	blt.n	8000bd2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bbc:	683b      	ldr	r3, [r7, #0]
 8000bbe:	b2da      	uxtb	r2, r3
 8000bc0:	490c      	ldr	r1, [pc, #48]	@ (8000bf4 <__NVIC_SetPriority+0x4c>)
 8000bc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bc6:	0112      	lsls	r2, r2, #4
 8000bc8:	b2d2      	uxtb	r2, r2
 8000bca:	440b      	add	r3, r1
 8000bcc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000bd0:	e00a      	b.n	8000be8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bd2:	683b      	ldr	r3, [r7, #0]
 8000bd4:	b2da      	uxtb	r2, r3
 8000bd6:	4908      	ldr	r1, [pc, #32]	@ (8000bf8 <__NVIC_SetPriority+0x50>)
 8000bd8:	79fb      	ldrb	r3, [r7, #7]
 8000bda:	f003 030f 	and.w	r3, r3, #15
 8000bde:	3b04      	subs	r3, #4
 8000be0:	0112      	lsls	r2, r2, #4
 8000be2:	b2d2      	uxtb	r2, r2
 8000be4:	440b      	add	r3, r1
 8000be6:	761a      	strb	r2, [r3, #24]
}
 8000be8:	bf00      	nop
 8000bea:	370c      	adds	r7, #12
 8000bec:	46bd      	mov	sp, r7
 8000bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf2:	4770      	bx	lr
 8000bf4:	e000e100 	.word	0xe000e100
 8000bf8:	e000ed00 	.word	0xe000ed00

08000bfc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000bfc:	b480      	push	{r7}
 8000bfe:	b089      	sub	sp, #36	@ 0x24
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	60f8      	str	r0, [r7, #12]
 8000c04:	60b9      	str	r1, [r7, #8]
 8000c06:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c08:	68fb      	ldr	r3, [r7, #12]
 8000c0a:	f003 0307 	and.w	r3, r3, #7
 8000c0e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c10:	69fb      	ldr	r3, [r7, #28]
 8000c12:	f1c3 0307 	rsb	r3, r3, #7
 8000c16:	2b04      	cmp	r3, #4
 8000c18:	bf28      	it	cs
 8000c1a:	2304      	movcs	r3, #4
 8000c1c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c1e:	69fb      	ldr	r3, [r7, #28]
 8000c20:	3304      	adds	r3, #4
 8000c22:	2b06      	cmp	r3, #6
 8000c24:	d902      	bls.n	8000c2c <NVIC_EncodePriority+0x30>
 8000c26:	69fb      	ldr	r3, [r7, #28]
 8000c28:	3b03      	subs	r3, #3
 8000c2a:	e000      	b.n	8000c2e <NVIC_EncodePriority+0x32>
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c30:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000c34:	69bb      	ldr	r3, [r7, #24]
 8000c36:	fa02 f303 	lsl.w	r3, r2, r3
 8000c3a:	43da      	mvns	r2, r3
 8000c3c:	68bb      	ldr	r3, [r7, #8]
 8000c3e:	401a      	ands	r2, r3
 8000c40:	697b      	ldr	r3, [r7, #20]
 8000c42:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c44:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000c48:	697b      	ldr	r3, [r7, #20]
 8000c4a:	fa01 f303 	lsl.w	r3, r1, r3
 8000c4e:	43d9      	mvns	r1, r3
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c54:	4313      	orrs	r3, r2
         );
}
 8000c56:	4618      	mov	r0, r3
 8000c58:	3724      	adds	r7, #36	@ 0x24
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c60:	4770      	bx	lr

08000c62 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c62:	b580      	push	{r7, lr}
 8000c64:	b082      	sub	sp, #8
 8000c66:	af00      	add	r7, sp, #0
 8000c68:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c6a:	6878      	ldr	r0, [r7, #4]
 8000c6c:	f7ff ff4c 	bl	8000b08 <__NVIC_SetPriorityGrouping>
}
 8000c70:	bf00      	nop
 8000c72:	3708      	adds	r7, #8
 8000c74:	46bd      	mov	sp, r7
 8000c76:	bd80      	pop	{r7, pc}

08000c78 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	b086      	sub	sp, #24
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	4603      	mov	r3, r0
 8000c80:	60b9      	str	r1, [r7, #8]
 8000c82:	607a      	str	r2, [r7, #4]
 8000c84:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000c86:	2300      	movs	r3, #0
 8000c88:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000c8a:	f7ff ff61 	bl	8000b50 <__NVIC_GetPriorityGrouping>
 8000c8e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c90:	687a      	ldr	r2, [r7, #4]
 8000c92:	68b9      	ldr	r1, [r7, #8]
 8000c94:	6978      	ldr	r0, [r7, #20]
 8000c96:	f7ff ffb1 	bl	8000bfc <NVIC_EncodePriority>
 8000c9a:	4602      	mov	r2, r0
 8000c9c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ca0:	4611      	mov	r1, r2
 8000ca2:	4618      	mov	r0, r3
 8000ca4:	f7ff ff80 	bl	8000ba8 <__NVIC_SetPriority>
}
 8000ca8:	bf00      	nop
 8000caa:	3718      	adds	r7, #24
 8000cac:	46bd      	mov	sp, r7
 8000cae:	bd80      	pop	{r7, pc}

08000cb0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b082      	sub	sp, #8
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	4603      	mov	r3, r0
 8000cb8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000cba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cbe:	4618      	mov	r0, r3
 8000cc0:	f7ff ff54 	bl	8000b6c <__NVIC_EnableIRQ>
}
 8000cc4:	bf00      	nop
 8000cc6:	3708      	adds	r7, #8
 8000cc8:	46bd      	mov	sp, r7
 8000cca:	bd80      	pop	{r7, pc}

08000ccc <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8000ccc:	b480      	push	{r7}
 8000cce:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8000cd0:	4b05      	ldr	r3, [pc, #20]	@ (8000ce8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	4a04      	ldr	r2, [pc, #16]	@ (8000ce8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8000cd6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000cda:	6013      	str	r3, [r2, #0]
}
 8000cdc:	bf00      	nop
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce4:	4770      	bx	lr
 8000ce6:	bf00      	nop
 8000ce8:	40007000 	.word	0x40007000

08000cec <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	b082      	sub	sp, #8
 8000cf0:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8000cf6:	4b23      	ldr	r3, [pc, #140]	@ (8000d84 <HAL_PWREx_EnableOverDrive+0x98>)
 8000cf8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cfa:	4a22      	ldr	r2, [pc, #136]	@ (8000d84 <HAL_PWREx_EnableOverDrive+0x98>)
 8000cfc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000d00:	6413      	str	r3, [r2, #64]	@ 0x40
 8000d02:	4b20      	ldr	r3, [pc, #128]	@ (8000d84 <HAL_PWREx_EnableOverDrive+0x98>)
 8000d04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d06:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000d0a:	603b      	str	r3, [r7, #0]
 8000d0c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8000d0e:	4b1e      	ldr	r3, [pc, #120]	@ (8000d88 <HAL_PWREx_EnableOverDrive+0x9c>)
 8000d10:	681b      	ldr	r3, [r3, #0]
 8000d12:	4a1d      	ldr	r2, [pc, #116]	@ (8000d88 <HAL_PWREx_EnableOverDrive+0x9c>)
 8000d14:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000d18:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000d1a:	f7ff fee9 	bl	8000af0 <HAL_GetTick>
 8000d1e:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8000d20:	e009      	b.n	8000d36 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8000d22:	f7ff fee5 	bl	8000af0 <HAL_GetTick>
 8000d26:	4602      	mov	r2, r0
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	1ad3      	subs	r3, r2, r3
 8000d2c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8000d30:	d901      	bls.n	8000d36 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8000d32:	2303      	movs	r3, #3
 8000d34:	e022      	b.n	8000d7c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8000d36:	4b14      	ldr	r3, [pc, #80]	@ (8000d88 <HAL_PWREx_EnableOverDrive+0x9c>)
 8000d38:	685b      	ldr	r3, [r3, #4]
 8000d3a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000d3e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000d42:	d1ee      	bne.n	8000d22 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8000d44:	4b10      	ldr	r3, [pc, #64]	@ (8000d88 <HAL_PWREx_EnableOverDrive+0x9c>)
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	4a0f      	ldr	r2, [pc, #60]	@ (8000d88 <HAL_PWREx_EnableOverDrive+0x9c>)
 8000d4a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000d4e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000d50:	f7ff fece 	bl	8000af0 <HAL_GetTick>
 8000d54:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8000d56:	e009      	b.n	8000d6c <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8000d58:	f7ff feca 	bl	8000af0 <HAL_GetTick>
 8000d5c:	4602      	mov	r2, r0
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	1ad3      	subs	r3, r2, r3
 8000d62:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8000d66:	d901      	bls.n	8000d6c <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8000d68:	2303      	movs	r3, #3
 8000d6a:	e007      	b.n	8000d7c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8000d6c:	4b06      	ldr	r3, [pc, #24]	@ (8000d88 <HAL_PWREx_EnableOverDrive+0x9c>)
 8000d6e:	685b      	ldr	r3, [r3, #4]
 8000d70:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000d74:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8000d78:	d1ee      	bne.n	8000d58 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8000d7a:	2300      	movs	r3, #0
}
 8000d7c:	4618      	mov	r0, r3
 8000d7e:	3708      	adds	r7, #8
 8000d80:	46bd      	mov	sp, r7
 8000d82:	bd80      	pop	{r7, pc}
 8000d84:	40023800 	.word	0x40023800
 8000d88:	40007000 	.word	0x40007000

08000d8c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b086      	sub	sp, #24
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8000d94:	2300      	movs	r3, #0
 8000d96:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d101      	bne.n	8000da2 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8000d9e:	2301      	movs	r3, #1
 8000da0:	e291      	b.n	80012c6 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	f003 0301 	and.w	r3, r3, #1
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	f000 8087 	beq.w	8000ebe <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000db0:	4b96      	ldr	r3, [pc, #600]	@ (800100c <HAL_RCC_OscConfig+0x280>)
 8000db2:	689b      	ldr	r3, [r3, #8]
 8000db4:	f003 030c 	and.w	r3, r3, #12
 8000db8:	2b04      	cmp	r3, #4
 8000dba:	d00c      	beq.n	8000dd6 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000dbc:	4b93      	ldr	r3, [pc, #588]	@ (800100c <HAL_RCC_OscConfig+0x280>)
 8000dbe:	689b      	ldr	r3, [r3, #8]
 8000dc0:	f003 030c 	and.w	r3, r3, #12
 8000dc4:	2b08      	cmp	r3, #8
 8000dc6:	d112      	bne.n	8000dee <HAL_RCC_OscConfig+0x62>
 8000dc8:	4b90      	ldr	r3, [pc, #576]	@ (800100c <HAL_RCC_OscConfig+0x280>)
 8000dca:	685b      	ldr	r3, [r3, #4]
 8000dcc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000dd0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8000dd4:	d10b      	bne.n	8000dee <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000dd6:	4b8d      	ldr	r3, [pc, #564]	@ (800100c <HAL_RCC_OscConfig+0x280>)
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d06c      	beq.n	8000ebc <HAL_RCC_OscConfig+0x130>
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	685b      	ldr	r3, [r3, #4]
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d168      	bne.n	8000ebc <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8000dea:	2301      	movs	r3, #1
 8000dec:	e26b      	b.n	80012c6 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	685b      	ldr	r3, [r3, #4]
 8000df2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000df6:	d106      	bne.n	8000e06 <HAL_RCC_OscConfig+0x7a>
 8000df8:	4b84      	ldr	r3, [pc, #528]	@ (800100c <HAL_RCC_OscConfig+0x280>)
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	4a83      	ldr	r2, [pc, #524]	@ (800100c <HAL_RCC_OscConfig+0x280>)
 8000dfe:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000e02:	6013      	str	r3, [r2, #0]
 8000e04:	e02e      	b.n	8000e64 <HAL_RCC_OscConfig+0xd8>
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	685b      	ldr	r3, [r3, #4]
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	d10c      	bne.n	8000e28 <HAL_RCC_OscConfig+0x9c>
 8000e0e:	4b7f      	ldr	r3, [pc, #508]	@ (800100c <HAL_RCC_OscConfig+0x280>)
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	4a7e      	ldr	r2, [pc, #504]	@ (800100c <HAL_RCC_OscConfig+0x280>)
 8000e14:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000e18:	6013      	str	r3, [r2, #0]
 8000e1a:	4b7c      	ldr	r3, [pc, #496]	@ (800100c <HAL_RCC_OscConfig+0x280>)
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	4a7b      	ldr	r2, [pc, #492]	@ (800100c <HAL_RCC_OscConfig+0x280>)
 8000e20:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000e24:	6013      	str	r3, [r2, #0]
 8000e26:	e01d      	b.n	8000e64 <HAL_RCC_OscConfig+0xd8>
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	685b      	ldr	r3, [r3, #4]
 8000e2c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8000e30:	d10c      	bne.n	8000e4c <HAL_RCC_OscConfig+0xc0>
 8000e32:	4b76      	ldr	r3, [pc, #472]	@ (800100c <HAL_RCC_OscConfig+0x280>)
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	4a75      	ldr	r2, [pc, #468]	@ (800100c <HAL_RCC_OscConfig+0x280>)
 8000e38:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000e3c:	6013      	str	r3, [r2, #0]
 8000e3e:	4b73      	ldr	r3, [pc, #460]	@ (800100c <HAL_RCC_OscConfig+0x280>)
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	4a72      	ldr	r2, [pc, #456]	@ (800100c <HAL_RCC_OscConfig+0x280>)
 8000e44:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000e48:	6013      	str	r3, [r2, #0]
 8000e4a:	e00b      	b.n	8000e64 <HAL_RCC_OscConfig+0xd8>
 8000e4c:	4b6f      	ldr	r3, [pc, #444]	@ (800100c <HAL_RCC_OscConfig+0x280>)
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	4a6e      	ldr	r2, [pc, #440]	@ (800100c <HAL_RCC_OscConfig+0x280>)
 8000e52:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000e56:	6013      	str	r3, [r2, #0]
 8000e58:	4b6c      	ldr	r3, [pc, #432]	@ (800100c <HAL_RCC_OscConfig+0x280>)
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	4a6b      	ldr	r2, [pc, #428]	@ (800100c <HAL_RCC_OscConfig+0x280>)
 8000e5e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000e62:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	685b      	ldr	r3, [r3, #4]
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	d013      	beq.n	8000e94 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000e6c:	f7ff fe40 	bl	8000af0 <HAL_GetTick>
 8000e70:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000e72:	e008      	b.n	8000e86 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000e74:	f7ff fe3c 	bl	8000af0 <HAL_GetTick>
 8000e78:	4602      	mov	r2, r0
 8000e7a:	693b      	ldr	r3, [r7, #16]
 8000e7c:	1ad3      	subs	r3, r2, r3
 8000e7e:	2b64      	cmp	r3, #100	@ 0x64
 8000e80:	d901      	bls.n	8000e86 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8000e82:	2303      	movs	r3, #3
 8000e84:	e21f      	b.n	80012c6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000e86:	4b61      	ldr	r3, [pc, #388]	@ (800100c <HAL_RCC_OscConfig+0x280>)
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d0f0      	beq.n	8000e74 <HAL_RCC_OscConfig+0xe8>
 8000e92:	e014      	b.n	8000ebe <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000e94:	f7ff fe2c 	bl	8000af0 <HAL_GetTick>
 8000e98:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000e9a:	e008      	b.n	8000eae <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000e9c:	f7ff fe28 	bl	8000af0 <HAL_GetTick>
 8000ea0:	4602      	mov	r2, r0
 8000ea2:	693b      	ldr	r3, [r7, #16]
 8000ea4:	1ad3      	subs	r3, r2, r3
 8000ea6:	2b64      	cmp	r3, #100	@ 0x64
 8000ea8:	d901      	bls.n	8000eae <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8000eaa:	2303      	movs	r3, #3
 8000eac:	e20b      	b.n	80012c6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000eae:	4b57      	ldr	r3, [pc, #348]	@ (800100c <HAL_RCC_OscConfig+0x280>)
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d1f0      	bne.n	8000e9c <HAL_RCC_OscConfig+0x110>
 8000eba:	e000      	b.n	8000ebe <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000ebc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	f003 0302 	and.w	r3, r3, #2
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d069      	beq.n	8000f9e <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000eca:	4b50      	ldr	r3, [pc, #320]	@ (800100c <HAL_RCC_OscConfig+0x280>)
 8000ecc:	689b      	ldr	r3, [r3, #8]
 8000ece:	f003 030c 	and.w	r3, r3, #12
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d00b      	beq.n	8000eee <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000ed6:	4b4d      	ldr	r3, [pc, #308]	@ (800100c <HAL_RCC_OscConfig+0x280>)
 8000ed8:	689b      	ldr	r3, [r3, #8]
 8000eda:	f003 030c 	and.w	r3, r3, #12
 8000ede:	2b08      	cmp	r3, #8
 8000ee0:	d11c      	bne.n	8000f1c <HAL_RCC_OscConfig+0x190>
 8000ee2:	4b4a      	ldr	r3, [pc, #296]	@ (800100c <HAL_RCC_OscConfig+0x280>)
 8000ee4:	685b      	ldr	r3, [r3, #4]
 8000ee6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d116      	bne.n	8000f1c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000eee:	4b47      	ldr	r3, [pc, #284]	@ (800100c <HAL_RCC_OscConfig+0x280>)
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	f003 0302 	and.w	r3, r3, #2
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d005      	beq.n	8000f06 <HAL_RCC_OscConfig+0x17a>
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	68db      	ldr	r3, [r3, #12]
 8000efe:	2b01      	cmp	r3, #1
 8000f00:	d001      	beq.n	8000f06 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8000f02:	2301      	movs	r3, #1
 8000f04:	e1df      	b.n	80012c6 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000f06:	4b41      	ldr	r3, [pc, #260]	@ (800100c <HAL_RCC_OscConfig+0x280>)
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	691b      	ldr	r3, [r3, #16]
 8000f12:	00db      	lsls	r3, r3, #3
 8000f14:	493d      	ldr	r1, [pc, #244]	@ (800100c <HAL_RCC_OscConfig+0x280>)
 8000f16:	4313      	orrs	r3, r2
 8000f18:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000f1a:	e040      	b.n	8000f9e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	68db      	ldr	r3, [r3, #12]
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d023      	beq.n	8000f6c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000f24:	4b39      	ldr	r3, [pc, #228]	@ (800100c <HAL_RCC_OscConfig+0x280>)
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	4a38      	ldr	r2, [pc, #224]	@ (800100c <HAL_RCC_OscConfig+0x280>)
 8000f2a:	f043 0301 	orr.w	r3, r3, #1
 8000f2e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000f30:	f7ff fdde 	bl	8000af0 <HAL_GetTick>
 8000f34:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000f36:	e008      	b.n	8000f4a <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000f38:	f7ff fdda 	bl	8000af0 <HAL_GetTick>
 8000f3c:	4602      	mov	r2, r0
 8000f3e:	693b      	ldr	r3, [r7, #16]
 8000f40:	1ad3      	subs	r3, r2, r3
 8000f42:	2b02      	cmp	r3, #2
 8000f44:	d901      	bls.n	8000f4a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8000f46:	2303      	movs	r3, #3
 8000f48:	e1bd      	b.n	80012c6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000f4a:	4b30      	ldr	r3, [pc, #192]	@ (800100c <HAL_RCC_OscConfig+0x280>)
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	f003 0302 	and.w	r3, r3, #2
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d0f0      	beq.n	8000f38 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000f56:	4b2d      	ldr	r3, [pc, #180]	@ (800100c <HAL_RCC_OscConfig+0x280>)
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	691b      	ldr	r3, [r3, #16]
 8000f62:	00db      	lsls	r3, r3, #3
 8000f64:	4929      	ldr	r1, [pc, #164]	@ (800100c <HAL_RCC_OscConfig+0x280>)
 8000f66:	4313      	orrs	r3, r2
 8000f68:	600b      	str	r3, [r1, #0]
 8000f6a:	e018      	b.n	8000f9e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000f6c:	4b27      	ldr	r3, [pc, #156]	@ (800100c <HAL_RCC_OscConfig+0x280>)
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	4a26      	ldr	r2, [pc, #152]	@ (800100c <HAL_RCC_OscConfig+0x280>)
 8000f72:	f023 0301 	bic.w	r3, r3, #1
 8000f76:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000f78:	f7ff fdba 	bl	8000af0 <HAL_GetTick>
 8000f7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000f7e:	e008      	b.n	8000f92 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000f80:	f7ff fdb6 	bl	8000af0 <HAL_GetTick>
 8000f84:	4602      	mov	r2, r0
 8000f86:	693b      	ldr	r3, [r7, #16]
 8000f88:	1ad3      	subs	r3, r2, r3
 8000f8a:	2b02      	cmp	r3, #2
 8000f8c:	d901      	bls.n	8000f92 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8000f8e:	2303      	movs	r3, #3
 8000f90:	e199      	b.n	80012c6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000f92:	4b1e      	ldr	r3, [pc, #120]	@ (800100c <HAL_RCC_OscConfig+0x280>)
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	f003 0302 	and.w	r3, r3, #2
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d1f0      	bne.n	8000f80 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	f003 0308 	and.w	r3, r3, #8
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d038      	beq.n	800101c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	695b      	ldr	r3, [r3, #20]
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d019      	beq.n	8000fe6 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000fb2:	4b16      	ldr	r3, [pc, #88]	@ (800100c <HAL_RCC_OscConfig+0x280>)
 8000fb4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8000fb6:	4a15      	ldr	r2, [pc, #84]	@ (800100c <HAL_RCC_OscConfig+0x280>)
 8000fb8:	f043 0301 	orr.w	r3, r3, #1
 8000fbc:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000fbe:	f7ff fd97 	bl	8000af0 <HAL_GetTick>
 8000fc2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000fc4:	e008      	b.n	8000fd8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000fc6:	f7ff fd93 	bl	8000af0 <HAL_GetTick>
 8000fca:	4602      	mov	r2, r0
 8000fcc:	693b      	ldr	r3, [r7, #16]
 8000fce:	1ad3      	subs	r3, r2, r3
 8000fd0:	2b02      	cmp	r3, #2
 8000fd2:	d901      	bls.n	8000fd8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8000fd4:	2303      	movs	r3, #3
 8000fd6:	e176      	b.n	80012c6 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000fd8:	4b0c      	ldr	r3, [pc, #48]	@ (800100c <HAL_RCC_OscConfig+0x280>)
 8000fda:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8000fdc:	f003 0302 	and.w	r3, r3, #2
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d0f0      	beq.n	8000fc6 <HAL_RCC_OscConfig+0x23a>
 8000fe4:	e01a      	b.n	800101c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000fe6:	4b09      	ldr	r3, [pc, #36]	@ (800100c <HAL_RCC_OscConfig+0x280>)
 8000fe8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8000fea:	4a08      	ldr	r2, [pc, #32]	@ (800100c <HAL_RCC_OscConfig+0x280>)
 8000fec:	f023 0301 	bic.w	r3, r3, #1
 8000ff0:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000ff2:	f7ff fd7d 	bl	8000af0 <HAL_GetTick>
 8000ff6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000ff8:	e00a      	b.n	8001010 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000ffa:	f7ff fd79 	bl	8000af0 <HAL_GetTick>
 8000ffe:	4602      	mov	r2, r0
 8001000:	693b      	ldr	r3, [r7, #16]
 8001002:	1ad3      	subs	r3, r2, r3
 8001004:	2b02      	cmp	r3, #2
 8001006:	d903      	bls.n	8001010 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001008:	2303      	movs	r3, #3
 800100a:	e15c      	b.n	80012c6 <HAL_RCC_OscConfig+0x53a>
 800100c:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001010:	4b91      	ldr	r3, [pc, #580]	@ (8001258 <HAL_RCC_OscConfig+0x4cc>)
 8001012:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001014:	f003 0302 	and.w	r3, r3, #2
 8001018:	2b00      	cmp	r3, #0
 800101a:	d1ee      	bne.n	8000ffa <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	f003 0304 	and.w	r3, r3, #4
 8001024:	2b00      	cmp	r3, #0
 8001026:	f000 80a4 	beq.w	8001172 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800102a:	4b8b      	ldr	r3, [pc, #556]	@ (8001258 <HAL_RCC_OscConfig+0x4cc>)
 800102c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800102e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001032:	2b00      	cmp	r3, #0
 8001034:	d10d      	bne.n	8001052 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8001036:	4b88      	ldr	r3, [pc, #544]	@ (8001258 <HAL_RCC_OscConfig+0x4cc>)
 8001038:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800103a:	4a87      	ldr	r2, [pc, #540]	@ (8001258 <HAL_RCC_OscConfig+0x4cc>)
 800103c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001040:	6413      	str	r3, [r2, #64]	@ 0x40
 8001042:	4b85      	ldr	r3, [pc, #532]	@ (8001258 <HAL_RCC_OscConfig+0x4cc>)
 8001044:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001046:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800104a:	60bb      	str	r3, [r7, #8]
 800104c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800104e:	2301      	movs	r3, #1
 8001050:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001052:	4b82      	ldr	r3, [pc, #520]	@ (800125c <HAL_RCC_OscConfig+0x4d0>)
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800105a:	2b00      	cmp	r3, #0
 800105c:	d118      	bne.n	8001090 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800105e:	4b7f      	ldr	r3, [pc, #508]	@ (800125c <HAL_RCC_OscConfig+0x4d0>)
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	4a7e      	ldr	r2, [pc, #504]	@ (800125c <HAL_RCC_OscConfig+0x4d0>)
 8001064:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001068:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800106a:	f7ff fd41 	bl	8000af0 <HAL_GetTick>
 800106e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001070:	e008      	b.n	8001084 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001072:	f7ff fd3d 	bl	8000af0 <HAL_GetTick>
 8001076:	4602      	mov	r2, r0
 8001078:	693b      	ldr	r3, [r7, #16]
 800107a:	1ad3      	subs	r3, r2, r3
 800107c:	2b64      	cmp	r3, #100	@ 0x64
 800107e:	d901      	bls.n	8001084 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8001080:	2303      	movs	r3, #3
 8001082:	e120      	b.n	80012c6 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001084:	4b75      	ldr	r3, [pc, #468]	@ (800125c <HAL_RCC_OscConfig+0x4d0>)
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800108c:	2b00      	cmp	r3, #0
 800108e:	d0f0      	beq.n	8001072 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	689b      	ldr	r3, [r3, #8]
 8001094:	2b01      	cmp	r3, #1
 8001096:	d106      	bne.n	80010a6 <HAL_RCC_OscConfig+0x31a>
 8001098:	4b6f      	ldr	r3, [pc, #444]	@ (8001258 <HAL_RCC_OscConfig+0x4cc>)
 800109a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800109c:	4a6e      	ldr	r2, [pc, #440]	@ (8001258 <HAL_RCC_OscConfig+0x4cc>)
 800109e:	f043 0301 	orr.w	r3, r3, #1
 80010a2:	6713      	str	r3, [r2, #112]	@ 0x70
 80010a4:	e02d      	b.n	8001102 <HAL_RCC_OscConfig+0x376>
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	689b      	ldr	r3, [r3, #8]
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d10c      	bne.n	80010c8 <HAL_RCC_OscConfig+0x33c>
 80010ae:	4b6a      	ldr	r3, [pc, #424]	@ (8001258 <HAL_RCC_OscConfig+0x4cc>)
 80010b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80010b2:	4a69      	ldr	r2, [pc, #420]	@ (8001258 <HAL_RCC_OscConfig+0x4cc>)
 80010b4:	f023 0301 	bic.w	r3, r3, #1
 80010b8:	6713      	str	r3, [r2, #112]	@ 0x70
 80010ba:	4b67      	ldr	r3, [pc, #412]	@ (8001258 <HAL_RCC_OscConfig+0x4cc>)
 80010bc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80010be:	4a66      	ldr	r2, [pc, #408]	@ (8001258 <HAL_RCC_OscConfig+0x4cc>)
 80010c0:	f023 0304 	bic.w	r3, r3, #4
 80010c4:	6713      	str	r3, [r2, #112]	@ 0x70
 80010c6:	e01c      	b.n	8001102 <HAL_RCC_OscConfig+0x376>
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	689b      	ldr	r3, [r3, #8]
 80010cc:	2b05      	cmp	r3, #5
 80010ce:	d10c      	bne.n	80010ea <HAL_RCC_OscConfig+0x35e>
 80010d0:	4b61      	ldr	r3, [pc, #388]	@ (8001258 <HAL_RCC_OscConfig+0x4cc>)
 80010d2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80010d4:	4a60      	ldr	r2, [pc, #384]	@ (8001258 <HAL_RCC_OscConfig+0x4cc>)
 80010d6:	f043 0304 	orr.w	r3, r3, #4
 80010da:	6713      	str	r3, [r2, #112]	@ 0x70
 80010dc:	4b5e      	ldr	r3, [pc, #376]	@ (8001258 <HAL_RCC_OscConfig+0x4cc>)
 80010de:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80010e0:	4a5d      	ldr	r2, [pc, #372]	@ (8001258 <HAL_RCC_OscConfig+0x4cc>)
 80010e2:	f043 0301 	orr.w	r3, r3, #1
 80010e6:	6713      	str	r3, [r2, #112]	@ 0x70
 80010e8:	e00b      	b.n	8001102 <HAL_RCC_OscConfig+0x376>
 80010ea:	4b5b      	ldr	r3, [pc, #364]	@ (8001258 <HAL_RCC_OscConfig+0x4cc>)
 80010ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80010ee:	4a5a      	ldr	r2, [pc, #360]	@ (8001258 <HAL_RCC_OscConfig+0x4cc>)
 80010f0:	f023 0301 	bic.w	r3, r3, #1
 80010f4:	6713      	str	r3, [r2, #112]	@ 0x70
 80010f6:	4b58      	ldr	r3, [pc, #352]	@ (8001258 <HAL_RCC_OscConfig+0x4cc>)
 80010f8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80010fa:	4a57      	ldr	r2, [pc, #348]	@ (8001258 <HAL_RCC_OscConfig+0x4cc>)
 80010fc:	f023 0304 	bic.w	r3, r3, #4
 8001100:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	689b      	ldr	r3, [r3, #8]
 8001106:	2b00      	cmp	r3, #0
 8001108:	d015      	beq.n	8001136 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800110a:	f7ff fcf1 	bl	8000af0 <HAL_GetTick>
 800110e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001110:	e00a      	b.n	8001128 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001112:	f7ff fced 	bl	8000af0 <HAL_GetTick>
 8001116:	4602      	mov	r2, r0
 8001118:	693b      	ldr	r3, [r7, #16]
 800111a:	1ad3      	subs	r3, r2, r3
 800111c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001120:	4293      	cmp	r3, r2
 8001122:	d901      	bls.n	8001128 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8001124:	2303      	movs	r3, #3
 8001126:	e0ce      	b.n	80012c6 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001128:	4b4b      	ldr	r3, [pc, #300]	@ (8001258 <HAL_RCC_OscConfig+0x4cc>)
 800112a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800112c:	f003 0302 	and.w	r3, r3, #2
 8001130:	2b00      	cmp	r3, #0
 8001132:	d0ee      	beq.n	8001112 <HAL_RCC_OscConfig+0x386>
 8001134:	e014      	b.n	8001160 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001136:	f7ff fcdb 	bl	8000af0 <HAL_GetTick>
 800113a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800113c:	e00a      	b.n	8001154 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800113e:	f7ff fcd7 	bl	8000af0 <HAL_GetTick>
 8001142:	4602      	mov	r2, r0
 8001144:	693b      	ldr	r3, [r7, #16]
 8001146:	1ad3      	subs	r3, r2, r3
 8001148:	f241 3288 	movw	r2, #5000	@ 0x1388
 800114c:	4293      	cmp	r3, r2
 800114e:	d901      	bls.n	8001154 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8001150:	2303      	movs	r3, #3
 8001152:	e0b8      	b.n	80012c6 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001154:	4b40      	ldr	r3, [pc, #256]	@ (8001258 <HAL_RCC_OscConfig+0x4cc>)
 8001156:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001158:	f003 0302 	and.w	r3, r3, #2
 800115c:	2b00      	cmp	r3, #0
 800115e:	d1ee      	bne.n	800113e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001160:	7dfb      	ldrb	r3, [r7, #23]
 8001162:	2b01      	cmp	r3, #1
 8001164:	d105      	bne.n	8001172 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001166:	4b3c      	ldr	r3, [pc, #240]	@ (8001258 <HAL_RCC_OscConfig+0x4cc>)
 8001168:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800116a:	4a3b      	ldr	r2, [pc, #236]	@ (8001258 <HAL_RCC_OscConfig+0x4cc>)
 800116c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001170:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	699b      	ldr	r3, [r3, #24]
 8001176:	2b00      	cmp	r3, #0
 8001178:	f000 80a4 	beq.w	80012c4 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800117c:	4b36      	ldr	r3, [pc, #216]	@ (8001258 <HAL_RCC_OscConfig+0x4cc>)
 800117e:	689b      	ldr	r3, [r3, #8]
 8001180:	f003 030c 	and.w	r3, r3, #12
 8001184:	2b08      	cmp	r3, #8
 8001186:	d06b      	beq.n	8001260 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	699b      	ldr	r3, [r3, #24]
 800118c:	2b02      	cmp	r3, #2
 800118e:	d149      	bne.n	8001224 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001190:	4b31      	ldr	r3, [pc, #196]	@ (8001258 <HAL_RCC_OscConfig+0x4cc>)
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	4a30      	ldr	r2, [pc, #192]	@ (8001258 <HAL_RCC_OscConfig+0x4cc>)
 8001196:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800119a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800119c:	f7ff fca8 	bl	8000af0 <HAL_GetTick>
 80011a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80011a2:	e008      	b.n	80011b6 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80011a4:	f7ff fca4 	bl	8000af0 <HAL_GetTick>
 80011a8:	4602      	mov	r2, r0
 80011aa:	693b      	ldr	r3, [r7, #16]
 80011ac:	1ad3      	subs	r3, r2, r3
 80011ae:	2b02      	cmp	r3, #2
 80011b0:	d901      	bls.n	80011b6 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80011b2:	2303      	movs	r3, #3
 80011b4:	e087      	b.n	80012c6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80011b6:	4b28      	ldr	r3, [pc, #160]	@ (8001258 <HAL_RCC_OscConfig+0x4cc>)
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d1f0      	bne.n	80011a4 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	69da      	ldr	r2, [r3, #28]
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	6a1b      	ldr	r3, [r3, #32]
 80011ca:	431a      	orrs	r2, r3
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80011d0:	019b      	lsls	r3, r3, #6
 80011d2:	431a      	orrs	r2, r3
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80011d8:	085b      	lsrs	r3, r3, #1
 80011da:	3b01      	subs	r3, #1
 80011dc:	041b      	lsls	r3, r3, #16
 80011de:	431a      	orrs	r2, r3
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80011e4:	061b      	lsls	r3, r3, #24
 80011e6:	4313      	orrs	r3, r2
 80011e8:	4a1b      	ldr	r2, [pc, #108]	@ (8001258 <HAL_RCC_OscConfig+0x4cc>)
 80011ea:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80011ee:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80011f0:	4b19      	ldr	r3, [pc, #100]	@ (8001258 <HAL_RCC_OscConfig+0x4cc>)
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	4a18      	ldr	r2, [pc, #96]	@ (8001258 <HAL_RCC_OscConfig+0x4cc>)
 80011f6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80011fa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80011fc:	f7ff fc78 	bl	8000af0 <HAL_GetTick>
 8001200:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001202:	e008      	b.n	8001216 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001204:	f7ff fc74 	bl	8000af0 <HAL_GetTick>
 8001208:	4602      	mov	r2, r0
 800120a:	693b      	ldr	r3, [r7, #16]
 800120c:	1ad3      	subs	r3, r2, r3
 800120e:	2b02      	cmp	r3, #2
 8001210:	d901      	bls.n	8001216 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8001212:	2303      	movs	r3, #3
 8001214:	e057      	b.n	80012c6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001216:	4b10      	ldr	r3, [pc, #64]	@ (8001258 <HAL_RCC_OscConfig+0x4cc>)
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800121e:	2b00      	cmp	r3, #0
 8001220:	d0f0      	beq.n	8001204 <HAL_RCC_OscConfig+0x478>
 8001222:	e04f      	b.n	80012c4 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001224:	4b0c      	ldr	r3, [pc, #48]	@ (8001258 <HAL_RCC_OscConfig+0x4cc>)
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	4a0b      	ldr	r2, [pc, #44]	@ (8001258 <HAL_RCC_OscConfig+0x4cc>)
 800122a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800122e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001230:	f7ff fc5e 	bl	8000af0 <HAL_GetTick>
 8001234:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001236:	e008      	b.n	800124a <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001238:	f7ff fc5a 	bl	8000af0 <HAL_GetTick>
 800123c:	4602      	mov	r2, r0
 800123e:	693b      	ldr	r3, [r7, #16]
 8001240:	1ad3      	subs	r3, r2, r3
 8001242:	2b02      	cmp	r3, #2
 8001244:	d901      	bls.n	800124a <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8001246:	2303      	movs	r3, #3
 8001248:	e03d      	b.n	80012c6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800124a:	4b03      	ldr	r3, [pc, #12]	@ (8001258 <HAL_RCC_OscConfig+0x4cc>)
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001252:	2b00      	cmp	r3, #0
 8001254:	d1f0      	bne.n	8001238 <HAL_RCC_OscConfig+0x4ac>
 8001256:	e035      	b.n	80012c4 <HAL_RCC_OscConfig+0x538>
 8001258:	40023800 	.word	0x40023800
 800125c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8001260:	4b1b      	ldr	r3, [pc, #108]	@ (80012d0 <HAL_RCC_OscConfig+0x544>)
 8001262:	685b      	ldr	r3, [r3, #4]
 8001264:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	699b      	ldr	r3, [r3, #24]
 800126a:	2b01      	cmp	r3, #1
 800126c:	d028      	beq.n	80012c0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800126e:	68fb      	ldr	r3, [r7, #12]
 8001270:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001278:	429a      	cmp	r2, r3
 800127a:	d121      	bne.n	80012c0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800127c:	68fb      	ldr	r3, [r7, #12]
 800127e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001286:	429a      	cmp	r2, r3
 8001288:	d11a      	bne.n	80012c0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800128a:	68fa      	ldr	r2, [r7, #12]
 800128c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001290:	4013      	ands	r3, r2
 8001292:	687a      	ldr	r2, [r7, #4]
 8001294:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001296:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001298:	4293      	cmp	r3, r2
 800129a:	d111      	bne.n	80012c0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800129c:	68fb      	ldr	r3, [r7, #12]
 800129e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80012a6:	085b      	lsrs	r3, r3, #1
 80012a8:	3b01      	subs	r3, #1
 80012aa:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80012ac:	429a      	cmp	r2, r3
 80012ae:	d107      	bne.n	80012c0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80012b0:	68fb      	ldr	r3, [r7, #12]
 80012b2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80012ba:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80012bc:	429a      	cmp	r2, r3
 80012be:	d001      	beq.n	80012c4 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 80012c0:	2301      	movs	r3, #1
 80012c2:	e000      	b.n	80012c6 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 80012c4:	2300      	movs	r3, #0
}
 80012c6:	4618      	mov	r0, r3
 80012c8:	3718      	adds	r7, #24
 80012ca:	46bd      	mov	sp, r7
 80012cc:	bd80      	pop	{r7, pc}
 80012ce:	bf00      	nop
 80012d0:	40023800 	.word	0x40023800

080012d4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b084      	sub	sp, #16
 80012d8:	af00      	add	r7, sp, #0
 80012da:	6078      	str	r0, [r7, #4]
 80012dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80012de:	2300      	movs	r3, #0
 80012e0:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d101      	bne.n	80012ec <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80012e8:	2301      	movs	r3, #1
 80012ea:	e0d0      	b.n	800148e <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80012ec:	4b6a      	ldr	r3, [pc, #424]	@ (8001498 <HAL_RCC_ClockConfig+0x1c4>)
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	f003 030f 	and.w	r3, r3, #15
 80012f4:	683a      	ldr	r2, [r7, #0]
 80012f6:	429a      	cmp	r2, r3
 80012f8:	d910      	bls.n	800131c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80012fa:	4b67      	ldr	r3, [pc, #412]	@ (8001498 <HAL_RCC_ClockConfig+0x1c4>)
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	f023 020f 	bic.w	r2, r3, #15
 8001302:	4965      	ldr	r1, [pc, #404]	@ (8001498 <HAL_RCC_ClockConfig+0x1c4>)
 8001304:	683b      	ldr	r3, [r7, #0]
 8001306:	4313      	orrs	r3, r2
 8001308:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800130a:	4b63      	ldr	r3, [pc, #396]	@ (8001498 <HAL_RCC_ClockConfig+0x1c4>)
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	f003 030f 	and.w	r3, r3, #15
 8001312:	683a      	ldr	r2, [r7, #0]
 8001314:	429a      	cmp	r2, r3
 8001316:	d001      	beq.n	800131c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001318:	2301      	movs	r3, #1
 800131a:	e0b8      	b.n	800148e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	f003 0302 	and.w	r3, r3, #2
 8001324:	2b00      	cmp	r3, #0
 8001326:	d020      	beq.n	800136a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	f003 0304 	and.w	r3, r3, #4
 8001330:	2b00      	cmp	r3, #0
 8001332:	d005      	beq.n	8001340 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001334:	4b59      	ldr	r3, [pc, #356]	@ (800149c <HAL_RCC_ClockConfig+0x1c8>)
 8001336:	689b      	ldr	r3, [r3, #8]
 8001338:	4a58      	ldr	r2, [pc, #352]	@ (800149c <HAL_RCC_ClockConfig+0x1c8>)
 800133a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800133e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	f003 0308 	and.w	r3, r3, #8
 8001348:	2b00      	cmp	r3, #0
 800134a:	d005      	beq.n	8001358 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800134c:	4b53      	ldr	r3, [pc, #332]	@ (800149c <HAL_RCC_ClockConfig+0x1c8>)
 800134e:	689b      	ldr	r3, [r3, #8]
 8001350:	4a52      	ldr	r2, [pc, #328]	@ (800149c <HAL_RCC_ClockConfig+0x1c8>)
 8001352:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001356:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001358:	4b50      	ldr	r3, [pc, #320]	@ (800149c <HAL_RCC_ClockConfig+0x1c8>)
 800135a:	689b      	ldr	r3, [r3, #8]
 800135c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	689b      	ldr	r3, [r3, #8]
 8001364:	494d      	ldr	r1, [pc, #308]	@ (800149c <HAL_RCC_ClockConfig+0x1c8>)
 8001366:	4313      	orrs	r3, r2
 8001368:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	f003 0301 	and.w	r3, r3, #1
 8001372:	2b00      	cmp	r3, #0
 8001374:	d040      	beq.n	80013f8 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	685b      	ldr	r3, [r3, #4]
 800137a:	2b01      	cmp	r3, #1
 800137c:	d107      	bne.n	800138e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800137e:	4b47      	ldr	r3, [pc, #284]	@ (800149c <HAL_RCC_ClockConfig+0x1c8>)
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001386:	2b00      	cmp	r3, #0
 8001388:	d115      	bne.n	80013b6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800138a:	2301      	movs	r3, #1
 800138c:	e07f      	b.n	800148e <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	685b      	ldr	r3, [r3, #4]
 8001392:	2b02      	cmp	r3, #2
 8001394:	d107      	bne.n	80013a6 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001396:	4b41      	ldr	r3, [pc, #260]	@ (800149c <HAL_RCC_ClockConfig+0x1c8>)
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d109      	bne.n	80013b6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80013a2:	2301      	movs	r3, #1
 80013a4:	e073      	b.n	800148e <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013a6:	4b3d      	ldr	r3, [pc, #244]	@ (800149c <HAL_RCC_ClockConfig+0x1c8>)
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	f003 0302 	and.w	r3, r3, #2
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d101      	bne.n	80013b6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80013b2:	2301      	movs	r3, #1
 80013b4:	e06b      	b.n	800148e <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80013b6:	4b39      	ldr	r3, [pc, #228]	@ (800149c <HAL_RCC_ClockConfig+0x1c8>)
 80013b8:	689b      	ldr	r3, [r3, #8]
 80013ba:	f023 0203 	bic.w	r2, r3, #3
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	685b      	ldr	r3, [r3, #4]
 80013c2:	4936      	ldr	r1, [pc, #216]	@ (800149c <HAL_RCC_ClockConfig+0x1c8>)
 80013c4:	4313      	orrs	r3, r2
 80013c6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80013c8:	f7ff fb92 	bl	8000af0 <HAL_GetTick>
 80013cc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80013ce:	e00a      	b.n	80013e6 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80013d0:	f7ff fb8e 	bl	8000af0 <HAL_GetTick>
 80013d4:	4602      	mov	r2, r0
 80013d6:	68fb      	ldr	r3, [r7, #12]
 80013d8:	1ad3      	subs	r3, r2, r3
 80013da:	f241 3288 	movw	r2, #5000	@ 0x1388
 80013de:	4293      	cmp	r3, r2
 80013e0:	d901      	bls.n	80013e6 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80013e2:	2303      	movs	r3, #3
 80013e4:	e053      	b.n	800148e <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80013e6:	4b2d      	ldr	r3, [pc, #180]	@ (800149c <HAL_RCC_ClockConfig+0x1c8>)
 80013e8:	689b      	ldr	r3, [r3, #8]
 80013ea:	f003 020c 	and.w	r2, r3, #12
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	685b      	ldr	r3, [r3, #4]
 80013f2:	009b      	lsls	r3, r3, #2
 80013f4:	429a      	cmp	r2, r3
 80013f6:	d1eb      	bne.n	80013d0 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80013f8:	4b27      	ldr	r3, [pc, #156]	@ (8001498 <HAL_RCC_ClockConfig+0x1c4>)
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	f003 030f 	and.w	r3, r3, #15
 8001400:	683a      	ldr	r2, [r7, #0]
 8001402:	429a      	cmp	r2, r3
 8001404:	d210      	bcs.n	8001428 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001406:	4b24      	ldr	r3, [pc, #144]	@ (8001498 <HAL_RCC_ClockConfig+0x1c4>)
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	f023 020f 	bic.w	r2, r3, #15
 800140e:	4922      	ldr	r1, [pc, #136]	@ (8001498 <HAL_RCC_ClockConfig+0x1c4>)
 8001410:	683b      	ldr	r3, [r7, #0]
 8001412:	4313      	orrs	r3, r2
 8001414:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001416:	4b20      	ldr	r3, [pc, #128]	@ (8001498 <HAL_RCC_ClockConfig+0x1c4>)
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	f003 030f 	and.w	r3, r3, #15
 800141e:	683a      	ldr	r2, [r7, #0]
 8001420:	429a      	cmp	r2, r3
 8001422:	d001      	beq.n	8001428 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8001424:	2301      	movs	r3, #1
 8001426:	e032      	b.n	800148e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	f003 0304 	and.w	r3, r3, #4
 8001430:	2b00      	cmp	r3, #0
 8001432:	d008      	beq.n	8001446 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001434:	4b19      	ldr	r3, [pc, #100]	@ (800149c <HAL_RCC_ClockConfig+0x1c8>)
 8001436:	689b      	ldr	r3, [r3, #8]
 8001438:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	68db      	ldr	r3, [r3, #12]
 8001440:	4916      	ldr	r1, [pc, #88]	@ (800149c <HAL_RCC_ClockConfig+0x1c8>)
 8001442:	4313      	orrs	r3, r2
 8001444:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	f003 0308 	and.w	r3, r3, #8
 800144e:	2b00      	cmp	r3, #0
 8001450:	d009      	beq.n	8001466 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001452:	4b12      	ldr	r3, [pc, #72]	@ (800149c <HAL_RCC_ClockConfig+0x1c8>)
 8001454:	689b      	ldr	r3, [r3, #8]
 8001456:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	691b      	ldr	r3, [r3, #16]
 800145e:	00db      	lsls	r3, r3, #3
 8001460:	490e      	ldr	r1, [pc, #56]	@ (800149c <HAL_RCC_ClockConfig+0x1c8>)
 8001462:	4313      	orrs	r3, r2
 8001464:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001466:	f000 f821 	bl	80014ac <HAL_RCC_GetSysClockFreq>
 800146a:	4602      	mov	r2, r0
 800146c:	4b0b      	ldr	r3, [pc, #44]	@ (800149c <HAL_RCC_ClockConfig+0x1c8>)
 800146e:	689b      	ldr	r3, [r3, #8]
 8001470:	091b      	lsrs	r3, r3, #4
 8001472:	f003 030f 	and.w	r3, r3, #15
 8001476:	490a      	ldr	r1, [pc, #40]	@ (80014a0 <HAL_RCC_ClockConfig+0x1cc>)
 8001478:	5ccb      	ldrb	r3, [r1, r3]
 800147a:	fa22 f303 	lsr.w	r3, r2, r3
 800147e:	4a09      	ldr	r2, [pc, #36]	@ (80014a4 <HAL_RCC_ClockConfig+0x1d0>)
 8001480:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001482:	4b09      	ldr	r3, [pc, #36]	@ (80014a8 <HAL_RCC_ClockConfig+0x1d4>)
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	4618      	mov	r0, r3
 8001488:	f7ff f972 	bl	8000770 <HAL_InitTick>

  return HAL_OK;
 800148c:	2300      	movs	r3, #0
}
 800148e:	4618      	mov	r0, r3
 8001490:	3710      	adds	r7, #16
 8001492:	46bd      	mov	sp, r7
 8001494:	bd80      	pop	{r7, pc}
 8001496:	bf00      	nop
 8001498:	40023c00 	.word	0x40023c00
 800149c:	40023800 	.word	0x40023800
 80014a0:	08004c8c 	.word	0x08004c8c
 80014a4:	20000000 	.word	0x20000000
 80014a8:	20000004 	.word	0x20000004

080014ac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80014ac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80014b0:	b090      	sub	sp, #64	@ 0x40
 80014b2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80014b4:	2300      	movs	r3, #0
 80014b6:	637b      	str	r3, [r7, #52]	@ 0x34
 80014b8:	2300      	movs	r3, #0
 80014ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80014bc:	2300      	movs	r3, #0
 80014be:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0;
 80014c0:	2300      	movs	r3, #0
 80014c2:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80014c4:	4b59      	ldr	r3, [pc, #356]	@ (800162c <HAL_RCC_GetSysClockFreq+0x180>)
 80014c6:	689b      	ldr	r3, [r3, #8]
 80014c8:	f003 030c 	and.w	r3, r3, #12
 80014cc:	2b08      	cmp	r3, #8
 80014ce:	d00d      	beq.n	80014ec <HAL_RCC_GetSysClockFreq+0x40>
 80014d0:	2b08      	cmp	r3, #8
 80014d2:	f200 80a1 	bhi.w	8001618 <HAL_RCC_GetSysClockFreq+0x16c>
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d002      	beq.n	80014e0 <HAL_RCC_GetSysClockFreq+0x34>
 80014da:	2b04      	cmp	r3, #4
 80014dc:	d003      	beq.n	80014e6 <HAL_RCC_GetSysClockFreq+0x3a>
 80014de:	e09b      	b.n	8001618 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80014e0:	4b53      	ldr	r3, [pc, #332]	@ (8001630 <HAL_RCC_GetSysClockFreq+0x184>)
 80014e2:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80014e4:	e09b      	b.n	800161e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80014e6:	4b53      	ldr	r3, [pc, #332]	@ (8001634 <HAL_RCC_GetSysClockFreq+0x188>)
 80014e8:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80014ea:	e098      	b.n	800161e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80014ec:	4b4f      	ldr	r3, [pc, #316]	@ (800162c <HAL_RCC_GetSysClockFreq+0x180>)
 80014ee:	685b      	ldr	r3, [r3, #4]
 80014f0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80014f4:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80014f6:	4b4d      	ldr	r3, [pc, #308]	@ (800162c <HAL_RCC_GetSysClockFreq+0x180>)
 80014f8:	685b      	ldr	r3, [r3, #4]
 80014fa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d028      	beq.n	8001554 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001502:	4b4a      	ldr	r3, [pc, #296]	@ (800162c <HAL_RCC_GetSysClockFreq+0x180>)
 8001504:	685b      	ldr	r3, [r3, #4]
 8001506:	099b      	lsrs	r3, r3, #6
 8001508:	2200      	movs	r2, #0
 800150a:	623b      	str	r3, [r7, #32]
 800150c:	627a      	str	r2, [r7, #36]	@ 0x24
 800150e:	6a3b      	ldr	r3, [r7, #32]
 8001510:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001514:	2100      	movs	r1, #0
 8001516:	4b47      	ldr	r3, [pc, #284]	@ (8001634 <HAL_RCC_GetSysClockFreq+0x188>)
 8001518:	fb03 f201 	mul.w	r2, r3, r1
 800151c:	2300      	movs	r3, #0
 800151e:	fb00 f303 	mul.w	r3, r0, r3
 8001522:	4413      	add	r3, r2
 8001524:	4a43      	ldr	r2, [pc, #268]	@ (8001634 <HAL_RCC_GetSysClockFreq+0x188>)
 8001526:	fba0 1202 	umull	r1, r2, r0, r2
 800152a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800152c:	460a      	mov	r2, r1
 800152e:	62ba      	str	r2, [r7, #40]	@ 0x28
 8001530:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001532:	4413      	add	r3, r2
 8001534:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001536:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001538:	2200      	movs	r2, #0
 800153a:	61bb      	str	r3, [r7, #24]
 800153c:	61fa      	str	r2, [r7, #28]
 800153e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001542:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8001546:	f7fe fe6b 	bl	8000220 <__aeabi_uldivmod>
 800154a:	4602      	mov	r2, r0
 800154c:	460b      	mov	r3, r1
 800154e:	4613      	mov	r3, r2
 8001550:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001552:	e053      	b.n	80015fc <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001554:	4b35      	ldr	r3, [pc, #212]	@ (800162c <HAL_RCC_GetSysClockFreq+0x180>)
 8001556:	685b      	ldr	r3, [r3, #4]
 8001558:	099b      	lsrs	r3, r3, #6
 800155a:	2200      	movs	r2, #0
 800155c:	613b      	str	r3, [r7, #16]
 800155e:	617a      	str	r2, [r7, #20]
 8001560:	693b      	ldr	r3, [r7, #16]
 8001562:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8001566:	f04f 0b00 	mov.w	fp, #0
 800156a:	4652      	mov	r2, sl
 800156c:	465b      	mov	r3, fp
 800156e:	f04f 0000 	mov.w	r0, #0
 8001572:	f04f 0100 	mov.w	r1, #0
 8001576:	0159      	lsls	r1, r3, #5
 8001578:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800157c:	0150      	lsls	r0, r2, #5
 800157e:	4602      	mov	r2, r0
 8001580:	460b      	mov	r3, r1
 8001582:	ebb2 080a 	subs.w	r8, r2, sl
 8001586:	eb63 090b 	sbc.w	r9, r3, fp
 800158a:	f04f 0200 	mov.w	r2, #0
 800158e:	f04f 0300 	mov.w	r3, #0
 8001592:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8001596:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800159a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800159e:	ebb2 0408 	subs.w	r4, r2, r8
 80015a2:	eb63 0509 	sbc.w	r5, r3, r9
 80015a6:	f04f 0200 	mov.w	r2, #0
 80015aa:	f04f 0300 	mov.w	r3, #0
 80015ae:	00eb      	lsls	r3, r5, #3
 80015b0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80015b4:	00e2      	lsls	r2, r4, #3
 80015b6:	4614      	mov	r4, r2
 80015b8:	461d      	mov	r5, r3
 80015ba:	eb14 030a 	adds.w	r3, r4, sl
 80015be:	603b      	str	r3, [r7, #0]
 80015c0:	eb45 030b 	adc.w	r3, r5, fp
 80015c4:	607b      	str	r3, [r7, #4]
 80015c6:	f04f 0200 	mov.w	r2, #0
 80015ca:	f04f 0300 	mov.w	r3, #0
 80015ce:	e9d7 4500 	ldrd	r4, r5, [r7]
 80015d2:	4629      	mov	r1, r5
 80015d4:	028b      	lsls	r3, r1, #10
 80015d6:	4621      	mov	r1, r4
 80015d8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80015dc:	4621      	mov	r1, r4
 80015de:	028a      	lsls	r2, r1, #10
 80015e0:	4610      	mov	r0, r2
 80015e2:	4619      	mov	r1, r3
 80015e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80015e6:	2200      	movs	r2, #0
 80015e8:	60bb      	str	r3, [r7, #8]
 80015ea:	60fa      	str	r2, [r7, #12]
 80015ec:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80015f0:	f7fe fe16 	bl	8000220 <__aeabi_uldivmod>
 80015f4:	4602      	mov	r2, r0
 80015f6:	460b      	mov	r3, r1
 80015f8:	4613      	mov	r3, r2
 80015fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80015fc:	4b0b      	ldr	r3, [pc, #44]	@ (800162c <HAL_RCC_GetSysClockFreq+0x180>)
 80015fe:	685b      	ldr	r3, [r3, #4]
 8001600:	0c1b      	lsrs	r3, r3, #16
 8001602:	f003 0303 	and.w	r3, r3, #3
 8001606:	3301      	adds	r3, #1
 8001608:	005b      	lsls	r3, r3, #1
 800160a:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 800160c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800160e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001610:	fbb2 f3f3 	udiv	r3, r2, r3
 8001614:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001616:	e002      	b.n	800161e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001618:	4b05      	ldr	r3, [pc, #20]	@ (8001630 <HAL_RCC_GetSysClockFreq+0x184>)
 800161a:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800161c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800161e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8001620:	4618      	mov	r0, r3
 8001622:	3740      	adds	r7, #64	@ 0x40
 8001624:	46bd      	mov	sp, r7
 8001626:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800162a:	bf00      	nop
 800162c:	40023800 	.word	0x40023800
 8001630:	00f42400 	.word	0x00f42400
 8001634:	017d7840 	.word	0x017d7840

08001638 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001638:	b480      	push	{r7}
 800163a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800163c:	4b03      	ldr	r3, [pc, #12]	@ (800164c <HAL_RCC_GetHCLKFreq+0x14>)
 800163e:	681b      	ldr	r3, [r3, #0]
}
 8001640:	4618      	mov	r0, r3
 8001642:	46bd      	mov	sp, r7
 8001644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001648:	4770      	bx	lr
 800164a:	bf00      	nop
 800164c:	20000000 	.word	0x20000000

08001650 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001654:	f7ff fff0 	bl	8001638 <HAL_RCC_GetHCLKFreq>
 8001658:	4602      	mov	r2, r0
 800165a:	4b05      	ldr	r3, [pc, #20]	@ (8001670 <HAL_RCC_GetPCLK2Freq+0x20>)
 800165c:	689b      	ldr	r3, [r3, #8]
 800165e:	0b5b      	lsrs	r3, r3, #13
 8001660:	f003 0307 	and.w	r3, r3, #7
 8001664:	4903      	ldr	r1, [pc, #12]	@ (8001674 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001666:	5ccb      	ldrb	r3, [r1, r3]
 8001668:	fa22 f303 	lsr.w	r3, r2, r3
}
 800166c:	4618      	mov	r0, r3
 800166e:	bd80      	pop	{r7, pc}
 8001670:	40023800 	.word	0x40023800
 8001674:	08004c9c 	.word	0x08004c9c

08001678 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001678:	b480      	push	{r7}
 800167a:	b083      	sub	sp, #12
 800167c:	af00      	add	r7, sp, #0
 800167e:	6078      	str	r0, [r7, #4]
 8001680:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	220f      	movs	r2, #15
 8001686:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001688:	4b12      	ldr	r3, [pc, #72]	@ (80016d4 <HAL_RCC_GetClockConfig+0x5c>)
 800168a:	689b      	ldr	r3, [r3, #8]
 800168c:	f003 0203 	and.w	r2, r3, #3
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001694:	4b0f      	ldr	r3, [pc, #60]	@ (80016d4 <HAL_RCC_GetClockConfig+0x5c>)
 8001696:	689b      	ldr	r3, [r3, #8]
 8001698:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80016a0:	4b0c      	ldr	r3, [pc, #48]	@ (80016d4 <HAL_RCC_GetClockConfig+0x5c>)
 80016a2:	689b      	ldr	r3, [r3, #8]
 80016a4:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80016ac:	4b09      	ldr	r3, [pc, #36]	@ (80016d4 <HAL_RCC_GetClockConfig+0x5c>)
 80016ae:	689b      	ldr	r3, [r3, #8]
 80016b0:	08db      	lsrs	r3, r3, #3
 80016b2:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80016ba:	4b07      	ldr	r3, [pc, #28]	@ (80016d8 <HAL_RCC_GetClockConfig+0x60>)
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	f003 020f 	and.w	r2, r3, #15
 80016c2:	683b      	ldr	r3, [r7, #0]
 80016c4:	601a      	str	r2, [r3, #0]
}
 80016c6:	bf00      	nop
 80016c8:	370c      	adds	r7, #12
 80016ca:	46bd      	mov	sp, r7
 80016cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d0:	4770      	bx	lr
 80016d2:	bf00      	nop
 80016d4:	40023800 	.word	0x40023800
 80016d8:	40023c00 	.word	0x40023c00

080016dc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	b082      	sub	sp, #8
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d101      	bne.n	80016ee <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80016ea:	2301      	movs	r3, #1
 80016ec:	e049      	b.n	8001782 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80016f4:	b2db      	uxtb	r3, r3
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d106      	bne.n	8001708 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	2200      	movs	r2, #0
 80016fe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001702:	6878      	ldr	r0, [r7, #4]
 8001704:	f000 f841 	bl	800178a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	2202      	movs	r2, #2
 800170c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681a      	ldr	r2, [r3, #0]
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	3304      	adds	r3, #4
 8001718:	4619      	mov	r1, r3
 800171a:	4610      	mov	r0, r2
 800171c:	f000 f9e8 	bl	8001af0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	2201      	movs	r2, #1
 8001724:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	2201      	movs	r2, #1
 800172c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	2201      	movs	r2, #1
 8001734:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	2201      	movs	r2, #1
 800173c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	2201      	movs	r2, #1
 8001744:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	2201      	movs	r2, #1
 800174c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	2201      	movs	r2, #1
 8001754:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	2201      	movs	r2, #1
 800175c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	2201      	movs	r2, #1
 8001764:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	2201      	movs	r2, #1
 800176c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	2201      	movs	r2, #1
 8001774:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	2201      	movs	r2, #1
 800177c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001780:	2300      	movs	r3, #0
}
 8001782:	4618      	mov	r0, r3
 8001784:	3708      	adds	r7, #8
 8001786:	46bd      	mov	sp, r7
 8001788:	bd80      	pop	{r7, pc}

0800178a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800178a:	b480      	push	{r7}
 800178c:	b083      	sub	sp, #12
 800178e:	af00      	add	r7, sp, #0
 8001790:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001792:	bf00      	nop
 8001794:	370c      	adds	r7, #12
 8001796:	46bd      	mov	sp, r7
 8001798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179c:	4770      	bx	lr
	...

080017a0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80017a0:	b480      	push	{r7}
 80017a2:	b085      	sub	sp, #20
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80017ae:	b2db      	uxtb	r3, r3
 80017b0:	2b01      	cmp	r3, #1
 80017b2:	d001      	beq.n	80017b8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80017b4:	2301      	movs	r3, #1
 80017b6:	e054      	b.n	8001862 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	2202      	movs	r2, #2
 80017bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	68da      	ldr	r2, [r3, #12]
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	f042 0201 	orr.w	r2, r2, #1
 80017ce:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	4a26      	ldr	r2, [pc, #152]	@ (8001870 <HAL_TIM_Base_Start_IT+0xd0>)
 80017d6:	4293      	cmp	r3, r2
 80017d8:	d022      	beq.n	8001820 <HAL_TIM_Base_Start_IT+0x80>
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80017e2:	d01d      	beq.n	8001820 <HAL_TIM_Base_Start_IT+0x80>
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	4a22      	ldr	r2, [pc, #136]	@ (8001874 <HAL_TIM_Base_Start_IT+0xd4>)
 80017ea:	4293      	cmp	r3, r2
 80017ec:	d018      	beq.n	8001820 <HAL_TIM_Base_Start_IT+0x80>
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	4a21      	ldr	r2, [pc, #132]	@ (8001878 <HAL_TIM_Base_Start_IT+0xd8>)
 80017f4:	4293      	cmp	r3, r2
 80017f6:	d013      	beq.n	8001820 <HAL_TIM_Base_Start_IT+0x80>
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	4a1f      	ldr	r2, [pc, #124]	@ (800187c <HAL_TIM_Base_Start_IT+0xdc>)
 80017fe:	4293      	cmp	r3, r2
 8001800:	d00e      	beq.n	8001820 <HAL_TIM_Base_Start_IT+0x80>
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	4a1e      	ldr	r2, [pc, #120]	@ (8001880 <HAL_TIM_Base_Start_IT+0xe0>)
 8001808:	4293      	cmp	r3, r2
 800180a:	d009      	beq.n	8001820 <HAL_TIM_Base_Start_IT+0x80>
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	4a1c      	ldr	r2, [pc, #112]	@ (8001884 <HAL_TIM_Base_Start_IT+0xe4>)
 8001812:	4293      	cmp	r3, r2
 8001814:	d004      	beq.n	8001820 <HAL_TIM_Base_Start_IT+0x80>
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	4a1b      	ldr	r2, [pc, #108]	@ (8001888 <HAL_TIM_Base_Start_IT+0xe8>)
 800181c:	4293      	cmp	r3, r2
 800181e:	d115      	bne.n	800184c <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	689a      	ldr	r2, [r3, #8]
 8001826:	4b19      	ldr	r3, [pc, #100]	@ (800188c <HAL_TIM_Base_Start_IT+0xec>)
 8001828:	4013      	ands	r3, r2
 800182a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	2b06      	cmp	r3, #6
 8001830:	d015      	beq.n	800185e <HAL_TIM_Base_Start_IT+0xbe>
 8001832:	68fb      	ldr	r3, [r7, #12]
 8001834:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001838:	d011      	beq.n	800185e <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	681a      	ldr	r2, [r3, #0]
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	f042 0201 	orr.w	r2, r2, #1
 8001848:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800184a:	e008      	b.n	800185e <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	681a      	ldr	r2, [r3, #0]
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	f042 0201 	orr.w	r2, r2, #1
 800185a:	601a      	str	r2, [r3, #0]
 800185c:	e000      	b.n	8001860 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800185e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8001860:	2300      	movs	r3, #0
}
 8001862:	4618      	mov	r0, r3
 8001864:	3714      	adds	r7, #20
 8001866:	46bd      	mov	sp, r7
 8001868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186c:	4770      	bx	lr
 800186e:	bf00      	nop
 8001870:	40010000 	.word	0x40010000
 8001874:	40000400 	.word	0x40000400
 8001878:	40000800 	.word	0x40000800
 800187c:	40000c00 	.word	0x40000c00
 8001880:	40010400 	.word	0x40010400
 8001884:	40014000 	.word	0x40014000
 8001888:	40001800 	.word	0x40001800
 800188c:	00010007 	.word	0x00010007

08001890 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	b084      	sub	sp, #16
 8001894:	af00      	add	r7, sp, #0
 8001896:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	68db      	ldr	r3, [r3, #12]
 800189e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	691b      	ldr	r3, [r3, #16]
 80018a6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80018a8:	68bb      	ldr	r3, [r7, #8]
 80018aa:	f003 0302 	and.w	r3, r3, #2
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d020      	beq.n	80018f4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	f003 0302 	and.w	r3, r3, #2
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d01b      	beq.n	80018f4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	f06f 0202 	mvn.w	r2, #2
 80018c4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	2201      	movs	r2, #1
 80018ca:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	699b      	ldr	r3, [r3, #24]
 80018d2:	f003 0303 	and.w	r3, r3, #3
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d003      	beq.n	80018e2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80018da:	6878      	ldr	r0, [r7, #4]
 80018dc:	f000 f8e9 	bl	8001ab2 <HAL_TIM_IC_CaptureCallback>
 80018e0:	e005      	b.n	80018ee <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80018e2:	6878      	ldr	r0, [r7, #4]
 80018e4:	f000 f8db 	bl	8001a9e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80018e8:	6878      	ldr	r0, [r7, #4]
 80018ea:	f000 f8ec 	bl	8001ac6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	2200      	movs	r2, #0
 80018f2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80018f4:	68bb      	ldr	r3, [r7, #8]
 80018f6:	f003 0304 	and.w	r3, r3, #4
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d020      	beq.n	8001940 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	f003 0304 	and.w	r3, r3, #4
 8001904:	2b00      	cmp	r3, #0
 8001906:	d01b      	beq.n	8001940 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	f06f 0204 	mvn.w	r2, #4
 8001910:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	2202      	movs	r2, #2
 8001916:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	699b      	ldr	r3, [r3, #24]
 800191e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001922:	2b00      	cmp	r3, #0
 8001924:	d003      	beq.n	800192e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001926:	6878      	ldr	r0, [r7, #4]
 8001928:	f000 f8c3 	bl	8001ab2 <HAL_TIM_IC_CaptureCallback>
 800192c:	e005      	b.n	800193a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800192e:	6878      	ldr	r0, [r7, #4]
 8001930:	f000 f8b5 	bl	8001a9e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001934:	6878      	ldr	r0, [r7, #4]
 8001936:	f000 f8c6 	bl	8001ac6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	2200      	movs	r2, #0
 800193e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8001940:	68bb      	ldr	r3, [r7, #8]
 8001942:	f003 0308 	and.w	r3, r3, #8
 8001946:	2b00      	cmp	r3, #0
 8001948:	d020      	beq.n	800198c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800194a:	68fb      	ldr	r3, [r7, #12]
 800194c:	f003 0308 	and.w	r3, r3, #8
 8001950:	2b00      	cmp	r3, #0
 8001952:	d01b      	beq.n	800198c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	f06f 0208 	mvn.w	r2, #8
 800195c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	2204      	movs	r2, #4
 8001962:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	69db      	ldr	r3, [r3, #28]
 800196a:	f003 0303 	and.w	r3, r3, #3
 800196e:	2b00      	cmp	r3, #0
 8001970:	d003      	beq.n	800197a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001972:	6878      	ldr	r0, [r7, #4]
 8001974:	f000 f89d 	bl	8001ab2 <HAL_TIM_IC_CaptureCallback>
 8001978:	e005      	b.n	8001986 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800197a:	6878      	ldr	r0, [r7, #4]
 800197c:	f000 f88f 	bl	8001a9e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001980:	6878      	ldr	r0, [r7, #4]
 8001982:	f000 f8a0 	bl	8001ac6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	2200      	movs	r2, #0
 800198a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800198c:	68bb      	ldr	r3, [r7, #8]
 800198e:	f003 0310 	and.w	r3, r3, #16
 8001992:	2b00      	cmp	r3, #0
 8001994:	d020      	beq.n	80019d8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	f003 0310 	and.w	r3, r3, #16
 800199c:	2b00      	cmp	r3, #0
 800199e:	d01b      	beq.n	80019d8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	f06f 0210 	mvn.w	r2, #16
 80019a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	2208      	movs	r2, #8
 80019ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	69db      	ldr	r3, [r3, #28]
 80019b6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d003      	beq.n	80019c6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80019be:	6878      	ldr	r0, [r7, #4]
 80019c0:	f000 f877 	bl	8001ab2 <HAL_TIM_IC_CaptureCallback>
 80019c4:	e005      	b.n	80019d2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80019c6:	6878      	ldr	r0, [r7, #4]
 80019c8:	f000 f869 	bl	8001a9e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80019cc:	6878      	ldr	r0, [r7, #4]
 80019ce:	f000 f87a 	bl	8001ac6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	2200      	movs	r2, #0
 80019d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80019d8:	68bb      	ldr	r3, [r7, #8]
 80019da:	f003 0301 	and.w	r3, r3, #1
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d00c      	beq.n	80019fc <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	f003 0301 	and.w	r3, r3, #1
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d007      	beq.n	80019fc <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	f06f 0201 	mvn.w	r2, #1
 80019f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80019f6:	6878      	ldr	r0, [r7, #4]
 80019f8:	f7fe fe7e 	bl	80006f8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80019fc:	68bb      	ldr	r3, [r7, #8]
 80019fe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d104      	bne.n	8001a10 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8001a06:	68bb      	ldr	r3, [r7, #8]
 8001a08:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d00c      	beq.n	8001a2a <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d007      	beq.n	8001a2a <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8001a22:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001a24:	6878      	ldr	r0, [r7, #4]
 8001a26:	f000 f913 	bl	8001c50 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8001a2a:	68bb      	ldr	r3, [r7, #8]
 8001a2c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d00c      	beq.n	8001a4e <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d007      	beq.n	8001a4e <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8001a46:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8001a48:	6878      	ldr	r0, [r7, #4]
 8001a4a:	f000 f90b 	bl	8001c64 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8001a4e:	68bb      	ldr	r3, [r7, #8]
 8001a50:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d00c      	beq.n	8001a72 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d007      	beq.n	8001a72 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8001a6a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001a6c:	6878      	ldr	r0, [r7, #4]
 8001a6e:	f000 f834 	bl	8001ada <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8001a72:	68bb      	ldr	r3, [r7, #8]
 8001a74:	f003 0320 	and.w	r3, r3, #32
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d00c      	beq.n	8001a96 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	f003 0320 	and.w	r3, r3, #32
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d007      	beq.n	8001a96 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	f06f 0220 	mvn.w	r2, #32
 8001a8e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001a90:	6878      	ldr	r0, [r7, #4]
 8001a92:	f000 f8d3 	bl	8001c3c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001a96:	bf00      	nop
 8001a98:	3710      	adds	r7, #16
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	bd80      	pop	{r7, pc}

08001a9e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001a9e:	b480      	push	{r7}
 8001aa0:	b083      	sub	sp, #12
 8001aa2:	af00      	add	r7, sp, #0
 8001aa4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001aa6:	bf00      	nop
 8001aa8:	370c      	adds	r7, #12
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab0:	4770      	bx	lr

08001ab2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001ab2:	b480      	push	{r7}
 8001ab4:	b083      	sub	sp, #12
 8001ab6:	af00      	add	r7, sp, #0
 8001ab8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001aba:	bf00      	nop
 8001abc:	370c      	adds	r7, #12
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac4:	4770      	bx	lr

08001ac6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001ac6:	b480      	push	{r7}
 8001ac8:	b083      	sub	sp, #12
 8001aca:	af00      	add	r7, sp, #0
 8001acc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001ace:	bf00      	nop
 8001ad0:	370c      	adds	r7, #12
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad8:	4770      	bx	lr

08001ada <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001ada:	b480      	push	{r7}
 8001adc:	b083      	sub	sp, #12
 8001ade:	af00      	add	r7, sp, #0
 8001ae0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001ae2:	bf00      	nop
 8001ae4:	370c      	adds	r7, #12
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aec:	4770      	bx	lr
	...

08001af0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8001af0:	b480      	push	{r7}
 8001af2:	b085      	sub	sp, #20
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	6078      	str	r0, [r7, #4]
 8001af8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	4a43      	ldr	r2, [pc, #268]	@ (8001c10 <TIM_Base_SetConfig+0x120>)
 8001b04:	4293      	cmp	r3, r2
 8001b06:	d013      	beq.n	8001b30 <TIM_Base_SetConfig+0x40>
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001b0e:	d00f      	beq.n	8001b30 <TIM_Base_SetConfig+0x40>
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	4a40      	ldr	r2, [pc, #256]	@ (8001c14 <TIM_Base_SetConfig+0x124>)
 8001b14:	4293      	cmp	r3, r2
 8001b16:	d00b      	beq.n	8001b30 <TIM_Base_SetConfig+0x40>
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	4a3f      	ldr	r2, [pc, #252]	@ (8001c18 <TIM_Base_SetConfig+0x128>)
 8001b1c:	4293      	cmp	r3, r2
 8001b1e:	d007      	beq.n	8001b30 <TIM_Base_SetConfig+0x40>
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	4a3e      	ldr	r2, [pc, #248]	@ (8001c1c <TIM_Base_SetConfig+0x12c>)
 8001b24:	4293      	cmp	r3, r2
 8001b26:	d003      	beq.n	8001b30 <TIM_Base_SetConfig+0x40>
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	4a3d      	ldr	r2, [pc, #244]	@ (8001c20 <TIM_Base_SetConfig+0x130>)
 8001b2c:	4293      	cmp	r3, r2
 8001b2e:	d108      	bne.n	8001b42 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001b36:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001b38:	683b      	ldr	r3, [r7, #0]
 8001b3a:	685b      	ldr	r3, [r3, #4]
 8001b3c:	68fa      	ldr	r2, [r7, #12]
 8001b3e:	4313      	orrs	r3, r2
 8001b40:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	4a32      	ldr	r2, [pc, #200]	@ (8001c10 <TIM_Base_SetConfig+0x120>)
 8001b46:	4293      	cmp	r3, r2
 8001b48:	d02b      	beq.n	8001ba2 <TIM_Base_SetConfig+0xb2>
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001b50:	d027      	beq.n	8001ba2 <TIM_Base_SetConfig+0xb2>
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	4a2f      	ldr	r2, [pc, #188]	@ (8001c14 <TIM_Base_SetConfig+0x124>)
 8001b56:	4293      	cmp	r3, r2
 8001b58:	d023      	beq.n	8001ba2 <TIM_Base_SetConfig+0xb2>
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	4a2e      	ldr	r2, [pc, #184]	@ (8001c18 <TIM_Base_SetConfig+0x128>)
 8001b5e:	4293      	cmp	r3, r2
 8001b60:	d01f      	beq.n	8001ba2 <TIM_Base_SetConfig+0xb2>
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	4a2d      	ldr	r2, [pc, #180]	@ (8001c1c <TIM_Base_SetConfig+0x12c>)
 8001b66:	4293      	cmp	r3, r2
 8001b68:	d01b      	beq.n	8001ba2 <TIM_Base_SetConfig+0xb2>
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	4a2c      	ldr	r2, [pc, #176]	@ (8001c20 <TIM_Base_SetConfig+0x130>)
 8001b6e:	4293      	cmp	r3, r2
 8001b70:	d017      	beq.n	8001ba2 <TIM_Base_SetConfig+0xb2>
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	4a2b      	ldr	r2, [pc, #172]	@ (8001c24 <TIM_Base_SetConfig+0x134>)
 8001b76:	4293      	cmp	r3, r2
 8001b78:	d013      	beq.n	8001ba2 <TIM_Base_SetConfig+0xb2>
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	4a2a      	ldr	r2, [pc, #168]	@ (8001c28 <TIM_Base_SetConfig+0x138>)
 8001b7e:	4293      	cmp	r3, r2
 8001b80:	d00f      	beq.n	8001ba2 <TIM_Base_SetConfig+0xb2>
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	4a29      	ldr	r2, [pc, #164]	@ (8001c2c <TIM_Base_SetConfig+0x13c>)
 8001b86:	4293      	cmp	r3, r2
 8001b88:	d00b      	beq.n	8001ba2 <TIM_Base_SetConfig+0xb2>
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	4a28      	ldr	r2, [pc, #160]	@ (8001c30 <TIM_Base_SetConfig+0x140>)
 8001b8e:	4293      	cmp	r3, r2
 8001b90:	d007      	beq.n	8001ba2 <TIM_Base_SetConfig+0xb2>
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	4a27      	ldr	r2, [pc, #156]	@ (8001c34 <TIM_Base_SetConfig+0x144>)
 8001b96:	4293      	cmp	r3, r2
 8001b98:	d003      	beq.n	8001ba2 <TIM_Base_SetConfig+0xb2>
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	4a26      	ldr	r2, [pc, #152]	@ (8001c38 <TIM_Base_SetConfig+0x148>)
 8001b9e:	4293      	cmp	r3, r2
 8001ba0:	d108      	bne.n	8001bb4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001ba8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001baa:	683b      	ldr	r3, [r7, #0]
 8001bac:	68db      	ldr	r3, [r3, #12]
 8001bae:	68fa      	ldr	r2, [r7, #12]
 8001bb0:	4313      	orrs	r3, r2
 8001bb2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8001bba:	683b      	ldr	r3, [r7, #0]
 8001bbc:	695b      	ldr	r3, [r3, #20]
 8001bbe:	4313      	orrs	r3, r2
 8001bc0:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001bc2:	683b      	ldr	r3, [r7, #0]
 8001bc4:	689a      	ldr	r2, [r3, #8]
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001bca:	683b      	ldr	r3, [r7, #0]
 8001bcc:	681a      	ldr	r2, [r3, #0]
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	4a0e      	ldr	r2, [pc, #56]	@ (8001c10 <TIM_Base_SetConfig+0x120>)
 8001bd6:	4293      	cmp	r3, r2
 8001bd8:	d003      	beq.n	8001be2 <TIM_Base_SetConfig+0xf2>
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	4a10      	ldr	r2, [pc, #64]	@ (8001c20 <TIM_Base_SetConfig+0x130>)
 8001bde:	4293      	cmp	r3, r2
 8001be0:	d103      	bne.n	8001bea <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001be2:	683b      	ldr	r3, [r7, #0]
 8001be4:	691a      	ldr	r2, [r3, #16]
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	f043 0204 	orr.w	r2, r3, #4
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	2201      	movs	r2, #1
 8001bfa:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	68fa      	ldr	r2, [r7, #12]
 8001c00:	601a      	str	r2, [r3, #0]
}
 8001c02:	bf00      	nop
 8001c04:	3714      	adds	r7, #20
 8001c06:	46bd      	mov	sp, r7
 8001c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0c:	4770      	bx	lr
 8001c0e:	bf00      	nop
 8001c10:	40010000 	.word	0x40010000
 8001c14:	40000400 	.word	0x40000400
 8001c18:	40000800 	.word	0x40000800
 8001c1c:	40000c00 	.word	0x40000c00
 8001c20:	40010400 	.word	0x40010400
 8001c24:	40014000 	.word	0x40014000
 8001c28:	40014400 	.word	0x40014400
 8001c2c:	40014800 	.word	0x40014800
 8001c30:	40001800 	.word	0x40001800
 8001c34:	40001c00 	.word	0x40001c00
 8001c38:	40002000 	.word	0x40002000

08001c3c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001c3c:	b480      	push	{r7}
 8001c3e:	b083      	sub	sp, #12
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001c44:	bf00      	nop
 8001c46:	370c      	adds	r7, #12
 8001c48:	46bd      	mov	sp, r7
 8001c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4e:	4770      	bx	lr

08001c50 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001c50:	b480      	push	{r7}
 8001c52:	b083      	sub	sp, #12
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001c58:	bf00      	nop
 8001c5a:	370c      	adds	r7, #12
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c62:	4770      	bx	lr

08001c64 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8001c64:	b480      	push	{r7}
 8001c66:	b083      	sub	sp, #12
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8001c6c:	bf00      	nop
 8001c6e:	370c      	adds	r7, #12
 8001c70:	46bd      	mov	sp, r7
 8001c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c76:	4770      	bx	lr

08001c78 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8001c78:	b480      	push	{r7}
 8001c7a:	b083      	sub	sp, #12
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	6078      	str	r0, [r7, #4]
    traceENTER_vListInitialise( pxList );

    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	f103 0208 	add.w	r2, r3, #8
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001c90:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	f103 0208 	add.w	r2, r3, #8
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	f103 0208 	add.w	r2, r3, #8
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	611a      	str	r2, [r3, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	2200      	movs	r2, #0
 8001caa:	601a      	str	r2, [r3, #0]
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );

    traceRETURN_vListInitialise();
}
 8001cac:	bf00      	nop
 8001cae:	370c      	adds	r7, #12
 8001cb0:	46bd      	mov	sp, r7
 8001cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb6:	4770      	bx	lr

08001cb8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8001cb8:	b480      	push	{r7}
 8001cba:	b083      	sub	sp, #12
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	6078      	str	r0, [r7, #4]
    traceENTER_vListInitialiseItem( pxItem );

    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	2200      	movs	r2, #0
 8001cc4:	611a      	str	r2, [r3, #16]
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );

    traceRETURN_vListInitialiseItem();
}
 8001cc6:	bf00      	nop
 8001cc8:	370c      	adds	r7, #12
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd0:	4770      	bx	lr

08001cd2 <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8001cd2:	b480      	push	{r7}
 8001cd4:	b085      	sub	sp, #20
 8001cd6:	af00      	add	r7, sp, #0
 8001cd8:	6078      	str	r0, [r7, #4]
 8001cda:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8001cdc:	683b      	ldr	r3, [r7, #0]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8001ce2:	68bb      	ldr	r3, [r7, #8]
 8001ce4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001ce8:	d103      	bne.n	8001cf2 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	691b      	ldr	r3, [r3, #16]
 8001cee:	60fb      	str	r3, [r7, #12]
 8001cf0:	e00c      	b.n	8001d0c <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext )
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	3308      	adds	r3, #8
 8001cf6:	60fb      	str	r3, [r7, #12]
 8001cf8:	e002      	b.n	8001d00 <vListInsert+0x2e>
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	685b      	ldr	r3, [r3, #4]
 8001cfe:	60fb      	str	r3, [r7, #12]
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	685b      	ldr	r3, [r3, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	68ba      	ldr	r2, [r7, #8]
 8001d08:	429a      	cmp	r2, r3
 8001d0a:	d2f6      	bcs.n	8001cfa <vListInsert+0x28>
             * IF YOU FIND YOUR CODE STUCK HERE, SEE THE NOTE JUST ABOVE.
             */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	685a      	ldr	r2, [r3, #4]
 8001d10:	683b      	ldr	r3, [r7, #0]
 8001d12:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8001d14:	683b      	ldr	r3, [r7, #0]
 8001d16:	685b      	ldr	r3, [r3, #4]
 8001d18:	683a      	ldr	r2, [r7, #0]
 8001d1a:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8001d1c:	683b      	ldr	r3, [r7, #0]
 8001d1e:	68fa      	ldr	r2, [r7, #12]
 8001d20:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	683a      	ldr	r2, [r7, #0]
 8001d26:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8001d28:	683b      	ldr	r3, [r7, #0]
 8001d2a:	687a      	ldr	r2, [r7, #4]
 8001d2c:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems ) = ( UBaseType_t ) ( pxList->uxNumberOfItems + 1U );
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	1c5a      	adds	r2, r3, #1
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	601a      	str	r2, [r3, #0]

    traceRETURN_vListInsert();
}
 8001d38:	bf00      	nop
 8001d3a:	3714      	adds	r7, #20
 8001d3c:	46bd      	mov	sp, r7
 8001d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d42:	4770      	bx	lr

08001d44 <uxListRemove>:
/*-----------------------------------------------------------*/


UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8001d44:	b480      	push	{r7}
 8001d46:	b085      	sub	sp, #20
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	6078      	str	r0, [r7, #4]
    /* The list item knows which list it is in.  Obtain the list from the list
     * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	691b      	ldr	r3, [r3, #16]
 8001d50:	60fb      	str	r3, [r7, #12]

    traceENTER_uxListRemove( pxItemToRemove );

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	685b      	ldr	r3, [r3, #4]
 8001d56:	687a      	ldr	r2, [r7, #4]
 8001d58:	6892      	ldr	r2, [r2, #8]
 8001d5a:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	689b      	ldr	r3, [r3, #8]
 8001d60:	687a      	ldr	r2, [r7, #4]
 8001d62:	6852      	ldr	r2, [r2, #4]
 8001d64:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	685b      	ldr	r3, [r3, #4]
 8001d6a:	687a      	ldr	r2, [r7, #4]
 8001d6c:	429a      	cmp	r2, r3
 8001d6e:	d103      	bne.n	8001d78 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	689a      	ldr	r2, [r3, #8]
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	2200      	movs	r2, #0
 8001d7c:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems ) = ( UBaseType_t ) ( pxList->uxNumberOfItems - 1U );
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	1e5a      	subs	r2, r3, #1
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	601a      	str	r2, [r3, #0]

    traceRETURN_uxListRemove( pxList->uxNumberOfItems );

    return pxList->uxNumberOfItems;
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	681b      	ldr	r3, [r3, #0]
}
 8001d8c:	4618      	mov	r0, r3
 8001d8e:	3714      	adds	r7, #20
 8001d90:	46bd      	mov	sp, r7
 8001d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d96:	4770      	bx	lr

08001d98 <xQueueGenericReset>:
    } while( 0 )
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	b086      	sub	sp, #24
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	6078      	str	r0, [r7, #4]
 8001da0:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 8001da2:	2301      	movs	r3, #1
 8001da4:	617b      	str	r3, [r7, #20]
    Queue_t * const pxQueue = xQueue;
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	613b      	str	r3, [r7, #16]

    traceENTER_xQueueGenericReset( xQueue, xNewQueue );

    configASSERT( pxQueue );
 8001daa:	693b      	ldr	r3, [r7, #16]
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d10d      	bne.n	8001dcc <xQueueGenericReset+0x34>
    __asm volatile
 8001db0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001db4:	b672      	cpsid	i
 8001db6:	f383 8811 	msr	BASEPRI, r3
 8001dba:	f3bf 8f6f 	isb	sy
 8001dbe:	f3bf 8f4f 	dsb	sy
 8001dc2:	b662      	cpsie	i
 8001dc4:	60fb      	str	r3, [r7, #12]
}
 8001dc6:	bf00      	nop
 8001dc8:	bf00      	nop
 8001dca:	e7fd      	b.n	8001dc8 <xQueueGenericReset+0x30>

    if( ( pxQueue != NULL ) &&
 8001dcc:	693b      	ldr	r3, [r7, #16]
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d05d      	beq.n	8001e8e <xQueueGenericReset+0xf6>
        ( pxQueue->uxLength >= 1U ) &&
 8001dd2:	693b      	ldr	r3, [r7, #16]
 8001dd4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    if( ( pxQueue != NULL ) &&
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d059      	beq.n	8001e8e <xQueueGenericReset+0xf6>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 8001dda:	693b      	ldr	r3, [r7, #16]
 8001ddc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001dde:	693b      	ldr	r3, [r7, #16]
 8001de0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001de2:	2100      	movs	r1, #0
 8001de4:	fba3 2302 	umull	r2, r3, r3, r2
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d000      	beq.n	8001dee <xQueueGenericReset+0x56>
 8001dec:	2101      	movs	r1, #1
 8001dee:	460b      	mov	r3, r1
        ( pxQueue->uxLength >= 1U ) &&
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d14c      	bne.n	8001e8e <xQueueGenericReset+0xf6>
    {
        taskENTER_CRITICAL();
 8001df4:	f001 fece 	bl	8003b94 <vPortEnterCritical>
        {
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8001df8:	693b      	ldr	r3, [r7, #16]
 8001dfa:	681a      	ldr	r2, [r3, #0]
 8001dfc:	693b      	ldr	r3, [r7, #16]
 8001dfe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001e00:	6939      	ldr	r1, [r7, #16]
 8001e02:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8001e04:	fb01 f303 	mul.w	r3, r1, r3
 8001e08:	441a      	add	r2, r3
 8001e0a:	693b      	ldr	r3, [r7, #16]
 8001e0c:	609a      	str	r2, [r3, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8001e0e:	693b      	ldr	r3, [r7, #16]
 8001e10:	2200      	movs	r2, #0
 8001e12:	639a      	str	r2, [r3, #56]	@ 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8001e14:	693b      	ldr	r3, [r7, #16]
 8001e16:	681a      	ldr	r2, [r3, #0]
 8001e18:	693b      	ldr	r3, [r7, #16]
 8001e1a:	605a      	str	r2, [r3, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize );
 8001e1c:	693b      	ldr	r3, [r7, #16]
 8001e1e:	681a      	ldr	r2, [r3, #0]
 8001e20:	693b      	ldr	r3, [r7, #16]
 8001e22:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001e24:	3b01      	subs	r3, #1
 8001e26:	6939      	ldr	r1, [r7, #16]
 8001e28:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8001e2a:	fb01 f303 	mul.w	r3, r1, r3
 8001e2e:	441a      	add	r2, r3
 8001e30:	693b      	ldr	r3, [r7, #16]
 8001e32:	60da      	str	r2, [r3, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 8001e34:	693b      	ldr	r3, [r7, #16]
 8001e36:	22ff      	movs	r2, #255	@ 0xff
 8001e38:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
            pxQueue->cTxLock = queueUNLOCKED;
 8001e3c:	693b      	ldr	r3, [r7, #16]
 8001e3e:	22ff      	movs	r2, #255	@ 0xff
 8001e40:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

            if( xNewQueue == pdFALSE )
 8001e44:	683b      	ldr	r3, [r7, #0]
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d114      	bne.n	8001e74 <xQueueGenericReset+0xdc>
                /* If there are tasks blocked waiting to read from the queue, then
                 * the tasks will remain blocked as after this function exits the queue
                 * will still be empty.  If there are tasks blocked waiting to write to
                 * the queue, then one should be unblocked as after this function exits
                 * it will be possible to write to it. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001e4a:	693b      	ldr	r3, [r7, #16]
 8001e4c:	691b      	ldr	r3, [r3, #16]
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d01a      	beq.n	8001e88 <xQueueGenericReset+0xf0>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001e52:	693b      	ldr	r3, [r7, #16]
 8001e54:	3310      	adds	r3, #16
 8001e56:	4618      	mov	r0, r3
 8001e58:	f000 ffe0 	bl	8002e1c <xTaskRemoveFromEventList>
 8001e5c:	4603      	mov	r3, r0
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d012      	beq.n	8001e88 <xQueueGenericReset+0xf0>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8001e62:	4b17      	ldr	r3, [pc, #92]	@ (8001ec0 <xQueueGenericReset+0x128>)
 8001e64:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001e68:	601a      	str	r2, [r3, #0]
 8001e6a:	f3bf 8f4f 	dsb	sy
 8001e6e:	f3bf 8f6f 	isb	sy
 8001e72:	e009      	b.n	8001e88 <xQueueGenericReset+0xf0>
                }
            }
            else
            {
                /* Ensure the event queues start in the correct state. */
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8001e74:	693b      	ldr	r3, [r7, #16]
 8001e76:	3310      	adds	r3, #16
 8001e78:	4618      	mov	r0, r3
 8001e7a:	f7ff fefd 	bl	8001c78 <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8001e7e:	693b      	ldr	r3, [r7, #16]
 8001e80:	3324      	adds	r3, #36	@ 0x24
 8001e82:	4618      	mov	r0, r3
 8001e84:	f7ff fef8 	bl	8001c78 <vListInitialise>
            }
        }
        taskEXIT_CRITICAL();
 8001e88:	f001 feba 	bl	8003c00 <vPortExitCritical>
 8001e8c:	e001      	b.n	8001e92 <xQueueGenericReset+0xfa>
    }
    else
    {
        xReturn = pdFAIL;
 8001e8e:	2300      	movs	r3, #0
 8001e90:	617b      	str	r3, [r7, #20]
    }

    configASSERT( xReturn != pdFAIL );
 8001e92:	697b      	ldr	r3, [r7, #20]
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d10d      	bne.n	8001eb4 <xQueueGenericReset+0x11c>
    __asm volatile
 8001e98:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001e9c:	b672      	cpsid	i
 8001e9e:	f383 8811 	msr	BASEPRI, r3
 8001ea2:	f3bf 8f6f 	isb	sy
 8001ea6:	f3bf 8f4f 	dsb	sy
 8001eaa:	b662      	cpsie	i
 8001eac:	60bb      	str	r3, [r7, #8]
}
 8001eae:	bf00      	nop
 8001eb0:	bf00      	nop
 8001eb2:	e7fd      	b.n	8001eb0 <xQueueGenericReset+0x118>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    traceRETURN_xQueueGenericReset( xReturn );

    return xReturn;
 8001eb4:	697b      	ldr	r3, [r7, #20]
}
 8001eb6:	4618      	mov	r0, r3
 8001eb8:	3718      	adds	r7, #24
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	bd80      	pop	{r7, pc}
 8001ebe:	bf00      	nop
 8001ec0:	e000ed04 	.word	0xe000ed04

08001ec4 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	b08a      	sub	sp, #40	@ 0x28
 8001ec8:	af02      	add	r7, sp, #8
 8001eca:	60f8      	str	r0, [r7, #12]
 8001ecc:	60b9      	str	r1, [r7, #8]
 8001ece:	4613      	mov	r3, r2
 8001ed0:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue = NULL;
 8001ed2:	2300      	movs	r3, #0
 8001ed4:	61fb      	str	r3, [r7, #28]
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        traceENTER_xQueueGenericCreate( uxQueueLength, uxItemSize, ucQueueType );

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d02e      	beq.n	8001f3a <xQueueGenericCreate+0x76>
            /* Check for multiplication overflow. */
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8001edc:	2100      	movs	r1, #0
 8001ede:	68ba      	ldr	r2, [r7, #8]
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	fba3 2302 	umull	r2, r3, r3, r2
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d000      	beq.n	8001eec <xQueueGenericCreate+0x28>
 8001eea:	2101      	movs	r1, #1
 8001eec:	460b      	mov	r3, r1
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d123      	bne.n	8001f3a <xQueueGenericCreate+0x76>
            /* Check for addition overflow. */
            /* MISRA Ref 14.3.1 [Configuration dependent invariant] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-143. */
            /* coverity[misra_c_2012_rule_14_3_violation] */
            ( ( SIZE_MAX - sizeof( Queue_t ) ) >= ( size_t ) ( ( size_t ) uxQueueLength * ( size_t ) uxItemSize ) ) )
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	68ba      	ldr	r2, [r7, #8]
 8001ef6:	fb02 f303 	mul.w	r3, r2, r3
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8001efa:	f113 0f51 	cmn.w	r3, #81	@ 0x51
 8001efe:	d81c      	bhi.n	8001f3a <xQueueGenericCreate+0x76>
        {
            /* Allocate enough space to hold the maximum number of items that
             * can be in the queue at any time.  It is valid for uxItemSize to be
             * zero in the case the queue is used as a semaphore. */
            xQueueSizeInBytes = ( size_t ) ( ( size_t ) uxQueueLength * ( size_t ) uxItemSize );
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	68ba      	ldr	r2, [r7, #8]
 8001f04:	fb02 f303 	mul.w	r3, r2, r3
 8001f08:	61bb      	str	r3, [r7, #24]

            /* MISRA Ref 11.5.1 [Malloc memory assignment] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
            /* coverity[misra_c_2012_rule_11_5_violation] */
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8001f0a:	69bb      	ldr	r3, [r7, #24]
 8001f0c:	3350      	adds	r3, #80	@ 0x50
 8001f0e:	4618      	mov	r0, r3
 8001f10:	f001 ff2e 	bl	8003d70 <pvPortMalloc>
 8001f14:	61f8      	str	r0, [r7, #28]

            if( pxNewQueue != NULL )
 8001f16:	69fb      	ldr	r3, [r7, #28]
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d01f      	beq.n	8001f5c <xQueueGenericCreate+0x98>
            {
                /* Jump past the queue structure to find the location of the queue
                 * storage area. */
                pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8001f1c:	69fb      	ldr	r3, [r7, #28]
 8001f1e:	617b      	str	r3, [r7, #20]
                pucQueueStorage += sizeof( Queue_t );
 8001f20:	697b      	ldr	r3, [r7, #20]
 8001f22:	3350      	adds	r3, #80	@ 0x50
 8001f24:	617b      	str	r3, [r7, #20]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
                #endif /* configSUPPORT_STATIC_ALLOCATION */

                prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8001f26:	79fa      	ldrb	r2, [r7, #7]
 8001f28:	69fb      	ldr	r3, [r7, #28]
 8001f2a:	9300      	str	r3, [sp, #0]
 8001f2c:	4613      	mov	r3, r2
 8001f2e:	697a      	ldr	r2, [r7, #20]
 8001f30:	68b9      	ldr	r1, [r7, #8]
 8001f32:	68f8      	ldr	r0, [r7, #12]
 8001f34:	f000 f817 	bl	8001f66 <prvInitialiseNewQueue>
            if( pxNewQueue != NULL )
 8001f38:	e010      	b.n	8001f5c <xQueueGenericCreate+0x98>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            configASSERT( pxNewQueue );
 8001f3a:	69fb      	ldr	r3, [r7, #28]
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d10d      	bne.n	8001f5c <xQueueGenericCreate+0x98>
    __asm volatile
 8001f40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001f44:	b672      	cpsid	i
 8001f46:	f383 8811 	msr	BASEPRI, r3
 8001f4a:	f3bf 8f6f 	isb	sy
 8001f4e:	f3bf 8f4f 	dsb	sy
 8001f52:	b662      	cpsie	i
 8001f54:	613b      	str	r3, [r7, #16]
}
 8001f56:	bf00      	nop
 8001f58:	bf00      	nop
 8001f5a:	e7fd      	b.n	8001f58 <xQueueGenericCreate+0x94>
            mtCOVERAGE_TEST_MARKER();
        }

        traceRETURN_xQueueGenericCreate( pxNewQueue );

        return pxNewQueue;
 8001f5c:	69fb      	ldr	r3, [r7, #28]
    }
 8001f5e:	4618      	mov	r0, r3
 8001f60:	3720      	adds	r7, #32
 8001f62:	46bd      	mov	sp, r7
 8001f64:	bd80      	pop	{r7, pc}

08001f66 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 8001f66:	b580      	push	{r7, lr}
 8001f68:	b084      	sub	sp, #16
 8001f6a:	af00      	add	r7, sp, #0
 8001f6c:	60f8      	str	r0, [r7, #12]
 8001f6e:	60b9      	str	r1, [r7, #8]
 8001f70:	607a      	str	r2, [r7, #4]
 8001f72:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 8001f74:	68bb      	ldr	r3, [r7, #8]
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d103      	bne.n	8001f82 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8001f7a:	69bb      	ldr	r3, [r7, #24]
 8001f7c:	69ba      	ldr	r2, [r7, #24]
 8001f7e:	601a      	str	r2, [r3, #0]
 8001f80:	e002      	b.n	8001f88 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8001f82:	69bb      	ldr	r3, [r7, #24]
 8001f84:	687a      	ldr	r2, [r7, #4]
 8001f86:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 8001f88:	69bb      	ldr	r3, [r7, #24]
 8001f8a:	68fa      	ldr	r2, [r7, #12]
 8001f8c:	63da      	str	r2, [r3, #60]	@ 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 8001f8e:	69bb      	ldr	r3, [r7, #24]
 8001f90:	68ba      	ldr	r2, [r7, #8]
 8001f92:	641a      	str	r2, [r3, #64]	@ 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8001f94:	2101      	movs	r1, #1
 8001f96:	69b8      	ldr	r0, [r7, #24]
 8001f98:	f7ff fefe 	bl	8001d98 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
    {
        pxNewQueue->ucQueueType = ucQueueType;
 8001f9c:	69bb      	ldr	r3, [r7, #24]
 8001f9e:	78fa      	ldrb	r2, [r7, #3]
 8001fa0:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        pxNewQueue->pxQueueSetContainer = NULL;
    }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 8001fa4:	bf00      	nop
 8001fa6:	3710      	adds	r7, #16
 8001fa8:	46bd      	mov	sp, r7
 8001faa:	bd80      	pop	{r7, pc}

08001fac <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8001fac:	b580      	push	{r7, lr}
 8001fae:	b08c      	sub	sp, #48	@ 0x30
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	60f8      	str	r0, [r7, #12]
 8001fb4:	60b9      	str	r1, [r7, #8]
 8001fb6:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8001fb8:	2300      	movs	r3, #0
 8001fba:	62fb      	str	r3, [r7, #44]	@ 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	62bb      	str	r3, [r7, #40]	@ 0x28

    traceENTER_xQueueReceive( xQueue, pvBuffer, xTicksToWait );

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8001fc0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d10d      	bne.n	8001fe2 <xQueueReceive+0x36>
    __asm volatile
 8001fc6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001fca:	b672      	cpsid	i
 8001fcc:	f383 8811 	msr	BASEPRI, r3
 8001fd0:	f3bf 8f6f 	isb	sy
 8001fd4:	f3bf 8f4f 	dsb	sy
 8001fd8:	b662      	cpsie	i
 8001fda:	623b      	str	r3, [r7, #32]
}
 8001fdc:	bf00      	nop
 8001fde:	bf00      	nop
 8001fe0:	e7fd      	b.n	8001fde <xQueueReceive+0x32>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8001fe2:	68bb      	ldr	r3, [r7, #8]
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d103      	bne.n	8001ff0 <xQueueReceive+0x44>
 8001fe8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001fea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d101      	bne.n	8001ff4 <xQueueReceive+0x48>
 8001ff0:	2301      	movs	r3, #1
 8001ff2:	e000      	b.n	8001ff6 <xQueueReceive+0x4a>
 8001ff4:	2300      	movs	r3, #0
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d10d      	bne.n	8002016 <xQueueReceive+0x6a>
    __asm volatile
 8001ffa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001ffe:	b672      	cpsid	i
 8002000:	f383 8811 	msr	BASEPRI, r3
 8002004:	f3bf 8f6f 	isb	sy
 8002008:	f3bf 8f4f 	dsb	sy
 800200c:	b662      	cpsie	i
 800200e:	61fb      	str	r3, [r7, #28]
}
 8002010:	bf00      	nop
 8002012:	bf00      	nop
 8002014:	e7fd      	b.n	8002012 <xQueueReceive+0x66>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002016:	f001 f91d 	bl	8003254 <xTaskGetSchedulerState>
 800201a:	4603      	mov	r3, r0
 800201c:	2b00      	cmp	r3, #0
 800201e:	d102      	bne.n	8002026 <xQueueReceive+0x7a>
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	2b00      	cmp	r3, #0
 8002024:	d101      	bne.n	800202a <xQueueReceive+0x7e>
 8002026:	2301      	movs	r3, #1
 8002028:	e000      	b.n	800202c <xQueueReceive+0x80>
 800202a:	2300      	movs	r3, #0
 800202c:	2b00      	cmp	r3, #0
 800202e:	d10d      	bne.n	800204c <xQueueReceive+0xa0>
    __asm volatile
 8002030:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002034:	b672      	cpsid	i
 8002036:	f383 8811 	msr	BASEPRI, r3
 800203a:	f3bf 8f6f 	isb	sy
 800203e:	f3bf 8f4f 	dsb	sy
 8002042:	b662      	cpsie	i
 8002044:	61bb      	str	r3, [r7, #24]
}
 8002046:	bf00      	nop
 8002048:	bf00      	nop
 800204a:	e7fd      	b.n	8002048 <xQueueReceive+0x9c>
    }
    #endif

    for( ; ; )
    {
        taskENTER_CRITICAL();
 800204c:	f001 fda2 	bl	8003b94 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002050:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002052:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002054:	627b      	str	r3, [r7, #36]	@ 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002056:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002058:	2b00      	cmp	r3, #0
 800205a:	d01f      	beq.n	800209c <xQueueReceive+0xf0>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 800205c:	68b9      	ldr	r1, [r7, #8]
 800205e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002060:	f000 f88c 	bl	800217c <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = ( UBaseType_t ) ( uxMessagesWaiting - ( UBaseType_t ) 1 );
 8002064:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002066:	1e5a      	subs	r2, r3, #1
 8002068:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800206a:	639a      	str	r2, [r3, #56]	@ 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800206c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800206e:	691b      	ldr	r3, [r3, #16]
 8002070:	2b00      	cmp	r3, #0
 8002072:	d00f      	beq.n	8002094 <xQueueReceive+0xe8>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002074:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002076:	3310      	adds	r3, #16
 8002078:	4618      	mov	r0, r3
 800207a:	f000 fecf 	bl	8002e1c <xTaskRemoveFromEventList>
 800207e:	4603      	mov	r3, r0
 8002080:	2b00      	cmp	r3, #0
 8002082:	d007      	beq.n	8002094 <xQueueReceive+0xe8>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8002084:	4b3c      	ldr	r3, [pc, #240]	@ (8002178 <xQueueReceive+0x1cc>)
 8002086:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800208a:	601a      	str	r2, [r3, #0]
 800208c:	f3bf 8f4f 	dsb	sy
 8002090:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8002094:	f001 fdb4 	bl	8003c00 <vPortExitCritical>

                traceRETURN_xQueueReceive( pdPASS );

                return pdPASS;
 8002098:	2301      	movs	r3, #1
 800209a:	e069      	b.n	8002170 <xQueueReceive+0x1c4>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d103      	bne.n	80020aa <xQueueReceive+0xfe>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 80020a2:	f001 fdad 	bl	8003c00 <vPortExitCritical>

                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    traceRETURN_xQueueReceive( errQUEUE_EMPTY );

                    return errQUEUE_EMPTY;
 80020a6:	2300      	movs	r3, #0
 80020a8:	e062      	b.n	8002170 <xQueueReceive+0x1c4>
                }
                else if( xEntryTimeSet == pdFALSE )
 80020aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d106      	bne.n	80020be <xQueueReceive+0x112>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 80020b0:	f107 0310 	add.w	r3, r7, #16
 80020b4:	4618      	mov	r0, r3
 80020b6:	f000 ff8d 	bl	8002fd4 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 80020ba:	2301      	movs	r3, #1
 80020bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 80020be:	f001 fd9f 	bl	8003c00 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 80020c2:	f000 fb97 	bl	80027f4 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 80020c6:	f001 fd65 	bl	8003b94 <vPortEnterCritical>
 80020ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80020cc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80020d0:	b25b      	sxtb	r3, r3
 80020d2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80020d6:	d103      	bne.n	80020e0 <xQueueReceive+0x134>
 80020d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80020da:	2200      	movs	r2, #0
 80020dc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80020e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80020e2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80020e6:	b25b      	sxtb	r3, r3
 80020e8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80020ec:	d103      	bne.n	80020f6 <xQueueReceive+0x14a>
 80020ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80020f0:	2200      	movs	r2, #0
 80020f2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80020f6:	f001 fd83 	bl	8003c00 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80020fa:	1d3a      	adds	r2, r7, #4
 80020fc:	f107 0310 	add.w	r3, r7, #16
 8002100:	4611      	mov	r1, r2
 8002102:	4618      	mov	r0, r3
 8002104:	f000 ff7c 	bl	8003000 <xTaskCheckForTimeOut>
 8002108:	4603      	mov	r3, r0
 800210a:	2b00      	cmp	r3, #0
 800210c:	d123      	bne.n	8002156 <xQueueReceive+0x1aa>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800210e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002110:	f000 f8ac 	bl	800226c <prvIsQueueEmpty>
 8002114:	4603      	mov	r3, r0
 8002116:	2b00      	cmp	r3, #0
 8002118:	d017      	beq.n	800214a <xQueueReceive+0x19e>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800211a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800211c:	3324      	adds	r3, #36	@ 0x24
 800211e:	687a      	ldr	r2, [r7, #4]
 8002120:	4611      	mov	r1, r2
 8002122:	4618      	mov	r0, r3
 8002124:	f000 fe0a 	bl	8002d3c <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8002128:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800212a:	f000 f84d 	bl	80021c8 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 800212e:	f000 fb6f 	bl	8002810 <xTaskResumeAll>
 8002132:	4603      	mov	r3, r0
 8002134:	2b00      	cmp	r3, #0
 8002136:	d189      	bne.n	800204c <xQueueReceive+0xa0>
                {
                    taskYIELD_WITHIN_API();
 8002138:	4b0f      	ldr	r3, [pc, #60]	@ (8002178 <xQueueReceive+0x1cc>)
 800213a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800213e:	601a      	str	r2, [r3, #0]
 8002140:	f3bf 8f4f 	dsb	sy
 8002144:	f3bf 8f6f 	isb	sy
 8002148:	e780      	b.n	800204c <xQueueReceive+0xa0>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 800214a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800214c:	f000 f83c 	bl	80021c8 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8002150:	f000 fb5e 	bl	8002810 <xTaskResumeAll>
 8002154:	e77a      	b.n	800204c <xQueueReceive+0xa0>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8002156:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002158:	f000 f836 	bl	80021c8 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 800215c:	f000 fb58 	bl	8002810 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002160:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002162:	f000 f883 	bl	800226c <prvIsQueueEmpty>
 8002166:	4603      	mov	r3, r0
 8002168:	2b00      	cmp	r3, #0
 800216a:	f43f af6f 	beq.w	800204c <xQueueReceive+0xa0>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                traceRETURN_xQueueReceive( errQUEUE_EMPTY );

                return errQUEUE_EMPTY;
 800216e:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
}
 8002170:	4618      	mov	r0, r3
 8002172:	3730      	adds	r7, #48	@ 0x30
 8002174:	46bd      	mov	sp, r7
 8002176:	bd80      	pop	{r7, pc}
 8002178:	e000ed04 	.word	0xe000ed04

0800217c <prvCopyDataFromQueue>:
}
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 800217c:	b580      	push	{r7, lr}
 800217e:	b082      	sub	sp, #8
 8002180:	af00      	add	r7, sp, #0
 8002182:	6078      	str	r0, [r7, #4]
 8002184:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800218a:	2b00      	cmp	r3, #0
 800218c:	d018      	beq.n	80021c0 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	68da      	ldr	r2, [r3, #12]
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002196:	441a      	add	r2, r3
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail )
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	68da      	ldr	r2, [r3, #12]
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	689b      	ldr	r3, [r3, #8]
 80021a4:	429a      	cmp	r2, r3
 80021a6:	d303      	bcc.n	80021b0 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681a      	ldr	r2, [r3, #0]
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize );
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	68d9      	ldr	r1, [r3, #12]
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021b8:	461a      	mov	r2, r3
 80021ba:	6838      	ldr	r0, [r7, #0]
 80021bc:	f002 fae1 	bl	8004782 <memcpy>
    }
}
 80021c0:	bf00      	nop
 80021c2:	3708      	adds	r7, #8
 80021c4:	46bd      	mov	sp, r7
 80021c6:	bd80      	pop	{r7, pc}

080021c8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80021c8:	b580      	push	{r7, lr}
 80021ca:	b084      	sub	sp, #16
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 80021d0:	f001 fce0 	bl	8003b94 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80021da:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 80021dc:	e011      	b.n	8002202 <prvUnlockQueue+0x3a>
            }
            #else /* configUSE_QUEUE_SETS */
            {
                /* Tasks that are removed from the event list will get added to
                 * the pending ready list as the scheduler is still suspended. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d012      	beq.n	800220c <prvUnlockQueue+0x44>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	3324      	adds	r3, #36	@ 0x24
 80021ea:	4618      	mov	r0, r3
 80021ec:	f000 fe16 	bl	8002e1c <xTaskRemoveFromEventList>
 80021f0:	4603      	mov	r3, r0
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d001      	beq.n	80021fa <prvUnlockQueue+0x32>
                    {
                        /* The task waiting has a higher priority so record that
                         * a context switch is required. */
                        vTaskMissedYield();
 80021f6:	f000 ff6f 	bl	80030d8 <vTaskMissedYield>
                    break;
                }
            }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 80021fa:	7bfb      	ldrb	r3, [r7, #15]
 80021fc:	3b01      	subs	r3, #1
 80021fe:	b2db      	uxtb	r3, r3
 8002200:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8002202:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002206:	2b00      	cmp	r3, #0
 8002208:	dce9      	bgt.n	80021de <prvUnlockQueue+0x16>
 800220a:	e000      	b.n	800220e <prvUnlockQueue+0x46>
                    break;
 800220c:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	22ff      	movs	r2, #255	@ 0xff
 8002212:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
    taskEXIT_CRITICAL();
 8002216:	f001 fcf3 	bl	8003c00 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 800221a:	f001 fcbb 	bl	8003b94 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002224:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8002226:	e011      	b.n	800224c <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	691b      	ldr	r3, [r3, #16]
 800222c:	2b00      	cmp	r3, #0
 800222e:	d012      	beq.n	8002256 <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	3310      	adds	r3, #16
 8002234:	4618      	mov	r0, r3
 8002236:	f000 fdf1 	bl	8002e1c <xTaskRemoveFromEventList>
 800223a:	4603      	mov	r3, r0
 800223c:	2b00      	cmp	r3, #0
 800223e:	d001      	beq.n	8002244 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 8002240:	f000 ff4a 	bl	80030d8 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8002244:	7bbb      	ldrb	r3, [r7, #14]
 8002246:	3b01      	subs	r3, #1
 8002248:	b2db      	uxtb	r3, r3
 800224a:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 800224c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002250:	2b00      	cmp	r3, #0
 8002252:	dce9      	bgt.n	8002228 <prvUnlockQueue+0x60>
 8002254:	e000      	b.n	8002258 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 8002256:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	22ff      	movs	r2, #255	@ 0xff
 800225c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
    }
    taskEXIT_CRITICAL();
 8002260:	f001 fcce 	bl	8003c00 <vPortExitCritical>
}
 8002264:	bf00      	nop
 8002266:	3710      	adds	r7, #16
 8002268:	46bd      	mov	sp, r7
 800226a:	bd80      	pop	{r7, pc}

0800226c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 800226c:	b580      	push	{r7, lr}
 800226e:	b084      	sub	sp, #16
 8002270:	af00      	add	r7, sp, #0
 8002272:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8002274:	f001 fc8e 	bl	8003b94 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800227c:	2b00      	cmp	r3, #0
 800227e:	d102      	bne.n	8002286 <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8002280:	2301      	movs	r3, #1
 8002282:	60fb      	str	r3, [r7, #12]
 8002284:	e001      	b.n	800228a <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 8002286:	2300      	movs	r3, #0
 8002288:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 800228a:	f001 fcb9 	bl	8003c00 <vPortExitCritical>

    return xReturn;
 800228e:	68fb      	ldr	r3, [r7, #12]
}
 8002290:	4618      	mov	r0, r3
 8002292:	3710      	adds	r7, #16
 8002294:	46bd      	mov	sp, r7
 8002296:	bd80      	pop	{r7, pc}

08002298 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName )
    {
 8002298:	b480      	push	{r7}
 800229a:	b087      	sub	sp, #28
 800229c:	af00      	add	r7, sp, #0
 800229e:	6078      	str	r0, [r7, #4]
 80022a0:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;
        QueueRegistryItem_t * pxEntryToWrite = NULL;
 80022a2:	2300      	movs	r3, #0
 80022a4:	613b      	str	r3, [r7, #16]

        traceENTER_vQueueAddToRegistry( xQueue, pcQueueName );

        configASSERT( xQueue );
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d10d      	bne.n	80022c8 <vQueueAddToRegistry+0x30>
    __asm volatile
 80022ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80022b0:	b672      	cpsid	i
 80022b2:	f383 8811 	msr	BASEPRI, r3
 80022b6:	f3bf 8f6f 	isb	sy
 80022ba:	f3bf 8f4f 	dsb	sy
 80022be:	b662      	cpsie	i
 80022c0:	60fb      	str	r3, [r7, #12]
}
 80022c2:	bf00      	nop
 80022c4:	bf00      	nop
 80022c6:	e7fd      	b.n	80022c4 <vQueueAddToRegistry+0x2c>

        if( pcQueueName != NULL )
 80022c8:	683b      	ldr	r3, [r7, #0]
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d024      	beq.n	8002318 <vQueueAddToRegistry+0x80>
        {
            /* See if there is an empty space in the registry.  A NULL name denotes
             * a free slot. */
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80022ce:	2300      	movs	r3, #0
 80022d0:	617b      	str	r3, [r7, #20]
 80022d2:	e01e      	b.n	8002312 <vQueueAddToRegistry+0x7a>
            {
                /* Replace an existing entry if the queue is already in the registry. */
                if( xQueue == xQueueRegistry[ ux ].xHandle )
 80022d4:	4a18      	ldr	r2, [pc, #96]	@ (8002338 <vQueueAddToRegistry+0xa0>)
 80022d6:	697b      	ldr	r3, [r7, #20]
 80022d8:	00db      	lsls	r3, r3, #3
 80022da:	4413      	add	r3, r2
 80022dc:	685b      	ldr	r3, [r3, #4]
 80022de:	687a      	ldr	r2, [r7, #4]
 80022e0:	429a      	cmp	r2, r3
 80022e2:	d105      	bne.n	80022f0 <vQueueAddToRegistry+0x58>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 80022e4:	697b      	ldr	r3, [r7, #20]
 80022e6:	00db      	lsls	r3, r3, #3
 80022e8:	4a13      	ldr	r2, [pc, #76]	@ (8002338 <vQueueAddToRegistry+0xa0>)
 80022ea:	4413      	add	r3, r2
 80022ec:	613b      	str	r3, [r7, #16]
                    break;
 80022ee:	e013      	b.n	8002318 <vQueueAddToRegistry+0x80>
                }
                /* Otherwise, store in the next empty location */
                else if( ( pxEntryToWrite == NULL ) && ( xQueueRegistry[ ux ].pcQueueName == NULL ) )
 80022f0:	693b      	ldr	r3, [r7, #16]
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d10a      	bne.n	800230c <vQueueAddToRegistry+0x74>
 80022f6:	4a10      	ldr	r2, [pc, #64]	@ (8002338 <vQueueAddToRegistry+0xa0>)
 80022f8:	697b      	ldr	r3, [r7, #20]
 80022fa:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d104      	bne.n	800230c <vQueueAddToRegistry+0x74>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 8002302:	697b      	ldr	r3, [r7, #20]
 8002304:	00db      	lsls	r3, r3, #3
 8002306:	4a0c      	ldr	r2, [pc, #48]	@ (8002338 <vQueueAddToRegistry+0xa0>)
 8002308:	4413      	add	r3, r2
 800230a:	613b      	str	r3, [r7, #16]
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800230c:	697b      	ldr	r3, [r7, #20]
 800230e:	3301      	adds	r3, #1
 8002310:	617b      	str	r3, [r7, #20]
 8002312:	697b      	ldr	r3, [r7, #20]
 8002314:	2b07      	cmp	r3, #7
 8002316:	d9dd      	bls.n	80022d4 <vQueueAddToRegistry+0x3c>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }

        if( pxEntryToWrite != NULL )
 8002318:	693b      	ldr	r3, [r7, #16]
 800231a:	2b00      	cmp	r3, #0
 800231c:	d005      	beq.n	800232a <vQueueAddToRegistry+0x92>
        {
            /* Store the information on this queue. */
            pxEntryToWrite->pcQueueName = pcQueueName;
 800231e:	693b      	ldr	r3, [r7, #16]
 8002320:	683a      	ldr	r2, [r7, #0]
 8002322:	601a      	str	r2, [r3, #0]
            pxEntryToWrite->xHandle = xQueue;
 8002324:	693b      	ldr	r3, [r7, #16]
 8002326:	687a      	ldr	r2, [r7, #4]
 8002328:	605a      	str	r2, [r3, #4]

            traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
        }

        traceRETURN_vQueueAddToRegistry();
    }
 800232a:	bf00      	nop
 800232c:	371c      	adds	r7, #28
 800232e:	46bd      	mov	sp, r7
 8002330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002334:	4770      	bx	lr
 8002336:	bf00      	nop
 8002338:	200000dc 	.word	0x200000dc

0800233c <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 800233c:	b580      	push	{r7, lr}
 800233e:	b086      	sub	sp, #24
 8002340:	af00      	add	r7, sp, #0
 8002342:	60f8      	str	r0, [r7, #12]
 8002344:	60b9      	str	r1, [r7, #8]
 8002346:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 800234c:	f001 fc22 	bl	8003b94 <vPortEnterCritical>
 8002350:	697b      	ldr	r3, [r7, #20]
 8002352:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002356:	b25b      	sxtb	r3, r3
 8002358:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800235c:	d103      	bne.n	8002366 <vQueueWaitForMessageRestricted+0x2a>
 800235e:	697b      	ldr	r3, [r7, #20]
 8002360:	2200      	movs	r2, #0
 8002362:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002366:	697b      	ldr	r3, [r7, #20]
 8002368:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800236c:	b25b      	sxtb	r3, r3
 800236e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002372:	d103      	bne.n	800237c <vQueueWaitForMessageRestricted+0x40>
 8002374:	697b      	ldr	r3, [r7, #20]
 8002376:	2200      	movs	r2, #0
 8002378:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800237c:	f001 fc40 	bl	8003c00 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8002380:	697b      	ldr	r3, [r7, #20]
 8002382:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002384:	2b00      	cmp	r3, #0
 8002386:	d106      	bne.n	8002396 <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8002388:	697b      	ldr	r3, [r7, #20]
 800238a:	3324      	adds	r3, #36	@ 0x24
 800238c:	687a      	ldr	r2, [r7, #4]
 800238e:	68b9      	ldr	r1, [r7, #8]
 8002390:	4618      	mov	r0, r3
 8002392:	f000 fcfb 	bl	8002d8c <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 8002396:	6978      	ldr	r0, [r7, #20]
 8002398:	f7ff ff16 	bl	80021c8 <prvUnlockQueue>

        traceRETURN_vQueueWaitForMessageRestricted();
    }
 800239c:	bf00      	nop
 800239e:	3718      	adds	r7, #24
 80023a0:	46bd      	mov	sp, r7
 80023a2:	bd80      	pop	{r7, pc}

080023a4 <prvCreateTask>:
                                  const char * const pcName,
                                  const configSTACK_DEPTH_TYPE uxStackDepth,
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask )
    {
 80023a4:	b580      	push	{r7, lr}
 80023a6:	b08a      	sub	sp, #40	@ 0x28
 80023a8:	af04      	add	r7, sp, #16
 80023aa:	60f8      	str	r0, [r7, #12]
 80023ac:	60b9      	str	r1, [r7, #8]
 80023ae:	607a      	str	r2, [r7, #4]
 80023b0:	603b      	str	r3, [r7, #0]

            /* Allocate space for the stack used by the task being created. */
            /* MISRA Ref 11.5.1 [Malloc memory assignment] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
            /* coverity[misra_c_2012_rule_11_5_violation] */
            pxStack = pvPortMallocStack( ( ( ( size_t ) uxStackDepth ) * sizeof( StackType_t ) ) );
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	009b      	lsls	r3, r3, #2
 80023b6:	4618      	mov	r0, r3
 80023b8:	f001 fcda 	bl	8003d70 <pvPortMalloc>
 80023bc:	6138      	str	r0, [r7, #16]

            if( pxStack != NULL )
 80023be:	693b      	ldr	r3, [r7, #16]
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d013      	beq.n	80023ec <prvCreateTask+0x48>
            {
                /* Allocate space for the TCB. */
                /* MISRA Ref 11.5.1 [Malloc memory assignment] */
                /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                /* coverity[misra_c_2012_rule_11_5_violation] */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
 80023c4:	2058      	movs	r0, #88	@ 0x58
 80023c6:	f001 fcd3 	bl	8003d70 <pvPortMalloc>
 80023ca:	6178      	str	r0, [r7, #20]

                if( pxNewTCB != NULL )
 80023cc:	697b      	ldr	r3, [r7, #20]
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d008      	beq.n	80023e4 <prvCreateTask+0x40>
                {
                    ( void ) memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 80023d2:	2258      	movs	r2, #88	@ 0x58
 80023d4:	2100      	movs	r1, #0
 80023d6:	6978      	ldr	r0, [r7, #20]
 80023d8:	f002 f958 	bl	800468c <memset>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
 80023dc:	697b      	ldr	r3, [r7, #20]
 80023de:	693a      	ldr	r2, [r7, #16]
 80023e0:	631a      	str	r2, [r3, #48]	@ 0x30
 80023e2:	e005      	b.n	80023f0 <prvCreateTask+0x4c>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
 80023e4:	6938      	ldr	r0, [r7, #16]
 80023e6:	f001 fe07 	bl	8003ff8 <vPortFree>
 80023ea:	e001      	b.n	80023f0 <prvCreateTask+0x4c>
                }
            }
            else
            {
                pxNewTCB = NULL;
 80023ec:	2300      	movs	r3, #0
 80023ee:	617b      	str	r3, [r7, #20]
            }
        }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 80023f0:	697b      	ldr	r3, [r7, #20]
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d00d      	beq.n	8002412 <prvCreateTask+0x6e>
                 * task was created dynamically in case it is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, uxStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80023f6:	2300      	movs	r3, #0
 80023f8:	9303      	str	r3, [sp, #12]
 80023fa:	697b      	ldr	r3, [r7, #20]
 80023fc:	9302      	str	r3, [sp, #8]
 80023fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002400:	9301      	str	r3, [sp, #4]
 8002402:	6a3b      	ldr	r3, [r7, #32]
 8002404:	9300      	str	r3, [sp, #0]
 8002406:	683b      	ldr	r3, [r7, #0]
 8002408:	687a      	ldr	r2, [r7, #4]
 800240a:	68b9      	ldr	r1, [r7, #8]
 800240c:	68f8      	ldr	r0, [r7, #12]
 800240e:	f000 f828 	bl	8002462 <prvInitialiseNewTask>
        }

        return pxNewTCB;
 8002412:	697b      	ldr	r3, [r7, #20]
    }
 8002414:	4618      	mov	r0, r3
 8002416:	3718      	adds	r7, #24
 8002418:	46bd      	mov	sp, r7
 800241a:	bd80      	pop	{r7, pc}

0800241c <xTaskCreate>:
                            const char * const pcName,
                            const configSTACK_DEPTH_TYPE uxStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 800241c:	b580      	push	{r7, lr}
 800241e:	b088      	sub	sp, #32
 8002420:	af02      	add	r7, sp, #8
 8002422:	60f8      	str	r0, [r7, #12]
 8002424:	60b9      	str	r1, [r7, #8]
 8002426:	607a      	str	r2, [r7, #4]
 8002428:	603b      	str	r3, [r7, #0]
        TCB_t * pxNewTCB;
        BaseType_t xReturn;

        traceENTER_xTaskCreate( pxTaskCode, pcName, uxStackDepth, pvParameters, uxPriority, pxCreatedTask );

        pxNewTCB = prvCreateTask( pxTaskCode, pcName, uxStackDepth, pvParameters, uxPriority, pxCreatedTask );
 800242a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800242c:	9301      	str	r3, [sp, #4]
 800242e:	6a3b      	ldr	r3, [r7, #32]
 8002430:	9300      	str	r3, [sp, #0]
 8002432:	683b      	ldr	r3, [r7, #0]
 8002434:	687a      	ldr	r2, [r7, #4]
 8002436:	68b9      	ldr	r1, [r7, #8]
 8002438:	68f8      	ldr	r0, [r7, #12]
 800243a:	f7ff ffb3 	bl	80023a4 <prvCreateTask>
 800243e:	6138      	str	r0, [r7, #16]

        if( pxNewTCB != NULL )
 8002440:	693b      	ldr	r3, [r7, #16]
 8002442:	2b00      	cmp	r3, #0
 8002444:	d005      	beq.n	8002452 <xTaskCreate+0x36>
                /* Set the task's affinity before scheduling it. */
                pxNewTCB->uxCoreAffinityMask = configTASK_DEFAULT_CORE_AFFINITY;
            }
            #endif

            prvAddNewTaskToReadyList( pxNewTCB );
 8002446:	6938      	ldr	r0, [r7, #16]
 8002448:	f000 f8a0 	bl	800258c <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 800244c:	2301      	movs	r3, #1
 800244e:	617b      	str	r3, [r7, #20]
 8002450:	e002      	b.n	8002458 <xTaskCreate+0x3c>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002452:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002456:	617b      	str	r3, [r7, #20]
        }

        traceRETURN_xTaskCreate( xReturn );

        return xReturn;
 8002458:	697b      	ldr	r3, [r7, #20]
    }
 800245a:	4618      	mov	r0, r3
 800245c:	3718      	adds	r7, #24
 800245e:	46bd      	mov	sp, r7
 8002460:	bd80      	pop	{r7, pc}

08002462 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8002462:	b580      	push	{r7, lr}
 8002464:	b088      	sub	sp, #32
 8002466:	af00      	add	r7, sp, #0
 8002468:	60f8      	str	r0, [r7, #12]
 800246a:	60b9      	str	r1, [r7, #8]
 800246c:	607a      	str	r2, [r7, #4]
 800246e:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
    {
        /* Fill the stack with a known value to assist debugging. */
        ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) uxStackDepth * sizeof( StackType_t ) );
 8002470:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002472:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	009b      	lsls	r3, r3, #2
 8002478:	461a      	mov	r2, r3
 800247a:	21a5      	movs	r1, #165	@ 0xa5
 800247c:	f002 f906 	bl	800468c <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ uxStackDepth - ( configSTACK_DEPTH_TYPE ) 1 ] );
 8002480:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002482:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002484:	6879      	ldr	r1, [r7, #4]
 8002486:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 800248a:	440b      	add	r3, r1
 800248c:	009b      	lsls	r3, r3, #2
 800248e:	4413      	add	r3, r2
 8002490:	61bb      	str	r3, [r7, #24]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
 8002492:	69bb      	ldr	r3, [r7, #24]
 8002494:	f023 0307 	bic.w	r3, r3, #7
 8002498:	61bb      	str	r3, [r7, #24]

        /* Check the alignment of the calculated top of stack is correct. */
        configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0U ) );
 800249a:	69bb      	ldr	r3, [r7, #24]
 800249c:	f003 0307 	and.w	r3, r3, #7
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d00d      	beq.n	80024c0 <prvInitialiseNewTask+0x5e>
    __asm volatile
 80024a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80024a8:	b672      	cpsid	i
 80024aa:	f383 8811 	msr	BASEPRI, r3
 80024ae:	f3bf 8f6f 	isb	sy
 80024b2:	f3bf 8f4f 	dsb	sy
 80024b6:	b662      	cpsie	i
 80024b8:	617b      	str	r3, [r7, #20]
}
 80024ba:	bf00      	nop
 80024bc:	bf00      	nop
 80024be:	e7fd      	b.n	80024bc <prvInitialiseNewTask+0x5a>
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( uxStackDepth - ( configSTACK_DEPTH_TYPE ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 80024c0:	68bb      	ldr	r3, [r7, #8]
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d01e      	beq.n	8002504 <prvInitialiseNewTask+0xa2>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80024c6:	2300      	movs	r3, #0
 80024c8:	61fb      	str	r3, [r7, #28]
 80024ca:	e012      	b.n	80024f2 <prvInitialiseNewTask+0x90>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80024cc:	68ba      	ldr	r2, [r7, #8]
 80024ce:	69fb      	ldr	r3, [r7, #28]
 80024d0:	4413      	add	r3, r2
 80024d2:	7819      	ldrb	r1, [r3, #0]
 80024d4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80024d6:	69fb      	ldr	r3, [r7, #28]
 80024d8:	4413      	add	r3, r2
 80024da:	3334      	adds	r3, #52	@ 0x34
 80024dc:	460a      	mov	r2, r1
 80024de:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 80024e0:	68ba      	ldr	r2, [r7, #8]
 80024e2:	69fb      	ldr	r3, [r7, #28]
 80024e4:	4413      	add	r3, r2
 80024e6:	781b      	ldrb	r3, [r3, #0]
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d006      	beq.n	80024fa <prvInitialiseNewTask+0x98>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80024ec:	69fb      	ldr	r3, [r7, #28]
 80024ee:	3301      	adds	r3, #1
 80024f0:	61fb      	str	r3, [r7, #28]
 80024f2:	69fb      	ldr	r3, [r7, #28]
 80024f4:	2b09      	cmp	r3, #9
 80024f6:	d9e9      	bls.n	80024cc <prvInitialiseNewTask+0x6a>
 80024f8:	e000      	b.n	80024fc <prvInitialiseNewTask+0x9a>
            {
                break;
 80024fa:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1U ] = '\0';
 80024fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80024fe:	2200      	movs	r2, #0
 8002500:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    {
        mtCOVERAGE_TEST_MARKER();
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 8002504:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002506:	2b04      	cmp	r3, #4
 8002508:	d90d      	bls.n	8002526 <prvInitialiseNewTask+0xc4>
    __asm volatile
 800250a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800250e:	b672      	cpsid	i
 8002510:	f383 8811 	msr	BASEPRI, r3
 8002514:	f3bf 8f6f 	isb	sy
 8002518:	f3bf 8f4f 	dsb	sy
 800251c:	b662      	cpsie	i
 800251e:	613b      	str	r3, [r7, #16]
}
 8002520:	bf00      	nop
 8002522:	bf00      	nop
 8002524:	e7fd      	b.n	8002522 <prvInitialiseNewTask+0xc0>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002526:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002528:	2b04      	cmp	r3, #4
 800252a:	d901      	bls.n	8002530 <prvInitialiseNewTask+0xce>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800252c:	2304      	movs	r3, #4
 800252e:	62bb      	str	r3, [r7, #40]	@ 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8002530:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002532:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002534:	62da      	str	r2, [r3, #44]	@ 0x2c
    #if ( configUSE_MUTEXES == 1 )
    {
        pxNewTCB->uxBasePriority = uxPriority;
 8002536:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002538:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800253a:	649a      	str	r2, [r3, #72]	@ 0x48
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800253c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800253e:	3304      	adds	r3, #4
 8002540:	4618      	mov	r0, r3
 8002542:	f7ff fbb9 	bl	8001cb8 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002546:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002548:	3318      	adds	r3, #24
 800254a:	4618      	mov	r0, r3
 800254c:	f7ff fbb4 	bl	8001cb8 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002550:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002552:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002554:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority );
 8002556:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002558:	f1c3 0205 	rsb	r2, r3, #5
 800255c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800255e:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002560:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002562:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002564:	625a      	str	r2, [r3, #36]	@ 0x24
            }
            #endif /* portSTACK_GROWTH */
        }
        #else /* portHAS_STACK_OVERFLOW_CHECKING */
        {
            pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002566:	683a      	ldr	r2, [r7, #0]
 8002568:	68f9      	ldr	r1, [r7, #12]
 800256a:	69b8      	ldr	r0, [r7, #24]
 800256c:	f001 f9ac 	bl	80038c8 <pxPortInitialiseStack>
 8002570:	4602      	mov	r2, r0
 8002572:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002574:	601a      	str	r2, [r3, #0]
            pxNewTCB->uxTaskAttributes |= taskATTRIBUTE_IS_IDLE;
        }
    }
    #endif /* #if ( configNUMBER_OF_CORES > 1 ) */

    if( pxCreatedTask != NULL )
 8002576:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002578:	2b00      	cmp	r3, #0
 800257a:	d002      	beq.n	8002582 <prvInitialiseNewTask+0x120>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800257c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800257e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002580:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002582:	bf00      	nop
 8002584:	3720      	adds	r7, #32
 8002586:	46bd      	mov	sp, r7
 8002588:	bd80      	pop	{r7, pc}
	...

0800258c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

#if ( configNUMBER_OF_CORES == 1 )

    static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
    {
 800258c:	b580      	push	{r7, lr}
 800258e:	b084      	sub	sp, #16
 8002590:	af00      	add	r7, sp, #0
 8002592:	6078      	str	r0, [r7, #4]
        /* Ensure interrupts don't access the task lists while the lists are being
         * updated. */
        taskENTER_CRITICAL();
 8002594:	f001 fafe 	bl	8003b94 <vPortEnterCritical>
        {
            uxCurrentNumberOfTasks = ( UBaseType_t ) ( uxCurrentNumberOfTasks + 1U );
 8002598:	4b41      	ldr	r3, [pc, #260]	@ (80026a0 <prvAddNewTaskToReadyList+0x114>)
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	3301      	adds	r3, #1
 800259e:	4a40      	ldr	r2, [pc, #256]	@ (80026a0 <prvAddNewTaskToReadyList+0x114>)
 80025a0:	6013      	str	r3, [r2, #0]

            if( pxCurrentTCB == NULL )
 80025a2:	4b40      	ldr	r3, [pc, #256]	@ (80026a4 <prvAddNewTaskToReadyList+0x118>)
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d109      	bne.n	80025be <prvAddNewTaskToReadyList+0x32>
            {
                /* There are no other tasks, or all the other tasks are in
                 * the suspended state - make this the current task. */
                pxCurrentTCB = pxNewTCB;
 80025aa:	4a3e      	ldr	r2, [pc, #248]	@ (80026a4 <prvAddNewTaskToReadyList+0x118>)
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	6013      	str	r3, [r2, #0]

                if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80025b0:	4b3b      	ldr	r3, [pc, #236]	@ (80026a0 <prvAddNewTaskToReadyList+0x114>)
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	2b01      	cmp	r3, #1
 80025b6:	d110      	bne.n	80025da <prvAddNewTaskToReadyList+0x4e>
                {
                    /* This is the first task to be created so do the preliminary
                     * initialisation required.  We will not recover if this call
                     * fails, but we will report the failure. */
                    prvInitialiseTaskLists();
 80025b8:	f000 fdb2 	bl	8003120 <prvInitialiseTaskLists>
 80025bc:	e00d      	b.n	80025da <prvAddNewTaskToReadyList+0x4e>
            else
            {
                /* If the scheduler is not already running, make this task the
                 * current task if it is the highest priority task to be created
                 * so far. */
                if( xSchedulerRunning == pdFALSE )
 80025be:	4b3a      	ldr	r3, [pc, #232]	@ (80026a8 <prvAddNewTaskToReadyList+0x11c>)
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d109      	bne.n	80025da <prvAddNewTaskToReadyList+0x4e>
                {
                    if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80025c6:	4b37      	ldr	r3, [pc, #220]	@ (80026a4 <prvAddNewTaskToReadyList+0x118>)
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80025d0:	429a      	cmp	r2, r3
 80025d2:	d802      	bhi.n	80025da <prvAddNewTaskToReadyList+0x4e>
                    {
                        pxCurrentTCB = pxNewTCB;
 80025d4:	4a33      	ldr	r2, [pc, #204]	@ (80026a4 <prvAddNewTaskToReadyList+0x118>)
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	6013      	str	r3, [r2, #0]
                {
                    mtCOVERAGE_TEST_MARKER();
                }
            }

            uxTaskNumber++;
 80025da:	4b34      	ldr	r3, [pc, #208]	@ (80026ac <prvAddNewTaskToReadyList+0x120>)
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	3301      	adds	r3, #1
 80025e0:	4a32      	ldr	r2, [pc, #200]	@ (80026ac <prvAddNewTaskToReadyList+0x120>)
 80025e2:	6013      	str	r3, [r2, #0]

            #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 80025e4:	4b31      	ldr	r3, [pc, #196]	@ (80026ac <prvAddNewTaskToReadyList+0x120>)
 80025e6:	681a      	ldr	r2, [r3, #0]
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	641a      	str	r2, [r3, #64]	@ 0x40
            }
            #endif /* configUSE_TRACE_FACILITY */
            traceTASK_CREATE( pxNewTCB );

            prvAddTaskToReadyList( pxNewTCB );
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80025f0:	2201      	movs	r2, #1
 80025f2:	409a      	lsls	r2, r3
 80025f4:	4b2e      	ldr	r3, [pc, #184]	@ (80026b0 <prvAddNewTaskToReadyList+0x124>)
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	4313      	orrs	r3, r2
 80025fa:	4a2d      	ldr	r2, [pc, #180]	@ (80026b0 <prvAddNewTaskToReadyList+0x124>)
 80025fc:	6013      	str	r3, [r2, #0]
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002602:	492c      	ldr	r1, [pc, #176]	@ (80026b4 <prvAddNewTaskToReadyList+0x128>)
 8002604:	4613      	mov	r3, r2
 8002606:	009b      	lsls	r3, r3, #2
 8002608:	4413      	add	r3, r2
 800260a:	009b      	lsls	r3, r3, #2
 800260c:	440b      	add	r3, r1
 800260e:	3304      	adds	r3, #4
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	60fb      	str	r3, [r7, #12]
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	68fa      	ldr	r2, [r7, #12]
 8002618:	609a      	str	r2, [r3, #8]
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	689a      	ldr	r2, [r3, #8]
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	60da      	str	r2, [r3, #12]
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	689b      	ldr	r3, [r3, #8]
 8002626:	687a      	ldr	r2, [r7, #4]
 8002628:	3204      	adds	r2, #4
 800262a:	605a      	str	r2, [r3, #4]
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	1d1a      	adds	r2, r3, #4
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	609a      	str	r2, [r3, #8]
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002638:	4613      	mov	r3, r2
 800263a:	009b      	lsls	r3, r3, #2
 800263c:	4413      	add	r3, r2
 800263e:	009b      	lsls	r3, r3, #2
 8002640:	4a1c      	ldr	r2, [pc, #112]	@ (80026b4 <prvAddNewTaskToReadyList+0x128>)
 8002642:	441a      	add	r2, r3
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	615a      	str	r2, [r3, #20]
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800264c:	4919      	ldr	r1, [pc, #100]	@ (80026b4 <prvAddNewTaskToReadyList+0x128>)
 800264e:	4613      	mov	r3, r2
 8002650:	009b      	lsls	r3, r3, #2
 8002652:	4413      	add	r3, r2
 8002654:	009b      	lsls	r3, r3, #2
 8002656:	440b      	add	r3, r1
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	687a      	ldr	r2, [r7, #4]
 800265c:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800265e:	1c59      	adds	r1, r3, #1
 8002660:	4814      	ldr	r0, [pc, #80]	@ (80026b4 <prvAddNewTaskToReadyList+0x128>)
 8002662:	4613      	mov	r3, r2
 8002664:	009b      	lsls	r3, r3, #2
 8002666:	4413      	add	r3, r2
 8002668:	009b      	lsls	r3, r3, #2
 800266a:	4403      	add	r3, r0
 800266c:	6019      	str	r1, [r3, #0]

            portSETUP_TCB( pxNewTCB );
        }
        taskEXIT_CRITICAL();
 800266e:	f001 fac7 	bl	8003c00 <vPortExitCritical>

        if( xSchedulerRunning != pdFALSE )
 8002672:	4b0d      	ldr	r3, [pc, #52]	@ (80026a8 <prvAddNewTaskToReadyList+0x11c>)
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	2b00      	cmp	r3, #0
 8002678:	d00e      	beq.n	8002698 <prvAddNewTaskToReadyList+0x10c>
        {
            /* If the created task is of a higher priority than the current task
             * then it should run now. */
            taskYIELD_ANY_CORE_IF_USING_PREEMPTION( pxNewTCB );
 800267a:	4b0a      	ldr	r3, [pc, #40]	@ (80026a4 <prvAddNewTaskToReadyList+0x118>)
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002684:	429a      	cmp	r2, r3
 8002686:	d207      	bcs.n	8002698 <prvAddNewTaskToReadyList+0x10c>
 8002688:	4b0b      	ldr	r3, [pc, #44]	@ (80026b8 <prvAddNewTaskToReadyList+0x12c>)
 800268a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800268e:	601a      	str	r2, [r3, #0]
 8002690:	f3bf 8f4f 	dsb	sy
 8002694:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8002698:	bf00      	nop
 800269a:	3710      	adds	r7, #16
 800269c:	46bd      	mov	sp, r7
 800269e:	bd80      	pop	{r7, pc}
 80026a0:	200001f4 	.word	0x200001f4
 80026a4:	2000011c 	.word	0x2000011c
 80026a8:	20000200 	.word	0x20000200
 80026ac:	20000210 	.word	0x20000210
 80026b0:	200001fc 	.word	0x200001fc
 80026b4:	20000120 	.word	0x20000120
 80026b8:	e000ed04 	.word	0xe000ed04

080026bc <prvCreateIdleTasks>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

static BaseType_t prvCreateIdleTasks( void )
{
 80026bc:	b580      	push	{r7, lr}
 80026be:	b08a      	sub	sp, #40	@ 0x28
 80026c0:	af02      	add	r7, sp, #8
    BaseType_t xReturn = pdPASS;
 80026c2:	2301      	movs	r3, #1
 80026c4:	61fb      	str	r3, [r7, #28]
    BaseType_t xCoreID;
    char cIdleName[ configMAX_TASK_NAME_LEN ] = { 0 };
 80026c6:	1d3b      	adds	r3, r7, #4
 80026c8:	2200      	movs	r2, #0
 80026ca:	601a      	str	r2, [r3, #0]
 80026cc:	605a      	str	r2, [r3, #4]
 80026ce:	811a      	strh	r2, [r3, #8]
    TaskFunction_t pxIdleTaskFunction = NULL;
 80026d0:	2300      	movs	r3, #0
 80026d2:	613b      	str	r3, [r7, #16]
    UBaseType_t xIdleTaskNameIndex;

    /* MISRA Ref 14.3.1 [Configuration dependent invariant] */
    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-143. */
    /* coverity[misra_c_2012_rule_14_3_violation] */
    for( xIdleTaskNameIndex = 0U; xIdleTaskNameIndex < ( configMAX_TASK_NAME_LEN - taskRESERVED_TASK_NAME_LENGTH ); xIdleTaskNameIndex++ )
 80026d4:	2300      	movs	r3, #0
 80026d6:	617b      	str	r3, [r7, #20]
 80026d8:	e011      	b.n	80026fe <prvCreateIdleTasks+0x42>
    {
        /* MISRA Ref 18.1.1 [Configuration dependent bounds checking] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-181. */
        /* coverity[misra_c_2012_rule_18_1_violation] */
        cIdleName[ xIdleTaskNameIndex ] = configIDLE_TASK_NAME[ xIdleTaskNameIndex ];
 80026da:	4a1f      	ldr	r2, [pc, #124]	@ (8002758 <prvCreateIdleTasks+0x9c>)
 80026dc:	697b      	ldr	r3, [r7, #20]
 80026de:	4413      	add	r3, r2
 80026e0:	7819      	ldrb	r1, [r3, #0]
 80026e2:	1d3a      	adds	r2, r7, #4
 80026e4:	697b      	ldr	r3, [r7, #20]
 80026e6:	4413      	add	r3, r2
 80026e8:	460a      	mov	r2, r1
 80026ea:	701a      	strb	r2, [r3, #0]

        if( cIdleName[ xIdleTaskNameIndex ] == ( char ) 0x00 )
 80026ec:	1d3a      	adds	r2, r7, #4
 80026ee:	697b      	ldr	r3, [r7, #20]
 80026f0:	4413      	add	r3, r2
 80026f2:	781b      	ldrb	r3, [r3, #0]
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d006      	beq.n	8002706 <prvCreateIdleTasks+0x4a>
    for( xIdleTaskNameIndex = 0U; xIdleTaskNameIndex < ( configMAX_TASK_NAME_LEN - taskRESERVED_TASK_NAME_LENGTH ); xIdleTaskNameIndex++ )
 80026f8:	697b      	ldr	r3, [r7, #20]
 80026fa:	3301      	adds	r3, #1
 80026fc:	617b      	str	r3, [r7, #20]
 80026fe:	697b      	ldr	r3, [r7, #20]
 8002700:	2b08      	cmp	r3, #8
 8002702:	d9ea      	bls.n	80026da <prvCreateIdleTasks+0x1e>
 8002704:	e000      	b.n	8002708 <prvCreateIdleTasks+0x4c>
        {
            break;
 8002706:	bf00      	nop
            mtCOVERAGE_TEST_MARKER();
        }
    }

    /* Ensure null termination. */
    cIdleName[ xIdleTaskNameIndex ] = '\0';
 8002708:	1d3a      	adds	r2, r7, #4
 800270a:	697b      	ldr	r3, [r7, #20]
 800270c:	4413      	add	r3, r2
 800270e:	2200      	movs	r2, #0
 8002710:	701a      	strb	r2, [r3, #0]

    /* Add each idle task at the lowest priority. */
    for( xCoreID = ( BaseType_t ) 0; xCoreID < ( BaseType_t ) configNUMBER_OF_CORES; xCoreID++ )
 8002712:	2300      	movs	r3, #0
 8002714:	61bb      	str	r3, [r7, #24]
 8002716:	e015      	b.n	8002744 <prvCreateIdleTasks+0x88>
    {
        #if ( configNUMBER_OF_CORES == 1 )
        {
            pxIdleTaskFunction = &prvIdleTask;
 8002718:	4b10      	ldr	r3, [pc, #64]	@ (800275c <prvCreateIdleTasks+0xa0>)
 800271a:	613b      	str	r3, [r7, #16]
            }
        }
        #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( pxIdleTaskFunction,
 800271c:	69bb      	ldr	r3, [r7, #24]
 800271e:	009b      	lsls	r3, r3, #2
 8002720:	4a0f      	ldr	r2, [pc, #60]	@ (8002760 <prvCreateIdleTasks+0xa4>)
 8002722:	4413      	add	r3, r2
 8002724:	1d39      	adds	r1, r7, #4
 8002726:	9301      	str	r3, [sp, #4]
 8002728:	2300      	movs	r3, #0
 800272a:	9300      	str	r3, [sp, #0]
 800272c:	2300      	movs	r3, #0
 800272e:	2282      	movs	r2, #130	@ 0x82
 8002730:	6938      	ldr	r0, [r7, #16]
 8002732:	f7ff fe73 	bl	800241c <xTaskCreate>
 8002736:	61f8      	str	r0, [r7, #28]
                                   &xIdleTaskHandles[ xCoreID ] );
        }
        #endif /* configSUPPORT_STATIC_ALLOCATION */

        /* Break the loop if any of the idle task is failed to be created. */
        if( xReturn != pdPASS )
 8002738:	69fb      	ldr	r3, [r7, #28]
 800273a:	2b01      	cmp	r3, #1
 800273c:	d106      	bne.n	800274c <prvCreateIdleTasks+0x90>
    for( xCoreID = ( BaseType_t ) 0; xCoreID < ( BaseType_t ) configNUMBER_OF_CORES; xCoreID++ )
 800273e:	69bb      	ldr	r3, [r7, #24]
 8002740:	3301      	adds	r3, #1
 8002742:	61bb      	str	r3, [r7, #24]
 8002744:	69bb      	ldr	r3, [r7, #24]
 8002746:	2b00      	cmp	r3, #0
 8002748:	dde6      	ble.n	8002718 <prvCreateIdleTasks+0x5c>
 800274a:	e000      	b.n	800274e <prvCreateIdleTasks+0x92>
        {
            break;
 800274c:	bf00      	nop
            }
            #endif
        }
    }

    return xReturn;
 800274e:	69fb      	ldr	r3, [r7, #28]
}
 8002750:	4618      	mov	r0, r3
 8002752:	3720      	adds	r7, #32
 8002754:	46bd      	mov	sp, r7
 8002756:	bd80      	pop	{r7, pc}
 8002758:	08004c74 	.word	0x08004c74
 800275c:	080030f1 	.word	0x080030f1
 8002760:	20000218 	.word	0x20000218

08002764 <vTaskStartScheduler>:

/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002764:	b580      	push	{r7, lr}
 8002766:	b084      	sub	sp, #16
 8002768:	af00      	add	r7, sp, #0
         * the number of bits as confNUMBER_OF_CORES. */
        configASSERT( ( sizeof( UBaseType_t ) * taskBITS_PER_BYTE ) >= configNUMBER_OF_CORES );
    }
    #endif /* #if ( configUSE_CORE_AFFINITY == 1 ) && ( configNUMBER_OF_CORES > 1 ) */

    xReturn = prvCreateIdleTasks();
 800276a:	f7ff ffa7 	bl	80026bc <prvCreateIdleTasks>
 800276e:	60f8      	str	r0, [r7, #12]

    #if ( configUSE_TIMERS == 1 )
    {
        if( xReturn == pdPASS )
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	2b01      	cmp	r3, #1
 8002774:	d102      	bne.n	800277c <vTaskStartScheduler+0x18>
        {
            xReturn = xTimerCreateTimerTask();
 8002776:	f000 fe0d 	bl	8003394 <xTimerCreateTimerTask>
 800277a:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	2b01      	cmp	r3, #1
 8002780:	d118      	bne.n	80027b4 <vTaskStartScheduler+0x50>
    __asm volatile
 8002782:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002786:	b672      	cpsid	i
 8002788:	f383 8811 	msr	BASEPRI, r3
 800278c:	f3bf 8f6f 	isb	sy
 8002790:	f3bf 8f4f 	dsb	sy
 8002794:	b662      	cpsie	i
 8002796:	60bb      	str	r3, [r7, #8]
}
 8002798:	bf00      	nop
             * block specific to the task that will run first. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif

        xNextTaskUnblockTime = portMAX_DELAY;
 800279a:	4b12      	ldr	r3, [pc, #72]	@ (80027e4 <vTaskStartScheduler+0x80>)
 800279c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80027a0:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 80027a2:	4b11      	ldr	r3, [pc, #68]	@ (80027e8 <vTaskStartScheduler+0x84>)
 80027a4:	2201      	movs	r2, #1
 80027a6:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80027a8:	4b10      	ldr	r3, [pc, #64]	@ (80027ec <vTaskStartScheduler+0x88>)
 80027aa:	2200      	movs	r2, #0
 80027ac:	601a      	str	r2, [r3, #0]
        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */

        /* The return value for xPortStartScheduler is not required
         * hence using a void datatype. */
        ( void ) xPortStartScheduler();
 80027ae:	f001 f921 	bl	80039f4 <xPortStartScheduler>
 80027b2:	e011      	b.n	80027d8 <vTaskStartScheduler+0x74>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80027ba:	d10d      	bne.n	80027d8 <vTaskStartScheduler+0x74>
    __asm volatile
 80027bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80027c0:	b672      	cpsid	i
 80027c2:	f383 8811 	msr	BASEPRI, r3
 80027c6:	f3bf 8f6f 	isb	sy
 80027ca:	f3bf 8f4f 	dsb	sy
 80027ce:	b662      	cpsie	i
 80027d0:	607b      	str	r3, [r7, #4]
}
 80027d2:	bf00      	nop
 80027d4:	bf00      	nop
 80027d6:	e7fd      	b.n	80027d4 <vTaskStartScheduler+0x70>
     * meaning xIdleTaskHandles are not used anywhere else. */
    ( void ) xIdleTaskHandles;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 80027d8:	4b05      	ldr	r3, [pc, #20]	@ (80027f0 <vTaskStartScheduler+0x8c>)
 80027da:	681b      	ldr	r3, [r3, #0]

    traceRETURN_vTaskStartScheduler();
}
 80027dc:	bf00      	nop
 80027de:	3710      	adds	r7, #16
 80027e0:	46bd      	mov	sp, r7
 80027e2:	bd80      	pop	{r7, pc}
 80027e4:	20000214 	.word	0x20000214
 80027e8:	20000200 	.word	0x20000200
 80027ec:	200001f8 	.word	0x200001f8
 80027f0:	08004ca4 	.word	0x08004ca4

080027f4 <vTaskSuspendAll>:
    traceRETURN_vTaskEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80027f4:	b480      	push	{r7}
 80027f6:	af00      	add	r7, sp, #0
         * do not otherwise exhibit real time behaviour. */
        portSOFTWARE_BARRIER();

        /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
         * is used to allow calls to vTaskSuspendAll() to nest. */
        uxSchedulerSuspended = ( UBaseType_t ) ( uxSchedulerSuspended + 1U );
 80027f8:	4b04      	ldr	r3, [pc, #16]	@ (800280c <vTaskSuspendAll+0x18>)
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	3301      	adds	r3, #1
 80027fe:	4a03      	ldr	r2, [pc, #12]	@ (800280c <vTaskSuspendAll+0x18>)
 8002800:	6013      	str	r3, [r2, #0]
        }
    }
    #endif /* #if ( configNUMBER_OF_CORES == 1 ) */

    traceRETURN_vTaskSuspendAll();
}
 8002802:	bf00      	nop
 8002804:	46bd      	mov	sp, r7
 8002806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800280a:	4770      	bx	lr
 800280c:	2000021c 	.word	0x2000021c

08002810 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8002810:	b580      	push	{r7, lr}
 8002812:	b088      	sub	sp, #32
 8002814:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8002816:	2300      	movs	r3, #0
 8002818:	61fb      	str	r3, [r7, #28]
    BaseType_t xAlreadyYielded = pdFALSE;
 800281a:	2300      	movs	r3, #0
 800281c:	61bb      	str	r3, [r7, #24]
        /* It is possible that an ISR caused a task to be removed from an event
         * list while the scheduler was suspended.  If this was the case then the
         * removed task will have been added to the xPendingReadyList.  Once the
         * scheduler has been resumed it is safe to move all the pending ready
         * tasks from this list into their appropriate ready list. */
        taskENTER_CRITICAL();
 800281e:	f001 f9b9 	bl	8003b94 <vPortEnterCritical>
        {
            const BaseType_t xCoreID = ( BaseType_t ) portGET_CORE_ID();
 8002822:	2300      	movs	r3, #0
 8002824:	613b      	str	r3, [r7, #16]

            /* If uxSchedulerSuspended is zero then this function does not match a
             * previous call to vTaskSuspendAll(). */
            configASSERT( uxSchedulerSuspended != 0U );
 8002826:	4b76      	ldr	r3, [pc, #472]	@ (8002a00 <xTaskResumeAll+0x1f0>)
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	2b00      	cmp	r3, #0
 800282c:	d10d      	bne.n	800284a <xTaskResumeAll+0x3a>
    __asm volatile
 800282e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002832:	b672      	cpsid	i
 8002834:	f383 8811 	msr	BASEPRI, r3
 8002838:	f3bf 8f6f 	isb	sy
 800283c:	f3bf 8f4f 	dsb	sy
 8002840:	b662      	cpsie	i
 8002842:	603b      	str	r3, [r7, #0]
}
 8002844:	bf00      	nop
 8002846:	bf00      	nop
 8002848:	e7fd      	b.n	8002846 <xTaskResumeAll+0x36>

            uxSchedulerSuspended = ( UBaseType_t ) ( uxSchedulerSuspended - 1U );
 800284a:	4b6d      	ldr	r3, [pc, #436]	@ (8002a00 <xTaskResumeAll+0x1f0>)
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	3b01      	subs	r3, #1
 8002850:	4a6b      	ldr	r2, [pc, #428]	@ (8002a00 <xTaskResumeAll+0x1f0>)
 8002852:	6013      	str	r3, [r2, #0]
            portRELEASE_TASK_LOCK( xCoreID );

            if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 8002854:	4b6a      	ldr	r3, [pc, #424]	@ (8002a00 <xTaskResumeAll+0x1f0>)
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	2b00      	cmp	r3, #0
 800285a:	f040 80ca 	bne.w	80029f2 <xTaskResumeAll+0x1e2>
            {
                if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800285e:	4b69      	ldr	r3, [pc, #420]	@ (8002a04 <xTaskResumeAll+0x1f4>)
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	2b00      	cmp	r3, #0
 8002864:	f000 80c5 	beq.w	80029f2 <xTaskResumeAll+0x1e2>
                {
                    /* Move any readied tasks from the pending list into the
                     * appropriate ready list. */
                    while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002868:	e08e      	b.n	8002988 <xTaskResumeAll+0x178>
                    {
                        /* MISRA Ref 11.5.3 [Void pointer assignment] */
                        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                        /* coverity[misra_c_2012_rule_11_5_violation] */
                        pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800286a:	4b67      	ldr	r3, [pc, #412]	@ (8002a08 <xTaskResumeAll+0x1f8>)
 800286c:	68db      	ldr	r3, [r3, #12]
 800286e:	68db      	ldr	r3, [r3, #12]
 8002870:	61fb      	str	r3, [r7, #28]
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8002872:	69fb      	ldr	r3, [r7, #28]
 8002874:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002876:	60fb      	str	r3, [r7, #12]
 8002878:	69fb      	ldr	r3, [r7, #28]
 800287a:	69db      	ldr	r3, [r3, #28]
 800287c:	69fa      	ldr	r2, [r7, #28]
 800287e:	6a12      	ldr	r2, [r2, #32]
 8002880:	609a      	str	r2, [r3, #8]
 8002882:	69fb      	ldr	r3, [r7, #28]
 8002884:	6a1b      	ldr	r3, [r3, #32]
 8002886:	69fa      	ldr	r2, [r7, #28]
 8002888:	69d2      	ldr	r2, [r2, #28]
 800288a:	605a      	str	r2, [r3, #4]
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	685a      	ldr	r2, [r3, #4]
 8002890:	69fb      	ldr	r3, [r7, #28]
 8002892:	3318      	adds	r3, #24
 8002894:	429a      	cmp	r2, r3
 8002896:	d103      	bne.n	80028a0 <xTaskResumeAll+0x90>
 8002898:	69fb      	ldr	r3, [r7, #28]
 800289a:	6a1a      	ldr	r2, [r3, #32]
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	605a      	str	r2, [r3, #4]
 80028a0:	69fb      	ldr	r3, [r7, #28]
 80028a2:	2200      	movs	r2, #0
 80028a4:	629a      	str	r2, [r3, #40]	@ 0x28
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	1e5a      	subs	r2, r3, #1
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	601a      	str	r2, [r3, #0]
                        portMEMORY_BARRIER();
                        listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 80028b0:	69fb      	ldr	r3, [r7, #28]
 80028b2:	695b      	ldr	r3, [r3, #20]
 80028b4:	60bb      	str	r3, [r7, #8]
 80028b6:	69fb      	ldr	r3, [r7, #28]
 80028b8:	689b      	ldr	r3, [r3, #8]
 80028ba:	69fa      	ldr	r2, [r7, #28]
 80028bc:	68d2      	ldr	r2, [r2, #12]
 80028be:	609a      	str	r2, [r3, #8]
 80028c0:	69fb      	ldr	r3, [r7, #28]
 80028c2:	68db      	ldr	r3, [r3, #12]
 80028c4:	69fa      	ldr	r2, [r7, #28]
 80028c6:	6892      	ldr	r2, [r2, #8]
 80028c8:	605a      	str	r2, [r3, #4]
 80028ca:	68bb      	ldr	r3, [r7, #8]
 80028cc:	685a      	ldr	r2, [r3, #4]
 80028ce:	69fb      	ldr	r3, [r7, #28]
 80028d0:	3304      	adds	r3, #4
 80028d2:	429a      	cmp	r2, r3
 80028d4:	d103      	bne.n	80028de <xTaskResumeAll+0xce>
 80028d6:	69fb      	ldr	r3, [r7, #28]
 80028d8:	68da      	ldr	r2, [r3, #12]
 80028da:	68bb      	ldr	r3, [r7, #8]
 80028dc:	605a      	str	r2, [r3, #4]
 80028de:	69fb      	ldr	r3, [r7, #28]
 80028e0:	2200      	movs	r2, #0
 80028e2:	615a      	str	r2, [r3, #20]
 80028e4:	68bb      	ldr	r3, [r7, #8]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	1e5a      	subs	r2, r3, #1
 80028ea:	68bb      	ldr	r3, [r7, #8]
 80028ec:	601a      	str	r2, [r3, #0]
                        prvAddTaskToReadyList( pxTCB );
 80028ee:	69fb      	ldr	r3, [r7, #28]
 80028f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80028f2:	2201      	movs	r2, #1
 80028f4:	409a      	lsls	r2, r3
 80028f6:	4b45      	ldr	r3, [pc, #276]	@ (8002a0c <xTaskResumeAll+0x1fc>)
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	4313      	orrs	r3, r2
 80028fc:	4a43      	ldr	r2, [pc, #268]	@ (8002a0c <xTaskResumeAll+0x1fc>)
 80028fe:	6013      	str	r3, [r2, #0]
 8002900:	69fb      	ldr	r3, [r7, #28]
 8002902:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002904:	4942      	ldr	r1, [pc, #264]	@ (8002a10 <xTaskResumeAll+0x200>)
 8002906:	4613      	mov	r3, r2
 8002908:	009b      	lsls	r3, r3, #2
 800290a:	4413      	add	r3, r2
 800290c:	009b      	lsls	r3, r3, #2
 800290e:	440b      	add	r3, r1
 8002910:	3304      	adds	r3, #4
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	607b      	str	r3, [r7, #4]
 8002916:	69fb      	ldr	r3, [r7, #28]
 8002918:	687a      	ldr	r2, [r7, #4]
 800291a:	609a      	str	r2, [r3, #8]
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	689a      	ldr	r2, [r3, #8]
 8002920:	69fb      	ldr	r3, [r7, #28]
 8002922:	60da      	str	r2, [r3, #12]
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	689b      	ldr	r3, [r3, #8]
 8002928:	69fa      	ldr	r2, [r7, #28]
 800292a:	3204      	adds	r2, #4
 800292c:	605a      	str	r2, [r3, #4]
 800292e:	69fb      	ldr	r3, [r7, #28]
 8002930:	1d1a      	adds	r2, r3, #4
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	609a      	str	r2, [r3, #8]
 8002936:	69fb      	ldr	r3, [r7, #28]
 8002938:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800293a:	4613      	mov	r3, r2
 800293c:	009b      	lsls	r3, r3, #2
 800293e:	4413      	add	r3, r2
 8002940:	009b      	lsls	r3, r3, #2
 8002942:	4a33      	ldr	r2, [pc, #204]	@ (8002a10 <xTaskResumeAll+0x200>)
 8002944:	441a      	add	r2, r3
 8002946:	69fb      	ldr	r3, [r7, #28]
 8002948:	615a      	str	r2, [r3, #20]
 800294a:	69fb      	ldr	r3, [r7, #28]
 800294c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800294e:	4930      	ldr	r1, [pc, #192]	@ (8002a10 <xTaskResumeAll+0x200>)
 8002950:	4613      	mov	r3, r2
 8002952:	009b      	lsls	r3, r3, #2
 8002954:	4413      	add	r3, r2
 8002956:	009b      	lsls	r3, r3, #2
 8002958:	440b      	add	r3, r1
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	69fa      	ldr	r2, [r7, #28]
 800295e:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8002960:	1c59      	adds	r1, r3, #1
 8002962:	482b      	ldr	r0, [pc, #172]	@ (8002a10 <xTaskResumeAll+0x200>)
 8002964:	4613      	mov	r3, r2
 8002966:	009b      	lsls	r3, r3, #2
 8002968:	4413      	add	r3, r2
 800296a:	009b      	lsls	r3, r3, #2
 800296c:	4403      	add	r3, r0
 800296e:	6019      	str	r1, [r3, #0]

                        #if ( configNUMBER_OF_CORES == 1 )
                        {
                            /* If the moved task has a priority higher than the current
                             * task then a yield must be performed. */
                            if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8002970:	69fb      	ldr	r3, [r7, #28]
 8002972:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002974:	4b27      	ldr	r3, [pc, #156]	@ (8002a14 <xTaskResumeAll+0x204>)
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800297a:	429a      	cmp	r2, r3
 800297c:	d904      	bls.n	8002988 <xTaskResumeAll+0x178>
                            {
                                xYieldPendings[ xCoreID ] = pdTRUE;
 800297e:	4a26      	ldr	r2, [pc, #152]	@ (8002a18 <xTaskResumeAll+0x208>)
 8002980:	693b      	ldr	r3, [r7, #16]
 8002982:	2101      	movs	r1, #1
 8002984:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                    while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002988:	4b1f      	ldr	r3, [pc, #124]	@ (8002a08 <xTaskResumeAll+0x1f8>)
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	2b00      	cmp	r3, #0
 800298e:	f47f af6c 	bne.w	800286a <xTaskResumeAll+0x5a>
                             * which sets xYieldPendings for the current core to pdTRUE. */
                        }
                        #endif /* #if ( configNUMBER_OF_CORES == 1 ) */
                    }

                    if( pxTCB != NULL )
 8002992:	69fb      	ldr	r3, [r7, #28]
 8002994:	2b00      	cmp	r3, #0
 8002996:	d001      	beq.n	800299c <xTaskResumeAll+0x18c>
                         * which may have prevented the next unblock time from being
                         * re-calculated, in which case re-calculate it now.  Mainly
                         * important for low power tickless implementations, where
                         * this can prevent an unnecessary exit from low power
                         * state. */
                        prvResetNextTaskUnblockTime();
 8002998:	f000 fc40 	bl	800321c <prvResetNextTaskUnblockTime>
                     * It should be safe to call xTaskIncrementTick here from any core
                     * since we are in a critical section and xTaskIncrementTick itself
                     * protects itself within a critical section. Suspending the scheduler
                     * from any core causes xTaskIncrementTick to increment uxPendedCounts. */
                    {
                        TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800299c:	4b1f      	ldr	r3, [pc, #124]	@ (8002a1c <xTaskResumeAll+0x20c>)
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	617b      	str	r3, [r7, #20]

                        if( xPendedCounts > ( TickType_t ) 0U )
 80029a2:	697b      	ldr	r3, [r7, #20]
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d012      	beq.n	80029ce <xTaskResumeAll+0x1be>
                        {
                            do
                            {
                                if( xTaskIncrementTick() != pdFALSE )
 80029a8:	f000 f84c 	bl	8002a44 <xTaskIncrementTick>
 80029ac:	4603      	mov	r3, r0
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d004      	beq.n	80029bc <xTaskResumeAll+0x1ac>
                                {
                                    /* Other cores are interrupted from
                                     * within xTaskIncrementTick(). */
                                    xYieldPendings[ xCoreID ] = pdTRUE;
 80029b2:	4a19      	ldr	r2, [pc, #100]	@ (8002a18 <xTaskResumeAll+0x208>)
 80029b4:	693b      	ldr	r3, [r7, #16]
 80029b6:	2101      	movs	r1, #1
 80029b8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                                else
                                {
                                    mtCOVERAGE_TEST_MARKER();
                                }

                                --xPendedCounts;
 80029bc:	697b      	ldr	r3, [r7, #20]
 80029be:	3b01      	subs	r3, #1
 80029c0:	617b      	str	r3, [r7, #20]
                            } while( xPendedCounts > ( TickType_t ) 0U );
 80029c2:	697b      	ldr	r3, [r7, #20]
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d1ef      	bne.n	80029a8 <xTaskResumeAll+0x198>

                            xPendedTicks = 0;
 80029c8:	4b14      	ldr	r3, [pc, #80]	@ (8002a1c <xTaskResumeAll+0x20c>)
 80029ca:	2200      	movs	r2, #0
 80029cc:	601a      	str	r2, [r3, #0]
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }

                    if( xYieldPendings[ xCoreID ] != pdFALSE )
 80029ce:	4a12      	ldr	r2, [pc, #72]	@ (8002a18 <xTaskResumeAll+0x208>)
 80029d0:	693b      	ldr	r3, [r7, #16]
 80029d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d00b      	beq.n	80029f2 <xTaskResumeAll+0x1e2>
                    {
                        #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 80029da:	2301      	movs	r3, #1
 80029dc:	61bb      	str	r3, [r7, #24]
                        }
                        #endif /* #if ( configUSE_PREEMPTION != 0 ) */

                        #if ( configNUMBER_OF_CORES == 1 )
                        {
                            taskYIELD_TASK_CORE_IF_USING_PREEMPTION( pxCurrentTCB );
 80029de:	4b0d      	ldr	r3, [pc, #52]	@ (8002a14 <xTaskResumeAll+0x204>)
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	4b0f      	ldr	r3, [pc, #60]	@ (8002a20 <xTaskResumeAll+0x210>)
 80029e4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80029e8:	601a      	str	r2, [r3, #0]
 80029ea:	f3bf 8f4f 	dsb	sy
 80029ee:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 80029f2:	f001 f905 	bl	8003c00 <vPortExitCritical>
    }

    traceRETURN_xTaskResumeAll( xAlreadyYielded );

    return xAlreadyYielded;
 80029f6:	69bb      	ldr	r3, [r7, #24]
}
 80029f8:	4618      	mov	r0, r3
 80029fa:	3720      	adds	r7, #32
 80029fc:	46bd      	mov	sp, r7
 80029fe:	bd80      	pop	{r7, pc}
 8002a00:	2000021c 	.word	0x2000021c
 8002a04:	200001f4 	.word	0x200001f4
 8002a08:	200001b4 	.word	0x200001b4
 8002a0c:	200001fc 	.word	0x200001fc
 8002a10:	20000120 	.word	0x20000120
 8002a14:	2000011c 	.word	0x2000011c
 8002a18:	20000208 	.word	0x20000208
 8002a1c:	20000204 	.word	0x20000204
 8002a20:	e000ed04 	.word	0xe000ed04

08002a24 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8002a24:	b480      	push	{r7}
 8002a26:	b083      	sub	sp, #12
 8002a28:	af00      	add	r7, sp, #0
    traceENTER_xTaskGetTickCount();

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 8002a2a:	4b05      	ldr	r3, [pc, #20]	@ (8002a40 <xTaskGetTickCount+0x1c>)
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    traceRETURN_xTaskGetTickCount( xTicks );

    return xTicks;
 8002a30:	687b      	ldr	r3, [r7, #4]
}
 8002a32:	4618      	mov	r0, r3
 8002a34:	370c      	adds	r7, #12
 8002a36:	46bd      	mov	sp, r7
 8002a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a3c:	4770      	bx	lr
 8002a3e:	bf00      	nop
 8002a40:	200001f8 	.word	0x200001f8

08002a44 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8002a44:	b580      	push	{r7, lr}
 8002a46:	b08a      	sub	sp, #40	@ 0x28
 8002a48:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8002a4a:	2300      	movs	r3, #0
 8002a4c:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Tick increment should occur on every kernel timer event. Core 0 has the
     * responsibility to increment the tick, or increment the pended ticks if the
     * scheduler is suspended.  If pended ticks is greater than zero, the core that
     * calls xTaskResumeAll has the responsibility to increment the tick. */
    if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 8002a4e:	4b80      	ldr	r3, [pc, #512]	@ (8002c50 <xTaskIncrementTick+0x20c>)
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	f040 80f1 	bne.w	8002c3a <xTaskIncrementTick+0x1f6>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8002a58:	4b7e      	ldr	r3, [pc, #504]	@ (8002c54 <xTaskIncrementTick+0x210>)
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	3301      	adds	r3, #1
 8002a5e:	623b      	str	r3, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8002a60:	4a7c      	ldr	r2, [pc, #496]	@ (8002c54 <xTaskIncrementTick+0x210>)
 8002a62:	6a3b      	ldr	r3, [r7, #32]
 8002a64:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U )
 8002a66:	6a3b      	ldr	r3, [r7, #32]
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d123      	bne.n	8002ab4 <xTaskIncrementTick+0x70>
        {
            taskSWITCH_DELAYED_LISTS();
 8002a6c:	4b7a      	ldr	r3, [pc, #488]	@ (8002c58 <xTaskIncrementTick+0x214>)
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d00d      	beq.n	8002a92 <xTaskIncrementTick+0x4e>
    __asm volatile
 8002a76:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002a7a:	b672      	cpsid	i
 8002a7c:	f383 8811 	msr	BASEPRI, r3
 8002a80:	f3bf 8f6f 	isb	sy
 8002a84:	f3bf 8f4f 	dsb	sy
 8002a88:	b662      	cpsie	i
 8002a8a:	607b      	str	r3, [r7, #4]
}
 8002a8c:	bf00      	nop
 8002a8e:	bf00      	nop
 8002a90:	e7fd      	b.n	8002a8e <xTaskIncrementTick+0x4a>
 8002a92:	4b71      	ldr	r3, [pc, #452]	@ (8002c58 <xTaskIncrementTick+0x214>)
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	61fb      	str	r3, [r7, #28]
 8002a98:	4b70      	ldr	r3, [pc, #448]	@ (8002c5c <xTaskIncrementTick+0x218>)
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	4a6e      	ldr	r2, [pc, #440]	@ (8002c58 <xTaskIncrementTick+0x214>)
 8002a9e:	6013      	str	r3, [r2, #0]
 8002aa0:	4a6e      	ldr	r2, [pc, #440]	@ (8002c5c <xTaskIncrementTick+0x218>)
 8002aa2:	69fb      	ldr	r3, [r7, #28]
 8002aa4:	6013      	str	r3, [r2, #0]
 8002aa6:	4b6e      	ldr	r3, [pc, #440]	@ (8002c60 <xTaskIncrementTick+0x21c>)
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	3301      	adds	r3, #1
 8002aac:	4a6c      	ldr	r2, [pc, #432]	@ (8002c60 <xTaskIncrementTick+0x21c>)
 8002aae:	6013      	str	r3, [r2, #0]
 8002ab0:	f000 fbb4 	bl	800321c <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8002ab4:	4b6b      	ldr	r3, [pc, #428]	@ (8002c64 <xTaskIncrementTick+0x220>)
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	6a3a      	ldr	r2, [r7, #32]
 8002aba:	429a      	cmp	r2, r3
 8002abc:	f0c0 80a8 	bcc.w	8002c10 <xTaskIncrementTick+0x1cc>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002ac0:	4b65      	ldr	r3, [pc, #404]	@ (8002c58 <xTaskIncrementTick+0x214>)
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d104      	bne.n	8002ad4 <xTaskIncrementTick+0x90>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY;
 8002aca:	4b66      	ldr	r3, [pc, #408]	@ (8002c64 <xTaskIncrementTick+0x220>)
 8002acc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002ad0:	601a      	str	r2, [r3, #0]
                    break;
 8002ad2:	e09d      	b.n	8002c10 <xTaskIncrementTick+0x1cc>
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    /* MISRA Ref 11.5.3 [Void pointer assignment] */
                    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                    /* coverity[misra_c_2012_rule_11_5_violation] */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8002ad4:	4b60      	ldr	r3, [pc, #384]	@ (8002c58 <xTaskIncrementTick+0x214>)
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	68db      	ldr	r3, [r3, #12]
 8002ada:	68db      	ldr	r3, [r3, #12]
 8002adc:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8002ade:	69bb      	ldr	r3, [r7, #24]
 8002ae0:	685b      	ldr	r3, [r3, #4]
 8002ae2:	617b      	str	r3, [r7, #20]

                    if( xConstTickCount < xItemValue )
 8002ae4:	6a3a      	ldr	r2, [r7, #32]
 8002ae6:	697b      	ldr	r3, [r7, #20]
 8002ae8:	429a      	cmp	r2, r3
 8002aea:	d203      	bcs.n	8002af4 <xTaskIncrementTick+0xb0>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8002aec:	4a5d      	ldr	r2, [pc, #372]	@ (8002c64 <xTaskIncrementTick+0x220>)
 8002aee:	697b      	ldr	r3, [r7, #20]
 8002af0:	6013      	str	r3, [r2, #0]
                        break;
 8002af2:	e08d      	b.n	8002c10 <xTaskIncrementTick+0x1cc>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8002af4:	69bb      	ldr	r3, [r7, #24]
 8002af6:	695b      	ldr	r3, [r3, #20]
 8002af8:	613b      	str	r3, [r7, #16]
 8002afa:	69bb      	ldr	r3, [r7, #24]
 8002afc:	689b      	ldr	r3, [r3, #8]
 8002afe:	69ba      	ldr	r2, [r7, #24]
 8002b00:	68d2      	ldr	r2, [r2, #12]
 8002b02:	609a      	str	r2, [r3, #8]
 8002b04:	69bb      	ldr	r3, [r7, #24]
 8002b06:	68db      	ldr	r3, [r3, #12]
 8002b08:	69ba      	ldr	r2, [r7, #24]
 8002b0a:	6892      	ldr	r2, [r2, #8]
 8002b0c:	605a      	str	r2, [r3, #4]
 8002b0e:	693b      	ldr	r3, [r7, #16]
 8002b10:	685a      	ldr	r2, [r3, #4]
 8002b12:	69bb      	ldr	r3, [r7, #24]
 8002b14:	3304      	adds	r3, #4
 8002b16:	429a      	cmp	r2, r3
 8002b18:	d103      	bne.n	8002b22 <xTaskIncrementTick+0xde>
 8002b1a:	69bb      	ldr	r3, [r7, #24]
 8002b1c:	68da      	ldr	r2, [r3, #12]
 8002b1e:	693b      	ldr	r3, [r7, #16]
 8002b20:	605a      	str	r2, [r3, #4]
 8002b22:	69bb      	ldr	r3, [r7, #24]
 8002b24:	2200      	movs	r2, #0
 8002b26:	615a      	str	r2, [r3, #20]
 8002b28:	693b      	ldr	r3, [r7, #16]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	1e5a      	subs	r2, r3, #1
 8002b2e:	693b      	ldr	r3, [r7, #16]
 8002b30:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002b32:	69bb      	ldr	r3, [r7, #24]
 8002b34:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d01e      	beq.n	8002b78 <xTaskIncrementTick+0x134>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8002b3a:	69bb      	ldr	r3, [r7, #24]
 8002b3c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b3e:	60fb      	str	r3, [r7, #12]
 8002b40:	69bb      	ldr	r3, [r7, #24]
 8002b42:	69db      	ldr	r3, [r3, #28]
 8002b44:	69ba      	ldr	r2, [r7, #24]
 8002b46:	6a12      	ldr	r2, [r2, #32]
 8002b48:	609a      	str	r2, [r3, #8]
 8002b4a:	69bb      	ldr	r3, [r7, #24]
 8002b4c:	6a1b      	ldr	r3, [r3, #32]
 8002b4e:	69ba      	ldr	r2, [r7, #24]
 8002b50:	69d2      	ldr	r2, [r2, #28]
 8002b52:	605a      	str	r2, [r3, #4]
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	685a      	ldr	r2, [r3, #4]
 8002b58:	69bb      	ldr	r3, [r7, #24]
 8002b5a:	3318      	adds	r3, #24
 8002b5c:	429a      	cmp	r2, r3
 8002b5e:	d103      	bne.n	8002b68 <xTaskIncrementTick+0x124>
 8002b60:	69bb      	ldr	r3, [r7, #24]
 8002b62:	6a1a      	ldr	r2, [r3, #32]
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	605a      	str	r2, [r3, #4]
 8002b68:	69bb      	ldr	r3, [r7, #24]
 8002b6a:	2200      	movs	r2, #0
 8002b6c:	629a      	str	r2, [r3, #40]	@ 0x28
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	1e5a      	subs	r2, r3, #1
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8002b78:	69bb      	ldr	r3, [r7, #24]
 8002b7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b7c:	2201      	movs	r2, #1
 8002b7e:	409a      	lsls	r2, r3
 8002b80:	4b39      	ldr	r3, [pc, #228]	@ (8002c68 <xTaskIncrementTick+0x224>)
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	4313      	orrs	r3, r2
 8002b86:	4a38      	ldr	r2, [pc, #224]	@ (8002c68 <xTaskIncrementTick+0x224>)
 8002b88:	6013      	str	r3, [r2, #0]
 8002b8a:	69bb      	ldr	r3, [r7, #24]
 8002b8c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002b8e:	4937      	ldr	r1, [pc, #220]	@ (8002c6c <xTaskIncrementTick+0x228>)
 8002b90:	4613      	mov	r3, r2
 8002b92:	009b      	lsls	r3, r3, #2
 8002b94:	4413      	add	r3, r2
 8002b96:	009b      	lsls	r3, r3, #2
 8002b98:	440b      	add	r3, r1
 8002b9a:	3304      	adds	r3, #4
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	60bb      	str	r3, [r7, #8]
 8002ba0:	69bb      	ldr	r3, [r7, #24]
 8002ba2:	68ba      	ldr	r2, [r7, #8]
 8002ba4:	609a      	str	r2, [r3, #8]
 8002ba6:	68bb      	ldr	r3, [r7, #8]
 8002ba8:	689a      	ldr	r2, [r3, #8]
 8002baa:	69bb      	ldr	r3, [r7, #24]
 8002bac:	60da      	str	r2, [r3, #12]
 8002bae:	68bb      	ldr	r3, [r7, #8]
 8002bb0:	689b      	ldr	r3, [r3, #8]
 8002bb2:	69ba      	ldr	r2, [r7, #24]
 8002bb4:	3204      	adds	r2, #4
 8002bb6:	605a      	str	r2, [r3, #4]
 8002bb8:	69bb      	ldr	r3, [r7, #24]
 8002bba:	1d1a      	adds	r2, r3, #4
 8002bbc:	68bb      	ldr	r3, [r7, #8]
 8002bbe:	609a      	str	r2, [r3, #8]
 8002bc0:	69bb      	ldr	r3, [r7, #24]
 8002bc2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002bc4:	4613      	mov	r3, r2
 8002bc6:	009b      	lsls	r3, r3, #2
 8002bc8:	4413      	add	r3, r2
 8002bca:	009b      	lsls	r3, r3, #2
 8002bcc:	4a27      	ldr	r2, [pc, #156]	@ (8002c6c <xTaskIncrementTick+0x228>)
 8002bce:	441a      	add	r2, r3
 8002bd0:	69bb      	ldr	r3, [r7, #24]
 8002bd2:	615a      	str	r2, [r3, #20]
 8002bd4:	69bb      	ldr	r3, [r7, #24]
 8002bd6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002bd8:	4924      	ldr	r1, [pc, #144]	@ (8002c6c <xTaskIncrementTick+0x228>)
 8002bda:	4613      	mov	r3, r2
 8002bdc:	009b      	lsls	r3, r3, #2
 8002bde:	4413      	add	r3, r2
 8002be0:	009b      	lsls	r3, r3, #2
 8002be2:	440b      	add	r3, r1
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	69ba      	ldr	r2, [r7, #24]
 8002be8:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8002bea:	1c59      	adds	r1, r3, #1
 8002bec:	481f      	ldr	r0, [pc, #124]	@ (8002c6c <xTaskIncrementTick+0x228>)
 8002bee:	4613      	mov	r3, r2
 8002bf0:	009b      	lsls	r3, r3, #2
 8002bf2:	4413      	add	r3, r2
 8002bf4:	009b      	lsls	r3, r3, #2
 8002bf6:	4403      	add	r3, r0
 8002bf8:	6019      	str	r1, [r3, #0]
                             * task.
                             * The case of equal priority tasks sharing
                             * processing time (which happens when both
                             * preemption and time slicing are on) is
                             * handled below.*/
                            if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8002bfa:	69bb      	ldr	r3, [r7, #24]
 8002bfc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002bfe:	4b1c      	ldr	r3, [pc, #112]	@ (8002c70 <xTaskIncrementTick+0x22c>)
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c04:	429a      	cmp	r2, r3
 8002c06:	f67f af5b 	bls.w	8002ac0 <xTaskIncrementTick+0x7c>
                            {
                                xSwitchRequired = pdTRUE;
 8002c0a:	2301      	movs	r3, #1
 8002c0c:	627b      	str	r3, [r7, #36]	@ 0x24
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002c0e:	e757      	b.n	8002ac0 <xTaskIncrementTick+0x7c>
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
        {
            #if ( configNUMBER_OF_CORES == 1 )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > 1U )
 8002c10:	4b17      	ldr	r3, [pc, #92]	@ (8002c70 <xTaskIncrementTick+0x22c>)
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002c16:	4915      	ldr	r1, [pc, #84]	@ (8002c6c <xTaskIncrementTick+0x228>)
 8002c18:	4613      	mov	r3, r2
 8002c1a:	009b      	lsls	r3, r3, #2
 8002c1c:	4413      	add	r3, r2
 8002c1e:	009b      	lsls	r3, r3, #2
 8002c20:	440b      	add	r3, r1
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	2b01      	cmp	r3, #1
 8002c26:	d901      	bls.n	8002c2c <xTaskIncrementTick+0x1e8>
                {
                    xSwitchRequired = pdTRUE;
 8002c28:	2301      	movs	r3, #1
 8002c2a:	627b      	str	r3, [r7, #36]	@ 0x24
        #if ( configUSE_PREEMPTION == 1 )
        {
            #if ( configNUMBER_OF_CORES == 1 )
            {
                /* For single core the core ID is always 0. */
                if( xYieldPendings[ 0 ] != pdFALSE )
 8002c2c:	4b11      	ldr	r3, [pc, #68]	@ (8002c74 <xTaskIncrementTick+0x230>)
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d007      	beq.n	8002c44 <xTaskIncrementTick+0x200>
                {
                    xSwitchRequired = pdTRUE;
 8002c34:	2301      	movs	r3, #1
 8002c36:	627b      	str	r3, [r7, #36]	@ 0x24
 8002c38:	e004      	b.n	8002c44 <xTaskIncrementTick+0x200>
        }
        #endif /* #if ( configUSE_PREEMPTION == 1 ) */
    }
    else
    {
        xPendedTicks += 1U;
 8002c3a:	4b0f      	ldr	r3, [pc, #60]	@ (8002c78 <xTaskIncrementTick+0x234>)
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	3301      	adds	r3, #1
 8002c40:	4a0d      	ldr	r2, [pc, #52]	@ (8002c78 <xTaskIncrementTick+0x234>)
 8002c42:	6013      	str	r3, [r2, #0]
        #endif
    }

    traceRETURN_xTaskIncrementTick( xSwitchRequired );

    return xSwitchRequired;
 8002c44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8002c46:	4618      	mov	r0, r3
 8002c48:	3728      	adds	r7, #40	@ 0x28
 8002c4a:	46bd      	mov	sp, r7
 8002c4c:	bd80      	pop	{r7, pc}
 8002c4e:	bf00      	nop
 8002c50:	2000021c 	.word	0x2000021c
 8002c54:	200001f8 	.word	0x200001f8
 8002c58:	200001ac 	.word	0x200001ac
 8002c5c:	200001b0 	.word	0x200001b0
 8002c60:	2000020c 	.word	0x2000020c
 8002c64:	20000214 	.word	0x20000214
 8002c68:	200001fc 	.word	0x200001fc
 8002c6c:	20000120 	.word	0x20000120
 8002c70:	2000011c 	.word	0x2000011c
 8002c74:	20000208 	.word	0x20000208
 8002c78:	20000204 	.word	0x20000204

08002c7c <vTaskSwitchContext>:
#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

#if ( configNUMBER_OF_CORES == 1 )
    void vTaskSwitchContext( void )
    {
 8002c7c:	b480      	push	{r7}
 8002c7e:	b087      	sub	sp, #28
 8002c80:	af00      	add	r7, sp, #0
        traceENTER_vTaskSwitchContext();

        if( uxSchedulerSuspended != ( UBaseType_t ) 0U )
 8002c82:	4b29      	ldr	r3, [pc, #164]	@ (8002d28 <vTaskSwitchContext+0xac>)
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d003      	beq.n	8002c92 <vTaskSwitchContext+0x16>
        {
            /* The scheduler is currently suspended - do not allow a context
             * switch. */
            xYieldPendings[ 0 ] = pdTRUE;
 8002c8a:	4b28      	ldr	r3, [pc, #160]	@ (8002d2c <vTaskSwitchContext+0xb0>)
 8002c8c:	2201      	movs	r2, #1
 8002c8e:	601a      	str	r2, [r3, #0]
            }
            #endif
        }

        traceRETURN_vTaskSwitchContext();
    }
 8002c90:	e043      	b.n	8002d1a <vTaskSwitchContext+0x9e>
            xYieldPendings[ 0 ] = pdFALSE;
 8002c92:	4b26      	ldr	r3, [pc, #152]	@ (8002d2c <vTaskSwitchContext+0xb0>)
 8002c94:	2200      	movs	r2, #0
 8002c96:	601a      	str	r2, [r3, #0]
            taskSELECT_HIGHEST_PRIORITY_TASK();
 8002c98:	4b25      	ldr	r3, [pc, #148]	@ (8002d30 <vTaskSwitchContext+0xb4>)
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	60fb      	str	r3, [r7, #12]
        __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	fab3 f383 	clz	r3, r3
 8002ca4:	72fb      	strb	r3, [r7, #11]
        return ucReturn;
 8002ca6:	7afb      	ldrb	r3, [r7, #11]
 8002ca8:	f1c3 031f 	rsb	r3, r3, #31
 8002cac:	617b      	str	r3, [r7, #20]
 8002cae:	4921      	ldr	r1, [pc, #132]	@ (8002d34 <vTaskSwitchContext+0xb8>)
 8002cb0:	697a      	ldr	r2, [r7, #20]
 8002cb2:	4613      	mov	r3, r2
 8002cb4:	009b      	lsls	r3, r3, #2
 8002cb6:	4413      	add	r3, r2
 8002cb8:	009b      	lsls	r3, r3, #2
 8002cba:	440b      	add	r3, r1
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d10d      	bne.n	8002cde <vTaskSwitchContext+0x62>
    __asm volatile
 8002cc2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002cc6:	b672      	cpsid	i
 8002cc8:	f383 8811 	msr	BASEPRI, r3
 8002ccc:	f3bf 8f6f 	isb	sy
 8002cd0:	f3bf 8f4f 	dsb	sy
 8002cd4:	b662      	cpsie	i
 8002cd6:	607b      	str	r3, [r7, #4]
}
 8002cd8:	bf00      	nop
 8002cda:	bf00      	nop
 8002cdc:	e7fd      	b.n	8002cda <vTaskSwitchContext+0x5e>
 8002cde:	697a      	ldr	r2, [r7, #20]
 8002ce0:	4613      	mov	r3, r2
 8002ce2:	009b      	lsls	r3, r3, #2
 8002ce4:	4413      	add	r3, r2
 8002ce6:	009b      	lsls	r3, r3, #2
 8002ce8:	4a12      	ldr	r2, [pc, #72]	@ (8002d34 <vTaskSwitchContext+0xb8>)
 8002cea:	4413      	add	r3, r2
 8002cec:	613b      	str	r3, [r7, #16]
 8002cee:	693b      	ldr	r3, [r7, #16]
 8002cf0:	685b      	ldr	r3, [r3, #4]
 8002cf2:	685a      	ldr	r2, [r3, #4]
 8002cf4:	693b      	ldr	r3, [r7, #16]
 8002cf6:	605a      	str	r2, [r3, #4]
 8002cf8:	693b      	ldr	r3, [r7, #16]
 8002cfa:	685a      	ldr	r2, [r3, #4]
 8002cfc:	693b      	ldr	r3, [r7, #16]
 8002cfe:	3308      	adds	r3, #8
 8002d00:	429a      	cmp	r2, r3
 8002d02:	d103      	bne.n	8002d0c <vTaskSwitchContext+0x90>
 8002d04:	693b      	ldr	r3, [r7, #16]
 8002d06:	68da      	ldr	r2, [r3, #12]
 8002d08:	693b      	ldr	r3, [r7, #16]
 8002d0a:	605a      	str	r2, [r3, #4]
 8002d0c:	693b      	ldr	r3, [r7, #16]
 8002d0e:	685b      	ldr	r3, [r3, #4]
 8002d10:	68db      	ldr	r3, [r3, #12]
 8002d12:	4a09      	ldr	r2, [pc, #36]	@ (8002d38 <vTaskSwitchContext+0xbc>)
 8002d14:	6013      	str	r3, [r2, #0]
            portTASK_SWITCH_HOOK( pxCurrentTCB );
 8002d16:	4b08      	ldr	r3, [pc, #32]	@ (8002d38 <vTaskSwitchContext+0xbc>)
 8002d18:	681b      	ldr	r3, [r3, #0]
    }
 8002d1a:	bf00      	nop
 8002d1c:	371c      	adds	r7, #28
 8002d1e:	46bd      	mov	sp, r7
 8002d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d24:	4770      	bx	lr
 8002d26:	bf00      	nop
 8002d28:	2000021c 	.word	0x2000021c
 8002d2c:	20000208 	.word	0x20000208
 8002d30:	200001fc 	.word	0x200001fc
 8002d34:	20000120 	.word	0x20000120
 8002d38:	2000011c 	.word	0x2000011c

08002d3c <vTaskPlaceOnEventList>:
#endif /* if ( configNUMBER_OF_CORES > 1 ) */
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8002d3c:	b580      	push	{r7, lr}
 8002d3e:	b084      	sub	sp, #16
 8002d40:	af00      	add	r7, sp, #0
 8002d42:	6078      	str	r0, [r7, #4]
 8002d44:	6039      	str	r1, [r7, #0]
    traceENTER_vTaskPlaceOnEventList( pxEventList, xTicksToWait );

    configASSERT( pxEventList );
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d10d      	bne.n	8002d68 <vTaskPlaceOnEventList+0x2c>
    __asm volatile
 8002d4c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002d50:	b672      	cpsid	i
 8002d52:	f383 8811 	msr	BASEPRI, r3
 8002d56:	f3bf 8f6f 	isb	sy
 8002d5a:	f3bf 8f4f 	dsb	sy
 8002d5e:	b662      	cpsie	i
 8002d60:	60fb      	str	r3, [r7, #12]
}
 8002d62:	bf00      	nop
 8002d64:	bf00      	nop
 8002d66:	e7fd      	b.n	8002d64 <vTaskPlaceOnEventList+0x28>
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8002d68:	4b07      	ldr	r3, [pc, #28]	@ (8002d88 <vTaskPlaceOnEventList+0x4c>)
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	3318      	adds	r3, #24
 8002d6e:	4619      	mov	r1, r3
 8002d70:	6878      	ldr	r0, [r7, #4]
 8002d72:	f7fe ffae 	bl	8001cd2 <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8002d76:	2101      	movs	r1, #1
 8002d78:	6838      	ldr	r0, [r7, #0]
 8002d7a:	f000 fa89 	bl	8003290 <prvAddCurrentTaskToDelayedList>

    traceRETURN_vTaskPlaceOnEventList();
}
 8002d7e:	bf00      	nop
 8002d80:	3710      	adds	r7, #16
 8002d82:	46bd      	mov	sp, r7
 8002d84:	bd80      	pop	{r7, pc}
 8002d86:	bf00      	nop
 8002d88:	2000011c 	.word	0x2000011c

08002d8c <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 8002d8c:	b580      	push	{r7, lr}
 8002d8e:	b086      	sub	sp, #24
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	60f8      	str	r0, [r7, #12]
 8002d94:	60b9      	str	r1, [r7, #8]
 8002d96:	607a      	str	r2, [r7, #4]
        traceENTER_vTaskPlaceOnEventListRestricted( pxEventList, xTicksToWait, xWaitIndefinitely );

        configASSERT( pxEventList );
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d10d      	bne.n	8002dba <vTaskPlaceOnEventListRestricted+0x2e>
    __asm volatile
 8002d9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002da2:	b672      	cpsid	i
 8002da4:	f383 8811 	msr	BASEPRI, r3
 8002da8:	f3bf 8f6f 	isb	sy
 8002dac:	f3bf 8f4f 	dsb	sy
 8002db0:	b662      	cpsie	i
 8002db2:	613b      	str	r3, [r7, #16]
}
 8002db4:	bf00      	nop
 8002db6:	bf00      	nop
 8002db8:	e7fd      	b.n	8002db6 <vTaskPlaceOnEventListRestricted+0x2a>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	685b      	ldr	r3, [r3, #4]
 8002dbe:	617b      	str	r3, [r7, #20]
 8002dc0:	4b15      	ldr	r3, [pc, #84]	@ (8002e18 <vTaskPlaceOnEventListRestricted+0x8c>)
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	697a      	ldr	r2, [r7, #20]
 8002dc6:	61da      	str	r2, [r3, #28]
 8002dc8:	4b13      	ldr	r3, [pc, #76]	@ (8002e18 <vTaskPlaceOnEventListRestricted+0x8c>)
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	697a      	ldr	r2, [r7, #20]
 8002dce:	6892      	ldr	r2, [r2, #8]
 8002dd0:	621a      	str	r2, [r3, #32]
 8002dd2:	4b11      	ldr	r3, [pc, #68]	@ (8002e18 <vTaskPlaceOnEventListRestricted+0x8c>)
 8002dd4:	681a      	ldr	r2, [r3, #0]
 8002dd6:	697b      	ldr	r3, [r7, #20]
 8002dd8:	689b      	ldr	r3, [r3, #8]
 8002dda:	3218      	adds	r2, #24
 8002ddc:	605a      	str	r2, [r3, #4]
 8002dde:	4b0e      	ldr	r3, [pc, #56]	@ (8002e18 <vTaskPlaceOnEventListRestricted+0x8c>)
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f103 0218 	add.w	r2, r3, #24
 8002de6:	697b      	ldr	r3, [r7, #20]
 8002de8:	609a      	str	r2, [r3, #8]
 8002dea:	4b0b      	ldr	r3, [pc, #44]	@ (8002e18 <vTaskPlaceOnEventListRestricted+0x8c>)
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	68fa      	ldr	r2, [r7, #12]
 8002df0:	629a      	str	r2, [r3, #40]	@ 0x28
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	1c5a      	adds	r2, r3, #1
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	601a      	str	r2, [r3, #0]

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d002      	beq.n	8002e08 <vTaskPlaceOnEventListRestricted+0x7c>
        {
            xTicksToWait = portMAX_DELAY;
 8002e02:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002e06:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8002e08:	6879      	ldr	r1, [r7, #4]
 8002e0a:	68b8      	ldr	r0, [r7, #8]
 8002e0c:	f000 fa40 	bl	8003290 <prvAddCurrentTaskToDelayedList>

        traceRETURN_vTaskPlaceOnEventListRestricted();
    }
 8002e10:	bf00      	nop
 8002e12:	3718      	adds	r7, #24
 8002e14:	46bd      	mov	sp, r7
 8002e16:	bd80      	pop	{r7, pc}
 8002e18:	2000011c 	.word	0x2000011c

08002e1c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8002e1c:	b480      	push	{r7}
 8002e1e:	b08b      	sub	sp, #44	@ 0x2c
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	6078      	str	r0, [r7, #4]
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    /* MISRA Ref 11.5.3 [Void pointer assignment] */
    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
    /* coverity[misra_c_2012_rule_11_5_violation] */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	68db      	ldr	r3, [r3, #12]
 8002e28:	68db      	ldr	r3, [r3, #12]
 8002e2a:	623b      	str	r3, [r7, #32]
    configASSERT( pxUnblockedTCB );
 8002e2c:	6a3b      	ldr	r3, [r7, #32]
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d10d      	bne.n	8002e4e <xTaskRemoveFromEventList+0x32>
    __asm volatile
 8002e32:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002e36:	b672      	cpsid	i
 8002e38:	f383 8811 	msr	BASEPRI, r3
 8002e3c:	f3bf 8f6f 	isb	sy
 8002e40:	f3bf 8f4f 	dsb	sy
 8002e44:	b662      	cpsie	i
 8002e46:	60fb      	str	r3, [r7, #12]
}
 8002e48:	bf00      	nop
 8002e4a:	bf00      	nop
 8002e4c:	e7fd      	b.n	8002e4a <xTaskRemoveFromEventList+0x2e>
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 8002e4e:	6a3b      	ldr	r3, [r7, #32]
 8002e50:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e52:	61fb      	str	r3, [r7, #28]
 8002e54:	6a3b      	ldr	r3, [r7, #32]
 8002e56:	69db      	ldr	r3, [r3, #28]
 8002e58:	6a3a      	ldr	r2, [r7, #32]
 8002e5a:	6a12      	ldr	r2, [r2, #32]
 8002e5c:	609a      	str	r2, [r3, #8]
 8002e5e:	6a3b      	ldr	r3, [r7, #32]
 8002e60:	6a1b      	ldr	r3, [r3, #32]
 8002e62:	6a3a      	ldr	r2, [r7, #32]
 8002e64:	69d2      	ldr	r2, [r2, #28]
 8002e66:	605a      	str	r2, [r3, #4]
 8002e68:	69fb      	ldr	r3, [r7, #28]
 8002e6a:	685a      	ldr	r2, [r3, #4]
 8002e6c:	6a3b      	ldr	r3, [r7, #32]
 8002e6e:	3318      	adds	r3, #24
 8002e70:	429a      	cmp	r2, r3
 8002e72:	d103      	bne.n	8002e7c <xTaskRemoveFromEventList+0x60>
 8002e74:	6a3b      	ldr	r3, [r7, #32]
 8002e76:	6a1a      	ldr	r2, [r3, #32]
 8002e78:	69fb      	ldr	r3, [r7, #28]
 8002e7a:	605a      	str	r2, [r3, #4]
 8002e7c:	6a3b      	ldr	r3, [r7, #32]
 8002e7e:	2200      	movs	r2, #0
 8002e80:	629a      	str	r2, [r3, #40]	@ 0x28
 8002e82:	69fb      	ldr	r3, [r7, #28]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	1e5a      	subs	r2, r3, #1
 8002e88:	69fb      	ldr	r3, [r7, #28]
 8002e8a:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 8002e8c:	4b4b      	ldr	r3, [pc, #300]	@ (8002fbc <xTaskRemoveFromEventList+0x1a0>)
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d160      	bne.n	8002f56 <xTaskRemoveFromEventList+0x13a>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 8002e94:	6a3b      	ldr	r3, [r7, #32]
 8002e96:	695b      	ldr	r3, [r3, #20]
 8002e98:	617b      	str	r3, [r7, #20]
 8002e9a:	6a3b      	ldr	r3, [r7, #32]
 8002e9c:	689b      	ldr	r3, [r3, #8]
 8002e9e:	6a3a      	ldr	r2, [r7, #32]
 8002ea0:	68d2      	ldr	r2, [r2, #12]
 8002ea2:	609a      	str	r2, [r3, #8]
 8002ea4:	6a3b      	ldr	r3, [r7, #32]
 8002ea6:	68db      	ldr	r3, [r3, #12]
 8002ea8:	6a3a      	ldr	r2, [r7, #32]
 8002eaa:	6892      	ldr	r2, [r2, #8]
 8002eac:	605a      	str	r2, [r3, #4]
 8002eae:	697b      	ldr	r3, [r7, #20]
 8002eb0:	685a      	ldr	r2, [r3, #4]
 8002eb2:	6a3b      	ldr	r3, [r7, #32]
 8002eb4:	3304      	adds	r3, #4
 8002eb6:	429a      	cmp	r2, r3
 8002eb8:	d103      	bne.n	8002ec2 <xTaskRemoveFromEventList+0xa6>
 8002eba:	6a3b      	ldr	r3, [r7, #32]
 8002ebc:	68da      	ldr	r2, [r3, #12]
 8002ebe:	697b      	ldr	r3, [r7, #20]
 8002ec0:	605a      	str	r2, [r3, #4]
 8002ec2:	6a3b      	ldr	r3, [r7, #32]
 8002ec4:	2200      	movs	r2, #0
 8002ec6:	615a      	str	r2, [r3, #20]
 8002ec8:	697b      	ldr	r3, [r7, #20]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	1e5a      	subs	r2, r3, #1
 8002ece:	697b      	ldr	r3, [r7, #20]
 8002ed0:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 8002ed2:	6a3b      	ldr	r3, [r7, #32]
 8002ed4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ed6:	2201      	movs	r2, #1
 8002ed8:	409a      	lsls	r2, r3
 8002eda:	4b39      	ldr	r3, [pc, #228]	@ (8002fc0 <xTaskRemoveFromEventList+0x1a4>)
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	4313      	orrs	r3, r2
 8002ee0:	4a37      	ldr	r2, [pc, #220]	@ (8002fc0 <xTaskRemoveFromEventList+0x1a4>)
 8002ee2:	6013      	str	r3, [r2, #0]
 8002ee4:	6a3b      	ldr	r3, [r7, #32]
 8002ee6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002ee8:	4936      	ldr	r1, [pc, #216]	@ (8002fc4 <xTaskRemoveFromEventList+0x1a8>)
 8002eea:	4613      	mov	r3, r2
 8002eec:	009b      	lsls	r3, r3, #2
 8002eee:	4413      	add	r3, r2
 8002ef0:	009b      	lsls	r3, r3, #2
 8002ef2:	440b      	add	r3, r1
 8002ef4:	3304      	adds	r3, #4
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	613b      	str	r3, [r7, #16]
 8002efa:	6a3b      	ldr	r3, [r7, #32]
 8002efc:	693a      	ldr	r2, [r7, #16]
 8002efe:	609a      	str	r2, [r3, #8]
 8002f00:	693b      	ldr	r3, [r7, #16]
 8002f02:	689a      	ldr	r2, [r3, #8]
 8002f04:	6a3b      	ldr	r3, [r7, #32]
 8002f06:	60da      	str	r2, [r3, #12]
 8002f08:	693b      	ldr	r3, [r7, #16]
 8002f0a:	689b      	ldr	r3, [r3, #8]
 8002f0c:	6a3a      	ldr	r2, [r7, #32]
 8002f0e:	3204      	adds	r2, #4
 8002f10:	605a      	str	r2, [r3, #4]
 8002f12:	6a3b      	ldr	r3, [r7, #32]
 8002f14:	1d1a      	adds	r2, r3, #4
 8002f16:	693b      	ldr	r3, [r7, #16]
 8002f18:	609a      	str	r2, [r3, #8]
 8002f1a:	6a3b      	ldr	r3, [r7, #32]
 8002f1c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002f1e:	4613      	mov	r3, r2
 8002f20:	009b      	lsls	r3, r3, #2
 8002f22:	4413      	add	r3, r2
 8002f24:	009b      	lsls	r3, r3, #2
 8002f26:	4a27      	ldr	r2, [pc, #156]	@ (8002fc4 <xTaskRemoveFromEventList+0x1a8>)
 8002f28:	441a      	add	r2, r3
 8002f2a:	6a3b      	ldr	r3, [r7, #32]
 8002f2c:	615a      	str	r2, [r3, #20]
 8002f2e:	6a3b      	ldr	r3, [r7, #32]
 8002f30:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002f32:	4924      	ldr	r1, [pc, #144]	@ (8002fc4 <xTaskRemoveFromEventList+0x1a8>)
 8002f34:	4613      	mov	r3, r2
 8002f36:	009b      	lsls	r3, r3, #2
 8002f38:	4413      	add	r3, r2
 8002f3a:	009b      	lsls	r3, r3, #2
 8002f3c:	440b      	add	r3, r1
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	6a3a      	ldr	r2, [r7, #32]
 8002f42:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8002f44:	1c59      	adds	r1, r3, #1
 8002f46:	481f      	ldr	r0, [pc, #124]	@ (8002fc4 <xTaskRemoveFromEventList+0x1a8>)
 8002f48:	4613      	mov	r3, r2
 8002f4a:	009b      	lsls	r3, r3, #2
 8002f4c:	4413      	add	r3, r2
 8002f4e:	009b      	lsls	r3, r3, #2
 8002f50:	4403      	add	r3, r0
 8002f52:	6019      	str	r1, [r3, #0]
 8002f54:	e01b      	b.n	8002f8e <xTaskRemoveFromEventList+0x172>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8002f56:	4b1c      	ldr	r3, [pc, #112]	@ (8002fc8 <xTaskRemoveFromEventList+0x1ac>)
 8002f58:	685b      	ldr	r3, [r3, #4]
 8002f5a:	61bb      	str	r3, [r7, #24]
 8002f5c:	6a3b      	ldr	r3, [r7, #32]
 8002f5e:	69ba      	ldr	r2, [r7, #24]
 8002f60:	61da      	str	r2, [r3, #28]
 8002f62:	69bb      	ldr	r3, [r7, #24]
 8002f64:	689a      	ldr	r2, [r3, #8]
 8002f66:	6a3b      	ldr	r3, [r7, #32]
 8002f68:	621a      	str	r2, [r3, #32]
 8002f6a:	69bb      	ldr	r3, [r7, #24]
 8002f6c:	689b      	ldr	r3, [r3, #8]
 8002f6e:	6a3a      	ldr	r2, [r7, #32]
 8002f70:	3218      	adds	r2, #24
 8002f72:	605a      	str	r2, [r3, #4]
 8002f74:	6a3b      	ldr	r3, [r7, #32]
 8002f76:	f103 0218 	add.w	r2, r3, #24
 8002f7a:	69bb      	ldr	r3, [r7, #24]
 8002f7c:	609a      	str	r2, [r3, #8]
 8002f7e:	6a3b      	ldr	r3, [r7, #32]
 8002f80:	4a11      	ldr	r2, [pc, #68]	@ (8002fc8 <xTaskRemoveFromEventList+0x1ac>)
 8002f82:	629a      	str	r2, [r3, #40]	@ 0x28
 8002f84:	4b10      	ldr	r3, [pc, #64]	@ (8002fc8 <xTaskRemoveFromEventList+0x1ac>)
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	3301      	adds	r3, #1
 8002f8a:	4a0f      	ldr	r2, [pc, #60]	@ (8002fc8 <xTaskRemoveFromEventList+0x1ac>)
 8002f8c:	6013      	str	r3, [r2, #0]
    }

    #if ( configNUMBER_OF_CORES == 1 )
    {
        if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8002f8e:	6a3b      	ldr	r3, [r7, #32]
 8002f90:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002f92:	4b0e      	ldr	r3, [pc, #56]	@ (8002fcc <xTaskRemoveFromEventList+0x1b0>)
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f98:	429a      	cmp	r2, r3
 8002f9a:	d905      	bls.n	8002fa8 <xTaskRemoveFromEventList+0x18c>
        {
            /* Return true if the task removed from the event list has a higher
             * priority than the calling task.  This allows the calling task to know if
             * it should force a context switch now. */
            xReturn = pdTRUE;
 8002f9c:	2301      	movs	r3, #1
 8002f9e:	627b      	str	r3, [r7, #36]	@ 0x24

            /* Mark that a yield is pending in case the user is not using the
             * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
            xYieldPendings[ 0 ] = pdTRUE;
 8002fa0:	4b0b      	ldr	r3, [pc, #44]	@ (8002fd0 <xTaskRemoveFromEventList+0x1b4>)
 8002fa2:	2201      	movs	r2, #1
 8002fa4:	601a      	str	r2, [r3, #0]
 8002fa6:	e001      	b.n	8002fac <xTaskRemoveFromEventList+0x190>
        }
        else
        {
            xReturn = pdFALSE;
 8002fa8:	2300      	movs	r3, #0
 8002faa:	627b      	str	r3, [r7, #36]	@ 0x24
        #endif /* #if ( configUSE_PREEMPTION == 1 ) */
    }
    #endif /* #if ( configNUMBER_OF_CORES == 1 ) */

    traceRETURN_xTaskRemoveFromEventList( xReturn );
    return xReturn;
 8002fac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8002fae:	4618      	mov	r0, r3
 8002fb0:	372c      	adds	r7, #44	@ 0x2c
 8002fb2:	46bd      	mov	sp, r7
 8002fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb8:	4770      	bx	lr
 8002fba:	bf00      	nop
 8002fbc:	2000021c 	.word	0x2000021c
 8002fc0:	200001fc 	.word	0x200001fc
 8002fc4:	20000120 	.word	0x20000120
 8002fc8:	200001b4 	.word	0x200001b4
 8002fcc:	2000011c 	.word	0x2000011c
 8002fd0:	20000208 	.word	0x20000208

08002fd4 <vTaskInternalSetTimeOutState>:
    traceRETURN_vTaskSetTimeOutState();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8002fd4:	b480      	push	{r7}
 8002fd6:	b083      	sub	sp, #12
 8002fd8:	af00      	add	r7, sp, #0
 8002fda:	6078      	str	r0, [r7, #4]
    traceENTER_vTaskInternalSetTimeOutState( pxTimeOut );

    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8002fdc:	4b06      	ldr	r3, [pc, #24]	@ (8002ff8 <vTaskInternalSetTimeOutState+0x24>)
 8002fde:	681a      	ldr	r2, [r3, #0]
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8002fe4:	4b05      	ldr	r3, [pc, #20]	@ (8002ffc <vTaskInternalSetTimeOutState+0x28>)
 8002fe6:	681a      	ldr	r2, [r3, #0]
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	605a      	str	r2, [r3, #4]

    traceRETURN_vTaskInternalSetTimeOutState();
}
 8002fec:	bf00      	nop
 8002fee:	370c      	adds	r7, #12
 8002ff0:	46bd      	mov	sp, r7
 8002ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff6:	4770      	bx	lr
 8002ff8:	2000020c 	.word	0x2000020c
 8002ffc:	200001f8 	.word	0x200001f8

08003000 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8003000:	b580      	push	{r7, lr}
 8003002:	b088      	sub	sp, #32
 8003004:	af00      	add	r7, sp, #0
 8003006:	6078      	str	r0, [r7, #4]
 8003008:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    traceENTER_xTaskCheckForTimeOut( pxTimeOut, pxTicksToWait );

    configASSERT( pxTimeOut );
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	2b00      	cmp	r3, #0
 800300e:	d10d      	bne.n	800302c <xTaskCheckForTimeOut+0x2c>
    __asm volatile
 8003010:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003014:	b672      	cpsid	i
 8003016:	f383 8811 	msr	BASEPRI, r3
 800301a:	f3bf 8f6f 	isb	sy
 800301e:	f3bf 8f4f 	dsb	sy
 8003022:	b662      	cpsie	i
 8003024:	613b      	str	r3, [r7, #16]
}
 8003026:	bf00      	nop
 8003028:	bf00      	nop
 800302a:	e7fd      	b.n	8003028 <xTaskCheckForTimeOut+0x28>
    configASSERT( pxTicksToWait );
 800302c:	683b      	ldr	r3, [r7, #0]
 800302e:	2b00      	cmp	r3, #0
 8003030:	d10d      	bne.n	800304e <xTaskCheckForTimeOut+0x4e>
    __asm volatile
 8003032:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003036:	b672      	cpsid	i
 8003038:	f383 8811 	msr	BASEPRI, r3
 800303c:	f3bf 8f6f 	isb	sy
 8003040:	f3bf 8f4f 	dsb	sy
 8003044:	b662      	cpsie	i
 8003046:	60fb      	str	r3, [r7, #12]
}
 8003048:	bf00      	nop
 800304a:	bf00      	nop
 800304c:	e7fd      	b.n	800304a <xTaskCheckForTimeOut+0x4a>

    taskENTER_CRITICAL();
 800304e:	f000 fda1 	bl	8003b94 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 8003052:	4b1f      	ldr	r3, [pc, #124]	@ (80030d0 <xTaskCheckForTimeOut+0xd0>)
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	685b      	ldr	r3, [r3, #4]
 800305c:	69ba      	ldr	r2, [r7, #24]
 800305e:	1ad3      	subs	r3, r2, r3
 8003060:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 8003062:	683b      	ldr	r3, [r7, #0]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800306a:	d102      	bne.n	8003072 <xTaskCheckForTimeOut+0x72>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 800306c:	2300      	movs	r3, #0
 800306e:	61fb      	str	r3, [r7, #28]
 8003070:	e026      	b.n	80030c0 <xTaskCheckForTimeOut+0xc0>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) )
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681a      	ldr	r2, [r3, #0]
 8003076:	4b17      	ldr	r3, [pc, #92]	@ (80030d4 <xTaskCheckForTimeOut+0xd4>)
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	429a      	cmp	r2, r3
 800307c:	d00a      	beq.n	8003094 <xTaskCheckForTimeOut+0x94>
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	685b      	ldr	r3, [r3, #4]
 8003082:	69ba      	ldr	r2, [r7, #24]
 8003084:	429a      	cmp	r2, r3
 8003086:	d305      	bcc.n	8003094 <xTaskCheckForTimeOut+0x94>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8003088:	2301      	movs	r3, #1
 800308a:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 800308c:	683b      	ldr	r3, [r7, #0]
 800308e:	2200      	movs	r2, #0
 8003090:	601a      	str	r2, [r3, #0]
 8003092:	e015      	b.n	80030c0 <xTaskCheckForTimeOut+0xc0>
        }
        else if( xElapsedTime < *pxTicksToWait )
 8003094:	683b      	ldr	r3, [r7, #0]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	697a      	ldr	r2, [r7, #20]
 800309a:	429a      	cmp	r2, r3
 800309c:	d20b      	bcs.n	80030b6 <xTaskCheckForTimeOut+0xb6>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 800309e:	683b      	ldr	r3, [r7, #0]
 80030a0:	681a      	ldr	r2, [r3, #0]
 80030a2:	697b      	ldr	r3, [r7, #20]
 80030a4:	1ad2      	subs	r2, r2, r3
 80030a6:	683b      	ldr	r3, [r7, #0]
 80030a8:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 80030aa:	6878      	ldr	r0, [r7, #4]
 80030ac:	f7ff ff92 	bl	8002fd4 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 80030b0:	2300      	movs	r3, #0
 80030b2:	61fb      	str	r3, [r7, #28]
 80030b4:	e004      	b.n	80030c0 <xTaskCheckForTimeOut+0xc0>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 80030b6:	683b      	ldr	r3, [r7, #0]
 80030b8:	2200      	movs	r2, #0
 80030ba:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 80030bc:	2301      	movs	r3, #1
 80030be:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 80030c0:	f000 fd9e 	bl	8003c00 <vPortExitCritical>

    traceRETURN_xTaskCheckForTimeOut( xReturn );

    return xReturn;
 80030c4:	69fb      	ldr	r3, [r7, #28]
}
 80030c6:	4618      	mov	r0, r3
 80030c8:	3720      	adds	r7, #32
 80030ca:	46bd      	mov	sp, r7
 80030cc:	bd80      	pop	{r7, pc}
 80030ce:	bf00      	nop
 80030d0:	200001f8 	.word	0x200001f8
 80030d4:	2000020c 	.word	0x2000020c

080030d8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80030d8:	b480      	push	{r7}
 80030da:	af00      	add	r7, sp, #0
    traceENTER_vTaskMissedYield();

    /* Must be called from within a critical section. */
    xYieldPendings[ portGET_CORE_ID() ] = pdTRUE;
 80030dc:	4b03      	ldr	r3, [pc, #12]	@ (80030ec <vTaskMissedYield+0x14>)
 80030de:	2201      	movs	r2, #1
 80030e0:	601a      	str	r2, [r3, #0]

    traceRETURN_vTaskMissedYield();
}
 80030e2:	bf00      	nop
 80030e4:	46bd      	mov	sp, r7
 80030e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ea:	4770      	bx	lr
 80030ec:	20000208 	.word	0x20000208

080030f0 <prvIdleTask>:
 * void prvIdleTask( void *pvParameters );
 *
 */

static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80030f0:	b580      	push	{r7, lr}
 80030f2:	b082      	sub	sp, #8
 80030f4:	af00      	add	r7, sp, #0
 80030f6:	6078      	str	r0, [r7, #4]

    for( ; configCONTROL_INFINITE_LOOP(); )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 80030f8:	f000 f852 	bl	80031a0 <prvCheckTasksWaitingTermination>
             * A critical region is not required here as we are just reading from
             * the list, and an occasional incorrect value will not matter.  If
             * the ready list at the idle priority contains one more task than the
             * number of idle tasks, which is equal to the configured numbers of cores
             * then a task other than the idle task is ready to execute. */
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) configNUMBER_OF_CORES )
 80030fc:	4b06      	ldr	r3, [pc, #24]	@ (8003118 <prvIdleTask+0x28>)
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	2b01      	cmp	r3, #1
 8003102:	d9f9      	bls.n	80030f8 <prvIdleTask+0x8>
            {
                taskYIELD();
 8003104:	4b05      	ldr	r3, [pc, #20]	@ (800311c <prvIdleTask+0x2c>)
 8003106:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800310a:	601a      	str	r2, [r3, #0]
 800310c:	f3bf 8f4f 	dsb	sy
 8003110:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8003114:	e7f0      	b.n	80030f8 <prvIdleTask+0x8>
 8003116:	bf00      	nop
 8003118:	20000120 	.word	0x20000120
 800311c:	e000ed04 	.word	0xe000ed04

08003120 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003120:	b580      	push	{r7, lr}
 8003122:	b082      	sub	sp, #8
 8003124:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003126:	2300      	movs	r3, #0
 8003128:	607b      	str	r3, [r7, #4]
 800312a:	e00c      	b.n	8003146 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800312c:	687a      	ldr	r2, [r7, #4]
 800312e:	4613      	mov	r3, r2
 8003130:	009b      	lsls	r3, r3, #2
 8003132:	4413      	add	r3, r2
 8003134:	009b      	lsls	r3, r3, #2
 8003136:	4a12      	ldr	r2, [pc, #72]	@ (8003180 <prvInitialiseTaskLists+0x60>)
 8003138:	4413      	add	r3, r2
 800313a:	4618      	mov	r0, r3
 800313c:	f7fe fd9c 	bl	8001c78 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	3301      	adds	r3, #1
 8003144:	607b      	str	r3, [r7, #4]
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	2b04      	cmp	r3, #4
 800314a:	d9ef      	bls.n	800312c <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 800314c:	480d      	ldr	r0, [pc, #52]	@ (8003184 <prvInitialiseTaskLists+0x64>)
 800314e:	f7fe fd93 	bl	8001c78 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8003152:	480d      	ldr	r0, [pc, #52]	@ (8003188 <prvInitialiseTaskLists+0x68>)
 8003154:	f7fe fd90 	bl	8001c78 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8003158:	480c      	ldr	r0, [pc, #48]	@ (800318c <prvInitialiseTaskLists+0x6c>)
 800315a:	f7fe fd8d 	bl	8001c78 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
    {
        vListInitialise( &xTasksWaitingTermination );
 800315e:	480c      	ldr	r0, [pc, #48]	@ (8003190 <prvInitialiseTaskLists+0x70>)
 8003160:	f7fe fd8a 	bl	8001c78 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        vListInitialise( &xSuspendedTaskList );
 8003164:	480b      	ldr	r0, [pc, #44]	@ (8003194 <prvInitialiseTaskLists+0x74>)
 8003166:	f7fe fd87 	bl	8001c78 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 800316a:	4b0b      	ldr	r3, [pc, #44]	@ (8003198 <prvInitialiseTaskLists+0x78>)
 800316c:	4a05      	ldr	r2, [pc, #20]	@ (8003184 <prvInitialiseTaskLists+0x64>)
 800316e:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003170:	4b0a      	ldr	r3, [pc, #40]	@ (800319c <prvInitialiseTaskLists+0x7c>)
 8003172:	4a05      	ldr	r2, [pc, #20]	@ (8003188 <prvInitialiseTaskLists+0x68>)
 8003174:	601a      	str	r2, [r3, #0]
}
 8003176:	bf00      	nop
 8003178:	3708      	adds	r7, #8
 800317a:	46bd      	mov	sp, r7
 800317c:	bd80      	pop	{r7, pc}
 800317e:	bf00      	nop
 8003180:	20000120 	.word	0x20000120
 8003184:	20000184 	.word	0x20000184
 8003188:	20000198 	.word	0x20000198
 800318c:	200001b4 	.word	0x200001b4
 8003190:	200001c8 	.word	0x200001c8
 8003194:	200001e0 	.word	0x200001e0
 8003198:	200001ac 	.word	0x200001ac
 800319c:	200001b0 	.word	0x200001b0

080031a0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80031a0:	b580      	push	{r7, lr}
 80031a2:	b082      	sub	sp, #8
 80031a4:	af00      	add	r7, sp, #0
    {
        TCB_t * pxTCB;

        /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
         * being called too often in the idle task. */
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80031a6:	e019      	b.n	80031dc <prvCheckTasksWaitingTermination+0x3c>
        {
            #if ( configNUMBER_OF_CORES == 1 )
            {
                taskENTER_CRITICAL();
 80031a8:	f000 fcf4 	bl	8003b94 <vPortEnterCritical>
                {
                    {
                        /* MISRA Ref 11.5.3 [Void pointer assignment] */
                        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                        /* coverity[misra_c_2012_rule_11_5_violation] */
                        pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 80031ac:	4b10      	ldr	r3, [pc, #64]	@ (80031f0 <prvCheckTasksWaitingTermination+0x50>)
 80031ae:	68db      	ldr	r3, [r3, #12]
 80031b0:	68db      	ldr	r3, [r3, #12]
 80031b2:	607b      	str	r3, [r7, #4]
                        ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	3304      	adds	r3, #4
 80031b8:	4618      	mov	r0, r3
 80031ba:	f7fe fdc3 	bl	8001d44 <uxListRemove>
                        --uxCurrentNumberOfTasks;
 80031be:	4b0d      	ldr	r3, [pc, #52]	@ (80031f4 <prvCheckTasksWaitingTermination+0x54>)
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	3b01      	subs	r3, #1
 80031c4:	4a0b      	ldr	r2, [pc, #44]	@ (80031f4 <prvCheckTasksWaitingTermination+0x54>)
 80031c6:	6013      	str	r3, [r2, #0]
                        --uxDeletedTasksWaitingCleanUp;
 80031c8:	4b0b      	ldr	r3, [pc, #44]	@ (80031f8 <prvCheckTasksWaitingTermination+0x58>)
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	3b01      	subs	r3, #1
 80031ce:	4a0a      	ldr	r2, [pc, #40]	@ (80031f8 <prvCheckTasksWaitingTermination+0x58>)
 80031d0:	6013      	str	r3, [r2, #0]
                    }
                }
                taskEXIT_CRITICAL();
 80031d2:	f000 fd15 	bl	8003c00 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 80031d6:	6878      	ldr	r0, [r7, #4]
 80031d8:	f000 f810 	bl	80031fc <prvDeleteTCB>
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80031dc:	4b06      	ldr	r3, [pc, #24]	@ (80031f8 <prvCheckTasksWaitingTermination+0x58>)
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d1e1      	bne.n	80031a8 <prvCheckTasksWaitingTermination+0x8>
            }
            #endif /* #if( configNUMBER_OF_CORES == 1 ) */
        }
    }
    #endif /* INCLUDE_vTaskDelete */
}
 80031e4:	bf00      	nop
 80031e6:	bf00      	nop
 80031e8:	3708      	adds	r7, #8
 80031ea:	46bd      	mov	sp, r7
 80031ec:	bd80      	pop	{r7, pc}
 80031ee:	bf00      	nop
 80031f0:	200001c8 	.word	0x200001c8
 80031f4:	200001f4 	.word	0x200001f4
 80031f8:	200001dc 	.word	0x200001dc

080031fc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 80031fc:	b580      	push	{r7, lr}
 80031fe:	b082      	sub	sp, #8
 8003200:	af00      	add	r7, sp, #0
 8003202:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
        {
            /* The task can only have been allocated dynamically - free both
             * the stack and TCB. */
            vPortFreeStack( pxTCB->pxStack );
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003208:	4618      	mov	r0, r3
 800320a:	f000 fef5 	bl	8003ff8 <vPortFree>
            vPortFree( pxTCB );
 800320e:	6878      	ldr	r0, [r7, #4]
 8003210:	f000 fef2 	bl	8003ff8 <vPortFree>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8003214:	bf00      	nop
 8003216:	3708      	adds	r7, #8
 8003218:	46bd      	mov	sp, r7
 800321a:	bd80      	pop	{r7, pc}

0800321c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800321c:	b480      	push	{r7}
 800321e:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003220:	4b0a      	ldr	r3, [pc, #40]	@ (800324c <prvResetNextTaskUnblockTime+0x30>)
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	2b00      	cmp	r3, #0
 8003228:	d104      	bne.n	8003234 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 800322a:	4b09      	ldr	r3, [pc, #36]	@ (8003250 <prvResetNextTaskUnblockTime+0x34>)
 800322c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003230:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8003232:	e005      	b.n	8003240 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003234:	4b05      	ldr	r3, [pc, #20]	@ (800324c <prvResetNextTaskUnblockTime+0x30>)
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	68db      	ldr	r3, [r3, #12]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	4a04      	ldr	r2, [pc, #16]	@ (8003250 <prvResetNextTaskUnblockTime+0x34>)
 800323e:	6013      	str	r3, [r2, #0]
}
 8003240:	bf00      	nop
 8003242:	46bd      	mov	sp, r7
 8003244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003248:	4770      	bx	lr
 800324a:	bf00      	nop
 800324c:	200001ac 	.word	0x200001ac
 8003250:	20000214 	.word	0x20000214

08003254 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8003254:	b480      	push	{r7}
 8003256:	b083      	sub	sp, #12
 8003258:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        traceENTER_xTaskGetSchedulerState();

        if( xSchedulerRunning == pdFALSE )
 800325a:	4b0b      	ldr	r3, [pc, #44]	@ (8003288 <xTaskGetSchedulerState+0x34>)
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	2b00      	cmp	r3, #0
 8003260:	d102      	bne.n	8003268 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 8003262:	2301      	movs	r3, #1
 8003264:	607b      	str	r3, [r7, #4]
 8003266:	e008      	b.n	800327a <xTaskGetSchedulerState+0x26>
        {
            #if ( configNUMBER_OF_CORES > 1 )
                taskENTER_CRITICAL();
            #endif
            {
                if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 8003268:	4b08      	ldr	r3, [pc, #32]	@ (800328c <xTaskGetSchedulerState+0x38>)
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	2b00      	cmp	r3, #0
 800326e:	d102      	bne.n	8003276 <xTaskGetSchedulerState+0x22>
                {
                    xReturn = taskSCHEDULER_RUNNING;
 8003270:	2302      	movs	r3, #2
 8003272:	607b      	str	r3, [r7, #4]
 8003274:	e001      	b.n	800327a <xTaskGetSchedulerState+0x26>
                }
                else
                {
                    xReturn = taskSCHEDULER_SUSPENDED;
 8003276:	2300      	movs	r3, #0
 8003278:	607b      	str	r3, [r7, #4]
            #endif
        }

        traceRETURN_xTaskGetSchedulerState( xReturn );

        return xReturn;
 800327a:	687b      	ldr	r3, [r7, #4]
    }
 800327c:	4618      	mov	r0, r3
 800327e:	370c      	adds	r7, #12
 8003280:	46bd      	mov	sp, r7
 8003282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003286:	4770      	bx	lr
 8003288:	20000200 	.word	0x20000200
 800328c:	2000021c 	.word	0x2000021c

08003290 <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8003290:	b580      	push	{r7, lr}
 8003292:	b088      	sub	sp, #32
 8003294:	af00      	add	r7, sp, #0
 8003296:	6078      	str	r0, [r7, #4]
 8003298:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 800329a:	4b37      	ldr	r3, [pc, #220]	@ (8003378 <prvAddCurrentTaskToDelayedList+0xe8>)
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	61fb      	str	r3, [r7, #28]
    List_t * const pxDelayedList = pxDelayedTaskList;
 80032a0:	4b36      	ldr	r3, [pc, #216]	@ (800337c <prvAddCurrentTaskToDelayedList+0xec>)
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	61bb      	str	r3, [r7, #24]
    List_t * const pxOverflowDelayedList = pxOverflowDelayedTaskList;
 80032a6:	4b36      	ldr	r3, [pc, #216]	@ (8003380 <prvAddCurrentTaskToDelayedList+0xf0>)
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	617b      	str	r3, [r7, #20]
    }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80032ac:	4b35      	ldr	r3, [pc, #212]	@ (8003384 <prvAddCurrentTaskToDelayedList+0xf4>)
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	3304      	adds	r3, #4
 80032b2:	4618      	mov	r0, r3
 80032b4:	f7fe fd46 	bl	8001d44 <uxListRemove>
 80032b8:	4603      	mov	r3, r0
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d10b      	bne.n	80032d6 <prvAddCurrentTaskToDelayedList+0x46>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 80032be:	4b31      	ldr	r3, [pc, #196]	@ (8003384 <prvAddCurrentTaskToDelayedList+0xf4>)
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032c4:	2201      	movs	r2, #1
 80032c6:	fa02 f303 	lsl.w	r3, r2, r3
 80032ca:	43da      	mvns	r2, r3
 80032cc:	4b2e      	ldr	r3, [pc, #184]	@ (8003388 <prvAddCurrentTaskToDelayedList+0xf8>)
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	4013      	ands	r3, r2
 80032d2:	4a2d      	ldr	r2, [pc, #180]	@ (8003388 <prvAddCurrentTaskToDelayedList+0xf8>)
 80032d4:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80032dc:	d124      	bne.n	8003328 <prvAddCurrentTaskToDelayedList+0x98>
 80032de:	683b      	ldr	r3, [r7, #0]
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d021      	beq.n	8003328 <prvAddCurrentTaskToDelayedList+0x98>
        {
            /* Add the task to the suspended task list instead of a delayed task
             * list to ensure it is not woken by a timing event.  It will block
             * indefinitely. */
            listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80032e4:	4b29      	ldr	r3, [pc, #164]	@ (800338c <prvAddCurrentTaskToDelayedList+0xfc>)
 80032e6:	685b      	ldr	r3, [r3, #4]
 80032e8:	613b      	str	r3, [r7, #16]
 80032ea:	4b26      	ldr	r3, [pc, #152]	@ (8003384 <prvAddCurrentTaskToDelayedList+0xf4>)
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	693a      	ldr	r2, [r7, #16]
 80032f0:	609a      	str	r2, [r3, #8]
 80032f2:	4b24      	ldr	r3, [pc, #144]	@ (8003384 <prvAddCurrentTaskToDelayedList+0xf4>)
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	693a      	ldr	r2, [r7, #16]
 80032f8:	6892      	ldr	r2, [r2, #8]
 80032fa:	60da      	str	r2, [r3, #12]
 80032fc:	4b21      	ldr	r3, [pc, #132]	@ (8003384 <prvAddCurrentTaskToDelayedList+0xf4>)
 80032fe:	681a      	ldr	r2, [r3, #0]
 8003300:	693b      	ldr	r3, [r7, #16]
 8003302:	689b      	ldr	r3, [r3, #8]
 8003304:	3204      	adds	r2, #4
 8003306:	605a      	str	r2, [r3, #4]
 8003308:	4b1e      	ldr	r3, [pc, #120]	@ (8003384 <prvAddCurrentTaskToDelayedList+0xf4>)
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	1d1a      	adds	r2, r3, #4
 800330e:	693b      	ldr	r3, [r7, #16]
 8003310:	609a      	str	r2, [r3, #8]
 8003312:	4b1c      	ldr	r3, [pc, #112]	@ (8003384 <prvAddCurrentTaskToDelayedList+0xf4>)
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	4a1d      	ldr	r2, [pc, #116]	@ (800338c <prvAddCurrentTaskToDelayedList+0xfc>)
 8003318:	615a      	str	r2, [r3, #20]
 800331a:	4b1c      	ldr	r3, [pc, #112]	@ (800338c <prvAddCurrentTaskToDelayedList+0xfc>)
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	3301      	adds	r3, #1
 8003320:	4a1a      	ldr	r2, [pc, #104]	@ (800338c <prvAddCurrentTaskToDelayedList+0xfc>)
 8003322:	6013      	str	r3, [r2, #0]
 8003324:	bf00      	nop

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
 8003326:	e022      	b.n	800336e <prvAddCurrentTaskToDelayedList+0xde>
            xTimeToWake = xConstTickCount + xTicksToWait;
 8003328:	69fa      	ldr	r2, [r7, #28]
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	4413      	add	r3, r2
 800332e:	60fb      	str	r3, [r7, #12]
            listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003330:	4b14      	ldr	r3, [pc, #80]	@ (8003384 <prvAddCurrentTaskToDelayedList+0xf4>)
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	68fa      	ldr	r2, [r7, #12]
 8003336:	605a      	str	r2, [r3, #4]
            if( xTimeToWake < xConstTickCount )
 8003338:	68fa      	ldr	r2, [r7, #12]
 800333a:	69fb      	ldr	r3, [r7, #28]
 800333c:	429a      	cmp	r2, r3
 800333e:	d207      	bcs.n	8003350 <prvAddCurrentTaskToDelayedList+0xc0>
                vListInsert( pxOverflowDelayedList, &( pxCurrentTCB->xStateListItem ) );
 8003340:	4b10      	ldr	r3, [pc, #64]	@ (8003384 <prvAddCurrentTaskToDelayedList+0xf4>)
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	3304      	adds	r3, #4
 8003346:	4619      	mov	r1, r3
 8003348:	6978      	ldr	r0, [r7, #20]
 800334a:	f7fe fcc2 	bl	8001cd2 <vListInsert>
}
 800334e:	e00e      	b.n	800336e <prvAddCurrentTaskToDelayedList+0xde>
                vListInsert( pxDelayedList, &( pxCurrentTCB->xStateListItem ) );
 8003350:	4b0c      	ldr	r3, [pc, #48]	@ (8003384 <prvAddCurrentTaskToDelayedList+0xf4>)
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	3304      	adds	r3, #4
 8003356:	4619      	mov	r1, r3
 8003358:	69b8      	ldr	r0, [r7, #24]
 800335a:	f7fe fcba 	bl	8001cd2 <vListInsert>
                if( xTimeToWake < xNextTaskUnblockTime )
 800335e:	4b0c      	ldr	r3, [pc, #48]	@ (8003390 <prvAddCurrentTaskToDelayedList+0x100>)
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	68fa      	ldr	r2, [r7, #12]
 8003364:	429a      	cmp	r2, r3
 8003366:	d202      	bcs.n	800336e <prvAddCurrentTaskToDelayedList+0xde>
                    xNextTaskUnblockTime = xTimeToWake;
 8003368:	4a09      	ldr	r2, [pc, #36]	@ (8003390 <prvAddCurrentTaskToDelayedList+0x100>)
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	6013      	str	r3, [r2, #0]
}
 800336e:	bf00      	nop
 8003370:	3720      	adds	r7, #32
 8003372:	46bd      	mov	sp, r7
 8003374:	bd80      	pop	{r7, pc}
 8003376:	bf00      	nop
 8003378:	200001f8 	.word	0x200001f8
 800337c:	200001ac 	.word	0x200001ac
 8003380:	200001b0 	.word	0x200001b0
 8003384:	2000011c 	.word	0x2000011c
 8003388:	200001fc 	.word	0x200001fc
 800338c:	200001e0 	.word	0x200001e0
 8003390:	20000214 	.word	0x20000214

08003394 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 8003394:	b580      	push	{r7, lr}
 8003396:	b084      	sub	sp, #16
 8003398:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 800339a:	2300      	movs	r3, #0
 800339c:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 800339e:	f000 fa5d 	bl	800385c <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 80033a2:	4b13      	ldr	r3, [pc, #76]	@ (80033f0 <xTimerCreateTimerTask+0x5c>)
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d00b      	beq.n	80033c2 <xTimerCreateTimerTask+0x2e>
                        xReturn = pdPASS;
                    }
                }
                #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
                {
                    xReturn = xTaskCreate( &prvTimerTask,
 80033aa:	4b12      	ldr	r3, [pc, #72]	@ (80033f4 <xTimerCreateTimerTask+0x60>)
 80033ac:	9301      	str	r3, [sp, #4]
 80033ae:	2302      	movs	r3, #2
 80033b0:	9300      	str	r3, [sp, #0]
 80033b2:	2300      	movs	r3, #0
 80033b4:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80033b8:	490f      	ldr	r1, [pc, #60]	@ (80033f8 <xTimerCreateTimerTask+0x64>)
 80033ba:	4810      	ldr	r0, [pc, #64]	@ (80033fc <xTimerCreateTimerTask+0x68>)
 80033bc:	f7ff f82e 	bl	800241c <xTaskCreate>
 80033c0:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d10d      	bne.n	80033e4 <xTimerCreateTimerTask+0x50>
    __asm volatile
 80033c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80033cc:	b672      	cpsid	i
 80033ce:	f383 8811 	msr	BASEPRI, r3
 80033d2:	f3bf 8f6f 	isb	sy
 80033d6:	f3bf 8f4f 	dsb	sy
 80033da:	b662      	cpsie	i
 80033dc:	603b      	str	r3, [r7, #0]
}
 80033de:	bf00      	nop
 80033e0:	bf00      	nop
 80033e2:	e7fd      	b.n	80033e0 <xTimerCreateTimerTask+0x4c>

        traceRETURN_xTimerCreateTimerTask( xReturn );

        return xReturn;
 80033e4:	687b      	ldr	r3, [r7, #4]
    }
 80033e6:	4618      	mov	r0, r3
 80033e8:	3708      	adds	r7, #8
 80033ea:	46bd      	mov	sp, r7
 80033ec:	bd80      	pop	{r7, pc}
 80033ee:	bf00      	nop
 80033f0:	20000250 	.word	0x20000250
 80033f4:	20000254 	.word	0x20000254
 80033f8:	08004c7c 	.word	0x08004c7c
 80033fc:	080034a5 	.word	0x080034a5

08003400 <prvReloadTimer>:
/*-----------------------------------------------------------*/

    static void prvReloadTimer( Timer_t * const pxTimer,
                                TickType_t xExpiredTime,
                                const TickType_t xTimeNow )
    {
 8003400:	b580      	push	{r7, lr}
 8003402:	b084      	sub	sp, #16
 8003404:	af00      	add	r7, sp, #0
 8003406:	60f8      	str	r0, [r7, #12]
 8003408:	60b9      	str	r1, [r7, #8]
 800340a:	607a      	str	r2, [r7, #4]
        /* Insert the timer into the appropriate list for the next expiry time.
         * If the next expiry time has already passed, advance the expiry time,
         * call the callback function, and try again. */
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 800340c:	e008      	b.n	8003420 <prvReloadTimer+0x20>
        {
            /* Advance the expiry time. */
            xExpiredTime += pxTimer->xTimerPeriodInTicks;
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	699b      	ldr	r3, [r3, #24]
 8003412:	68ba      	ldr	r2, [r7, #8]
 8003414:	4413      	add	r3, r2
 8003416:	60bb      	str	r3, [r7, #8]

            /* Call the timer callback. */
            traceTIMER_EXPIRED( pxTimer );
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	6a1b      	ldr	r3, [r3, #32]
 800341c:	68f8      	ldr	r0, [r7, #12]
 800341e:	4798      	blx	r3
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	699a      	ldr	r2, [r3, #24]
 8003424:	68bb      	ldr	r3, [r7, #8]
 8003426:	18d1      	adds	r1, r2, r3
 8003428:	68bb      	ldr	r3, [r7, #8]
 800342a:	687a      	ldr	r2, [r7, #4]
 800342c:	68f8      	ldr	r0, [r7, #12]
 800342e:	f000 f8df 	bl	80035f0 <prvInsertTimerInActiveList>
 8003432:	4603      	mov	r3, r0
 8003434:	2b00      	cmp	r3, #0
 8003436:	d1ea      	bne.n	800340e <prvReloadTimer+0xe>
        }
    }
 8003438:	bf00      	nop
 800343a:	bf00      	nop
 800343c:	3710      	adds	r7, #16
 800343e:	46bd      	mov	sp, r7
 8003440:	bd80      	pop	{r7, pc}
	...

08003444 <prvProcessExpiredTimer>:
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 8003444:	b580      	push	{r7, lr}
 8003446:	b084      	sub	sp, #16
 8003448:	af00      	add	r7, sp, #0
 800344a:	6078      	str	r0, [r7, #4]
 800344c:	6039      	str	r1, [r7, #0]
        /* MISRA Ref 11.5.3 [Void pointer assignment] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
        /* coverity[misra_c_2012_rule_11_5_violation] */
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800344e:	4b14      	ldr	r3, [pc, #80]	@ (80034a0 <prvProcessExpiredTimer+0x5c>)
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	68db      	ldr	r3, [r3, #12]
 8003454:	68db      	ldr	r3, [r3, #12]
 8003456:	60fb      	str	r3, [r7, #12]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	3304      	adds	r3, #4
 800345c:	4618      	mov	r0, r3
 800345e:	f7fe fc71 	bl	8001d44 <uxListRemove>

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0U )
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003468:	f003 0304 	and.w	r3, r3, #4
 800346c:	2b00      	cmp	r3, #0
 800346e:	d005      	beq.n	800347c <prvProcessExpiredTimer+0x38>
        {
            prvReloadTimer( pxTimer, xNextExpireTime, xTimeNow );
 8003470:	683a      	ldr	r2, [r7, #0]
 8003472:	6879      	ldr	r1, [r7, #4]
 8003474:	68f8      	ldr	r0, [r7, #12]
 8003476:	f7ff ffc3 	bl	8003400 <prvReloadTimer>
 800347a:	e008      	b.n	800348e <prvProcessExpiredTimer+0x4a>
        }
        else
        {
            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003482:	f023 0301 	bic.w	r3, r3, #1
 8003486:	b2da      	uxtb	r2, r3
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
        }

        /* Call the timer callback. */
        traceTIMER_EXPIRED( pxTimer );
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	6a1b      	ldr	r3, [r3, #32]
 8003492:	68f8      	ldr	r0, [r7, #12]
 8003494:	4798      	blx	r3
    }
 8003496:	bf00      	nop
 8003498:	3710      	adds	r7, #16
 800349a:	46bd      	mov	sp, r7
 800349c:	bd80      	pop	{r7, pc}
 800349e:	bf00      	nop
 80034a0:	20000248 	.word	0x20000248

080034a4 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 80034a4:	b580      	push	{r7, lr}
 80034a6:	b084      	sub	sp, #16
 80034a8:	af00      	add	r7, sp, #0
 80034aa:	6078      	str	r0, [r7, #4]

        for( ; configCONTROL_INFINITE_LOOP(); )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80034ac:	f107 0308 	add.w	r3, r7, #8
 80034b0:	4618      	mov	r0, r3
 80034b2:	f000 f859 	bl	8003568 <prvGetNextExpireTime>
 80034b6:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80034b8:	68bb      	ldr	r3, [r7, #8]
 80034ba:	4619      	mov	r1, r3
 80034bc:	68f8      	ldr	r0, [r7, #12]
 80034be:	f000 f805 	bl	80034cc <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 80034c2:	f000 f8d7 	bl	8003674 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80034c6:	bf00      	nop
 80034c8:	e7f0      	b.n	80034ac <prvTimerTask+0x8>
	...

080034cc <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 80034cc:	b580      	push	{r7, lr}
 80034ce:	b084      	sub	sp, #16
 80034d0:	af00      	add	r7, sp, #0
 80034d2:	6078      	str	r0, [r7, #4]
 80034d4:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 80034d6:	f7ff f98d 	bl	80027f4 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80034da:	f107 0308 	add.w	r3, r7, #8
 80034de:	4618      	mov	r0, r3
 80034e0:	f000 f866 	bl	80035b0 <prvSampleTimeNow>
 80034e4:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 80034e6:	68bb      	ldr	r3, [r7, #8]
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d130      	bne.n	800354e <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80034ec:	683b      	ldr	r3, [r7, #0]
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d10a      	bne.n	8003508 <prvProcessTimerOrBlockTask+0x3c>
 80034f2:	687a      	ldr	r2, [r7, #4]
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	429a      	cmp	r2, r3
 80034f8:	d806      	bhi.n	8003508 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 80034fa:	f7ff f989 	bl	8002810 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80034fe:	68f9      	ldr	r1, [r7, #12]
 8003500:	6878      	ldr	r0, [r7, #4]
 8003502:	f7ff ff9f 	bl	8003444 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 8003506:	e024      	b.n	8003552 <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 8003508:	683b      	ldr	r3, [r7, #0]
 800350a:	2b00      	cmp	r3, #0
 800350c:	d008      	beq.n	8003520 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800350e:	4b13      	ldr	r3, [pc, #76]	@ (800355c <prvProcessTimerOrBlockTask+0x90>)
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	2b00      	cmp	r3, #0
 8003516:	d101      	bne.n	800351c <prvProcessTimerOrBlockTask+0x50>
 8003518:	2301      	movs	r3, #1
 800351a:	e000      	b.n	800351e <prvProcessTimerOrBlockTask+0x52>
 800351c:	2300      	movs	r3, #0
 800351e:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8003520:	4b0f      	ldr	r3, [pc, #60]	@ (8003560 <prvProcessTimerOrBlockTask+0x94>)
 8003522:	6818      	ldr	r0, [r3, #0]
 8003524:	687a      	ldr	r2, [r7, #4]
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	1ad3      	subs	r3, r2, r3
 800352a:	683a      	ldr	r2, [r7, #0]
 800352c:	4619      	mov	r1, r3
 800352e:	f7fe ff05 	bl	800233c <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 8003532:	f7ff f96d 	bl	8002810 <xTaskResumeAll>
 8003536:	4603      	mov	r3, r0
 8003538:	2b00      	cmp	r3, #0
 800353a:	d10a      	bne.n	8003552 <prvProcessTimerOrBlockTask+0x86>
                        taskYIELD_WITHIN_API();
 800353c:	4b09      	ldr	r3, [pc, #36]	@ (8003564 <prvProcessTimerOrBlockTask+0x98>)
 800353e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003542:	601a      	str	r2, [r3, #0]
 8003544:	f3bf 8f4f 	dsb	sy
 8003548:	f3bf 8f6f 	isb	sy
    }
 800354c:	e001      	b.n	8003552 <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 800354e:	f7ff f95f 	bl	8002810 <xTaskResumeAll>
    }
 8003552:	bf00      	nop
 8003554:	3710      	adds	r7, #16
 8003556:	46bd      	mov	sp, r7
 8003558:	bd80      	pop	{r7, pc}
 800355a:	bf00      	nop
 800355c:	2000024c 	.word	0x2000024c
 8003560:	20000250 	.word	0x20000250
 8003564:	e000ed04 	.word	0xe000ed04

08003568 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 8003568:	b480      	push	{r7}
 800356a:	b085      	sub	sp, #20
 800356c:	af00      	add	r7, sp, #0
 800356e:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8003570:	4b0e      	ldr	r3, [pc, #56]	@ (80035ac <prvGetNextExpireTime+0x44>)
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	2b00      	cmp	r3, #0
 8003578:	d101      	bne.n	800357e <prvGetNextExpireTime+0x16>
 800357a:	2201      	movs	r2, #1
 800357c:	e000      	b.n	8003580 <prvGetNextExpireTime+0x18>
 800357e:	2200      	movs	r2, #0
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	2b00      	cmp	r3, #0
 800358a:	d105      	bne.n	8003598 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800358c:	4b07      	ldr	r3, [pc, #28]	@ (80035ac <prvGetNextExpireTime+0x44>)
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	68db      	ldr	r3, [r3, #12]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	60fb      	str	r3, [r7, #12]
 8003596:	e001      	b.n	800359c <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 8003598:	2300      	movs	r3, #0
 800359a:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 800359c:	68fb      	ldr	r3, [r7, #12]
    }
 800359e:	4618      	mov	r0, r3
 80035a0:	3714      	adds	r7, #20
 80035a2:	46bd      	mov	sp, r7
 80035a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a8:	4770      	bx	lr
 80035aa:	bf00      	nop
 80035ac:	20000248 	.word	0x20000248

080035b0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 80035b0:	b580      	push	{r7, lr}
 80035b2:	b084      	sub	sp, #16
 80035b4:	af00      	add	r7, sp, #0
 80035b6:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U;

        xTimeNow = xTaskGetTickCount();
 80035b8:	f7ff fa34 	bl	8002a24 <xTaskGetTickCount>
 80035bc:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 80035be:	4b0b      	ldr	r3, [pc, #44]	@ (80035ec <prvSampleTimeNow+0x3c>)
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	68fa      	ldr	r2, [r7, #12]
 80035c4:	429a      	cmp	r2, r3
 80035c6:	d205      	bcs.n	80035d4 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 80035c8:	f000 f922 	bl	8003810 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	2201      	movs	r2, #1
 80035d0:	601a      	str	r2, [r3, #0]
 80035d2:	e002      	b.n	80035da <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	2200      	movs	r2, #0
 80035d8:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 80035da:	4a04      	ldr	r2, [pc, #16]	@ (80035ec <prvSampleTimeNow+0x3c>)
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 80035e0:	68fb      	ldr	r3, [r7, #12]
    }
 80035e2:	4618      	mov	r0, r3
 80035e4:	3710      	adds	r7, #16
 80035e6:	46bd      	mov	sp, r7
 80035e8:	bd80      	pop	{r7, pc}
 80035ea:	bf00      	nop
 80035ec:	20000258 	.word	0x20000258

080035f0 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 80035f0:	b580      	push	{r7, lr}
 80035f2:	b086      	sub	sp, #24
 80035f4:	af00      	add	r7, sp, #0
 80035f6:	60f8      	str	r0, [r7, #12]
 80035f8:	60b9      	str	r1, [r7, #8]
 80035fa:	607a      	str	r2, [r7, #4]
 80035fc:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 80035fe:	2300      	movs	r3, #0
 8003600:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	68ba      	ldr	r2, [r7, #8]
 8003606:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	68fa      	ldr	r2, [r7, #12]
 800360c:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 800360e:	68ba      	ldr	r2, [r7, #8]
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	429a      	cmp	r2, r3
 8003614:	d812      	bhi.n	800363c <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks )
 8003616:	687a      	ldr	r2, [r7, #4]
 8003618:	683b      	ldr	r3, [r7, #0]
 800361a:	1ad2      	subs	r2, r2, r3
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	699b      	ldr	r3, [r3, #24]
 8003620:	429a      	cmp	r2, r3
 8003622:	d302      	bcc.n	800362a <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 8003624:	2301      	movs	r3, #1
 8003626:	617b      	str	r3, [r7, #20]
 8003628:	e01b      	b.n	8003662 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800362a:	4b10      	ldr	r3, [pc, #64]	@ (800366c <prvInsertTimerInActiveList+0x7c>)
 800362c:	681a      	ldr	r2, [r3, #0]
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	3304      	adds	r3, #4
 8003632:	4619      	mov	r1, r3
 8003634:	4610      	mov	r0, r2
 8003636:	f7fe fb4c 	bl	8001cd2 <vListInsert>
 800363a:	e012      	b.n	8003662 <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800363c:	687a      	ldr	r2, [r7, #4]
 800363e:	683b      	ldr	r3, [r7, #0]
 8003640:	429a      	cmp	r2, r3
 8003642:	d206      	bcs.n	8003652 <prvInsertTimerInActiveList+0x62>
 8003644:	68ba      	ldr	r2, [r7, #8]
 8003646:	683b      	ldr	r3, [r7, #0]
 8003648:	429a      	cmp	r2, r3
 800364a:	d302      	bcc.n	8003652 <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 800364c:	2301      	movs	r3, #1
 800364e:	617b      	str	r3, [r7, #20]
 8003650:	e007      	b.n	8003662 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8003652:	4b07      	ldr	r3, [pc, #28]	@ (8003670 <prvInsertTimerInActiveList+0x80>)
 8003654:	681a      	ldr	r2, [r3, #0]
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	3304      	adds	r3, #4
 800365a:	4619      	mov	r1, r3
 800365c:	4610      	mov	r0, r2
 800365e:	f7fe fb38 	bl	8001cd2 <vListInsert>
            }
        }

        return xProcessTimerNow;
 8003662:	697b      	ldr	r3, [r7, #20]
    }
 8003664:	4618      	mov	r0, r3
 8003666:	3718      	adds	r7, #24
 8003668:	46bd      	mov	sp, r7
 800366a:	bd80      	pop	{r7, pc}
 800366c:	2000024c 	.word	0x2000024c
 8003670:	20000248 	.word	0x20000248

08003674 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 8003674:	b580      	push	{r7, lr}
 8003676:	b088      	sub	sp, #32
 8003678:	af00      	add	r7, sp, #0
        DaemonTaskMessage_t xMessage = { 0 };
 800367a:	f107 0308 	add.w	r3, r7, #8
 800367e:	2200      	movs	r2, #0
 8003680:	601a      	str	r2, [r3, #0]
 8003682:	605a      	str	r2, [r3, #4]
 8003684:	609a      	str	r2, [r3, #8]
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL )
 8003686:	e0af      	b.n	80037e8 <prvProcessReceivedCommands+0x174>
            }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8003688:	68bb      	ldr	r3, [r7, #8]
 800368a:	2b00      	cmp	r3, #0
 800368c:	f2c0 80ac 	blt.w	80037e8 <prvProcessReceivedCommands+0x174>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8003690:	693b      	ldr	r3, [r7, #16]
 8003692:	61fb      	str	r3, [r7, #28]

                if( pxTimer != NULL )
 8003694:	69fb      	ldr	r3, [r7, #28]
 8003696:	2b00      	cmp	r3, #0
 8003698:	f000 80a6 	beq.w	80037e8 <prvProcessReceivedCommands+0x174>
                {
                    if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE )
 800369c:	69fb      	ldr	r3, [r7, #28]
 800369e:	695b      	ldr	r3, [r3, #20]
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d004      	beq.n	80036ae <prvProcessReceivedCommands+0x3a>
                    {
                        /* The timer is in a list, remove it. */
                        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80036a4:	69fb      	ldr	r3, [r7, #28]
 80036a6:	3304      	adds	r3, #4
 80036a8:	4618      	mov	r0, r3
 80036aa:	f7fe fb4b 	bl	8001d44 <uxListRemove>
                     *  it must be present in the function call.  prvSampleTimeNow() must be
                     *  called after the message is received from xTimerQueue so there is no
                     *  possibility of a higher priority task adding a message to the message
                     *  queue with a time that is ahead of the timer daemon task (because it
                     *  pre-empted the timer daemon task after the xTimeNow value was set). */
                    xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80036ae:	1d3b      	adds	r3, r7, #4
 80036b0:	4618      	mov	r0, r3
 80036b2:	f7ff ff7d 	bl	80035b0 <prvSampleTimeNow>
 80036b6:	61b8      	str	r0, [r7, #24]

                    switch( xMessage.xMessageID )
 80036b8:	68bb      	ldr	r3, [r7, #8]
 80036ba:	3b01      	subs	r3, #1
 80036bc:	2b08      	cmp	r3, #8
 80036be:	f200 8090 	bhi.w	80037e2 <prvProcessReceivedCommands+0x16e>
 80036c2:	a201      	add	r2, pc, #4	@ (adr r2, 80036c8 <prvProcessReceivedCommands+0x54>)
 80036c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036c8:	080036ed 	.word	0x080036ed
 80036cc:	080036ed 	.word	0x080036ed
 80036d0:	08003755 	.word	0x08003755
 80036d4:	08003769 	.word	0x08003769
 80036d8:	080037b9 	.word	0x080037b9
 80036dc:	080036ed 	.word	0x080036ed
 80036e0:	080036ed 	.word	0x080036ed
 80036e4:	08003755 	.word	0x08003755
 80036e8:	08003769 	.word	0x08003769
                        case tmrCOMMAND_START:
                        case tmrCOMMAND_START_FROM_ISR:
                        case tmrCOMMAND_RESET:
                        case tmrCOMMAND_RESET_FROM_ISR:
                            /* Start or restart a timer. */
                            pxTimer->ucStatus |= ( uint8_t ) tmrSTATUS_IS_ACTIVE;
 80036ec:	69fb      	ldr	r3, [r7, #28]
 80036ee:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80036f2:	f043 0301 	orr.w	r3, r3, #1
 80036f6:	b2da      	uxtb	r2, r3
 80036f8:	69fb      	ldr	r3, [r7, #28]
 80036fa:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

                            if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80036fe:	68fa      	ldr	r2, [r7, #12]
 8003700:	69fb      	ldr	r3, [r7, #28]
 8003702:	699b      	ldr	r3, [r3, #24]
 8003704:	18d1      	adds	r1, r2, r3
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	69ba      	ldr	r2, [r7, #24]
 800370a:	69f8      	ldr	r0, [r7, #28]
 800370c:	f7ff ff70 	bl	80035f0 <prvInsertTimerInActiveList>
 8003710:	4603      	mov	r3, r0
 8003712:	2b00      	cmp	r3, #0
 8003714:	d067      	beq.n	80037e6 <prvProcessReceivedCommands+0x172>
                            {
                                /* The timer expired before it was added to the active
                                 * timer list.  Process it now. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0U )
 8003716:	69fb      	ldr	r3, [r7, #28]
 8003718:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800371c:	f003 0304 	and.w	r3, r3, #4
 8003720:	2b00      	cmp	r3, #0
 8003722:	d009      	beq.n	8003738 <prvProcessReceivedCommands+0xc4>
                                {
                                    prvReloadTimer( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow );
 8003724:	68fa      	ldr	r2, [r7, #12]
 8003726:	69fb      	ldr	r3, [r7, #28]
 8003728:	699b      	ldr	r3, [r3, #24]
 800372a:	4413      	add	r3, r2
 800372c:	69ba      	ldr	r2, [r7, #24]
 800372e:	4619      	mov	r1, r3
 8003730:	69f8      	ldr	r0, [r7, #28]
 8003732:	f7ff fe65 	bl	8003400 <prvReloadTimer>
 8003736:	e008      	b.n	800374a <prvProcessReceivedCommands+0xd6>
                                }
                                else
                                {
                                    pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8003738:	69fb      	ldr	r3, [r7, #28]
 800373a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800373e:	f023 0301 	bic.w	r3, r3, #1
 8003742:	b2da      	uxtb	r2, r3
 8003744:	69fb      	ldr	r3, [r7, #28]
 8003746:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                                }

                                /* Call the timer callback. */
                                traceTIMER_EXPIRED( pxTimer );
                                pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800374a:	69fb      	ldr	r3, [r7, #28]
 800374c:	6a1b      	ldr	r3, [r3, #32]
 800374e:	69f8      	ldr	r0, [r7, #28]
 8003750:	4798      	blx	r3
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            break;
 8003752:	e048      	b.n	80037e6 <prvProcessReceivedCommands+0x172>

                        case tmrCOMMAND_STOP:
                        case tmrCOMMAND_STOP_FROM_ISR:
                            /* The timer has already been removed from the active list. */
                            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8003754:	69fb      	ldr	r3, [r7, #28]
 8003756:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800375a:	f023 0301 	bic.w	r3, r3, #1
 800375e:	b2da      	uxtb	r2, r3
 8003760:	69fb      	ldr	r3, [r7, #28]
 8003762:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                            break;
 8003766:	e03f      	b.n	80037e8 <prvProcessReceivedCommands+0x174>

                        case tmrCOMMAND_CHANGE_PERIOD:
                        case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                            pxTimer->ucStatus |= ( uint8_t ) tmrSTATUS_IS_ACTIVE;
 8003768:	69fb      	ldr	r3, [r7, #28]
 800376a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800376e:	f043 0301 	orr.w	r3, r3, #1
 8003772:	b2da      	uxtb	r2, r3
 8003774:	69fb      	ldr	r3, [r7, #28]
 8003776:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                            pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800377a:	68fa      	ldr	r2, [r7, #12]
 800377c:	69fb      	ldr	r3, [r7, #28]
 800377e:	619a      	str	r2, [r3, #24]
                            configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8003780:	69fb      	ldr	r3, [r7, #28]
 8003782:	699b      	ldr	r3, [r3, #24]
 8003784:	2b00      	cmp	r3, #0
 8003786:	d10d      	bne.n	80037a4 <prvProcessReceivedCommands+0x130>
    __asm volatile
 8003788:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800378c:	b672      	cpsid	i
 800378e:	f383 8811 	msr	BASEPRI, r3
 8003792:	f3bf 8f6f 	isb	sy
 8003796:	f3bf 8f4f 	dsb	sy
 800379a:	b662      	cpsie	i
 800379c:	617b      	str	r3, [r7, #20]
}
 800379e:	bf00      	nop
 80037a0:	bf00      	nop
 80037a2:	e7fd      	b.n	80037a0 <prvProcessReceivedCommands+0x12c>
                             * be longer or shorter than the old one.  The command time is
                             * therefore set to the current time, and as the period cannot
                             * be zero the next expiry time can only be in the future,
                             * meaning (unlike for the xTimerStart() case above) there is
                             * no fail case that needs to be handled here. */
                            ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80037a4:	69fb      	ldr	r3, [r7, #28]
 80037a6:	699a      	ldr	r2, [r3, #24]
 80037a8:	69bb      	ldr	r3, [r7, #24]
 80037aa:	18d1      	adds	r1, r2, r3
 80037ac:	69bb      	ldr	r3, [r7, #24]
 80037ae:	69ba      	ldr	r2, [r7, #24]
 80037b0:	69f8      	ldr	r0, [r7, #28]
 80037b2:	f7ff ff1d 	bl	80035f0 <prvInsertTimerInActiveList>
                            break;
 80037b6:	e017      	b.n	80037e8 <prvProcessReceivedCommands+0x174>
                            #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80037b8:	69fb      	ldr	r3, [r7, #28]
 80037ba:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80037be:	f003 0302 	and.w	r3, r3, #2
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d103      	bne.n	80037ce <prvProcessReceivedCommands+0x15a>
                                {
                                    vPortFree( pxTimer );
 80037c6:	69f8      	ldr	r0, [r7, #28]
 80037c8:	f000 fc16 	bl	8003ff8 <vPortFree>
                                 * no need to free the memory - just mark the timer as
                                 * "not active". */
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
                            }
                            #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                            break;
 80037cc:	e00c      	b.n	80037e8 <prvProcessReceivedCommands+0x174>
                                    pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 80037ce:	69fb      	ldr	r3, [r7, #28]
 80037d0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80037d4:	f023 0301 	bic.w	r3, r3, #1
 80037d8:	b2da      	uxtb	r2, r3
 80037da:	69fb      	ldr	r3, [r7, #28]
 80037dc:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                            break;
 80037e0:	e002      	b.n	80037e8 <prvProcessReceivedCommands+0x174>

                        default:
                            /* Don't expect to get here. */
                            break;
 80037e2:	bf00      	nop
 80037e4:	e000      	b.n	80037e8 <prvProcessReceivedCommands+0x174>
                            break;
 80037e6:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL )
 80037e8:	4b08      	ldr	r3, [pc, #32]	@ (800380c <prvProcessReceivedCommands+0x198>)
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	f107 0108 	add.w	r1, r7, #8
 80037f0:	2200      	movs	r2, #0
 80037f2:	4618      	mov	r0, r3
 80037f4:	f7fe fbda 	bl	8001fac <xQueueReceive>
 80037f8:	4603      	mov	r3, r0
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	f47f af44 	bne.w	8003688 <prvProcessReceivedCommands+0x14>
                {
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
    }
 8003800:	bf00      	nop
 8003802:	bf00      	nop
 8003804:	3720      	adds	r7, #32
 8003806:	46bd      	mov	sp, r7
 8003808:	bd80      	pop	{r7, pc}
 800380a:	bf00      	nop
 800380c:	20000250 	.word	0x20000250

08003810 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 8003810:	b580      	push	{r7, lr}
 8003812:	b082      	sub	sp, #8
 8003814:	af00      	add	r7, sp, #0

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003816:	e009      	b.n	800382c <prvSwitchTimerLists+0x1c>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003818:	4b0e      	ldr	r3, [pc, #56]	@ (8003854 <prvSwitchTimerLists+0x44>)
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	68db      	ldr	r3, [r3, #12]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	603b      	str	r3, [r7, #0]

            /* Process the expired timer.  For auto-reload timers, be careful to
             * process only expirations that occur on the current list.  Further
             * expirations must wait until after the lists are switched. */
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
 8003822:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8003826:	6838      	ldr	r0, [r7, #0]
 8003828:	f7ff fe0c 	bl	8003444 <prvProcessExpiredTimer>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800382c:	4b09      	ldr	r3, [pc, #36]	@ (8003854 <prvSwitchTimerLists+0x44>)
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	2b00      	cmp	r3, #0
 8003834:	d1f0      	bne.n	8003818 <prvSwitchTimerLists+0x8>
        }

        pxTemp = pxCurrentTimerList;
 8003836:	4b07      	ldr	r3, [pc, #28]	@ (8003854 <prvSwitchTimerLists+0x44>)
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	607b      	str	r3, [r7, #4]
        pxCurrentTimerList = pxOverflowTimerList;
 800383c:	4b06      	ldr	r3, [pc, #24]	@ (8003858 <prvSwitchTimerLists+0x48>)
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	4a04      	ldr	r2, [pc, #16]	@ (8003854 <prvSwitchTimerLists+0x44>)
 8003842:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 8003844:	4a04      	ldr	r2, [pc, #16]	@ (8003858 <prvSwitchTimerLists+0x48>)
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	6013      	str	r3, [r2, #0]
    }
 800384a:	bf00      	nop
 800384c:	3708      	adds	r7, #8
 800384e:	46bd      	mov	sp, r7
 8003850:	bd80      	pop	{r7, pc}
 8003852:	bf00      	nop
 8003854:	20000248 	.word	0x20000248
 8003858:	2000024c 	.word	0x2000024c

0800385c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 800385c:	b580      	push	{r7, lr}
 800385e:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 8003860:	f000 f998 	bl	8003b94 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 8003864:	4b12      	ldr	r3, [pc, #72]	@ (80038b0 <prvCheckForValidListAndQueue+0x54>)
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	2b00      	cmp	r3, #0
 800386a:	d11d      	bne.n	80038a8 <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 800386c:	4811      	ldr	r0, [pc, #68]	@ (80038b4 <prvCheckForValidListAndQueue+0x58>)
 800386e:	f7fe fa03 	bl	8001c78 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 8003872:	4811      	ldr	r0, [pc, #68]	@ (80038b8 <prvCheckForValidListAndQueue+0x5c>)
 8003874:	f7fe fa00 	bl	8001c78 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 8003878:	4b10      	ldr	r3, [pc, #64]	@ (80038bc <prvCheckForValidListAndQueue+0x60>)
 800387a:	4a0e      	ldr	r2, [pc, #56]	@ (80038b4 <prvCheckForValidListAndQueue+0x58>)
 800387c:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 800387e:	4b10      	ldr	r3, [pc, #64]	@ (80038c0 <prvCheckForValidListAndQueue+0x64>)
 8003880:	4a0d      	ldr	r2, [pc, #52]	@ (80038b8 <prvCheckForValidListAndQueue+0x5c>)
 8003882:	601a      	str	r2, [r3, #0]

                    xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                }
                #else
                {
                    xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ) );
 8003884:	2200      	movs	r2, #0
 8003886:	210c      	movs	r1, #12
 8003888:	200a      	movs	r0, #10
 800388a:	f7fe fb1b 	bl	8001ec4 <xQueueGenericCreate>
 800388e:	4603      	mov	r3, r0
 8003890:	4a07      	ldr	r2, [pc, #28]	@ (80038b0 <prvCheckForValidListAndQueue+0x54>)
 8003892:	6013      	str	r3, [r2, #0]
                }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                {
                    if( xTimerQueue != NULL )
 8003894:	4b06      	ldr	r3, [pc, #24]	@ (80038b0 <prvCheckForValidListAndQueue+0x54>)
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	2b00      	cmp	r3, #0
 800389a:	d005      	beq.n	80038a8 <prvCheckForValidListAndQueue+0x4c>
                    {
                        vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800389c:	4b04      	ldr	r3, [pc, #16]	@ (80038b0 <prvCheckForValidListAndQueue+0x54>)
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	4908      	ldr	r1, [pc, #32]	@ (80038c4 <prvCheckForValidListAndQueue+0x68>)
 80038a2:	4618      	mov	r0, r3
 80038a4:	f7fe fcf8 	bl	8002298 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 80038a8:	f000 f9aa 	bl	8003c00 <vPortExitCritical>
    }
 80038ac:	bf00      	nop
 80038ae:	bd80      	pop	{r7, pc}
 80038b0:	20000250 	.word	0x20000250
 80038b4:	20000220 	.word	0x20000220
 80038b8:	20000234 	.word	0x20000234
 80038bc:	20000248 	.word	0x20000248
 80038c0:	2000024c 	.word	0x2000024c
 80038c4:	08004c84 	.word	0x08004c84

080038c8 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 80038c8:	b480      	push	{r7}
 80038ca:	b085      	sub	sp, #20
 80038cc:	af00      	add	r7, sp, #0
 80038ce:	60f8      	str	r0, [r7, #12]
 80038d0:	60b9      	str	r1, [r7, #8]
 80038d2:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	3b04      	subs	r3, #4
 80038d8:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80038e0:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	3b04      	subs	r3, #4
 80038e6:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 80038e8:	68bb      	ldr	r3, [r7, #8]
 80038ea:	f023 0201 	bic.w	r2, r3, #1
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	3b04      	subs	r3, #4
 80038f6:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 80038f8:	4a0c      	ldr	r2, [pc, #48]	@ (800392c <pxPortInitialiseStack+0x64>)
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	3b14      	subs	r3, #20
 8003902:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8003904:	687a      	ldr	r2, [r7, #4]
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	3b04      	subs	r3, #4
 800390e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	f06f 0202 	mvn.w	r2, #2
 8003916:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	3b20      	subs	r3, #32
 800391c:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 800391e:	68fb      	ldr	r3, [r7, #12]
}
 8003920:	4618      	mov	r0, r3
 8003922:	3714      	adds	r7, #20
 8003924:	46bd      	mov	sp, r7
 8003926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800392a:	4770      	bx	lr
 800392c:	08003931 	.word	0x08003931

08003930 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8003930:	b480      	push	{r7}
 8003932:	b085      	sub	sp, #20
 8003934:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8003936:	2300      	movs	r3, #0
 8003938:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 800393a:	4b15      	ldr	r3, [pc, #84]	@ (8003990 <prvTaskExitError+0x60>)
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003942:	d00d      	beq.n	8003960 <prvTaskExitError+0x30>
    __asm volatile
 8003944:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003948:	b672      	cpsid	i
 800394a:	f383 8811 	msr	BASEPRI, r3
 800394e:	f3bf 8f6f 	isb	sy
 8003952:	f3bf 8f4f 	dsb	sy
 8003956:	b662      	cpsie	i
 8003958:	60fb      	str	r3, [r7, #12]
}
 800395a:	bf00      	nop
 800395c:	bf00      	nop
 800395e:	e7fd      	b.n	800395c <prvTaskExitError+0x2c>
    __asm volatile
 8003960:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003964:	b672      	cpsid	i
 8003966:	f383 8811 	msr	BASEPRI, r3
 800396a:	f3bf 8f6f 	isb	sy
 800396e:	f3bf 8f4f 	dsb	sy
 8003972:	b662      	cpsie	i
 8003974:	60bb      	str	r3, [r7, #8]
}
 8003976:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8003978:	bf00      	nop
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	2b00      	cmp	r3, #0
 800397e:	d0fc      	beq.n	800397a <prvTaskExitError+0x4a>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8003980:	bf00      	nop
 8003982:	bf00      	nop
 8003984:	3714      	adds	r7, #20
 8003986:	46bd      	mov	sp, r7
 8003988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800398c:	4770      	bx	lr
 800398e:	bf00      	nop
 8003990:	2000000c 	.word	0x2000000c
	...

080039a0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 80039a0:	4b07      	ldr	r3, [pc, #28]	@ (80039c0 <pxCurrentTCBConst2>)
 80039a2:	6819      	ldr	r1, [r3, #0]
 80039a4:	6808      	ldr	r0, [r1, #0]
 80039a6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80039aa:	f380 8809 	msr	PSP, r0
 80039ae:	f3bf 8f6f 	isb	sy
 80039b2:	f04f 0000 	mov.w	r0, #0
 80039b6:	f380 8811 	msr	BASEPRI, r0
 80039ba:	4770      	bx	lr
 80039bc:	f3af 8000 	nop.w

080039c0 <pxCurrentTCBConst2>:
 80039c0:	2000011c 	.word	0x2000011c
        "   bx r14                          \n"
        "                                   \n"
        "   .align 4                        \n"
        "pxCurrentTCBConst2: .word pxCurrentTCB             \n"
        );
}
 80039c4:	bf00      	nop
 80039c6:	bf00      	nop

080039c8 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 80039c8:	4808      	ldr	r0, [pc, #32]	@ (80039ec <prvPortStartFirstTask+0x24>)
 80039ca:	6800      	ldr	r0, [r0, #0]
 80039cc:	6800      	ldr	r0, [r0, #0]
 80039ce:	f380 8808 	msr	MSP, r0
 80039d2:	f04f 0000 	mov.w	r0, #0
 80039d6:	f380 8814 	msr	CONTROL, r0
 80039da:	b662      	cpsie	i
 80039dc:	b661      	cpsie	f
 80039de:	f3bf 8f4f 	dsb	sy
 80039e2:	f3bf 8f6f 	isb	sy
 80039e6:	df00      	svc	0
 80039e8:	bf00      	nop
 80039ea:	0000      	.short	0x0000
 80039ec:	e000ed08 	.word	0xe000ed08
        " isb                   \n"
        " svc 0                 \n" /* System call to start first task. */
        " nop                   \n"
        " .ltorg                \n"
        );
}
 80039f0:	bf00      	nop
 80039f2:	bf00      	nop

080039f4 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80039f4:	b580      	push	{r7, lr}
 80039f6:	b08a      	sub	sp, #40	@ 0x28
 80039f8:	af00      	add	r7, sp, #0
     * configCHECK_HANDLER_INSTALLATION to 0 in their FreeRTOSConfig.h. Direct
     * routing, which is validated here when configCHECK_HANDLER_INSTALLATION
     * is 1, should be preferred when possible. */
    #if ( configCHECK_HANDLER_INSTALLATION == 1 )
    {
        const portISR_t * const pxVectorTable = portSCB_VTOR_REG;
 80039fa:	4b5c      	ldr	r3, [pc, #368]	@ (8003b6c <xPortStartScheduler+0x178>)
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	627b      	str	r3, [r7, #36]	@ 0x24
         * https://www.FreeRTOS.org/FAQHelp.html.
         *
         * Systems with a configurable address for the interrupt vector table
         * can also encounter assertion failures or even system faults here if
         * VTOR is not set correctly to point to the application's vector table. */
        configASSERT( pxVectorTable[ portVECTOR_INDEX_SVC ] == vPortSVCHandler );
 8003a00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a02:	332c      	adds	r3, #44	@ 0x2c
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	4a5a      	ldr	r2, [pc, #360]	@ (8003b70 <xPortStartScheduler+0x17c>)
 8003a08:	4293      	cmp	r3, r2
 8003a0a:	d00d      	beq.n	8003a28 <xPortStartScheduler+0x34>
    __asm volatile
 8003a0c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003a10:	b672      	cpsid	i
 8003a12:	f383 8811 	msr	BASEPRI, r3
 8003a16:	f3bf 8f6f 	isb	sy
 8003a1a:	f3bf 8f4f 	dsb	sy
 8003a1e:	b662      	cpsie	i
 8003a20:	61bb      	str	r3, [r7, #24]
}
 8003a22:	bf00      	nop
 8003a24:	bf00      	nop
 8003a26:	e7fd      	b.n	8003a24 <xPortStartScheduler+0x30>
        configASSERT( pxVectorTable[ portVECTOR_INDEX_PENDSV ] == xPortPendSVHandler );
 8003a28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a2a:	3338      	adds	r3, #56	@ 0x38
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	4a51      	ldr	r2, [pc, #324]	@ (8003b74 <xPortStartScheduler+0x180>)
 8003a30:	4293      	cmp	r3, r2
 8003a32:	d00d      	beq.n	8003a50 <xPortStartScheduler+0x5c>
    __asm volatile
 8003a34:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003a38:	b672      	cpsid	i
 8003a3a:	f383 8811 	msr	BASEPRI, r3
 8003a3e:	f3bf 8f6f 	isb	sy
 8003a42:	f3bf 8f4f 	dsb	sy
 8003a46:	b662      	cpsie	i
 8003a48:	61fb      	str	r3, [r7, #28]
}
 8003a4a:	bf00      	nop
 8003a4c:	bf00      	nop
 8003a4e:	e7fd      	b.n	8003a4c <xPortStartScheduler+0x58>
    #endif /* configCHECK_HANDLER_INSTALLATION */

    #if ( configASSERT_DEFINED == 1 )
    {
        volatile uint8_t ucOriginalPriority;
        volatile uint32_t ulImplementedPrioBits = 0;
 8003a50:	2300      	movs	r3, #0
 8003a52:	60bb      	str	r3, [r7, #8]
        volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8003a54:	4b48      	ldr	r3, [pc, #288]	@ (8003b78 <xPortStartScheduler+0x184>)
 8003a56:	623b      	str	r3, [r7, #32]
         * functions can be called.  ISR safe functions are those that end in
         * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
         * ensure interrupt entry is as fast and simple as possible.
         *
         * Save the interrupt priority value that is about to be clobbered. */
        ucOriginalPriority = *pucFirstUserPriorityRegister;
 8003a58:	6a3b      	ldr	r3, [r7, #32]
 8003a5a:	781b      	ldrb	r3, [r3, #0]
 8003a5c:	b2db      	uxtb	r3, r3
 8003a5e:	73fb      	strb	r3, [r7, #15]

        /* Determine the number of priority bits available.  First write to all
         * possible bits. */
        *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8003a60:	6a3b      	ldr	r3, [r7, #32]
 8003a62:	22ff      	movs	r2, #255	@ 0xff
 8003a64:	701a      	strb	r2, [r3, #0]

        /* Read the value back to see how many bits stuck. */
        ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8003a66:	6a3b      	ldr	r3, [r7, #32]
 8003a68:	781b      	ldrb	r3, [r3, #0]
 8003a6a:	b2db      	uxtb	r3, r3
 8003a6c:	71fb      	strb	r3, [r7, #7]

        /* Use the same mask on the maximum system call priority. */
        ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003a6e:	79fb      	ldrb	r3, [r7, #7]
 8003a70:	b2db      	uxtb	r3, r3
 8003a72:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8003a76:	b2da      	uxtb	r2, r3
 8003a78:	4b40      	ldr	r3, [pc, #256]	@ (8003b7c <xPortStartScheduler+0x188>)
 8003a7a:	701a      	strb	r2, [r3, #0]
         * accounting for the number of priority bits supported by the
         * hardware. A priority of 0 is invalid because setting the BASEPRI
         * register to 0 unmasks all interrupts, and interrupts with priority 0
         * cannot be masked using BASEPRI.
         * See https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
        configASSERT( ucMaxSysCallPriority );
 8003a7c:	4b3f      	ldr	r3, [pc, #252]	@ (8003b7c <xPortStartScheduler+0x188>)
 8003a7e:	781b      	ldrb	r3, [r3, #0]
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d10d      	bne.n	8003aa0 <xPortStartScheduler+0xac>
    __asm volatile
 8003a84:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003a88:	b672      	cpsid	i
 8003a8a:	f383 8811 	msr	BASEPRI, r3
 8003a8e:	f3bf 8f6f 	isb	sy
 8003a92:	f3bf 8f4f 	dsb	sy
 8003a96:	b662      	cpsie	i
 8003a98:	617b      	str	r3, [r7, #20]
}
 8003a9a:	bf00      	nop
 8003a9c:	bf00      	nop
 8003a9e:	e7fd      	b.n	8003a9c <xPortStartScheduler+0xa8>

        /* Check that the bits not implemented in hardware are zero in
         * configMAX_SYSCALL_INTERRUPT_PRIORITY. */
        configASSERT( ( configMAX_SYSCALL_INTERRUPT_PRIORITY & ( ~ucMaxPriorityValue ) ) == 0U );
 8003aa0:	79fb      	ldrb	r3, [r7, #7]
 8003aa2:	b2db      	uxtb	r3, r3
 8003aa4:	43db      	mvns	r3, r3
 8003aa6:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d015      	beq.n	8003ada <xPortStartScheduler+0xe6>
    __asm volatile
 8003aae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003ab2:	b672      	cpsid	i
 8003ab4:	f383 8811 	msr	BASEPRI, r3
 8003ab8:	f3bf 8f6f 	isb	sy
 8003abc:	f3bf 8f4f 	dsb	sy
 8003ac0:	b662      	cpsie	i
 8003ac2:	613b      	str	r3, [r7, #16]
}
 8003ac4:	bf00      	nop
 8003ac6:	bf00      	nop
 8003ac8:	e7fd      	b.n	8003ac6 <xPortStartScheduler+0xd2>
        /* Calculate the maximum acceptable priority group value for the number
         * of bits read back. */

        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
        {
            ulImplementedPrioBits++;
 8003aca:	68bb      	ldr	r3, [r7, #8]
 8003acc:	3301      	adds	r3, #1
 8003ace:	60bb      	str	r3, [r7, #8]
            ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8003ad0:	79fb      	ldrb	r3, [r7, #7]
 8003ad2:	b2db      	uxtb	r3, r3
 8003ad4:	005b      	lsls	r3, r3, #1
 8003ad6:	b2db      	uxtb	r3, r3
 8003ad8:	71fb      	strb	r3, [r7, #7]
        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003ada:	79fb      	ldrb	r3, [r7, #7]
 8003adc:	b2db      	uxtb	r3, r3
 8003ade:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003ae2:	2b80      	cmp	r3, #128	@ 0x80
 8003ae4:	d0f1      	beq.n	8003aca <xPortStartScheduler+0xd6>
        }

        if( ulImplementedPrioBits == 8 )
 8003ae6:	68bb      	ldr	r3, [r7, #8]
 8003ae8:	2b08      	cmp	r3, #8
 8003aea:	d103      	bne.n	8003af4 <xPortStartScheduler+0x100>
             *
             * The following assert ensures that the sub-priority bit in the
             * configMAX_SYSCALL_INTERRUPT_PRIORITY is clear to avoid the above mentioned
             * confusion. */
            configASSERT( ( configMAX_SYSCALL_INTERRUPT_PRIORITY & 0x1U ) == 0U );
            ulMaxPRIGROUPValue = 0;
 8003aec:	4b24      	ldr	r3, [pc, #144]	@ (8003b80 <xPortStartScheduler+0x18c>)
 8003aee:	2200      	movs	r2, #0
 8003af0:	601a      	str	r2, [r3, #0]
 8003af2:	e004      	b.n	8003afe <xPortStartScheduler+0x10a>
        }
        else
        {
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS - ulImplementedPrioBits;
 8003af4:	68bb      	ldr	r3, [r7, #8]
 8003af6:	f1c3 0307 	rsb	r3, r3, #7
 8003afa:	4a21      	ldr	r2, [pc, #132]	@ (8003b80 <xPortStartScheduler+0x18c>)
 8003afc:	6013      	str	r3, [r2, #0]
        }

        /* Shift the priority group value back to its position within the AIRCR
         * register. */
        ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8003afe:	4b20      	ldr	r3, [pc, #128]	@ (8003b80 <xPortStartScheduler+0x18c>)
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	021b      	lsls	r3, r3, #8
 8003b04:	4a1e      	ldr	r2, [pc, #120]	@ (8003b80 <xPortStartScheduler+0x18c>)
 8003b06:	6013      	str	r3, [r2, #0]
        ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8003b08:	4b1d      	ldr	r3, [pc, #116]	@ (8003b80 <xPortStartScheduler+0x18c>)
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8003b10:	4a1b      	ldr	r2, [pc, #108]	@ (8003b80 <xPortStartScheduler+0x18c>)
 8003b12:	6013      	str	r3, [r2, #0]

        /* Restore the clobbered interrupt priority register to its original
         * value. */
        *pucFirstUserPriorityRegister = ucOriginalPriority;
 8003b14:	7bfb      	ldrb	r3, [r7, #15]
 8003b16:	b2da      	uxtb	r2, r3
 8003b18:	6a3b      	ldr	r3, [r7, #32]
 8003b1a:	701a      	strb	r2, [r3, #0]
    }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts, and make SVCall
     * the highest priority. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8003b1c:	4b19      	ldr	r3, [pc, #100]	@ (8003b84 <xPortStartScheduler+0x190>)
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	4a18      	ldr	r2, [pc, #96]	@ (8003b84 <xPortStartScheduler+0x190>)
 8003b22:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003b26:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8003b28:	4b16      	ldr	r3, [pc, #88]	@ (8003b84 <xPortStartScheduler+0x190>)
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	4a15      	ldr	r2, [pc, #84]	@ (8003b84 <xPortStartScheduler+0x190>)
 8003b2e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003b32:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR2_REG = 0;
 8003b34:	4b14      	ldr	r3, [pc, #80]	@ (8003b88 <xPortStartScheduler+0x194>)
 8003b36:	2200      	movs	r2, #0
 8003b38:	601a      	str	r2, [r3, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8003b3a:	f000 f8e9 	bl	8003d10 <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8003b3e:	4b13      	ldr	r3, [pc, #76]	@ (8003b8c <xPortStartScheduler+0x198>)
 8003b40:	2200      	movs	r2, #0
 8003b42:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 8003b44:	f000 f908 	bl	8003d58 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8003b48:	4b11      	ldr	r3, [pc, #68]	@ (8003b90 <xPortStartScheduler+0x19c>)
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	4a10      	ldr	r2, [pc, #64]	@ (8003b90 <xPortStartScheduler+0x19c>)
 8003b4e:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8003b52:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8003b54:	f7ff ff38 	bl	80039c8 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8003b58:	f7ff f890 	bl	8002c7c <vTaskSwitchContext>
    prvTaskExitError();
 8003b5c:	f7ff fee8 	bl	8003930 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8003b60:	2300      	movs	r3, #0
}
 8003b62:	4618      	mov	r0, r3
 8003b64:	3728      	adds	r7, #40	@ 0x28
 8003b66:	46bd      	mov	sp, r7
 8003b68:	bd80      	pop	{r7, pc}
 8003b6a:	bf00      	nop
 8003b6c:	e000ed08 	.word	0xe000ed08
 8003b70:	080039a1 	.word	0x080039a1
 8003b74:	08003c61 	.word	0x08003c61
 8003b78:	e000e400 	.word	0xe000e400
 8003b7c:	2000025c 	.word	0x2000025c
 8003b80:	20000260 	.word	0x20000260
 8003b84:	e000ed20 	.word	0xe000ed20
 8003b88:	e000ed1c 	.word	0xe000ed1c
 8003b8c:	2000000c 	.word	0x2000000c
 8003b90:	e000ef34 	.word	0xe000ef34

08003b94 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8003b94:	b480      	push	{r7}
 8003b96:	b083      	sub	sp, #12
 8003b98:	af00      	add	r7, sp, #0
    __asm volatile
 8003b9a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003b9e:	b672      	cpsid	i
 8003ba0:	f383 8811 	msr	BASEPRI, r3
 8003ba4:	f3bf 8f6f 	isb	sy
 8003ba8:	f3bf 8f4f 	dsb	sy
 8003bac:	b662      	cpsie	i
 8003bae:	607b      	str	r3, [r7, #4]
}
 8003bb0:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8003bb2:	4b11      	ldr	r3, [pc, #68]	@ (8003bf8 <vPortEnterCritical+0x64>)
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	3301      	adds	r3, #1
 8003bb8:	4a0f      	ldr	r2, [pc, #60]	@ (8003bf8 <vPortEnterCritical+0x64>)
 8003bba:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8003bbc:	4b0e      	ldr	r3, [pc, #56]	@ (8003bf8 <vPortEnterCritical+0x64>)
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	2b01      	cmp	r3, #1
 8003bc2:	d112      	bne.n	8003bea <vPortEnterCritical+0x56>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8003bc4:	4b0d      	ldr	r3, [pc, #52]	@ (8003bfc <vPortEnterCritical+0x68>)
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	b2db      	uxtb	r3, r3
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d00d      	beq.n	8003bea <vPortEnterCritical+0x56>
    __asm volatile
 8003bce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003bd2:	b672      	cpsid	i
 8003bd4:	f383 8811 	msr	BASEPRI, r3
 8003bd8:	f3bf 8f6f 	isb	sy
 8003bdc:	f3bf 8f4f 	dsb	sy
 8003be0:	b662      	cpsie	i
 8003be2:	603b      	str	r3, [r7, #0]
}
 8003be4:	bf00      	nop
 8003be6:	bf00      	nop
 8003be8:	e7fd      	b.n	8003be6 <vPortEnterCritical+0x52>
    }
}
 8003bea:	bf00      	nop
 8003bec:	370c      	adds	r7, #12
 8003bee:	46bd      	mov	sp, r7
 8003bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf4:	4770      	bx	lr
 8003bf6:	bf00      	nop
 8003bf8:	2000000c 	.word	0x2000000c
 8003bfc:	e000ed04 	.word	0xe000ed04

08003c00 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8003c00:	b480      	push	{r7}
 8003c02:	b083      	sub	sp, #12
 8003c04:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 8003c06:	4b13      	ldr	r3, [pc, #76]	@ (8003c54 <vPortExitCritical+0x54>)
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d10d      	bne.n	8003c2a <vPortExitCritical+0x2a>
    __asm volatile
 8003c0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003c12:	b672      	cpsid	i
 8003c14:	f383 8811 	msr	BASEPRI, r3
 8003c18:	f3bf 8f6f 	isb	sy
 8003c1c:	f3bf 8f4f 	dsb	sy
 8003c20:	b662      	cpsie	i
 8003c22:	607b      	str	r3, [r7, #4]
}
 8003c24:	bf00      	nop
 8003c26:	bf00      	nop
 8003c28:	e7fd      	b.n	8003c26 <vPortExitCritical+0x26>
    uxCriticalNesting--;
 8003c2a:	4b0a      	ldr	r3, [pc, #40]	@ (8003c54 <vPortExitCritical+0x54>)
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	3b01      	subs	r3, #1
 8003c30:	4a08      	ldr	r2, [pc, #32]	@ (8003c54 <vPortExitCritical+0x54>)
 8003c32:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8003c34:	4b07      	ldr	r3, [pc, #28]	@ (8003c54 <vPortExitCritical+0x54>)
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d105      	bne.n	8003c48 <vPortExitCritical+0x48>
 8003c3c:	2300      	movs	r3, #0
 8003c3e:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
    __asm volatile
 8003c40:	683b      	ldr	r3, [r7, #0]
 8003c42:	f383 8811 	msr	BASEPRI, r3
    (
        "   msr basepri, %0 " ::"r" ( ulNewMaskValue ) : "memory"
    );
}
 8003c46:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8003c48:	bf00      	nop
 8003c4a:	370c      	adds	r7, #12
 8003c4c:	46bd      	mov	sp, r7
 8003c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c52:	4770      	bx	lr
 8003c54:	2000000c 	.word	0x2000000c
	...

08003c60 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8003c60:	f3ef 8009 	mrs	r0, PSP
 8003c64:	f3bf 8f6f 	isb	sy
 8003c68:	4b15      	ldr	r3, [pc, #84]	@ (8003cc0 <pxCurrentTCBConst>)
 8003c6a:	681a      	ldr	r2, [r3, #0]
 8003c6c:	f01e 0f10 	tst.w	lr, #16
 8003c70:	bf08      	it	eq
 8003c72:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8003c76:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003c7a:	6010      	str	r0, [r2, #0]
 8003c7c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8003c80:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8003c84:	b672      	cpsid	i
 8003c86:	f380 8811 	msr	BASEPRI, r0
 8003c8a:	f3bf 8f4f 	dsb	sy
 8003c8e:	f3bf 8f6f 	isb	sy
 8003c92:	b662      	cpsie	i
 8003c94:	f7fe fff2 	bl	8002c7c <vTaskSwitchContext>
 8003c98:	f04f 0000 	mov.w	r0, #0
 8003c9c:	f380 8811 	msr	BASEPRI, r0
 8003ca0:	bc09      	pop	{r0, r3}
 8003ca2:	6819      	ldr	r1, [r3, #0]
 8003ca4:	6808      	ldr	r0, [r1, #0]
 8003ca6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003caa:	f01e 0f10 	tst.w	lr, #16
 8003cae:	bf08      	it	eq
 8003cb0:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8003cb4:	f380 8809 	msr	PSP, r0
 8003cb8:	f3bf 8f6f 	isb	sy
 8003cbc:	4770      	bx	lr
 8003cbe:	bf00      	nop

08003cc0 <pxCurrentTCBConst>:
 8003cc0:	2000011c 	.word	0x2000011c
        "                                       \n"
        "   .align 4                            \n"
        "pxCurrentTCBConst: .word pxCurrentTCB  \n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8003cc4:	bf00      	nop
 8003cc6:	bf00      	nop

08003cc8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8003cc8:	b580      	push	{r7, lr}
 8003cca:	b082      	sub	sp, #8
 8003ccc:	af00      	add	r7, sp, #0
    __asm volatile
 8003cce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003cd2:	b672      	cpsid	i
 8003cd4:	f383 8811 	msr	BASEPRI, r3
 8003cd8:	f3bf 8f6f 	isb	sy
 8003cdc:	f3bf 8f4f 	dsb	sy
 8003ce0:	b662      	cpsie	i
 8003ce2:	607b      	str	r3, [r7, #4]
}
 8003ce4:	bf00      	nop
     * known. */
    portDISABLE_INTERRUPTS();
    traceISR_ENTER();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8003ce6:	f7fe fead 	bl	8002a44 <xTaskIncrementTick>
 8003cea:	4603      	mov	r3, r0
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d003      	beq.n	8003cf8 <SysTick_Handler+0x30>
        {
            traceISR_EXIT_TO_SCHEDULER();

            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8003cf0:	4b06      	ldr	r3, [pc, #24]	@ (8003d0c <SysTick_Handler+0x44>)
 8003cf2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003cf6:	601a      	str	r2, [r3, #0]
 8003cf8:	2300      	movs	r3, #0
 8003cfa:	603b      	str	r3, [r7, #0]
    __asm volatile
 8003cfc:	683b      	ldr	r3, [r7, #0]
 8003cfe:	f383 8811 	msr	BASEPRI, r3
}
 8003d02:	bf00      	nop
        {
            traceISR_EXIT();
        }
    }
    portENABLE_INTERRUPTS();
}
 8003d04:	bf00      	nop
 8003d06:	3708      	adds	r7, #8
 8003d08:	46bd      	mov	sp, r7
 8003d0a:	bd80      	pop	{r7, pc}
 8003d0c:	e000ed04 	.word	0xe000ed04

08003d10 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 8003d10:	b480      	push	{r7}
 8003d12:	af00      	add	r7, sp, #0
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
    }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8003d14:	4b0b      	ldr	r3, [pc, #44]	@ (8003d44 <vPortSetupTimerInterrupt+0x34>)
 8003d16:	2200      	movs	r2, #0
 8003d18:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8003d1a:	4b0b      	ldr	r3, [pc, #44]	@ (8003d48 <vPortSetupTimerInterrupt+0x38>)
 8003d1c:	2200      	movs	r2, #0
 8003d1e:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8003d20:	4b0a      	ldr	r3, [pc, #40]	@ (8003d4c <vPortSetupTimerInterrupt+0x3c>)
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	4a0a      	ldr	r2, [pc, #40]	@ (8003d50 <vPortSetupTimerInterrupt+0x40>)
 8003d26:	fba2 2303 	umull	r2, r3, r2, r3
 8003d2a:	099b      	lsrs	r3, r3, #6
 8003d2c:	4a09      	ldr	r2, [pc, #36]	@ (8003d54 <vPortSetupTimerInterrupt+0x44>)
 8003d2e:	3b01      	subs	r3, #1
 8003d30:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8003d32:	4b04      	ldr	r3, [pc, #16]	@ (8003d44 <vPortSetupTimerInterrupt+0x34>)
 8003d34:	2207      	movs	r2, #7
 8003d36:	601a      	str	r2, [r3, #0]
}
 8003d38:	bf00      	nop
 8003d3a:	46bd      	mov	sp, r7
 8003d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d40:	4770      	bx	lr
 8003d42:	bf00      	nop
 8003d44:	e000e010 	.word	0xe000e010
 8003d48:	e000e018 	.word	0xe000e018
 8003d4c:	20000000 	.word	0x20000000
 8003d50:	10624dd3 	.word	0x10624dd3
 8003d54:	e000e014 	.word	0xe000e014

08003d58 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8003d58:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8003d68 <vPortEnableVFP+0x10>
 8003d5c:	6801      	ldr	r1, [r0, #0]
 8003d5e:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8003d62:	6001      	str	r1, [r0, #0]
 8003d64:	4770      	bx	lr
 8003d66:	0000      	.short	0x0000
 8003d68:	e000ed88 	.word	0xe000ed88
        "   orr r1, r1, #( 0xf << 20 )  \n" /* Enable CP10 and CP11 coprocessors, then save back. */
        "   str r1, [r0]                \n"
        "   bx r14                      \n"
        "   .ltorg                      \n"
    );
}
 8003d6c:	bf00      	nop
 8003d6e:	bf00      	nop

08003d70 <pvPortMalloc>:
PRIVILEGED_DATA static size_t xNumberOfSuccessfulFrees = ( size_t ) 0U;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8003d70:	b580      	push	{r7, lr}
 8003d72:	b08e      	sub	sp, #56	@ 0x38
 8003d74:	af00      	add	r7, sp, #0
 8003d76:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock;
    BlockLink_t * pxPreviousBlock;
    BlockLink_t * pxNewBlockLink;
    void * pvReturn = NULL;
 8003d78:	2300      	movs	r3, #0
 8003d7a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    size_t xAdditionalRequiredSize;
    size_t xAllocatedBlockSize = 0;
 8003d7c:	2300      	movs	r3, #0
 8003d7e:	62bb      	str	r3, [r7, #40]	@ 0x28

    if( xWantedSize > 0 )
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d022      	beq.n	8003dcc <pvPortMalloc+0x5c>
    {
        /* The wanted size must be increased so it can contain a BlockLink_t
         * structure in addition to the requested amount of bytes. */
        if( heapADD_WILL_OVERFLOW( xWantedSize, xHeapStructSize ) == 0 )
 8003d86:	2308      	movs	r3, #8
 8003d88:	43db      	mvns	r3, r3
 8003d8a:	687a      	ldr	r2, [r7, #4]
 8003d8c:	429a      	cmp	r2, r3
 8003d8e:	d81b      	bhi.n	8003dc8 <pvPortMalloc+0x58>
        {
            xWantedSize += xHeapStructSize;
 8003d90:	2208      	movs	r2, #8
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	4413      	add	r3, r2
 8003d96:	607b      	str	r3, [r7, #4]

            /* Ensure that blocks are always aligned to the required number
             * of bytes. */
            if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	f003 0307 	and.w	r3, r3, #7
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d014      	beq.n	8003dcc <pvPortMalloc+0x5c>
            {
                /* Byte alignment required. */
                xAdditionalRequiredSize = portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK );
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	f003 0307 	and.w	r3, r3, #7
 8003da8:	f1c3 0308 	rsb	r3, r3, #8
 8003dac:	627b      	str	r3, [r7, #36]	@ 0x24

                if( heapADD_WILL_OVERFLOW( xWantedSize, xAdditionalRequiredSize ) == 0 )
 8003dae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003db0:	43db      	mvns	r3, r3
 8003db2:	687a      	ldr	r2, [r7, #4]
 8003db4:	429a      	cmp	r2, r3
 8003db6:	d804      	bhi.n	8003dc2 <pvPortMalloc+0x52>
                {
                    xWantedSize += xAdditionalRequiredSize;
 8003db8:	687a      	ldr	r2, [r7, #4]
 8003dba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003dbc:	4413      	add	r3, r2
 8003dbe:	607b      	str	r3, [r7, #4]
 8003dc0:	e004      	b.n	8003dcc <pvPortMalloc+0x5c>
                }
                else
                {
                    xWantedSize = 0;
 8003dc2:	2300      	movs	r3, #0
 8003dc4:	607b      	str	r3, [r7, #4]
 8003dc6:	e001      	b.n	8003dcc <pvPortMalloc+0x5c>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            xWantedSize = 0;
 8003dc8:	2300      	movs	r3, #0
 8003dca:	607b      	str	r3, [r7, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    vTaskSuspendAll();
 8003dcc:	f7fe fd12 	bl	80027f4 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 8003dd0:	4b82      	ldr	r3, [pc, #520]	@ (8003fdc <pvPortMalloc+0x26c>)
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d101      	bne.n	8003ddc <pvPortMalloc+0x6c>
        {
            prvHeapInit();
 8003dd8:	f000 f98a 	bl	80040f0 <prvHeapInit>

        /* Check the block size we are trying to allocate is not so large that the
         * top bit is set.  The top bit of the block size member of the BlockLink_t
         * structure is used to determine who owns the block - the application or
         * the kernel, so it must be free. */
        if( heapBLOCK_SIZE_IS_VALID( xWantedSize ) != 0 )
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	f2c0 80e1 	blt.w	8003fa6 <pvPortMalloc+0x236>
        {
            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	f000 80dd 	beq.w	8003fa6 <pvPortMalloc+0x236>
 8003dec:	4b7c      	ldr	r3, [pc, #496]	@ (8003fe0 <pvPortMalloc+0x270>)
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	687a      	ldr	r2, [r7, #4]
 8003df2:	429a      	cmp	r2, r3
 8003df4:	f200 80d7 	bhi.w	8003fa6 <pvPortMalloc+0x236>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8003df8:	4b7a      	ldr	r3, [pc, #488]	@ (8003fe4 <pvPortMalloc+0x274>)
 8003dfa:	633b      	str	r3, [r7, #48]	@ 0x30
                pxBlock = heapPROTECT_BLOCK_POINTER( xStart.pxNextFreeBlock );
 8003dfc:	4b79      	ldr	r3, [pc, #484]	@ (8003fe4 <pvPortMalloc+0x274>)
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	637b      	str	r3, [r7, #52]	@ 0x34
                heapVALIDATE_BLOCK_POINTER( pxBlock );
 8003e02:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003e04:	4a78      	ldr	r2, [pc, #480]	@ (8003fe8 <pvPortMalloc+0x278>)
 8003e06:	4293      	cmp	r3, r2
 8003e08:	d305      	bcc.n	8003e16 <pvPortMalloc+0xa6>
 8003e0a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003e0c:	4a77      	ldr	r2, [pc, #476]	@ (8003fec <pvPortMalloc+0x27c>)
 8003e0e:	4293      	cmp	r3, r2
 8003e10:	d801      	bhi.n	8003e16 <pvPortMalloc+0xa6>
 8003e12:	2301      	movs	r3, #1
 8003e14:	e000      	b.n	8003e18 <pvPortMalloc+0xa8>
 8003e16:	2300      	movs	r3, #0
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d12d      	bne.n	8003e78 <pvPortMalloc+0x108>
    __asm volatile
 8003e1c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e20:	b672      	cpsid	i
 8003e22:	f383 8811 	msr	BASEPRI, r3
 8003e26:	f3bf 8f6f 	isb	sy
 8003e2a:	f3bf 8f4f 	dsb	sy
 8003e2e:	b662      	cpsie	i
 8003e30:	61fb      	str	r3, [r7, #28]
}
 8003e32:	bf00      	nop
 8003e34:	bf00      	nop
 8003e36:	e7fd      	b.n	8003e34 <pvPortMalloc+0xc4>

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != heapPROTECT_BLOCK_POINTER( NULL ) ) )
                {
                    pxPreviousBlock = pxBlock;
 8003e38:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003e3a:	633b      	str	r3, [r7, #48]	@ 0x30
                    pxBlock = heapPROTECT_BLOCK_POINTER( pxBlock->pxNextFreeBlock );
 8003e3c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	637b      	str	r3, [r7, #52]	@ 0x34
                    heapVALIDATE_BLOCK_POINTER( pxBlock );
 8003e42:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003e44:	4a68      	ldr	r2, [pc, #416]	@ (8003fe8 <pvPortMalloc+0x278>)
 8003e46:	4293      	cmp	r3, r2
 8003e48:	d305      	bcc.n	8003e56 <pvPortMalloc+0xe6>
 8003e4a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003e4c:	4a67      	ldr	r2, [pc, #412]	@ (8003fec <pvPortMalloc+0x27c>)
 8003e4e:	4293      	cmp	r3, r2
 8003e50:	d801      	bhi.n	8003e56 <pvPortMalloc+0xe6>
 8003e52:	2301      	movs	r3, #1
 8003e54:	e000      	b.n	8003e58 <pvPortMalloc+0xe8>
 8003e56:	2300      	movs	r3, #0
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d10d      	bne.n	8003e78 <pvPortMalloc+0x108>
    __asm volatile
 8003e5c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e60:	b672      	cpsid	i
 8003e62:	f383 8811 	msr	BASEPRI, r3
 8003e66:	f3bf 8f6f 	isb	sy
 8003e6a:	f3bf 8f4f 	dsb	sy
 8003e6e:	b662      	cpsie	i
 8003e70:	61bb      	str	r3, [r7, #24]
}
 8003e72:	bf00      	nop
 8003e74:	bf00      	nop
 8003e76:	e7fd      	b.n	8003e74 <pvPortMalloc+0x104>
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != heapPROTECT_BLOCK_POINTER( NULL ) ) )
 8003e78:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003e7a:	685b      	ldr	r3, [r3, #4]
 8003e7c:	687a      	ldr	r2, [r7, #4]
 8003e7e:	429a      	cmp	r2, r3
 8003e80:	d903      	bls.n	8003e8a <pvPortMalloc+0x11a>
 8003e82:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d1d6      	bne.n	8003e38 <pvPortMalloc+0xc8>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8003e8a:	4b54      	ldr	r3, [pc, #336]	@ (8003fdc <pvPortMalloc+0x26c>)
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003e90:	429a      	cmp	r2, r3
 8003e92:	f000 8088 	beq.w	8003fa6 <pvPortMalloc+0x236>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) heapPROTECT_BLOCK_POINTER( pxPreviousBlock->pxNextFreeBlock ) ) + xHeapStructSize );
 8003e96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	2208      	movs	r2, #8
 8003e9c:	4413      	add	r3, r2
 8003e9e:	62fb      	str	r3, [r7, #44]	@ 0x2c
                    heapVALIDATE_BLOCK_POINTER( pvReturn );
 8003ea0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003ea2:	4a51      	ldr	r2, [pc, #324]	@ (8003fe8 <pvPortMalloc+0x278>)
 8003ea4:	4293      	cmp	r3, r2
 8003ea6:	d305      	bcc.n	8003eb4 <pvPortMalloc+0x144>
 8003ea8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003eaa:	4a50      	ldr	r2, [pc, #320]	@ (8003fec <pvPortMalloc+0x27c>)
 8003eac:	4293      	cmp	r3, r2
 8003eae:	d801      	bhi.n	8003eb4 <pvPortMalloc+0x144>
 8003eb0:	2301      	movs	r3, #1
 8003eb2:	e000      	b.n	8003eb6 <pvPortMalloc+0x146>
 8003eb4:	2300      	movs	r3, #0
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d10d      	bne.n	8003ed6 <pvPortMalloc+0x166>
    __asm volatile
 8003eba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003ebe:	b672      	cpsid	i
 8003ec0:	f383 8811 	msr	BASEPRI, r3
 8003ec4:	f3bf 8f6f 	isb	sy
 8003ec8:	f3bf 8f4f 	dsb	sy
 8003ecc:	b662      	cpsie	i
 8003ece:	617b      	str	r3, [r7, #20]
}
 8003ed0:	bf00      	nop
 8003ed2:	bf00      	nop
 8003ed4:	e7fd      	b.n	8003ed2 <pvPortMalloc+0x162>

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8003ed6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003ed8:	681a      	ldr	r2, [r3, #0]
 8003eda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003edc:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    configASSERT( heapSUBTRACT_WILL_UNDERFLOW( pxBlock->xBlockSize, xWantedSize ) == 0 );
 8003ede:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003ee0:	685b      	ldr	r3, [r3, #4]
 8003ee2:	687a      	ldr	r2, [r7, #4]
 8003ee4:	429a      	cmp	r2, r3
 8003ee6:	d90d      	bls.n	8003f04 <pvPortMalloc+0x194>
    __asm volatile
 8003ee8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003eec:	b672      	cpsid	i
 8003eee:	f383 8811 	msr	BASEPRI, r3
 8003ef2:	f3bf 8f6f 	isb	sy
 8003ef6:	f3bf 8f4f 	dsb	sy
 8003efa:	b662      	cpsie	i
 8003efc:	613b      	str	r3, [r7, #16]
}
 8003efe:	bf00      	nop
 8003f00:	bf00      	nop
 8003f02:	e7fd      	b.n	8003f00 <pvPortMalloc+0x190>

                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8003f04:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003f06:	685a      	ldr	r2, [r3, #4]
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	1ad2      	subs	r2, r2, r3
 8003f0c:	2308      	movs	r3, #8
 8003f0e:	005b      	lsls	r3, r3, #1
 8003f10:	429a      	cmp	r2, r3
 8003f12:	d926      	bls.n	8003f62 <pvPortMalloc+0x1f2>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8003f14:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	4413      	add	r3, r2
 8003f1a:	623b      	str	r3, [r7, #32]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003f1c:	6a3b      	ldr	r3, [r7, #32]
 8003f1e:	f003 0307 	and.w	r3, r3, #7
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d00d      	beq.n	8003f42 <pvPortMalloc+0x1d2>
    __asm volatile
 8003f26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003f2a:	b672      	cpsid	i
 8003f2c:	f383 8811 	msr	BASEPRI, r3
 8003f30:	f3bf 8f6f 	isb	sy
 8003f34:	f3bf 8f4f 	dsb	sy
 8003f38:	b662      	cpsie	i
 8003f3a:	60fb      	str	r3, [r7, #12]
}
 8003f3c:	bf00      	nop
 8003f3e:	bf00      	nop
 8003f40:	e7fd      	b.n	8003f3e <pvPortMalloc+0x1ce>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8003f42:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003f44:	685a      	ldr	r2, [r3, #4]
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	1ad2      	subs	r2, r2, r3
 8003f4a:	6a3b      	ldr	r3, [r7, #32]
 8003f4c:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8003f4e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003f50:	687a      	ldr	r2, [r7, #4]
 8003f52:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        pxNewBlockLink->pxNextFreeBlock = pxPreviousBlock->pxNextFreeBlock;
 8003f54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f56:	681a      	ldr	r2, [r3, #0]
 8003f58:	6a3b      	ldr	r3, [r7, #32]
 8003f5a:	601a      	str	r2, [r3, #0]
                        pxPreviousBlock->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxNewBlockLink );
 8003f5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f5e:	6a3a      	ldr	r2, [r7, #32]
 8003f60:	601a      	str	r2, [r3, #0]
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8003f62:	4b1f      	ldr	r3, [pc, #124]	@ (8003fe0 <pvPortMalloc+0x270>)
 8003f64:	681a      	ldr	r2, [r3, #0]
 8003f66:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003f68:	685b      	ldr	r3, [r3, #4]
 8003f6a:	1ad3      	subs	r3, r2, r3
 8003f6c:	4a1c      	ldr	r2, [pc, #112]	@ (8003fe0 <pvPortMalloc+0x270>)
 8003f6e:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8003f70:	4b1b      	ldr	r3, [pc, #108]	@ (8003fe0 <pvPortMalloc+0x270>)
 8003f72:	681a      	ldr	r2, [r3, #0]
 8003f74:	4b1e      	ldr	r3, [pc, #120]	@ (8003ff0 <pvPortMalloc+0x280>)
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	429a      	cmp	r2, r3
 8003f7a:	d203      	bcs.n	8003f84 <pvPortMalloc+0x214>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8003f7c:	4b18      	ldr	r3, [pc, #96]	@ (8003fe0 <pvPortMalloc+0x270>)
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	4a1b      	ldr	r2, [pc, #108]	@ (8003ff0 <pvPortMalloc+0x280>)
 8003f82:	6013      	str	r3, [r2, #0]
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xAllocatedBlockSize = pxBlock->xBlockSize;
 8003f84:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003f86:	685b      	ldr	r3, [r3, #4]
 8003f88:	62bb      	str	r3, [r7, #40]	@ 0x28

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    heapALLOCATE_BLOCK( pxBlock );
 8003f8a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003f8c:	685b      	ldr	r3, [r3, #4]
 8003f8e:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8003f92:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003f94:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( NULL );
 8003f96:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003f98:	2200      	movs	r2, #0
 8003f9a:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 8003f9c:	4b15      	ldr	r3, [pc, #84]	@ (8003ff4 <pvPortMalloc+0x284>)
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	3301      	adds	r3, #1
 8003fa2:	4a14      	ldr	r2, [pc, #80]	@ (8003ff4 <pvPortMalloc+0x284>)
 8003fa4:	6013      	str	r3, [r2, #0]
        traceMALLOC( pvReturn, xAllocatedBlockSize );

        /* Prevent compiler warnings when trace macros are not used. */
        ( void ) xAllocatedBlockSize;
    }
    ( void ) xTaskResumeAll();
 8003fa6:	f7fe fc33 	bl	8002810 <xTaskResumeAll>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8003faa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003fac:	f003 0307 	and.w	r3, r3, #7
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d00d      	beq.n	8003fd0 <pvPortMalloc+0x260>
    __asm volatile
 8003fb4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003fb8:	b672      	cpsid	i
 8003fba:	f383 8811 	msr	BASEPRI, r3
 8003fbe:	f3bf 8f6f 	isb	sy
 8003fc2:	f3bf 8f4f 	dsb	sy
 8003fc6:	b662      	cpsie	i
 8003fc8:	60bb      	str	r3, [r7, #8]
}
 8003fca:	bf00      	nop
 8003fcc:	bf00      	nop
 8003fce:	e7fd      	b.n	8003fcc <pvPortMalloc+0x25c>
    return pvReturn;
 8003fd0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8003fd2:	4618      	mov	r0, r3
 8003fd4:	3738      	adds	r7, #56	@ 0x38
 8003fd6:	46bd      	mov	sp, r7
 8003fd8:	bd80      	pop	{r7, pc}
 8003fda:	bf00      	nop
 8003fdc:	2000f66c 	.word	0x2000f66c
 8003fe0:	2000f670 	.word	0x2000f670
 8003fe4:	2000f664 	.word	0x2000f664
 8003fe8:	20000264 	.word	0x20000264
 8003fec:	2000f663 	.word	0x2000f663
 8003ff0:	2000f674 	.word	0x2000f674
 8003ff4:	2000f678 	.word	0x2000f678

08003ff8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8003ff8:	b580      	push	{r7, lr}
 8003ffa:	b088      	sub	sp, #32
 8003ffc:	af00      	add	r7, sp, #0
 8003ffe:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	61fb      	str	r3, [r7, #28]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	2b00      	cmp	r3, #0
 8004008:	d066      	beq.n	80040d8 <vPortFree+0xe0>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 800400a:	2308      	movs	r3, #8
 800400c:	425b      	negs	r3, r3
 800400e:	69fa      	ldr	r2, [r7, #28]
 8004010:	4413      	add	r3, r2
 8004012:	61fb      	str	r3, [r7, #28]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8004014:	69fb      	ldr	r3, [r7, #28]
 8004016:	61bb      	str	r3, [r7, #24]

        heapVALIDATE_BLOCK_POINTER( pxLink );
 8004018:	69bb      	ldr	r3, [r7, #24]
 800401a:	4a31      	ldr	r2, [pc, #196]	@ (80040e0 <vPortFree+0xe8>)
 800401c:	4293      	cmp	r3, r2
 800401e:	d305      	bcc.n	800402c <vPortFree+0x34>
 8004020:	69bb      	ldr	r3, [r7, #24]
 8004022:	4a30      	ldr	r2, [pc, #192]	@ (80040e4 <vPortFree+0xec>)
 8004024:	4293      	cmp	r3, r2
 8004026:	d801      	bhi.n	800402c <vPortFree+0x34>
 8004028:	2301      	movs	r3, #1
 800402a:	e000      	b.n	800402e <vPortFree+0x36>
 800402c:	2300      	movs	r3, #0
 800402e:	2b00      	cmp	r3, #0
 8004030:	d10d      	bne.n	800404e <vPortFree+0x56>
    __asm volatile
 8004032:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004036:	b672      	cpsid	i
 8004038:	f383 8811 	msr	BASEPRI, r3
 800403c:	f3bf 8f6f 	isb	sy
 8004040:	f3bf 8f4f 	dsb	sy
 8004044:	b662      	cpsie	i
 8004046:	617b      	str	r3, [r7, #20]
}
 8004048:	bf00      	nop
 800404a:	bf00      	nop
 800404c:	e7fd      	b.n	800404a <vPortFree+0x52>
        configASSERT( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 );
 800404e:	69bb      	ldr	r3, [r7, #24]
 8004050:	685b      	ldr	r3, [r3, #4]
 8004052:	2b00      	cmp	r3, #0
 8004054:	db0d      	blt.n	8004072 <vPortFree+0x7a>
    __asm volatile
 8004056:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800405a:	b672      	cpsid	i
 800405c:	f383 8811 	msr	BASEPRI, r3
 8004060:	f3bf 8f6f 	isb	sy
 8004064:	f3bf 8f4f 	dsb	sy
 8004068:	b662      	cpsie	i
 800406a:	613b      	str	r3, [r7, #16]
}
 800406c:	bf00      	nop
 800406e:	bf00      	nop
 8004070:	e7fd      	b.n	800406e <vPortFree+0x76>
        configASSERT( pxLink->pxNextFreeBlock == heapPROTECT_BLOCK_POINTER( NULL ) );
 8004072:	69bb      	ldr	r3, [r7, #24]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	2b00      	cmp	r3, #0
 8004078:	d00d      	beq.n	8004096 <vPortFree+0x9e>
    __asm volatile
 800407a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800407e:	b672      	cpsid	i
 8004080:	f383 8811 	msr	BASEPRI, r3
 8004084:	f3bf 8f6f 	isb	sy
 8004088:	f3bf 8f4f 	dsb	sy
 800408c:	b662      	cpsie	i
 800408e:	60fb      	str	r3, [r7, #12]
}
 8004090:	bf00      	nop
 8004092:	bf00      	nop
 8004094:	e7fd      	b.n	8004092 <vPortFree+0x9a>

        if( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 )
 8004096:	69bb      	ldr	r3, [r7, #24]
 8004098:	685b      	ldr	r3, [r3, #4]
 800409a:	2b00      	cmp	r3, #0
 800409c:	da1c      	bge.n	80040d8 <vPortFree+0xe0>
        {
            if( pxLink->pxNextFreeBlock == heapPROTECT_BLOCK_POINTER( NULL ) )
 800409e:	69bb      	ldr	r3, [r7, #24]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d118      	bne.n	80040d8 <vPortFree+0xe0>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                heapFREE_BLOCK( pxLink );
 80040a6:	69bb      	ldr	r3, [r7, #24]
 80040a8:	685b      	ldr	r3, [r3, #4]
 80040aa:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80040ae:	69bb      	ldr	r3, [r7, #24]
 80040b0:	605a      	str	r2, [r3, #4]
                        ( void ) memset( puc + xHeapStructSize, 0, pxLink->xBlockSize - xHeapStructSize );
                    }
                }
                #endif

                vTaskSuspendAll();
 80040b2:	f7fe fb9f 	bl	80027f4 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 80040b6:	69bb      	ldr	r3, [r7, #24]
 80040b8:	685a      	ldr	r2, [r3, #4]
 80040ba:	4b0b      	ldr	r3, [pc, #44]	@ (80040e8 <vPortFree+0xf0>)
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	4413      	add	r3, r2
 80040c0:	4a09      	ldr	r2, [pc, #36]	@ (80040e8 <vPortFree+0xf0>)
 80040c2:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80040c4:	69b8      	ldr	r0, [r7, #24]
 80040c6:	f000 f86d 	bl	80041a4 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 80040ca:	4b08      	ldr	r3, [pc, #32]	@ (80040ec <vPortFree+0xf4>)
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	3301      	adds	r3, #1
 80040d0:	4a06      	ldr	r2, [pc, #24]	@ (80040ec <vPortFree+0xf4>)
 80040d2:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 80040d4:	f7fe fb9c 	bl	8002810 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 80040d8:	bf00      	nop
 80040da:	3720      	adds	r7, #32
 80040dc:	46bd      	mov	sp, r7
 80040de:	bd80      	pop	{r7, pc}
 80040e0:	20000264 	.word	0x20000264
 80040e4:	2000f663 	.word	0x2000f663
 80040e8:	2000f670 	.word	0x2000f670
 80040ec:	2000f67c 	.word	0x2000f67c

080040f0 <prvHeapInit>:
    return pv;
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 80040f0:	b480      	push	{r7}
 80040f2:	b085      	sub	sp, #20
 80040f4:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    portPOINTER_SIZE_TYPE uxStartAddress, uxEndAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80040f6:	f44f 4374 	mov.w	r3, #62464	@ 0xf400
 80040fa:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxStartAddress = ( portPOINTER_SIZE_TYPE ) ucHeap;
 80040fc:	4b24      	ldr	r3, [pc, #144]	@ (8004190 <prvHeapInit+0xa0>)
 80040fe:	60fb      	str	r3, [r7, #12]

    if( ( uxStartAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	f003 0307 	and.w	r3, r3, #7
 8004106:	2b00      	cmp	r3, #0
 8004108:	d00c      	beq.n	8004124 <prvHeapInit+0x34>
    {
        uxStartAddress += ( portBYTE_ALIGNMENT - 1 );
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	3307      	adds	r3, #7
 800410e:	60fb      	str	r3, [r7, #12]
        uxStartAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	f023 0307 	bic.w	r3, r3, #7
 8004116:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= ( size_t ) ( uxStartAddress - ( portPOINTER_SIZE_TYPE ) ucHeap );
 8004118:	68ba      	ldr	r2, [r7, #8]
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	1ad3      	subs	r3, r2, r3
 800411e:	4a1c      	ldr	r2, [pc, #112]	@ (8004190 <prvHeapInit+0xa0>)
 8004120:	4413      	add	r3, r2
 8004122:	60bb      	str	r3, [r7, #8]
    }
    #endif

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) heapPROTECT_BLOCK_POINTER( uxStartAddress );
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	4a1b      	ldr	r2, [pc, #108]	@ (8004194 <prvHeapInit+0xa4>)
 8004128:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 800412a:	4b1a      	ldr	r3, [pc, #104]	@ (8004194 <prvHeapInit+0xa4>)
 800412c:	2200      	movs	r2, #0
 800412e:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxEndAddress = uxStartAddress + ( portPOINTER_SIZE_TYPE ) xTotalHeapSize;
 8004130:	68fa      	ldr	r2, [r7, #12]
 8004132:	68bb      	ldr	r3, [r7, #8]
 8004134:	4413      	add	r3, r2
 8004136:	607b      	str	r3, [r7, #4]
    uxEndAddress -= ( portPOINTER_SIZE_TYPE ) xHeapStructSize;
 8004138:	2208      	movs	r2, #8
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	1a9b      	subs	r3, r3, r2
 800413e:	607b      	str	r3, [r7, #4]
    uxEndAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	f023 0307 	bic.w	r3, r3, #7
 8004146:	607b      	str	r3, [r7, #4]
    pxEnd = ( BlockLink_t * ) uxEndAddress;
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	4a13      	ldr	r2, [pc, #76]	@ (8004198 <prvHeapInit+0xa8>)
 800414c:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 800414e:	4b12      	ldr	r3, [pc, #72]	@ (8004198 <prvHeapInit+0xa8>)
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	2200      	movs	r2, #0
 8004154:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( NULL );
 8004156:	4b10      	ldr	r3, [pc, #64]	@ (8004198 <prvHeapInit+0xa8>)
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	2200      	movs	r2, #0
 800415c:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( BlockLink_t * ) uxStartAddress;
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = ( size_t ) ( uxEndAddress - ( portPOINTER_SIZE_TYPE ) pxFirstFreeBlock );
 8004162:	683b      	ldr	r3, [r7, #0]
 8004164:	687a      	ldr	r2, [r7, #4]
 8004166:	1ad2      	subs	r2, r2, r3
 8004168:	683b      	ldr	r3, [r7, #0]
 800416a:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxEnd );
 800416c:	4b0a      	ldr	r3, [pc, #40]	@ (8004198 <prvHeapInit+0xa8>)
 800416e:	681a      	ldr	r2, [r3, #0]
 8004170:	683b      	ldr	r3, [r7, #0]
 8004172:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004174:	683b      	ldr	r3, [r7, #0]
 8004176:	685b      	ldr	r3, [r3, #4]
 8004178:	4a08      	ldr	r2, [pc, #32]	@ (800419c <prvHeapInit+0xac>)
 800417a:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800417c:	683b      	ldr	r3, [r7, #0]
 800417e:	685b      	ldr	r3, [r3, #4]
 8004180:	4a07      	ldr	r2, [pc, #28]	@ (80041a0 <prvHeapInit+0xb0>)
 8004182:	6013      	str	r3, [r2, #0]
}
 8004184:	bf00      	nop
 8004186:	3714      	adds	r7, #20
 8004188:	46bd      	mov	sp, r7
 800418a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800418e:	4770      	bx	lr
 8004190:	20000264 	.word	0x20000264
 8004194:	2000f664 	.word	0x2000f664
 8004198:	2000f66c 	.word	0x2000f66c
 800419c:	2000f674 	.word	0x2000f674
 80041a0:	2000f670 	.word	0x2000f670

080041a4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 80041a4:	b480      	push	{r7}
 80041a6:	b087      	sub	sp, #28
 80041a8:	af00      	add	r7, sp, #0
 80041aa:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) < pxBlockToInsert; pxIterator = heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) )
 80041ac:	4b37      	ldr	r3, [pc, #220]	@ (800428c <prvInsertBlockIntoFreeList+0xe8>)
 80041ae:	617b      	str	r3, [r7, #20]
 80041b0:	e002      	b.n	80041b8 <prvInsertBlockIntoFreeList+0x14>
 80041b2:	697b      	ldr	r3, [r7, #20]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	617b      	str	r3, [r7, #20]
 80041b8:	697b      	ldr	r3, [r7, #20]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	687a      	ldr	r2, [r7, #4]
 80041be:	429a      	cmp	r2, r3
 80041c0:	d8f7      	bhi.n	80041b2 <prvInsertBlockIntoFreeList+0xe>
    {
        /* Nothing to do here, just iterate to the right position. */
    }

    if( pxIterator != &xStart )
 80041c2:	697b      	ldr	r3, [r7, #20]
 80041c4:	4a31      	ldr	r2, [pc, #196]	@ (800428c <prvInsertBlockIntoFreeList+0xe8>)
 80041c6:	4293      	cmp	r3, r2
 80041c8:	d01a      	beq.n	8004200 <prvInsertBlockIntoFreeList+0x5c>
    {
        heapVALIDATE_BLOCK_POINTER( pxIterator );
 80041ca:	697b      	ldr	r3, [r7, #20]
 80041cc:	4a30      	ldr	r2, [pc, #192]	@ (8004290 <prvInsertBlockIntoFreeList+0xec>)
 80041ce:	4293      	cmp	r3, r2
 80041d0:	d305      	bcc.n	80041de <prvInsertBlockIntoFreeList+0x3a>
 80041d2:	697b      	ldr	r3, [r7, #20]
 80041d4:	4a2f      	ldr	r2, [pc, #188]	@ (8004294 <prvInsertBlockIntoFreeList+0xf0>)
 80041d6:	4293      	cmp	r3, r2
 80041d8:	d801      	bhi.n	80041de <prvInsertBlockIntoFreeList+0x3a>
 80041da:	2301      	movs	r3, #1
 80041dc:	e000      	b.n	80041e0 <prvInsertBlockIntoFreeList+0x3c>
 80041de:	2300      	movs	r3, #0
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d10d      	bne.n	8004200 <prvInsertBlockIntoFreeList+0x5c>
    __asm volatile
 80041e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80041e8:	b672      	cpsid	i
 80041ea:	f383 8811 	msr	BASEPRI, r3
 80041ee:	f3bf 8f6f 	isb	sy
 80041f2:	f3bf 8f4f 	dsb	sy
 80041f6:	b662      	cpsie	i
 80041f8:	60fb      	str	r3, [r7, #12]
}
 80041fa:	bf00      	nop
 80041fc:	bf00      	nop
 80041fe:	e7fd      	b.n	80041fc <prvInsertBlockIntoFreeList+0x58>
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8004200:	697b      	ldr	r3, [r7, #20]
 8004202:	613b      	str	r3, [r7, #16]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004204:	697b      	ldr	r3, [r7, #20]
 8004206:	685b      	ldr	r3, [r3, #4]
 8004208:	693a      	ldr	r2, [r7, #16]
 800420a:	4413      	add	r3, r2
 800420c:	687a      	ldr	r2, [r7, #4]
 800420e:	429a      	cmp	r2, r3
 8004210:	d108      	bne.n	8004224 <prvInsertBlockIntoFreeList+0x80>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004212:	697b      	ldr	r3, [r7, #20]
 8004214:	685a      	ldr	r2, [r3, #4]
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	685b      	ldr	r3, [r3, #4]
 800421a:	441a      	add	r2, r3
 800421c:	697b      	ldr	r3, [r7, #20]
 800421e:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8004220:	697b      	ldr	r3, [r7, #20]
 8004222:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	613b      	str	r3, [r7, #16]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) )
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	685b      	ldr	r3, [r3, #4]
 800422c:	693a      	ldr	r2, [r7, #16]
 800422e:	441a      	add	r2, r3
 8004230:	697b      	ldr	r3, [r7, #20]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	429a      	cmp	r2, r3
 8004236:	d118      	bne.n	800426a <prvInsertBlockIntoFreeList+0xc6>
    {
        if( heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) != pxEnd )
 8004238:	697b      	ldr	r3, [r7, #20]
 800423a:	681a      	ldr	r2, [r3, #0]
 800423c:	4b16      	ldr	r3, [pc, #88]	@ (8004298 <prvInsertBlockIntoFreeList+0xf4>)
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	429a      	cmp	r2, r3
 8004242:	d00d      	beq.n	8004260 <prvInsertBlockIntoFreeList+0xbc>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock )->xBlockSize;
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	685a      	ldr	r2, [r3, #4]
 8004248:	697b      	ldr	r3, [r7, #20]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	685b      	ldr	r3, [r3, #4]
 800424e:	441a      	add	r2, r3
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock )->pxNextFreeBlock;
 8004254:	697b      	ldr	r3, [r7, #20]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	681a      	ldr	r2, [r3, #0]
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	601a      	str	r2, [r3, #0]
 800425e:	e008      	b.n	8004272 <prvInsertBlockIntoFreeList+0xce>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxEnd );
 8004260:	4b0d      	ldr	r3, [pc, #52]	@ (8004298 <prvInsertBlockIntoFreeList+0xf4>)
 8004262:	681a      	ldr	r2, [r3, #0]
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	601a      	str	r2, [r3, #0]
 8004268:	e003      	b.n	8004272 <prvInsertBlockIntoFreeList+0xce>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800426a:	697b      	ldr	r3, [r7, #20]
 800426c:	681a      	ldr	r2, [r3, #0]
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gap, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8004272:	697a      	ldr	r2, [r7, #20]
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	429a      	cmp	r2, r3
 8004278:	d002      	beq.n	8004280 <prvInsertBlockIntoFreeList+0xdc>
    {
        pxIterator->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxBlockToInsert );
 800427a:	697b      	ldr	r3, [r7, #20]
 800427c:	687a      	ldr	r2, [r7, #4]
 800427e:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8004280:	bf00      	nop
 8004282:	371c      	adds	r7, #28
 8004284:	46bd      	mov	sp, r7
 8004286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800428a:	4770      	bx	lr
 800428c:	2000f664 	.word	0x2000f664
 8004290:	20000264 	.word	0x20000264
 8004294:	2000f663 	.word	0x2000f663
 8004298:	2000f66c 	.word	0x2000f66c

0800429c <std>:
 800429c:	2300      	movs	r3, #0
 800429e:	b510      	push	{r4, lr}
 80042a0:	4604      	mov	r4, r0
 80042a2:	e9c0 3300 	strd	r3, r3, [r0]
 80042a6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80042aa:	6083      	str	r3, [r0, #8]
 80042ac:	8181      	strh	r1, [r0, #12]
 80042ae:	6643      	str	r3, [r0, #100]	@ 0x64
 80042b0:	81c2      	strh	r2, [r0, #14]
 80042b2:	6183      	str	r3, [r0, #24]
 80042b4:	4619      	mov	r1, r3
 80042b6:	2208      	movs	r2, #8
 80042b8:	305c      	adds	r0, #92	@ 0x5c
 80042ba:	f000 f9e7 	bl	800468c <memset>
 80042be:	4b0d      	ldr	r3, [pc, #52]	@ (80042f4 <std+0x58>)
 80042c0:	6263      	str	r3, [r4, #36]	@ 0x24
 80042c2:	4b0d      	ldr	r3, [pc, #52]	@ (80042f8 <std+0x5c>)
 80042c4:	62a3      	str	r3, [r4, #40]	@ 0x28
 80042c6:	4b0d      	ldr	r3, [pc, #52]	@ (80042fc <std+0x60>)
 80042c8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80042ca:	4b0d      	ldr	r3, [pc, #52]	@ (8004300 <std+0x64>)
 80042cc:	6323      	str	r3, [r4, #48]	@ 0x30
 80042ce:	4b0d      	ldr	r3, [pc, #52]	@ (8004304 <std+0x68>)
 80042d0:	6224      	str	r4, [r4, #32]
 80042d2:	429c      	cmp	r4, r3
 80042d4:	d006      	beq.n	80042e4 <std+0x48>
 80042d6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80042da:	4294      	cmp	r4, r2
 80042dc:	d002      	beq.n	80042e4 <std+0x48>
 80042de:	33d0      	adds	r3, #208	@ 0xd0
 80042e0:	429c      	cmp	r4, r3
 80042e2:	d105      	bne.n	80042f0 <std+0x54>
 80042e4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80042e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80042ec:	f000 ba46 	b.w	800477c <__retarget_lock_init_recursive>
 80042f0:	bd10      	pop	{r4, pc}
 80042f2:	bf00      	nop
 80042f4:	080044dd 	.word	0x080044dd
 80042f8:	080044ff 	.word	0x080044ff
 80042fc:	08004537 	.word	0x08004537
 8004300:	0800455b 	.word	0x0800455b
 8004304:	2000f680 	.word	0x2000f680

08004308 <stdio_exit_handler>:
 8004308:	4a02      	ldr	r2, [pc, #8]	@ (8004314 <stdio_exit_handler+0xc>)
 800430a:	4903      	ldr	r1, [pc, #12]	@ (8004318 <stdio_exit_handler+0x10>)
 800430c:	4803      	ldr	r0, [pc, #12]	@ (800431c <stdio_exit_handler+0x14>)
 800430e:	f000 b869 	b.w	80043e4 <_fwalk_sglue>
 8004312:	bf00      	nop
 8004314:	20000010 	.word	0x20000010
 8004318:	08004a99 	.word	0x08004a99
 800431c:	20000020 	.word	0x20000020

08004320 <cleanup_stdio>:
 8004320:	6841      	ldr	r1, [r0, #4]
 8004322:	4b0c      	ldr	r3, [pc, #48]	@ (8004354 <cleanup_stdio+0x34>)
 8004324:	4299      	cmp	r1, r3
 8004326:	b510      	push	{r4, lr}
 8004328:	4604      	mov	r4, r0
 800432a:	d001      	beq.n	8004330 <cleanup_stdio+0x10>
 800432c:	f000 fbb4 	bl	8004a98 <_fflush_r>
 8004330:	68a1      	ldr	r1, [r4, #8]
 8004332:	4b09      	ldr	r3, [pc, #36]	@ (8004358 <cleanup_stdio+0x38>)
 8004334:	4299      	cmp	r1, r3
 8004336:	d002      	beq.n	800433e <cleanup_stdio+0x1e>
 8004338:	4620      	mov	r0, r4
 800433a:	f000 fbad 	bl	8004a98 <_fflush_r>
 800433e:	68e1      	ldr	r1, [r4, #12]
 8004340:	4b06      	ldr	r3, [pc, #24]	@ (800435c <cleanup_stdio+0x3c>)
 8004342:	4299      	cmp	r1, r3
 8004344:	d004      	beq.n	8004350 <cleanup_stdio+0x30>
 8004346:	4620      	mov	r0, r4
 8004348:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800434c:	f000 bba4 	b.w	8004a98 <_fflush_r>
 8004350:	bd10      	pop	{r4, pc}
 8004352:	bf00      	nop
 8004354:	2000f680 	.word	0x2000f680
 8004358:	2000f6e8 	.word	0x2000f6e8
 800435c:	2000f750 	.word	0x2000f750

08004360 <global_stdio_init.part.0>:
 8004360:	b510      	push	{r4, lr}
 8004362:	4b0b      	ldr	r3, [pc, #44]	@ (8004390 <global_stdio_init.part.0+0x30>)
 8004364:	4c0b      	ldr	r4, [pc, #44]	@ (8004394 <global_stdio_init.part.0+0x34>)
 8004366:	4a0c      	ldr	r2, [pc, #48]	@ (8004398 <global_stdio_init.part.0+0x38>)
 8004368:	601a      	str	r2, [r3, #0]
 800436a:	4620      	mov	r0, r4
 800436c:	2200      	movs	r2, #0
 800436e:	2104      	movs	r1, #4
 8004370:	f7ff ff94 	bl	800429c <std>
 8004374:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8004378:	2201      	movs	r2, #1
 800437a:	2109      	movs	r1, #9
 800437c:	f7ff ff8e 	bl	800429c <std>
 8004380:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8004384:	2202      	movs	r2, #2
 8004386:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800438a:	2112      	movs	r1, #18
 800438c:	f7ff bf86 	b.w	800429c <std>
 8004390:	2000f7b8 	.word	0x2000f7b8
 8004394:	2000f680 	.word	0x2000f680
 8004398:	08004309 	.word	0x08004309

0800439c <__sfp_lock_acquire>:
 800439c:	4801      	ldr	r0, [pc, #4]	@ (80043a4 <__sfp_lock_acquire+0x8>)
 800439e:	f000 b9ee 	b.w	800477e <__retarget_lock_acquire_recursive>
 80043a2:	bf00      	nop
 80043a4:	2000f7c1 	.word	0x2000f7c1

080043a8 <__sfp_lock_release>:
 80043a8:	4801      	ldr	r0, [pc, #4]	@ (80043b0 <__sfp_lock_release+0x8>)
 80043aa:	f000 b9e9 	b.w	8004780 <__retarget_lock_release_recursive>
 80043ae:	bf00      	nop
 80043b0:	2000f7c1 	.word	0x2000f7c1

080043b4 <__sinit>:
 80043b4:	b510      	push	{r4, lr}
 80043b6:	4604      	mov	r4, r0
 80043b8:	f7ff fff0 	bl	800439c <__sfp_lock_acquire>
 80043bc:	6a23      	ldr	r3, [r4, #32]
 80043be:	b11b      	cbz	r3, 80043c8 <__sinit+0x14>
 80043c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80043c4:	f7ff bff0 	b.w	80043a8 <__sfp_lock_release>
 80043c8:	4b04      	ldr	r3, [pc, #16]	@ (80043dc <__sinit+0x28>)
 80043ca:	6223      	str	r3, [r4, #32]
 80043cc:	4b04      	ldr	r3, [pc, #16]	@ (80043e0 <__sinit+0x2c>)
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d1f5      	bne.n	80043c0 <__sinit+0xc>
 80043d4:	f7ff ffc4 	bl	8004360 <global_stdio_init.part.0>
 80043d8:	e7f2      	b.n	80043c0 <__sinit+0xc>
 80043da:	bf00      	nop
 80043dc:	08004321 	.word	0x08004321
 80043e0:	2000f7b8 	.word	0x2000f7b8

080043e4 <_fwalk_sglue>:
 80043e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80043e8:	4607      	mov	r7, r0
 80043ea:	4688      	mov	r8, r1
 80043ec:	4614      	mov	r4, r2
 80043ee:	2600      	movs	r6, #0
 80043f0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80043f4:	f1b9 0901 	subs.w	r9, r9, #1
 80043f8:	d505      	bpl.n	8004406 <_fwalk_sglue+0x22>
 80043fa:	6824      	ldr	r4, [r4, #0]
 80043fc:	2c00      	cmp	r4, #0
 80043fe:	d1f7      	bne.n	80043f0 <_fwalk_sglue+0xc>
 8004400:	4630      	mov	r0, r6
 8004402:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004406:	89ab      	ldrh	r3, [r5, #12]
 8004408:	2b01      	cmp	r3, #1
 800440a:	d907      	bls.n	800441c <_fwalk_sglue+0x38>
 800440c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004410:	3301      	adds	r3, #1
 8004412:	d003      	beq.n	800441c <_fwalk_sglue+0x38>
 8004414:	4629      	mov	r1, r5
 8004416:	4638      	mov	r0, r7
 8004418:	47c0      	blx	r8
 800441a:	4306      	orrs	r6, r0
 800441c:	3568      	adds	r5, #104	@ 0x68
 800441e:	e7e9      	b.n	80043f4 <_fwalk_sglue+0x10>

08004420 <_puts_r>:
 8004420:	6a03      	ldr	r3, [r0, #32]
 8004422:	b570      	push	{r4, r5, r6, lr}
 8004424:	6884      	ldr	r4, [r0, #8]
 8004426:	4605      	mov	r5, r0
 8004428:	460e      	mov	r6, r1
 800442a:	b90b      	cbnz	r3, 8004430 <_puts_r+0x10>
 800442c:	f7ff ffc2 	bl	80043b4 <__sinit>
 8004430:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004432:	07db      	lsls	r3, r3, #31
 8004434:	d405      	bmi.n	8004442 <_puts_r+0x22>
 8004436:	89a3      	ldrh	r3, [r4, #12]
 8004438:	0598      	lsls	r0, r3, #22
 800443a:	d402      	bmi.n	8004442 <_puts_r+0x22>
 800443c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800443e:	f000 f99e 	bl	800477e <__retarget_lock_acquire_recursive>
 8004442:	89a3      	ldrh	r3, [r4, #12]
 8004444:	0719      	lsls	r1, r3, #28
 8004446:	d502      	bpl.n	800444e <_puts_r+0x2e>
 8004448:	6923      	ldr	r3, [r4, #16]
 800444a:	2b00      	cmp	r3, #0
 800444c:	d135      	bne.n	80044ba <_puts_r+0x9a>
 800444e:	4621      	mov	r1, r4
 8004450:	4628      	mov	r0, r5
 8004452:	f000 f8c5 	bl	80045e0 <__swsetup_r>
 8004456:	b380      	cbz	r0, 80044ba <_puts_r+0x9a>
 8004458:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 800445c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800445e:	07da      	lsls	r2, r3, #31
 8004460:	d405      	bmi.n	800446e <_puts_r+0x4e>
 8004462:	89a3      	ldrh	r3, [r4, #12]
 8004464:	059b      	lsls	r3, r3, #22
 8004466:	d402      	bmi.n	800446e <_puts_r+0x4e>
 8004468:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800446a:	f000 f989 	bl	8004780 <__retarget_lock_release_recursive>
 800446e:	4628      	mov	r0, r5
 8004470:	bd70      	pop	{r4, r5, r6, pc}
 8004472:	2b00      	cmp	r3, #0
 8004474:	da04      	bge.n	8004480 <_puts_r+0x60>
 8004476:	69a2      	ldr	r2, [r4, #24]
 8004478:	429a      	cmp	r2, r3
 800447a:	dc17      	bgt.n	80044ac <_puts_r+0x8c>
 800447c:	290a      	cmp	r1, #10
 800447e:	d015      	beq.n	80044ac <_puts_r+0x8c>
 8004480:	6823      	ldr	r3, [r4, #0]
 8004482:	1c5a      	adds	r2, r3, #1
 8004484:	6022      	str	r2, [r4, #0]
 8004486:	7019      	strb	r1, [r3, #0]
 8004488:	68a3      	ldr	r3, [r4, #8]
 800448a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800448e:	3b01      	subs	r3, #1
 8004490:	60a3      	str	r3, [r4, #8]
 8004492:	2900      	cmp	r1, #0
 8004494:	d1ed      	bne.n	8004472 <_puts_r+0x52>
 8004496:	2b00      	cmp	r3, #0
 8004498:	da11      	bge.n	80044be <_puts_r+0x9e>
 800449a:	4622      	mov	r2, r4
 800449c:	210a      	movs	r1, #10
 800449e:	4628      	mov	r0, r5
 80044a0:	f000 f85f 	bl	8004562 <__swbuf_r>
 80044a4:	3001      	adds	r0, #1
 80044a6:	d0d7      	beq.n	8004458 <_puts_r+0x38>
 80044a8:	250a      	movs	r5, #10
 80044aa:	e7d7      	b.n	800445c <_puts_r+0x3c>
 80044ac:	4622      	mov	r2, r4
 80044ae:	4628      	mov	r0, r5
 80044b0:	f000 f857 	bl	8004562 <__swbuf_r>
 80044b4:	3001      	adds	r0, #1
 80044b6:	d1e7      	bne.n	8004488 <_puts_r+0x68>
 80044b8:	e7ce      	b.n	8004458 <_puts_r+0x38>
 80044ba:	3e01      	subs	r6, #1
 80044bc:	e7e4      	b.n	8004488 <_puts_r+0x68>
 80044be:	6823      	ldr	r3, [r4, #0]
 80044c0:	1c5a      	adds	r2, r3, #1
 80044c2:	6022      	str	r2, [r4, #0]
 80044c4:	220a      	movs	r2, #10
 80044c6:	701a      	strb	r2, [r3, #0]
 80044c8:	e7ee      	b.n	80044a8 <_puts_r+0x88>
	...

080044cc <puts>:
 80044cc:	4b02      	ldr	r3, [pc, #8]	@ (80044d8 <puts+0xc>)
 80044ce:	4601      	mov	r1, r0
 80044d0:	6818      	ldr	r0, [r3, #0]
 80044d2:	f7ff bfa5 	b.w	8004420 <_puts_r>
 80044d6:	bf00      	nop
 80044d8:	2000001c 	.word	0x2000001c

080044dc <__sread>:
 80044dc:	b510      	push	{r4, lr}
 80044de:	460c      	mov	r4, r1
 80044e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80044e4:	f000 f8fc 	bl	80046e0 <_read_r>
 80044e8:	2800      	cmp	r0, #0
 80044ea:	bfab      	itete	ge
 80044ec:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80044ee:	89a3      	ldrhlt	r3, [r4, #12]
 80044f0:	181b      	addge	r3, r3, r0
 80044f2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80044f6:	bfac      	ite	ge
 80044f8:	6563      	strge	r3, [r4, #84]	@ 0x54
 80044fa:	81a3      	strhlt	r3, [r4, #12]
 80044fc:	bd10      	pop	{r4, pc}

080044fe <__swrite>:
 80044fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004502:	461f      	mov	r7, r3
 8004504:	898b      	ldrh	r3, [r1, #12]
 8004506:	05db      	lsls	r3, r3, #23
 8004508:	4605      	mov	r5, r0
 800450a:	460c      	mov	r4, r1
 800450c:	4616      	mov	r6, r2
 800450e:	d505      	bpl.n	800451c <__swrite+0x1e>
 8004510:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004514:	2302      	movs	r3, #2
 8004516:	2200      	movs	r2, #0
 8004518:	f000 f8d0 	bl	80046bc <_lseek_r>
 800451c:	89a3      	ldrh	r3, [r4, #12]
 800451e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004522:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004526:	81a3      	strh	r3, [r4, #12]
 8004528:	4632      	mov	r2, r6
 800452a:	463b      	mov	r3, r7
 800452c:	4628      	mov	r0, r5
 800452e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004532:	f000 b8e7 	b.w	8004704 <_write_r>

08004536 <__sseek>:
 8004536:	b510      	push	{r4, lr}
 8004538:	460c      	mov	r4, r1
 800453a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800453e:	f000 f8bd 	bl	80046bc <_lseek_r>
 8004542:	1c43      	adds	r3, r0, #1
 8004544:	89a3      	ldrh	r3, [r4, #12]
 8004546:	bf15      	itete	ne
 8004548:	6560      	strne	r0, [r4, #84]	@ 0x54
 800454a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800454e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8004552:	81a3      	strheq	r3, [r4, #12]
 8004554:	bf18      	it	ne
 8004556:	81a3      	strhne	r3, [r4, #12]
 8004558:	bd10      	pop	{r4, pc}

0800455a <__sclose>:
 800455a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800455e:	f000 b89d 	b.w	800469c <_close_r>

08004562 <__swbuf_r>:
 8004562:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004564:	460e      	mov	r6, r1
 8004566:	4614      	mov	r4, r2
 8004568:	4605      	mov	r5, r0
 800456a:	b118      	cbz	r0, 8004574 <__swbuf_r+0x12>
 800456c:	6a03      	ldr	r3, [r0, #32]
 800456e:	b90b      	cbnz	r3, 8004574 <__swbuf_r+0x12>
 8004570:	f7ff ff20 	bl	80043b4 <__sinit>
 8004574:	69a3      	ldr	r3, [r4, #24]
 8004576:	60a3      	str	r3, [r4, #8]
 8004578:	89a3      	ldrh	r3, [r4, #12]
 800457a:	071a      	lsls	r2, r3, #28
 800457c:	d501      	bpl.n	8004582 <__swbuf_r+0x20>
 800457e:	6923      	ldr	r3, [r4, #16]
 8004580:	b943      	cbnz	r3, 8004594 <__swbuf_r+0x32>
 8004582:	4621      	mov	r1, r4
 8004584:	4628      	mov	r0, r5
 8004586:	f000 f82b 	bl	80045e0 <__swsetup_r>
 800458a:	b118      	cbz	r0, 8004594 <__swbuf_r+0x32>
 800458c:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8004590:	4638      	mov	r0, r7
 8004592:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004594:	6823      	ldr	r3, [r4, #0]
 8004596:	6922      	ldr	r2, [r4, #16]
 8004598:	1a98      	subs	r0, r3, r2
 800459a:	6963      	ldr	r3, [r4, #20]
 800459c:	b2f6      	uxtb	r6, r6
 800459e:	4283      	cmp	r3, r0
 80045a0:	4637      	mov	r7, r6
 80045a2:	dc05      	bgt.n	80045b0 <__swbuf_r+0x4e>
 80045a4:	4621      	mov	r1, r4
 80045a6:	4628      	mov	r0, r5
 80045a8:	f000 fa76 	bl	8004a98 <_fflush_r>
 80045ac:	2800      	cmp	r0, #0
 80045ae:	d1ed      	bne.n	800458c <__swbuf_r+0x2a>
 80045b0:	68a3      	ldr	r3, [r4, #8]
 80045b2:	3b01      	subs	r3, #1
 80045b4:	60a3      	str	r3, [r4, #8]
 80045b6:	6823      	ldr	r3, [r4, #0]
 80045b8:	1c5a      	adds	r2, r3, #1
 80045ba:	6022      	str	r2, [r4, #0]
 80045bc:	701e      	strb	r6, [r3, #0]
 80045be:	6962      	ldr	r2, [r4, #20]
 80045c0:	1c43      	adds	r3, r0, #1
 80045c2:	429a      	cmp	r2, r3
 80045c4:	d004      	beq.n	80045d0 <__swbuf_r+0x6e>
 80045c6:	89a3      	ldrh	r3, [r4, #12]
 80045c8:	07db      	lsls	r3, r3, #31
 80045ca:	d5e1      	bpl.n	8004590 <__swbuf_r+0x2e>
 80045cc:	2e0a      	cmp	r6, #10
 80045ce:	d1df      	bne.n	8004590 <__swbuf_r+0x2e>
 80045d0:	4621      	mov	r1, r4
 80045d2:	4628      	mov	r0, r5
 80045d4:	f000 fa60 	bl	8004a98 <_fflush_r>
 80045d8:	2800      	cmp	r0, #0
 80045da:	d0d9      	beq.n	8004590 <__swbuf_r+0x2e>
 80045dc:	e7d6      	b.n	800458c <__swbuf_r+0x2a>
	...

080045e0 <__swsetup_r>:
 80045e0:	b538      	push	{r3, r4, r5, lr}
 80045e2:	4b29      	ldr	r3, [pc, #164]	@ (8004688 <__swsetup_r+0xa8>)
 80045e4:	4605      	mov	r5, r0
 80045e6:	6818      	ldr	r0, [r3, #0]
 80045e8:	460c      	mov	r4, r1
 80045ea:	b118      	cbz	r0, 80045f4 <__swsetup_r+0x14>
 80045ec:	6a03      	ldr	r3, [r0, #32]
 80045ee:	b90b      	cbnz	r3, 80045f4 <__swsetup_r+0x14>
 80045f0:	f7ff fee0 	bl	80043b4 <__sinit>
 80045f4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80045f8:	0719      	lsls	r1, r3, #28
 80045fa:	d422      	bmi.n	8004642 <__swsetup_r+0x62>
 80045fc:	06da      	lsls	r2, r3, #27
 80045fe:	d407      	bmi.n	8004610 <__swsetup_r+0x30>
 8004600:	2209      	movs	r2, #9
 8004602:	602a      	str	r2, [r5, #0]
 8004604:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004608:	81a3      	strh	r3, [r4, #12]
 800460a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800460e:	e033      	b.n	8004678 <__swsetup_r+0x98>
 8004610:	0758      	lsls	r0, r3, #29
 8004612:	d512      	bpl.n	800463a <__swsetup_r+0x5a>
 8004614:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004616:	b141      	cbz	r1, 800462a <__swsetup_r+0x4a>
 8004618:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800461c:	4299      	cmp	r1, r3
 800461e:	d002      	beq.n	8004626 <__swsetup_r+0x46>
 8004620:	4628      	mov	r0, r5
 8004622:	f000 f8bd 	bl	80047a0 <_free_r>
 8004626:	2300      	movs	r3, #0
 8004628:	6363      	str	r3, [r4, #52]	@ 0x34
 800462a:	89a3      	ldrh	r3, [r4, #12]
 800462c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8004630:	81a3      	strh	r3, [r4, #12]
 8004632:	2300      	movs	r3, #0
 8004634:	6063      	str	r3, [r4, #4]
 8004636:	6923      	ldr	r3, [r4, #16]
 8004638:	6023      	str	r3, [r4, #0]
 800463a:	89a3      	ldrh	r3, [r4, #12]
 800463c:	f043 0308 	orr.w	r3, r3, #8
 8004640:	81a3      	strh	r3, [r4, #12]
 8004642:	6923      	ldr	r3, [r4, #16]
 8004644:	b94b      	cbnz	r3, 800465a <__swsetup_r+0x7a>
 8004646:	89a3      	ldrh	r3, [r4, #12]
 8004648:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800464c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004650:	d003      	beq.n	800465a <__swsetup_r+0x7a>
 8004652:	4621      	mov	r1, r4
 8004654:	4628      	mov	r0, r5
 8004656:	f000 fa6d 	bl	8004b34 <__smakebuf_r>
 800465a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800465e:	f013 0201 	ands.w	r2, r3, #1
 8004662:	d00a      	beq.n	800467a <__swsetup_r+0x9a>
 8004664:	2200      	movs	r2, #0
 8004666:	60a2      	str	r2, [r4, #8]
 8004668:	6962      	ldr	r2, [r4, #20]
 800466a:	4252      	negs	r2, r2
 800466c:	61a2      	str	r2, [r4, #24]
 800466e:	6922      	ldr	r2, [r4, #16]
 8004670:	b942      	cbnz	r2, 8004684 <__swsetup_r+0xa4>
 8004672:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8004676:	d1c5      	bne.n	8004604 <__swsetup_r+0x24>
 8004678:	bd38      	pop	{r3, r4, r5, pc}
 800467a:	0799      	lsls	r1, r3, #30
 800467c:	bf58      	it	pl
 800467e:	6962      	ldrpl	r2, [r4, #20]
 8004680:	60a2      	str	r2, [r4, #8]
 8004682:	e7f4      	b.n	800466e <__swsetup_r+0x8e>
 8004684:	2000      	movs	r0, #0
 8004686:	e7f7      	b.n	8004678 <__swsetup_r+0x98>
 8004688:	2000001c 	.word	0x2000001c

0800468c <memset>:
 800468c:	4402      	add	r2, r0
 800468e:	4603      	mov	r3, r0
 8004690:	4293      	cmp	r3, r2
 8004692:	d100      	bne.n	8004696 <memset+0xa>
 8004694:	4770      	bx	lr
 8004696:	f803 1b01 	strb.w	r1, [r3], #1
 800469a:	e7f9      	b.n	8004690 <memset+0x4>

0800469c <_close_r>:
 800469c:	b538      	push	{r3, r4, r5, lr}
 800469e:	4d06      	ldr	r5, [pc, #24]	@ (80046b8 <_close_r+0x1c>)
 80046a0:	2300      	movs	r3, #0
 80046a2:	4604      	mov	r4, r0
 80046a4:	4608      	mov	r0, r1
 80046a6:	602b      	str	r3, [r5, #0]
 80046a8:	f7fc f95b 	bl	8000962 <_close>
 80046ac:	1c43      	adds	r3, r0, #1
 80046ae:	d102      	bne.n	80046b6 <_close_r+0x1a>
 80046b0:	682b      	ldr	r3, [r5, #0]
 80046b2:	b103      	cbz	r3, 80046b6 <_close_r+0x1a>
 80046b4:	6023      	str	r3, [r4, #0]
 80046b6:	bd38      	pop	{r3, r4, r5, pc}
 80046b8:	2000f7bc 	.word	0x2000f7bc

080046bc <_lseek_r>:
 80046bc:	b538      	push	{r3, r4, r5, lr}
 80046be:	4d07      	ldr	r5, [pc, #28]	@ (80046dc <_lseek_r+0x20>)
 80046c0:	4604      	mov	r4, r0
 80046c2:	4608      	mov	r0, r1
 80046c4:	4611      	mov	r1, r2
 80046c6:	2200      	movs	r2, #0
 80046c8:	602a      	str	r2, [r5, #0]
 80046ca:	461a      	mov	r2, r3
 80046cc:	f7fc f970 	bl	80009b0 <_lseek>
 80046d0:	1c43      	adds	r3, r0, #1
 80046d2:	d102      	bne.n	80046da <_lseek_r+0x1e>
 80046d4:	682b      	ldr	r3, [r5, #0]
 80046d6:	b103      	cbz	r3, 80046da <_lseek_r+0x1e>
 80046d8:	6023      	str	r3, [r4, #0]
 80046da:	bd38      	pop	{r3, r4, r5, pc}
 80046dc:	2000f7bc 	.word	0x2000f7bc

080046e0 <_read_r>:
 80046e0:	b538      	push	{r3, r4, r5, lr}
 80046e2:	4d07      	ldr	r5, [pc, #28]	@ (8004700 <_read_r+0x20>)
 80046e4:	4604      	mov	r4, r0
 80046e6:	4608      	mov	r0, r1
 80046e8:	4611      	mov	r1, r2
 80046ea:	2200      	movs	r2, #0
 80046ec:	602a      	str	r2, [r5, #0]
 80046ee:	461a      	mov	r2, r3
 80046f0:	f7fc f8fe 	bl	80008f0 <_read>
 80046f4:	1c43      	adds	r3, r0, #1
 80046f6:	d102      	bne.n	80046fe <_read_r+0x1e>
 80046f8:	682b      	ldr	r3, [r5, #0]
 80046fa:	b103      	cbz	r3, 80046fe <_read_r+0x1e>
 80046fc:	6023      	str	r3, [r4, #0]
 80046fe:	bd38      	pop	{r3, r4, r5, pc}
 8004700:	2000f7bc 	.word	0x2000f7bc

08004704 <_write_r>:
 8004704:	b538      	push	{r3, r4, r5, lr}
 8004706:	4d07      	ldr	r5, [pc, #28]	@ (8004724 <_write_r+0x20>)
 8004708:	4604      	mov	r4, r0
 800470a:	4608      	mov	r0, r1
 800470c:	4611      	mov	r1, r2
 800470e:	2200      	movs	r2, #0
 8004710:	602a      	str	r2, [r5, #0]
 8004712:	461a      	mov	r2, r3
 8004714:	f7fc f909 	bl	800092a <_write>
 8004718:	1c43      	adds	r3, r0, #1
 800471a:	d102      	bne.n	8004722 <_write_r+0x1e>
 800471c:	682b      	ldr	r3, [r5, #0]
 800471e:	b103      	cbz	r3, 8004722 <_write_r+0x1e>
 8004720:	6023      	str	r3, [r4, #0]
 8004722:	bd38      	pop	{r3, r4, r5, pc}
 8004724:	2000f7bc 	.word	0x2000f7bc

08004728 <__errno>:
 8004728:	4b01      	ldr	r3, [pc, #4]	@ (8004730 <__errno+0x8>)
 800472a:	6818      	ldr	r0, [r3, #0]
 800472c:	4770      	bx	lr
 800472e:	bf00      	nop
 8004730:	2000001c 	.word	0x2000001c

08004734 <__libc_init_array>:
 8004734:	b570      	push	{r4, r5, r6, lr}
 8004736:	4d0d      	ldr	r5, [pc, #52]	@ (800476c <__libc_init_array+0x38>)
 8004738:	4c0d      	ldr	r4, [pc, #52]	@ (8004770 <__libc_init_array+0x3c>)
 800473a:	1b64      	subs	r4, r4, r5
 800473c:	10a4      	asrs	r4, r4, #2
 800473e:	2600      	movs	r6, #0
 8004740:	42a6      	cmp	r6, r4
 8004742:	d109      	bne.n	8004758 <__libc_init_array+0x24>
 8004744:	4d0b      	ldr	r5, [pc, #44]	@ (8004774 <__libc_init_array+0x40>)
 8004746:	4c0c      	ldr	r4, [pc, #48]	@ (8004778 <__libc_init_array+0x44>)
 8004748:	f000 fa62 	bl	8004c10 <_init>
 800474c:	1b64      	subs	r4, r4, r5
 800474e:	10a4      	asrs	r4, r4, #2
 8004750:	2600      	movs	r6, #0
 8004752:	42a6      	cmp	r6, r4
 8004754:	d105      	bne.n	8004762 <__libc_init_array+0x2e>
 8004756:	bd70      	pop	{r4, r5, r6, pc}
 8004758:	f855 3b04 	ldr.w	r3, [r5], #4
 800475c:	4798      	blx	r3
 800475e:	3601      	adds	r6, #1
 8004760:	e7ee      	b.n	8004740 <__libc_init_array+0xc>
 8004762:	f855 3b04 	ldr.w	r3, [r5], #4
 8004766:	4798      	blx	r3
 8004768:	3601      	adds	r6, #1
 800476a:	e7f2      	b.n	8004752 <__libc_init_array+0x1e>
 800476c:	08004cb0 	.word	0x08004cb0
 8004770:	08004cb0 	.word	0x08004cb0
 8004774:	08004cb0 	.word	0x08004cb0
 8004778:	08004cb4 	.word	0x08004cb4

0800477c <__retarget_lock_init_recursive>:
 800477c:	4770      	bx	lr

0800477e <__retarget_lock_acquire_recursive>:
 800477e:	4770      	bx	lr

08004780 <__retarget_lock_release_recursive>:
 8004780:	4770      	bx	lr

08004782 <memcpy>:
 8004782:	440a      	add	r2, r1
 8004784:	4291      	cmp	r1, r2
 8004786:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800478a:	d100      	bne.n	800478e <memcpy+0xc>
 800478c:	4770      	bx	lr
 800478e:	b510      	push	{r4, lr}
 8004790:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004794:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004798:	4291      	cmp	r1, r2
 800479a:	d1f9      	bne.n	8004790 <memcpy+0xe>
 800479c:	bd10      	pop	{r4, pc}
	...

080047a0 <_free_r>:
 80047a0:	b538      	push	{r3, r4, r5, lr}
 80047a2:	4605      	mov	r5, r0
 80047a4:	2900      	cmp	r1, #0
 80047a6:	d041      	beq.n	800482c <_free_r+0x8c>
 80047a8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80047ac:	1f0c      	subs	r4, r1, #4
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	bfb8      	it	lt
 80047b2:	18e4      	addlt	r4, r4, r3
 80047b4:	f000 f8e0 	bl	8004978 <__malloc_lock>
 80047b8:	4a1d      	ldr	r2, [pc, #116]	@ (8004830 <_free_r+0x90>)
 80047ba:	6813      	ldr	r3, [r2, #0]
 80047bc:	b933      	cbnz	r3, 80047cc <_free_r+0x2c>
 80047be:	6063      	str	r3, [r4, #4]
 80047c0:	6014      	str	r4, [r2, #0]
 80047c2:	4628      	mov	r0, r5
 80047c4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80047c8:	f000 b8dc 	b.w	8004984 <__malloc_unlock>
 80047cc:	42a3      	cmp	r3, r4
 80047ce:	d908      	bls.n	80047e2 <_free_r+0x42>
 80047d0:	6820      	ldr	r0, [r4, #0]
 80047d2:	1821      	adds	r1, r4, r0
 80047d4:	428b      	cmp	r3, r1
 80047d6:	bf01      	itttt	eq
 80047d8:	6819      	ldreq	r1, [r3, #0]
 80047da:	685b      	ldreq	r3, [r3, #4]
 80047dc:	1809      	addeq	r1, r1, r0
 80047de:	6021      	streq	r1, [r4, #0]
 80047e0:	e7ed      	b.n	80047be <_free_r+0x1e>
 80047e2:	461a      	mov	r2, r3
 80047e4:	685b      	ldr	r3, [r3, #4]
 80047e6:	b10b      	cbz	r3, 80047ec <_free_r+0x4c>
 80047e8:	42a3      	cmp	r3, r4
 80047ea:	d9fa      	bls.n	80047e2 <_free_r+0x42>
 80047ec:	6811      	ldr	r1, [r2, #0]
 80047ee:	1850      	adds	r0, r2, r1
 80047f0:	42a0      	cmp	r0, r4
 80047f2:	d10b      	bne.n	800480c <_free_r+0x6c>
 80047f4:	6820      	ldr	r0, [r4, #0]
 80047f6:	4401      	add	r1, r0
 80047f8:	1850      	adds	r0, r2, r1
 80047fa:	4283      	cmp	r3, r0
 80047fc:	6011      	str	r1, [r2, #0]
 80047fe:	d1e0      	bne.n	80047c2 <_free_r+0x22>
 8004800:	6818      	ldr	r0, [r3, #0]
 8004802:	685b      	ldr	r3, [r3, #4]
 8004804:	6053      	str	r3, [r2, #4]
 8004806:	4408      	add	r0, r1
 8004808:	6010      	str	r0, [r2, #0]
 800480a:	e7da      	b.n	80047c2 <_free_r+0x22>
 800480c:	d902      	bls.n	8004814 <_free_r+0x74>
 800480e:	230c      	movs	r3, #12
 8004810:	602b      	str	r3, [r5, #0]
 8004812:	e7d6      	b.n	80047c2 <_free_r+0x22>
 8004814:	6820      	ldr	r0, [r4, #0]
 8004816:	1821      	adds	r1, r4, r0
 8004818:	428b      	cmp	r3, r1
 800481a:	bf04      	itt	eq
 800481c:	6819      	ldreq	r1, [r3, #0]
 800481e:	685b      	ldreq	r3, [r3, #4]
 8004820:	6063      	str	r3, [r4, #4]
 8004822:	bf04      	itt	eq
 8004824:	1809      	addeq	r1, r1, r0
 8004826:	6021      	streq	r1, [r4, #0]
 8004828:	6054      	str	r4, [r2, #4]
 800482a:	e7ca      	b.n	80047c2 <_free_r+0x22>
 800482c:	bd38      	pop	{r3, r4, r5, pc}
 800482e:	bf00      	nop
 8004830:	2000f7c8 	.word	0x2000f7c8

08004834 <sbrk_aligned>:
 8004834:	b570      	push	{r4, r5, r6, lr}
 8004836:	4e0f      	ldr	r6, [pc, #60]	@ (8004874 <sbrk_aligned+0x40>)
 8004838:	460c      	mov	r4, r1
 800483a:	6831      	ldr	r1, [r6, #0]
 800483c:	4605      	mov	r5, r0
 800483e:	b911      	cbnz	r1, 8004846 <sbrk_aligned+0x12>
 8004840:	f000 f9d6 	bl	8004bf0 <_sbrk_r>
 8004844:	6030      	str	r0, [r6, #0]
 8004846:	4621      	mov	r1, r4
 8004848:	4628      	mov	r0, r5
 800484a:	f000 f9d1 	bl	8004bf0 <_sbrk_r>
 800484e:	1c43      	adds	r3, r0, #1
 8004850:	d103      	bne.n	800485a <sbrk_aligned+0x26>
 8004852:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8004856:	4620      	mov	r0, r4
 8004858:	bd70      	pop	{r4, r5, r6, pc}
 800485a:	1cc4      	adds	r4, r0, #3
 800485c:	f024 0403 	bic.w	r4, r4, #3
 8004860:	42a0      	cmp	r0, r4
 8004862:	d0f8      	beq.n	8004856 <sbrk_aligned+0x22>
 8004864:	1a21      	subs	r1, r4, r0
 8004866:	4628      	mov	r0, r5
 8004868:	f000 f9c2 	bl	8004bf0 <_sbrk_r>
 800486c:	3001      	adds	r0, #1
 800486e:	d1f2      	bne.n	8004856 <sbrk_aligned+0x22>
 8004870:	e7ef      	b.n	8004852 <sbrk_aligned+0x1e>
 8004872:	bf00      	nop
 8004874:	2000f7c4 	.word	0x2000f7c4

08004878 <_malloc_r>:
 8004878:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800487c:	1ccd      	adds	r5, r1, #3
 800487e:	f025 0503 	bic.w	r5, r5, #3
 8004882:	3508      	adds	r5, #8
 8004884:	2d0c      	cmp	r5, #12
 8004886:	bf38      	it	cc
 8004888:	250c      	movcc	r5, #12
 800488a:	2d00      	cmp	r5, #0
 800488c:	4606      	mov	r6, r0
 800488e:	db01      	blt.n	8004894 <_malloc_r+0x1c>
 8004890:	42a9      	cmp	r1, r5
 8004892:	d904      	bls.n	800489e <_malloc_r+0x26>
 8004894:	230c      	movs	r3, #12
 8004896:	6033      	str	r3, [r6, #0]
 8004898:	2000      	movs	r0, #0
 800489a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800489e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004974 <_malloc_r+0xfc>
 80048a2:	f000 f869 	bl	8004978 <__malloc_lock>
 80048a6:	f8d8 3000 	ldr.w	r3, [r8]
 80048aa:	461c      	mov	r4, r3
 80048ac:	bb44      	cbnz	r4, 8004900 <_malloc_r+0x88>
 80048ae:	4629      	mov	r1, r5
 80048b0:	4630      	mov	r0, r6
 80048b2:	f7ff ffbf 	bl	8004834 <sbrk_aligned>
 80048b6:	1c43      	adds	r3, r0, #1
 80048b8:	4604      	mov	r4, r0
 80048ba:	d158      	bne.n	800496e <_malloc_r+0xf6>
 80048bc:	f8d8 4000 	ldr.w	r4, [r8]
 80048c0:	4627      	mov	r7, r4
 80048c2:	2f00      	cmp	r7, #0
 80048c4:	d143      	bne.n	800494e <_malloc_r+0xd6>
 80048c6:	2c00      	cmp	r4, #0
 80048c8:	d04b      	beq.n	8004962 <_malloc_r+0xea>
 80048ca:	6823      	ldr	r3, [r4, #0]
 80048cc:	4639      	mov	r1, r7
 80048ce:	4630      	mov	r0, r6
 80048d0:	eb04 0903 	add.w	r9, r4, r3
 80048d4:	f000 f98c 	bl	8004bf0 <_sbrk_r>
 80048d8:	4581      	cmp	r9, r0
 80048da:	d142      	bne.n	8004962 <_malloc_r+0xea>
 80048dc:	6821      	ldr	r1, [r4, #0]
 80048de:	1a6d      	subs	r5, r5, r1
 80048e0:	4629      	mov	r1, r5
 80048e2:	4630      	mov	r0, r6
 80048e4:	f7ff ffa6 	bl	8004834 <sbrk_aligned>
 80048e8:	3001      	adds	r0, #1
 80048ea:	d03a      	beq.n	8004962 <_malloc_r+0xea>
 80048ec:	6823      	ldr	r3, [r4, #0]
 80048ee:	442b      	add	r3, r5
 80048f0:	6023      	str	r3, [r4, #0]
 80048f2:	f8d8 3000 	ldr.w	r3, [r8]
 80048f6:	685a      	ldr	r2, [r3, #4]
 80048f8:	bb62      	cbnz	r2, 8004954 <_malloc_r+0xdc>
 80048fa:	f8c8 7000 	str.w	r7, [r8]
 80048fe:	e00f      	b.n	8004920 <_malloc_r+0xa8>
 8004900:	6822      	ldr	r2, [r4, #0]
 8004902:	1b52      	subs	r2, r2, r5
 8004904:	d420      	bmi.n	8004948 <_malloc_r+0xd0>
 8004906:	2a0b      	cmp	r2, #11
 8004908:	d917      	bls.n	800493a <_malloc_r+0xc2>
 800490a:	1961      	adds	r1, r4, r5
 800490c:	42a3      	cmp	r3, r4
 800490e:	6025      	str	r5, [r4, #0]
 8004910:	bf18      	it	ne
 8004912:	6059      	strne	r1, [r3, #4]
 8004914:	6863      	ldr	r3, [r4, #4]
 8004916:	bf08      	it	eq
 8004918:	f8c8 1000 	streq.w	r1, [r8]
 800491c:	5162      	str	r2, [r4, r5]
 800491e:	604b      	str	r3, [r1, #4]
 8004920:	4630      	mov	r0, r6
 8004922:	f000 f82f 	bl	8004984 <__malloc_unlock>
 8004926:	f104 000b 	add.w	r0, r4, #11
 800492a:	1d23      	adds	r3, r4, #4
 800492c:	f020 0007 	bic.w	r0, r0, #7
 8004930:	1ac2      	subs	r2, r0, r3
 8004932:	bf1c      	itt	ne
 8004934:	1a1b      	subne	r3, r3, r0
 8004936:	50a3      	strne	r3, [r4, r2]
 8004938:	e7af      	b.n	800489a <_malloc_r+0x22>
 800493a:	6862      	ldr	r2, [r4, #4]
 800493c:	42a3      	cmp	r3, r4
 800493e:	bf0c      	ite	eq
 8004940:	f8c8 2000 	streq.w	r2, [r8]
 8004944:	605a      	strne	r2, [r3, #4]
 8004946:	e7eb      	b.n	8004920 <_malloc_r+0xa8>
 8004948:	4623      	mov	r3, r4
 800494a:	6864      	ldr	r4, [r4, #4]
 800494c:	e7ae      	b.n	80048ac <_malloc_r+0x34>
 800494e:	463c      	mov	r4, r7
 8004950:	687f      	ldr	r7, [r7, #4]
 8004952:	e7b6      	b.n	80048c2 <_malloc_r+0x4a>
 8004954:	461a      	mov	r2, r3
 8004956:	685b      	ldr	r3, [r3, #4]
 8004958:	42a3      	cmp	r3, r4
 800495a:	d1fb      	bne.n	8004954 <_malloc_r+0xdc>
 800495c:	2300      	movs	r3, #0
 800495e:	6053      	str	r3, [r2, #4]
 8004960:	e7de      	b.n	8004920 <_malloc_r+0xa8>
 8004962:	230c      	movs	r3, #12
 8004964:	6033      	str	r3, [r6, #0]
 8004966:	4630      	mov	r0, r6
 8004968:	f000 f80c 	bl	8004984 <__malloc_unlock>
 800496c:	e794      	b.n	8004898 <_malloc_r+0x20>
 800496e:	6005      	str	r5, [r0, #0]
 8004970:	e7d6      	b.n	8004920 <_malloc_r+0xa8>
 8004972:	bf00      	nop
 8004974:	2000f7c8 	.word	0x2000f7c8

08004978 <__malloc_lock>:
 8004978:	4801      	ldr	r0, [pc, #4]	@ (8004980 <__malloc_lock+0x8>)
 800497a:	f7ff bf00 	b.w	800477e <__retarget_lock_acquire_recursive>
 800497e:	bf00      	nop
 8004980:	2000f7c0 	.word	0x2000f7c0

08004984 <__malloc_unlock>:
 8004984:	4801      	ldr	r0, [pc, #4]	@ (800498c <__malloc_unlock+0x8>)
 8004986:	f7ff befb 	b.w	8004780 <__retarget_lock_release_recursive>
 800498a:	bf00      	nop
 800498c:	2000f7c0 	.word	0x2000f7c0

08004990 <__sflush_r>:
 8004990:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004994:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004998:	0716      	lsls	r6, r2, #28
 800499a:	4605      	mov	r5, r0
 800499c:	460c      	mov	r4, r1
 800499e:	d454      	bmi.n	8004a4a <__sflush_r+0xba>
 80049a0:	684b      	ldr	r3, [r1, #4]
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	dc02      	bgt.n	80049ac <__sflush_r+0x1c>
 80049a6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	dd48      	ble.n	8004a3e <__sflush_r+0xae>
 80049ac:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80049ae:	2e00      	cmp	r6, #0
 80049b0:	d045      	beq.n	8004a3e <__sflush_r+0xae>
 80049b2:	2300      	movs	r3, #0
 80049b4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80049b8:	682f      	ldr	r7, [r5, #0]
 80049ba:	6a21      	ldr	r1, [r4, #32]
 80049bc:	602b      	str	r3, [r5, #0]
 80049be:	d030      	beq.n	8004a22 <__sflush_r+0x92>
 80049c0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80049c2:	89a3      	ldrh	r3, [r4, #12]
 80049c4:	0759      	lsls	r1, r3, #29
 80049c6:	d505      	bpl.n	80049d4 <__sflush_r+0x44>
 80049c8:	6863      	ldr	r3, [r4, #4]
 80049ca:	1ad2      	subs	r2, r2, r3
 80049cc:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80049ce:	b10b      	cbz	r3, 80049d4 <__sflush_r+0x44>
 80049d0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80049d2:	1ad2      	subs	r2, r2, r3
 80049d4:	2300      	movs	r3, #0
 80049d6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80049d8:	6a21      	ldr	r1, [r4, #32]
 80049da:	4628      	mov	r0, r5
 80049dc:	47b0      	blx	r6
 80049de:	1c43      	adds	r3, r0, #1
 80049e0:	89a3      	ldrh	r3, [r4, #12]
 80049e2:	d106      	bne.n	80049f2 <__sflush_r+0x62>
 80049e4:	6829      	ldr	r1, [r5, #0]
 80049e6:	291d      	cmp	r1, #29
 80049e8:	d82b      	bhi.n	8004a42 <__sflush_r+0xb2>
 80049ea:	4a2a      	ldr	r2, [pc, #168]	@ (8004a94 <__sflush_r+0x104>)
 80049ec:	40ca      	lsrs	r2, r1
 80049ee:	07d6      	lsls	r6, r2, #31
 80049f0:	d527      	bpl.n	8004a42 <__sflush_r+0xb2>
 80049f2:	2200      	movs	r2, #0
 80049f4:	6062      	str	r2, [r4, #4]
 80049f6:	04d9      	lsls	r1, r3, #19
 80049f8:	6922      	ldr	r2, [r4, #16]
 80049fa:	6022      	str	r2, [r4, #0]
 80049fc:	d504      	bpl.n	8004a08 <__sflush_r+0x78>
 80049fe:	1c42      	adds	r2, r0, #1
 8004a00:	d101      	bne.n	8004a06 <__sflush_r+0x76>
 8004a02:	682b      	ldr	r3, [r5, #0]
 8004a04:	b903      	cbnz	r3, 8004a08 <__sflush_r+0x78>
 8004a06:	6560      	str	r0, [r4, #84]	@ 0x54
 8004a08:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004a0a:	602f      	str	r7, [r5, #0]
 8004a0c:	b1b9      	cbz	r1, 8004a3e <__sflush_r+0xae>
 8004a0e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004a12:	4299      	cmp	r1, r3
 8004a14:	d002      	beq.n	8004a1c <__sflush_r+0x8c>
 8004a16:	4628      	mov	r0, r5
 8004a18:	f7ff fec2 	bl	80047a0 <_free_r>
 8004a1c:	2300      	movs	r3, #0
 8004a1e:	6363      	str	r3, [r4, #52]	@ 0x34
 8004a20:	e00d      	b.n	8004a3e <__sflush_r+0xae>
 8004a22:	2301      	movs	r3, #1
 8004a24:	4628      	mov	r0, r5
 8004a26:	47b0      	blx	r6
 8004a28:	4602      	mov	r2, r0
 8004a2a:	1c50      	adds	r0, r2, #1
 8004a2c:	d1c9      	bne.n	80049c2 <__sflush_r+0x32>
 8004a2e:	682b      	ldr	r3, [r5, #0]
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d0c6      	beq.n	80049c2 <__sflush_r+0x32>
 8004a34:	2b1d      	cmp	r3, #29
 8004a36:	d001      	beq.n	8004a3c <__sflush_r+0xac>
 8004a38:	2b16      	cmp	r3, #22
 8004a3a:	d11e      	bne.n	8004a7a <__sflush_r+0xea>
 8004a3c:	602f      	str	r7, [r5, #0]
 8004a3e:	2000      	movs	r0, #0
 8004a40:	e022      	b.n	8004a88 <__sflush_r+0xf8>
 8004a42:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004a46:	b21b      	sxth	r3, r3
 8004a48:	e01b      	b.n	8004a82 <__sflush_r+0xf2>
 8004a4a:	690f      	ldr	r7, [r1, #16]
 8004a4c:	2f00      	cmp	r7, #0
 8004a4e:	d0f6      	beq.n	8004a3e <__sflush_r+0xae>
 8004a50:	0793      	lsls	r3, r2, #30
 8004a52:	680e      	ldr	r6, [r1, #0]
 8004a54:	bf08      	it	eq
 8004a56:	694b      	ldreq	r3, [r1, #20]
 8004a58:	600f      	str	r7, [r1, #0]
 8004a5a:	bf18      	it	ne
 8004a5c:	2300      	movne	r3, #0
 8004a5e:	eba6 0807 	sub.w	r8, r6, r7
 8004a62:	608b      	str	r3, [r1, #8]
 8004a64:	f1b8 0f00 	cmp.w	r8, #0
 8004a68:	dde9      	ble.n	8004a3e <__sflush_r+0xae>
 8004a6a:	6a21      	ldr	r1, [r4, #32]
 8004a6c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8004a6e:	4643      	mov	r3, r8
 8004a70:	463a      	mov	r2, r7
 8004a72:	4628      	mov	r0, r5
 8004a74:	47b0      	blx	r6
 8004a76:	2800      	cmp	r0, #0
 8004a78:	dc08      	bgt.n	8004a8c <__sflush_r+0xfc>
 8004a7a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004a7e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004a82:	81a3      	strh	r3, [r4, #12]
 8004a84:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004a88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004a8c:	4407      	add	r7, r0
 8004a8e:	eba8 0800 	sub.w	r8, r8, r0
 8004a92:	e7e7      	b.n	8004a64 <__sflush_r+0xd4>
 8004a94:	20400001 	.word	0x20400001

08004a98 <_fflush_r>:
 8004a98:	b538      	push	{r3, r4, r5, lr}
 8004a9a:	690b      	ldr	r3, [r1, #16]
 8004a9c:	4605      	mov	r5, r0
 8004a9e:	460c      	mov	r4, r1
 8004aa0:	b913      	cbnz	r3, 8004aa8 <_fflush_r+0x10>
 8004aa2:	2500      	movs	r5, #0
 8004aa4:	4628      	mov	r0, r5
 8004aa6:	bd38      	pop	{r3, r4, r5, pc}
 8004aa8:	b118      	cbz	r0, 8004ab2 <_fflush_r+0x1a>
 8004aaa:	6a03      	ldr	r3, [r0, #32]
 8004aac:	b90b      	cbnz	r3, 8004ab2 <_fflush_r+0x1a>
 8004aae:	f7ff fc81 	bl	80043b4 <__sinit>
 8004ab2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d0f3      	beq.n	8004aa2 <_fflush_r+0xa>
 8004aba:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8004abc:	07d0      	lsls	r0, r2, #31
 8004abe:	d404      	bmi.n	8004aca <_fflush_r+0x32>
 8004ac0:	0599      	lsls	r1, r3, #22
 8004ac2:	d402      	bmi.n	8004aca <_fflush_r+0x32>
 8004ac4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004ac6:	f7ff fe5a 	bl	800477e <__retarget_lock_acquire_recursive>
 8004aca:	4628      	mov	r0, r5
 8004acc:	4621      	mov	r1, r4
 8004ace:	f7ff ff5f 	bl	8004990 <__sflush_r>
 8004ad2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004ad4:	07da      	lsls	r2, r3, #31
 8004ad6:	4605      	mov	r5, r0
 8004ad8:	d4e4      	bmi.n	8004aa4 <_fflush_r+0xc>
 8004ada:	89a3      	ldrh	r3, [r4, #12]
 8004adc:	059b      	lsls	r3, r3, #22
 8004ade:	d4e1      	bmi.n	8004aa4 <_fflush_r+0xc>
 8004ae0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004ae2:	f7ff fe4d 	bl	8004780 <__retarget_lock_release_recursive>
 8004ae6:	e7dd      	b.n	8004aa4 <_fflush_r+0xc>

08004ae8 <__swhatbuf_r>:
 8004ae8:	b570      	push	{r4, r5, r6, lr}
 8004aea:	460c      	mov	r4, r1
 8004aec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004af0:	2900      	cmp	r1, #0
 8004af2:	b096      	sub	sp, #88	@ 0x58
 8004af4:	4615      	mov	r5, r2
 8004af6:	461e      	mov	r6, r3
 8004af8:	da0d      	bge.n	8004b16 <__swhatbuf_r+0x2e>
 8004afa:	89a3      	ldrh	r3, [r4, #12]
 8004afc:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8004b00:	f04f 0100 	mov.w	r1, #0
 8004b04:	bf14      	ite	ne
 8004b06:	2340      	movne	r3, #64	@ 0x40
 8004b08:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8004b0c:	2000      	movs	r0, #0
 8004b0e:	6031      	str	r1, [r6, #0]
 8004b10:	602b      	str	r3, [r5, #0]
 8004b12:	b016      	add	sp, #88	@ 0x58
 8004b14:	bd70      	pop	{r4, r5, r6, pc}
 8004b16:	466a      	mov	r2, sp
 8004b18:	f000 f848 	bl	8004bac <_fstat_r>
 8004b1c:	2800      	cmp	r0, #0
 8004b1e:	dbec      	blt.n	8004afa <__swhatbuf_r+0x12>
 8004b20:	9901      	ldr	r1, [sp, #4]
 8004b22:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8004b26:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8004b2a:	4259      	negs	r1, r3
 8004b2c:	4159      	adcs	r1, r3
 8004b2e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004b32:	e7eb      	b.n	8004b0c <__swhatbuf_r+0x24>

08004b34 <__smakebuf_r>:
 8004b34:	898b      	ldrh	r3, [r1, #12]
 8004b36:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004b38:	079d      	lsls	r5, r3, #30
 8004b3a:	4606      	mov	r6, r0
 8004b3c:	460c      	mov	r4, r1
 8004b3e:	d507      	bpl.n	8004b50 <__smakebuf_r+0x1c>
 8004b40:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8004b44:	6023      	str	r3, [r4, #0]
 8004b46:	6123      	str	r3, [r4, #16]
 8004b48:	2301      	movs	r3, #1
 8004b4a:	6163      	str	r3, [r4, #20]
 8004b4c:	b003      	add	sp, #12
 8004b4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004b50:	ab01      	add	r3, sp, #4
 8004b52:	466a      	mov	r2, sp
 8004b54:	f7ff ffc8 	bl	8004ae8 <__swhatbuf_r>
 8004b58:	9f00      	ldr	r7, [sp, #0]
 8004b5a:	4605      	mov	r5, r0
 8004b5c:	4639      	mov	r1, r7
 8004b5e:	4630      	mov	r0, r6
 8004b60:	f7ff fe8a 	bl	8004878 <_malloc_r>
 8004b64:	b948      	cbnz	r0, 8004b7a <__smakebuf_r+0x46>
 8004b66:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004b6a:	059a      	lsls	r2, r3, #22
 8004b6c:	d4ee      	bmi.n	8004b4c <__smakebuf_r+0x18>
 8004b6e:	f023 0303 	bic.w	r3, r3, #3
 8004b72:	f043 0302 	orr.w	r3, r3, #2
 8004b76:	81a3      	strh	r3, [r4, #12]
 8004b78:	e7e2      	b.n	8004b40 <__smakebuf_r+0xc>
 8004b7a:	89a3      	ldrh	r3, [r4, #12]
 8004b7c:	6020      	str	r0, [r4, #0]
 8004b7e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004b82:	81a3      	strh	r3, [r4, #12]
 8004b84:	9b01      	ldr	r3, [sp, #4]
 8004b86:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8004b8a:	b15b      	cbz	r3, 8004ba4 <__smakebuf_r+0x70>
 8004b8c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004b90:	4630      	mov	r0, r6
 8004b92:	f000 f81d 	bl	8004bd0 <_isatty_r>
 8004b96:	b128      	cbz	r0, 8004ba4 <__smakebuf_r+0x70>
 8004b98:	89a3      	ldrh	r3, [r4, #12]
 8004b9a:	f023 0303 	bic.w	r3, r3, #3
 8004b9e:	f043 0301 	orr.w	r3, r3, #1
 8004ba2:	81a3      	strh	r3, [r4, #12]
 8004ba4:	89a3      	ldrh	r3, [r4, #12]
 8004ba6:	431d      	orrs	r5, r3
 8004ba8:	81a5      	strh	r5, [r4, #12]
 8004baa:	e7cf      	b.n	8004b4c <__smakebuf_r+0x18>

08004bac <_fstat_r>:
 8004bac:	b538      	push	{r3, r4, r5, lr}
 8004bae:	4d07      	ldr	r5, [pc, #28]	@ (8004bcc <_fstat_r+0x20>)
 8004bb0:	2300      	movs	r3, #0
 8004bb2:	4604      	mov	r4, r0
 8004bb4:	4608      	mov	r0, r1
 8004bb6:	4611      	mov	r1, r2
 8004bb8:	602b      	str	r3, [r5, #0]
 8004bba:	f7fb fede 	bl	800097a <_fstat>
 8004bbe:	1c43      	adds	r3, r0, #1
 8004bc0:	d102      	bne.n	8004bc8 <_fstat_r+0x1c>
 8004bc2:	682b      	ldr	r3, [r5, #0]
 8004bc4:	b103      	cbz	r3, 8004bc8 <_fstat_r+0x1c>
 8004bc6:	6023      	str	r3, [r4, #0]
 8004bc8:	bd38      	pop	{r3, r4, r5, pc}
 8004bca:	bf00      	nop
 8004bcc:	2000f7bc 	.word	0x2000f7bc

08004bd0 <_isatty_r>:
 8004bd0:	b538      	push	{r3, r4, r5, lr}
 8004bd2:	4d06      	ldr	r5, [pc, #24]	@ (8004bec <_isatty_r+0x1c>)
 8004bd4:	2300      	movs	r3, #0
 8004bd6:	4604      	mov	r4, r0
 8004bd8:	4608      	mov	r0, r1
 8004bda:	602b      	str	r3, [r5, #0]
 8004bdc:	f7fb fedd 	bl	800099a <_isatty>
 8004be0:	1c43      	adds	r3, r0, #1
 8004be2:	d102      	bne.n	8004bea <_isatty_r+0x1a>
 8004be4:	682b      	ldr	r3, [r5, #0]
 8004be6:	b103      	cbz	r3, 8004bea <_isatty_r+0x1a>
 8004be8:	6023      	str	r3, [r4, #0]
 8004bea:	bd38      	pop	{r3, r4, r5, pc}
 8004bec:	2000f7bc 	.word	0x2000f7bc

08004bf0 <_sbrk_r>:
 8004bf0:	b538      	push	{r3, r4, r5, lr}
 8004bf2:	4d06      	ldr	r5, [pc, #24]	@ (8004c0c <_sbrk_r+0x1c>)
 8004bf4:	2300      	movs	r3, #0
 8004bf6:	4604      	mov	r4, r0
 8004bf8:	4608      	mov	r0, r1
 8004bfa:	602b      	str	r3, [r5, #0]
 8004bfc:	f7fb fee6 	bl	80009cc <_sbrk>
 8004c00:	1c43      	adds	r3, r0, #1
 8004c02:	d102      	bne.n	8004c0a <_sbrk_r+0x1a>
 8004c04:	682b      	ldr	r3, [r5, #0]
 8004c06:	b103      	cbz	r3, 8004c0a <_sbrk_r+0x1a>
 8004c08:	6023      	str	r3, [r4, #0]
 8004c0a:	bd38      	pop	{r3, r4, r5, pc}
 8004c0c:	2000f7bc 	.word	0x2000f7bc

08004c10 <_init>:
 8004c10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c12:	bf00      	nop
 8004c14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004c16:	bc08      	pop	{r3}
 8004c18:	469e      	mov	lr, r3
 8004c1a:	4770      	bx	lr

08004c1c <_fini>:
 8004c1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c1e:	bf00      	nop
 8004c20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004c22:	bc08      	pop	{r3}
 8004c24:	469e      	mov	lr, r3
 8004c26:	4770      	bx	lr
