
FreeRTOS_HelloWorld.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003720  08000194  08000194  00001194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000068  080038b4  080038b4  000048b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800391c  0800391c  00005064  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  0800391c  0800391c  00005064  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  0800391c  0800391c  00005064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800391c  0800391c  0000491c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003920  08003920  00004920  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000064  20000000  08003924  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000f710  20000064  08003988  00005064  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000f774  08003988  00005774  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00005064  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008354  00000000  00000000  00005094  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000018c2  00000000  00000000  0000d3e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000008d0  00000000  00000000  0000ecb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000006ab  00000000  00000000  0000f580  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00013c53  00000000  00000000  0000fc2b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00008b3a  00000000  00000000  0002387e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0006f469  00000000  00000000  0002c3b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0009b821  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002984  00000000  00000000  0009b864  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000072  00000000  00000000  0009e1e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	@ (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000064 	.word	0x20000064
 80001b0:	00000000 	.word	0x00000000
 80001b4:	0800389c 	.word	0x0800389c

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	@ (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	@ (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	@ (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000068 	.word	0x20000068
 80001d0:	0800389c 	.word	0x0800389c

080001d4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80001d4:	b480      	push	{r7}
 80001d6:	b085      	sub	sp, #20
 80001d8:	af00      	add	r7, sp, #0
 80001da:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80001dc:	687b      	ldr	r3, [r7, #4]
 80001de:	f003 0307 	and.w	r3, r3, #7
 80001e2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80001e4:	4b0c      	ldr	r3, [pc, #48]	@ (8000218 <__NVIC_SetPriorityGrouping+0x44>)
 80001e6:	68db      	ldr	r3, [r3, #12]
 80001e8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80001ea:	68ba      	ldr	r2, [r7, #8]
 80001ec:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80001f0:	4013      	ands	r3, r2
 80001f2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80001f4:	68fb      	ldr	r3, [r7, #12]
 80001f6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80001f8:	68bb      	ldr	r3, [r7, #8]
 80001fa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80001fc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000200:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000204:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000206:	4a04      	ldr	r2, [pc, #16]	@ (8000218 <__NVIC_SetPriorityGrouping+0x44>)
 8000208:	68bb      	ldr	r3, [r7, #8]
 800020a:	60d3      	str	r3, [r2, #12]
}
 800020c:	bf00      	nop
 800020e:	3714      	adds	r7, #20
 8000210:	46bd      	mov	sp, r7
 8000212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000216:	4770      	bx	lr
 8000218:	e000ed00 	.word	0xe000ed00

0800021c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800021c:	b480      	push	{r7}
 800021e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000220:	4b04      	ldr	r3, [pc, #16]	@ (8000234 <__NVIC_GetPriorityGrouping+0x18>)
 8000222:	68db      	ldr	r3, [r3, #12]
 8000224:	0a1b      	lsrs	r3, r3, #8
 8000226:	f003 0307 	and.w	r3, r3, #7
}
 800022a:	4618      	mov	r0, r3
 800022c:	46bd      	mov	sp, r7
 800022e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000232:	4770      	bx	lr
 8000234:	e000ed00 	.word	0xe000ed00

08000238 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000238:	b480      	push	{r7}
 800023a:	b083      	sub	sp, #12
 800023c:	af00      	add	r7, sp, #0
 800023e:	4603      	mov	r3, r0
 8000240:	6039      	str	r1, [r7, #0]
 8000242:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000244:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000248:	2b00      	cmp	r3, #0
 800024a:	db0a      	blt.n	8000262 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800024c:	683b      	ldr	r3, [r7, #0]
 800024e:	b2da      	uxtb	r2, r3
 8000250:	490c      	ldr	r1, [pc, #48]	@ (8000284 <__NVIC_SetPriority+0x4c>)
 8000252:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000256:	0112      	lsls	r2, r2, #4
 8000258:	b2d2      	uxtb	r2, r2
 800025a:	440b      	add	r3, r1
 800025c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000260:	e00a      	b.n	8000278 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000262:	683b      	ldr	r3, [r7, #0]
 8000264:	b2da      	uxtb	r2, r3
 8000266:	4908      	ldr	r1, [pc, #32]	@ (8000288 <__NVIC_SetPriority+0x50>)
 8000268:	79fb      	ldrb	r3, [r7, #7]
 800026a:	f003 030f 	and.w	r3, r3, #15
 800026e:	3b04      	subs	r3, #4
 8000270:	0112      	lsls	r2, r2, #4
 8000272:	b2d2      	uxtb	r2, r2
 8000274:	440b      	add	r3, r1
 8000276:	761a      	strb	r2, [r3, #24]
}
 8000278:	bf00      	nop
 800027a:	370c      	adds	r7, #12
 800027c:	46bd      	mov	sp, r7
 800027e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000282:	4770      	bx	lr
 8000284:	e000e100 	.word	0xe000e100
 8000288:	e000ed00 	.word	0xe000ed00

0800028c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800028c:	b480      	push	{r7}
 800028e:	b089      	sub	sp, #36	@ 0x24
 8000290:	af00      	add	r7, sp, #0
 8000292:	60f8      	str	r0, [r7, #12]
 8000294:	60b9      	str	r1, [r7, #8]
 8000296:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000298:	68fb      	ldr	r3, [r7, #12]
 800029a:	f003 0307 	and.w	r3, r3, #7
 800029e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80002a0:	69fb      	ldr	r3, [r7, #28]
 80002a2:	f1c3 0307 	rsb	r3, r3, #7
 80002a6:	2b04      	cmp	r3, #4
 80002a8:	bf28      	it	cs
 80002aa:	2304      	movcs	r3, #4
 80002ac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80002ae:	69fb      	ldr	r3, [r7, #28]
 80002b0:	3304      	adds	r3, #4
 80002b2:	2b06      	cmp	r3, #6
 80002b4:	d902      	bls.n	80002bc <NVIC_EncodePriority+0x30>
 80002b6:	69fb      	ldr	r3, [r7, #28]
 80002b8:	3b03      	subs	r3, #3
 80002ba:	e000      	b.n	80002be <NVIC_EncodePriority+0x32>
 80002bc:	2300      	movs	r3, #0
 80002be:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80002c0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80002c4:	69bb      	ldr	r3, [r7, #24]
 80002c6:	fa02 f303 	lsl.w	r3, r2, r3
 80002ca:	43da      	mvns	r2, r3
 80002cc:	68bb      	ldr	r3, [r7, #8]
 80002ce:	401a      	ands	r2, r3
 80002d0:	697b      	ldr	r3, [r7, #20]
 80002d2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80002d4:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80002d8:	697b      	ldr	r3, [r7, #20]
 80002da:	fa01 f303 	lsl.w	r3, r1, r3
 80002de:	43d9      	mvns	r1, r3
 80002e0:	687b      	ldr	r3, [r7, #4]
 80002e2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80002e4:	4313      	orrs	r3, r2
         );
}
 80002e6:	4618      	mov	r0, r3
 80002e8:	3724      	adds	r7, #36	@ 0x24
 80002ea:	46bd      	mov	sp, r7
 80002ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002f0:	4770      	bx	lr
	...

080002f4 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 80002f4:	b480      	push	{r7}
 80002f6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 80002f8:	4b05      	ldr	r3, [pc, #20]	@ (8000310 <LL_RCC_HSI_Enable+0x1c>)
 80002fa:	681b      	ldr	r3, [r3, #0]
 80002fc:	4a04      	ldr	r2, [pc, #16]	@ (8000310 <LL_RCC_HSI_Enable+0x1c>)
 80002fe:	f043 0301 	orr.w	r3, r3, #1
 8000302:	6013      	str	r3, [r2, #0]
}
 8000304:	bf00      	nop
 8000306:	46bd      	mov	sp, r7
 8000308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800030c:	4770      	bx	lr
 800030e:	bf00      	nop
 8000310:	40023800 	.word	0x40023800

08000314 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 8000314:	b480      	push	{r7}
 8000316:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 8000318:	4b06      	ldr	r3, [pc, #24]	@ (8000334 <LL_RCC_HSI_IsReady+0x20>)
 800031a:	681b      	ldr	r3, [r3, #0]
 800031c:	f003 0302 	and.w	r3, r3, #2
 8000320:	2b02      	cmp	r3, #2
 8000322:	bf0c      	ite	eq
 8000324:	2301      	moveq	r3, #1
 8000326:	2300      	movne	r3, #0
 8000328:	b2db      	uxtb	r3, r3
}
 800032a:	4618      	mov	r0, r3
 800032c:	46bd      	mov	sp, r7
 800032e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000332:	4770      	bx	lr
 8000334:	40023800 	.word	0x40023800

08000338 <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll CR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 31
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 8000338:	b480      	push	{r7}
 800033a:	b083      	sub	sp, #12
 800033c:	af00      	add	r7, sp, #0
 800033e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_HSITRIM, Value << RCC_CR_HSITRIM_Pos);
 8000340:	4b07      	ldr	r3, [pc, #28]	@ (8000360 <LL_RCC_HSI_SetCalibTrimming+0x28>)
 8000342:	681b      	ldr	r3, [r3, #0]
 8000344:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8000348:	687b      	ldr	r3, [r7, #4]
 800034a:	00db      	lsls	r3, r3, #3
 800034c:	4904      	ldr	r1, [pc, #16]	@ (8000360 <LL_RCC_HSI_SetCalibTrimming+0x28>)
 800034e:	4313      	orrs	r3, r2
 8000350:	600b      	str	r3, [r1, #0]
}
 8000352:	bf00      	nop
 8000354:	370c      	adds	r7, #12
 8000356:	46bd      	mov	sp, r7
 8000358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800035c:	4770      	bx	lr
 800035e:	bf00      	nop
 8000360:	40023800 	.word	0x40023800

08000364 <LL_RCC_SetSysClkSource>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8000364:	b480      	push	{r7}
 8000366:	b083      	sub	sp, #12
 8000368:	af00      	add	r7, sp, #0
 800036a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 800036c:	4b06      	ldr	r3, [pc, #24]	@ (8000388 <LL_RCC_SetSysClkSource+0x24>)
 800036e:	689b      	ldr	r3, [r3, #8]
 8000370:	f023 0203 	bic.w	r2, r3, #3
 8000374:	4904      	ldr	r1, [pc, #16]	@ (8000388 <LL_RCC_SetSysClkSource+0x24>)
 8000376:	687b      	ldr	r3, [r7, #4]
 8000378:	4313      	orrs	r3, r2
 800037a:	608b      	str	r3, [r1, #8]
}
 800037c:	bf00      	nop
 800037e:	370c      	adds	r7, #12
 8000380:	46bd      	mov	sp, r7
 8000382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000386:	4770      	bx	lr
 8000388:	40023800 	.word	0x40023800

0800038c <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLLR (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 800038c:	b480      	push	{r7}
 800038e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8000390:	4b04      	ldr	r3, [pc, #16]	@ (80003a4 <LL_RCC_GetSysClkSource+0x18>)
 8000392:	689b      	ldr	r3, [r3, #8]
 8000394:	f003 030c 	and.w	r3, r3, #12
}
 8000398:	4618      	mov	r0, r3
 800039a:	46bd      	mov	sp, r7
 800039c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003a0:	4770      	bx	lr
 80003a2:	bf00      	nop
 80003a4:	40023800 	.word	0x40023800

080003a8 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 80003a8:	b480      	push	{r7}
 80003aa:	b083      	sub	sp, #12
 80003ac:	af00      	add	r7, sp, #0
 80003ae:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 80003b0:	4b06      	ldr	r3, [pc, #24]	@ (80003cc <LL_RCC_SetAHBPrescaler+0x24>)
 80003b2:	689b      	ldr	r3, [r3, #8]
 80003b4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80003b8:	4904      	ldr	r1, [pc, #16]	@ (80003cc <LL_RCC_SetAHBPrescaler+0x24>)
 80003ba:	687b      	ldr	r3, [r7, #4]
 80003bc:	4313      	orrs	r3, r2
 80003be:	608b      	str	r3, [r1, #8]
}
 80003c0:	bf00      	nop
 80003c2:	370c      	adds	r7, #12
 80003c4:	46bd      	mov	sp, r7
 80003c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003ca:	4770      	bx	lr
 80003cc:	40023800 	.word	0x40023800

080003d0 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 80003d0:	b480      	push	{r7}
 80003d2:	b083      	sub	sp, #12
 80003d4:	af00      	add	r7, sp, #0
 80003d6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 80003d8:	4b06      	ldr	r3, [pc, #24]	@ (80003f4 <LL_RCC_SetAPB1Prescaler+0x24>)
 80003da:	689b      	ldr	r3, [r3, #8]
 80003dc:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80003e0:	4904      	ldr	r1, [pc, #16]	@ (80003f4 <LL_RCC_SetAPB1Prescaler+0x24>)
 80003e2:	687b      	ldr	r3, [r7, #4]
 80003e4:	4313      	orrs	r3, r2
 80003e6:	608b      	str	r3, [r1, #8]
}
 80003e8:	bf00      	nop
 80003ea:	370c      	adds	r7, #12
 80003ec:	46bd      	mov	sp, r7
 80003ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003f2:	4770      	bx	lr
 80003f4:	40023800 	.word	0x40023800

080003f8 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 80003f8:	b480      	push	{r7}
 80003fa:	b083      	sub	sp, #12
 80003fc:	af00      	add	r7, sp, #0
 80003fe:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8000400:	4b06      	ldr	r3, [pc, #24]	@ (800041c <LL_RCC_SetAPB2Prescaler+0x24>)
 8000402:	689b      	ldr	r3, [r3, #8]
 8000404:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8000408:	4904      	ldr	r1, [pc, #16]	@ (800041c <LL_RCC_SetAPB2Prescaler+0x24>)
 800040a:	687b      	ldr	r3, [r7, #4]
 800040c:	4313      	orrs	r3, r2
 800040e:	608b      	str	r3, [r1, #8]
}
 8000410:	bf00      	nop
 8000412:	370c      	adds	r7, #12
 8000414:	46bd      	mov	sp, r7
 8000416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800041a:	4770      	bx	lr
 800041c:	40023800 	.word	0x40023800

08000420 <LL_RCC_SetTIMPrescaler>:
  *         @arg @ref LL_RCC_TIM_PRESCALER_TWICE
  *         @arg @ref LL_RCC_TIM_PRESCALER_FOUR_TIMES
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetTIMPrescaler(uint32_t Prescaler)
{
 8000420:	b480      	push	{r7}
 8000422:	b083      	sub	sp, #12
 8000424:	af00      	add	r7, sp, #0
 8000426:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->DCKCFGR, RCC_DCKCFGR_TIMPRE, Prescaler);
 8000428:	4b07      	ldr	r3, [pc, #28]	@ (8000448 <LL_RCC_SetTIMPrescaler+0x28>)
 800042a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800042e:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8000432:	4905      	ldr	r1, [pc, #20]	@ (8000448 <LL_RCC_SetTIMPrescaler+0x28>)
 8000434:	687b      	ldr	r3, [r7, #4]
 8000436:	4313      	orrs	r3, r2
 8000438:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
}
 800043c:	bf00      	nop
 800043e:	370c      	adds	r7, #12
 8000440:	46bd      	mov	sp, r7
 8000442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000446:	4770      	bx	lr
 8000448:	40023800 	.word	0x40023800

0800044c <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 800044c:	b480      	push	{r7}
 800044e:	b085      	sub	sp, #20
 8000450:	af00      	add	r7, sp, #0
 8000452:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 8000454:	4b08      	ldr	r3, [pc, #32]	@ (8000478 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000456:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000458:	4907      	ldr	r1, [pc, #28]	@ (8000478 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800045a:	687b      	ldr	r3, [r7, #4]
 800045c:	4313      	orrs	r3, r2
 800045e:	630b      	str	r3, [r1, #48]	@ 0x30
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8000460:	4b05      	ldr	r3, [pc, #20]	@ (8000478 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000462:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000464:	687b      	ldr	r3, [r7, #4]
 8000466:	4013      	ands	r3, r2
 8000468:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800046a:	68fb      	ldr	r3, [r7, #12]
}
 800046c:	bf00      	nop
 800046e:	3714      	adds	r7, #20
 8000470:	46bd      	mov	sp, r7
 8000472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000476:	4770      	bx	lr
 8000478:	40023800 	.word	0x40023800

0800047c <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 800047c:	b480      	push	{r7}
 800047e:	b085      	sub	sp, #20
 8000480:	af00      	add	r7, sp, #0
 8000482:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 8000484:	4b08      	ldr	r3, [pc, #32]	@ (80004a8 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000486:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000488:	4907      	ldr	r1, [pc, #28]	@ (80004a8 <LL_APB1_GRP1_EnableClock+0x2c>)
 800048a:	687b      	ldr	r3, [r7, #4]
 800048c:	4313      	orrs	r3, r2
 800048e:	640b      	str	r3, [r1, #64]	@ 0x40
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8000490:	4b05      	ldr	r3, [pc, #20]	@ (80004a8 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000492:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000494:	687b      	ldr	r3, [r7, #4]
 8000496:	4013      	ands	r3, r2
 8000498:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800049a:	68fb      	ldr	r3, [r7, #12]
}
 800049c:	bf00      	nop
 800049e:	3714      	adds	r7, #20
 80004a0:	46bd      	mov	sp, r7
 80004a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004a6:	4770      	bx	lr
 80004a8:	40023800 	.word	0x40023800

080004ac <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 80004ac:	b480      	push	{r7}
 80004ae:	b085      	sub	sp, #20
 80004b0:	af00      	add	r7, sp, #0
 80004b2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 80004b4:	4b08      	ldr	r3, [pc, #32]	@ (80004d8 <LL_APB2_GRP1_EnableClock+0x2c>)
 80004b6:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80004b8:	4907      	ldr	r1, [pc, #28]	@ (80004d8 <LL_APB2_GRP1_EnableClock+0x2c>)
 80004ba:	687b      	ldr	r3, [r7, #4]
 80004bc:	4313      	orrs	r3, r2
 80004be:	644b      	str	r3, [r1, #68]	@ 0x44
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80004c0:	4b05      	ldr	r3, [pc, #20]	@ (80004d8 <LL_APB2_GRP1_EnableClock+0x2c>)
 80004c2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80004c4:	687b      	ldr	r3, [r7, #4]
 80004c6:	4013      	ands	r3, r2
 80004c8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80004ca:	68fb      	ldr	r3, [r7, #12]
}
 80004cc:	bf00      	nop
 80004ce:	3714      	adds	r7, #20
 80004d0:	46bd      	mov	sp, r7
 80004d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004d6:	4770      	bx	lr
 80004d8:	40023800 	.word	0x40023800

080004dc <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_14
  *         @arg @ref LL_FLASH_LATENCY_15
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 80004dc:	b480      	push	{r7}
 80004de:	b083      	sub	sp, #12
 80004e0:	af00      	add	r7, sp, #0
 80004e2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 80004e4:	4b06      	ldr	r3, [pc, #24]	@ (8000500 <LL_FLASH_SetLatency+0x24>)
 80004e6:	681b      	ldr	r3, [r3, #0]
 80004e8:	f023 0207 	bic.w	r2, r3, #7
 80004ec:	4904      	ldr	r1, [pc, #16]	@ (8000500 <LL_FLASH_SetLatency+0x24>)
 80004ee:	687b      	ldr	r3, [r7, #4]
 80004f0:	4313      	orrs	r3, r2
 80004f2:	600b      	str	r3, [r1, #0]
}
 80004f4:	bf00      	nop
 80004f6:	370c      	adds	r7, #12
 80004f8:	46bd      	mov	sp, r7
 80004fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004fe:	4770      	bx	lr
 8000500:	40023c00 	.word	0x40023c00

08000504 <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_13
  *         @arg @ref LL_FLASH_LATENCY_14
  *         @arg @ref LL_FLASH_LATENCY_15
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 8000504:	b480      	push	{r7}
 8000506:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 8000508:	4b04      	ldr	r3, [pc, #16]	@ (800051c <LL_FLASH_GetLatency+0x18>)
 800050a:	681b      	ldr	r3, [r3, #0]
 800050c:	f003 0307 	and.w	r3, r3, #7
}
 8000510:	4618      	mov	r0, r3
 8000512:	46bd      	mov	sp, r7
 8000514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000518:	4770      	bx	lr
 800051a:	bf00      	nop
 800051c:	40023c00 	.word	0x40023c00

08000520 <LL_PWR_SetRegulVoltageScaling>:
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE3
  *         (*) LL_PWR_REGU_VOLTAGE_SCALE1 is not available for STM32F401xx devices
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetRegulVoltageScaling(uint32_t VoltageScaling)
{
 8000520:	b480      	push	{r7}
 8000522:	b083      	sub	sp, #12
 8000524:	af00      	add	r7, sp, #0
 8000526:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR, PWR_CR_VOS, VoltageScaling);
 8000528:	4b06      	ldr	r3, [pc, #24]	@ (8000544 <LL_PWR_SetRegulVoltageScaling+0x24>)
 800052a:	681b      	ldr	r3, [r3, #0]
 800052c:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8000530:	4904      	ldr	r1, [pc, #16]	@ (8000544 <LL_PWR_SetRegulVoltageScaling+0x24>)
 8000532:	687b      	ldr	r3, [r7, #4]
 8000534:	4313      	orrs	r3, r2
 8000536:	600b      	str	r3, [r1, #0]
}
 8000538:	bf00      	nop
 800053a:	370c      	adds	r7, #12
 800053c:	46bd      	mov	sp, r7
 800053e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000542:	4770      	bx	lr
 8000544:	40007000 	.word	0x40007000

08000548 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000548:	b580      	push	{r7, lr}
 800054a:	b088      	sub	sp, #32
 800054c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SYSCFG);
 800054e:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8000552:	f7ff ffab 	bl	80004ac <LL_APB2_GRP1_EnableClock>
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 8000556:	f04f 5080 	mov.w	r0, #268435456	@ 0x10000000
 800055a:	f7ff ff8f 	bl	800047c <LL_APB1_GRP1_EnableClock>

  /* System interrupt init*/
  NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800055e:	2003      	movs	r0, #3
 8000560:	f7ff fe38 	bl	80001d4 <__NVIC_SetPriorityGrouping>

  /* SysTick_IRQn interrupt configuration */
  NVIC_SetPriority(SysTick_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),15, 0));
 8000564:	f7ff fe5a 	bl	800021c <__NVIC_GetPriorityGrouping>
 8000568:	4603      	mov	r3, r0
 800056a:	2200      	movs	r2, #0
 800056c:	210f      	movs	r1, #15
 800056e:	4618      	mov	r0, r3
 8000570:	f7ff fe8c 	bl	800028c <NVIC_EncodePriority>
 8000574:	4603      	mov	r3, r0
 8000576:	4619      	mov	r1, r3
 8000578:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800057c:	f7ff fe5c 	bl	8000238 <__NVIC_SetPriority>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000580:	f000 f84c 	bl	800061c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000584:	f000 f884 	bl	8000690 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */

	printf("HEllo World\n");
 8000588:	481d      	ldr	r0, [pc, #116]	@ (8000600 <main+0xb8>)
 800058a:	f002 fde5 	bl	8003158 <puts>

	status =  xTaskCreate(task1handler,
 800058e:	f107 0308 	add.w	r3, r7, #8
 8000592:	9301      	str	r3, [sp, #4]
 8000594:	2302      	movs	r3, #2
 8000596:	9300      	str	r3, [sp, #0]
 8000598:	4b1a      	ldr	r3, [pc, #104]	@ (8000604 <main+0xbc>)
 800059a:	22c8      	movs	r2, #200	@ 0xc8
 800059c:	491a      	ldr	r1, [pc, #104]	@ (8000608 <main+0xc0>)
 800059e:	481b      	ldr	r0, [pc, #108]	@ (800060c <main+0xc4>)
 80005a0:	f000 fdac 	bl	80010fc <xTaskCreate>
 80005a4:	6178      	str	r0, [r7, #20]
							"TASK-1",
							200,
							"Hello World from Task-1",
							2, /* priority 2 */
							&task1Handle);
	configASSERT(status == pdPASS);
 80005a6:	697b      	ldr	r3, [r7, #20]
 80005a8:	2b01      	cmp	r3, #1
 80005aa:	d00b      	beq.n	80005c4 <main+0x7c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
    uint32_t ulNewBASEPRI;

    __asm volatile
 80005ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80005b0:	f383 8811 	msr	BASEPRI, r3
 80005b4:	f3bf 8f6f 	isb	sy
 80005b8:	f3bf 8f4f 	dsb	sy
 80005bc:	613b      	str	r3, [r7, #16]
        "   msr basepri, %0                                         \n" \
        "   isb                                                     \n" \
        "   dsb                                                     \n" \
        : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
    );
}
 80005be:	bf00      	nop
 80005c0:	bf00      	nop
 80005c2:	e7fd      	b.n	80005c0 <main+0x78>

	status =  xTaskCreate(task2handler,
 80005c4:	1d3b      	adds	r3, r7, #4
 80005c6:	9301      	str	r3, [sp, #4]
 80005c8:	2302      	movs	r3, #2
 80005ca:	9300      	str	r3, [sp, #0]
 80005cc:	4b10      	ldr	r3, [pc, #64]	@ (8000610 <main+0xc8>)
 80005ce:	22c8      	movs	r2, #200	@ 0xc8
 80005d0:	4910      	ldr	r1, [pc, #64]	@ (8000614 <main+0xcc>)
 80005d2:	4811      	ldr	r0, [pc, #68]	@ (8000618 <main+0xd0>)
 80005d4:	f000 fd92 	bl	80010fc <xTaskCreate>
 80005d8:	6178      	str	r0, [r7, #20]
							"TASK-2",
							200,
							"Hello World from Task-2",
							2, /* priority 2 */
							&task2Handle);
	configASSERT(status == pdPASS);
 80005da:	697b      	ldr	r3, [r7, #20]
 80005dc:	2b01      	cmp	r3, #1
 80005de:	d00b      	beq.n	80005f8 <main+0xb0>
    __asm volatile
 80005e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80005e4:	f383 8811 	msr	BASEPRI, r3
 80005e8:	f3bf 8f6f 	isb	sy
 80005ec:	f3bf 8f4f 	dsb	sy
 80005f0:	60fb      	str	r3, [r7, #12]
}
 80005f2:	bf00      	nop
 80005f4:	bf00      	nop
 80005f6:	e7fd      	b.n	80005f4 <main+0xac>

	vTaskStartScheduler();
 80005f8:	f000 ff20 	bl	800143c <vTaskStartScheduler>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005fc:	bf00      	nop
 80005fe:	e7fd      	b.n	80005fc <main+0xb4>
 8000600:	080038b4 	.word	0x080038b4
 8000604:	080038c0 	.word	0x080038c0
 8000608:	080038d8 	.word	0x080038d8
 800060c:	0800069f 	.word	0x0800069f
 8000610:	080038e0 	.word	0x080038e0
 8000614:	080038f8 	.word	0x080038f8
 8000618:	080006af 	.word	0x080006af

0800061c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_0);
 8000620:	2000      	movs	r0, #0
 8000622:	f7ff ff5b 	bl	80004dc <LL_FLASH_SetLatency>
  while(LL_FLASH_GetLatency()!= LL_FLASH_LATENCY_0)
 8000626:	bf00      	nop
 8000628:	f7ff ff6c 	bl	8000504 <LL_FLASH_GetLatency>
 800062c:	4603      	mov	r3, r0
 800062e:	2b00      	cmp	r3, #0
 8000630:	d1fa      	bne.n	8000628 <SystemClock_Config+0xc>
  {
  }
  LL_PWR_SetRegulVoltageScaling(LL_PWR_REGU_VOLTAGE_SCALE2);
 8000632:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8000636:	f7ff ff73 	bl	8000520 <LL_PWR_SetRegulVoltageScaling>
  LL_RCC_HSI_SetCalibTrimming(16);
 800063a:	2010      	movs	r0, #16
 800063c:	f7ff fe7c 	bl	8000338 <LL_RCC_HSI_SetCalibTrimming>
  LL_RCC_HSI_Enable();
 8000640:	f7ff fe58 	bl	80002f4 <LL_RCC_HSI_Enable>

   /* Wait till HSI is ready */
  while(LL_RCC_HSI_IsReady() != 1)
 8000644:	bf00      	nop
 8000646:	f7ff fe65 	bl	8000314 <LL_RCC_HSI_IsReady>
 800064a:	4603      	mov	r3, r0
 800064c:	2b01      	cmp	r3, #1
 800064e:	d1fa      	bne.n	8000646 <SystemClock_Config+0x2a>
  {

  }
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 8000650:	2000      	movs	r0, #0
 8000652:	f7ff fea9 	bl	80003a8 <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_1);
 8000656:	2000      	movs	r0, #0
 8000658:	f7ff feba 	bl	80003d0 <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_1);
 800065c:	2000      	movs	r0, #0
 800065e:	f7ff fecb 	bl	80003f8 <LL_RCC_SetAPB2Prescaler>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_HSI);
 8000662:	2000      	movs	r0, #0
 8000664:	f7ff fe7e 	bl	8000364 <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_HSI)
 8000668:	bf00      	nop
 800066a:	f7ff fe8f 	bl	800038c <LL_RCC_GetSysClkSource>
 800066e:	4603      	mov	r3, r0
 8000670:	2b00      	cmp	r3, #0
 8000672:	d1fa      	bne.n	800066a <SystemClock_Config+0x4e>
  {

  }
  LL_Init1msTick(16000000);
 8000674:	4805      	ldr	r0, [pc, #20]	@ (800068c <SystemClock_Config+0x70>)
 8000676:	f000 f95f 	bl	8000938 <LL_Init1msTick>
  LL_SetSystemCoreClock(16000000);
 800067a:	4804      	ldr	r0, [pc, #16]	@ (800068c <SystemClock_Config+0x70>)
 800067c:	f000 f96a 	bl	8000954 <LL_SetSystemCoreClock>
  LL_RCC_SetTIMPrescaler(LL_RCC_TIM_PRESCALER_TWICE);
 8000680:	2000      	movs	r0, #0
 8000682:	f7ff fecd 	bl	8000420 <LL_RCC_SetTIMPrescaler>
}
 8000686:	bf00      	nop
 8000688:	bd80      	pop	{r7, pc}
 800068a:	bf00      	nop
 800068c:	00f42400 	.word	0x00f42400

08000690 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8000694:	2002      	movs	r0, #2
 8000696:	f7ff fed9 	bl	800044c <LL_AHB1_GRP1_EnableClock>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}
 800069a:	bf00      	nop
 800069c:	bd80      	pop	{r7, pc}

0800069e <task1handler>:

/* USER CODE BEGIN 4 */

static void task1handler(void *parameters)
{
 800069e:	b580      	push	{r7, lr}
 80006a0:	b082      	sub	sp, #8
 80006a2:	af00      	add	r7, sp, #0
 80006a4:	6078      	str	r0, [r7, #4]
	while(1){
		printf("%s\n", (char *) parameters);
 80006a6:	6878      	ldr	r0, [r7, #4]
 80006a8:	f002 fd56 	bl	8003158 <puts>
 80006ac:	e7fb      	b.n	80006a6 <task1handler+0x8>

080006ae <task2handler>:
	};
}

static void task2handler(void *parameters)
{
 80006ae:	b580      	push	{r7, lr}
 80006b0:	b082      	sub	sp, #8
 80006b2:	af00      	add	r7, sp, #0
 80006b4:	6078      	str	r0, [r7, #4]
	while(1){
		printf("%s\n", (char *) parameters);
 80006b6:	6878      	ldr	r0, [r7, #4]
 80006b8:	f002 fd4e 	bl	8003158 <puts>
 80006bc:	e7fb      	b.n	80006b6 <task2handler+0x8>

080006be <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80006be:	b480      	push	{r7}
 80006c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80006c2:	bf00      	nop
 80006c4:	e7fd      	b.n	80006c2 <NMI_Handler+0x4>

080006c6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80006c6:	b480      	push	{r7}
 80006c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80006ca:	bf00      	nop
 80006cc:	e7fd      	b.n	80006ca <HardFault_Handler+0x4>

080006ce <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80006ce:	b480      	push	{r7}
 80006d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80006d2:	bf00      	nop
 80006d4:	e7fd      	b.n	80006d2 <MemManage_Handler+0x4>

080006d6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80006d6:	b480      	push	{r7}
 80006d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80006da:	bf00      	nop
 80006dc:	e7fd      	b.n	80006da <BusFault_Handler+0x4>

080006de <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80006de:	b480      	push	{r7}
 80006e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80006e2:	bf00      	nop
 80006e4:	e7fd      	b.n	80006e2 <UsageFault_Handler+0x4>

080006e6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80006e6:	b480      	push	{r7}
 80006e8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80006ea:	bf00      	nop
 80006ec:	46bd      	mov	sp, r7
 80006ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f2:	4770      	bx	lr

080006f4 <ITM_SendChar>:
/* ITM register addresses */
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)
{
 80006f4:	b480      	push	{r7}
 80006f6:	b083      	sub	sp, #12
 80006f8:	af00      	add	r7, sp, #0
 80006fa:	4603      	mov	r3, r0
 80006fc:	71fb      	strb	r3, [r7, #7]

	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 80006fe:	4b0f      	ldr	r3, [pc, #60]	@ (800073c <ITM_SendChar+0x48>)
 8000700:	681b      	ldr	r3, [r3, #0]
 8000702:	4a0e      	ldr	r2, [pc, #56]	@ (800073c <ITM_SendChar+0x48>)
 8000704:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000708:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 800070a:	4b0d      	ldr	r3, [pc, #52]	@ (8000740 <ITM_SendChar+0x4c>)
 800070c:	681b      	ldr	r3, [r3, #0]
 800070e:	4a0c      	ldr	r2, [pc, #48]	@ (8000740 <ITM_SendChar+0x4c>)
 8000710:	f043 0301 	orr.w	r3, r3, #1
 8000714:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 8000716:	bf00      	nop
 8000718:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 800071c:	681b      	ldr	r3, [r3, #0]
 800071e:	f003 0301 	and.w	r3, r3, #1
 8000722:	2b00      	cmp	r3, #0
 8000724:	d0f8      	beq.n	8000718 <ITM_SendChar+0x24>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 8000726:	f04f 4260 	mov.w	r2, #3758096384	@ 0xe0000000
 800072a:	79fb      	ldrb	r3, [r7, #7]
 800072c:	6013      	str	r3, [r2, #0]
}
 800072e:	bf00      	nop
 8000730:	370c      	adds	r7, #12
 8000732:	46bd      	mov	sp, r7
 8000734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000738:	4770      	bx	lr
 800073a:	bf00      	nop
 800073c:	e000edfc 	.word	0xe000edfc
 8000740:	e0000e00 	.word	0xe0000e00

08000744 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	b086      	sub	sp, #24
 8000748:	af00      	add	r7, sp, #0
 800074a:	60f8      	str	r0, [r7, #12]
 800074c:	60b9      	str	r1, [r7, #8]
 800074e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000750:	2300      	movs	r3, #0
 8000752:	617b      	str	r3, [r7, #20]
 8000754:	e00a      	b.n	800076c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000756:	f3af 8000 	nop.w
 800075a:	4601      	mov	r1, r0
 800075c:	68bb      	ldr	r3, [r7, #8]
 800075e:	1c5a      	adds	r2, r3, #1
 8000760:	60ba      	str	r2, [r7, #8]
 8000762:	b2ca      	uxtb	r2, r1
 8000764:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000766:	697b      	ldr	r3, [r7, #20]
 8000768:	3301      	adds	r3, #1
 800076a:	617b      	str	r3, [r7, #20]
 800076c:	697a      	ldr	r2, [r7, #20]
 800076e:	687b      	ldr	r3, [r7, #4]
 8000770:	429a      	cmp	r2, r3
 8000772:	dbf0      	blt.n	8000756 <_read+0x12>
  }

  return len;
 8000774:	687b      	ldr	r3, [r7, #4]
}
 8000776:	4618      	mov	r0, r3
 8000778:	3718      	adds	r7, #24
 800077a:	46bd      	mov	sp, r7
 800077c:	bd80      	pop	{r7, pc}

0800077e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800077e:	b580      	push	{r7, lr}
 8000780:	b086      	sub	sp, #24
 8000782:	af00      	add	r7, sp, #0
 8000784:	60f8      	str	r0, [r7, #12]
 8000786:	60b9      	str	r1, [r7, #8]
 8000788:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800078a:	2300      	movs	r3, #0
 800078c:	617b      	str	r3, [r7, #20]
 800078e:	e009      	b.n	80007a4 <_write+0x26>
  {
	  // __io_putchar(*ptr++);
	  ITM_SendChar(*ptr++);
 8000790:	68bb      	ldr	r3, [r7, #8]
 8000792:	1c5a      	adds	r2, r3, #1
 8000794:	60ba      	str	r2, [r7, #8]
 8000796:	781b      	ldrb	r3, [r3, #0]
 8000798:	4618      	mov	r0, r3
 800079a:	f7ff ffab 	bl	80006f4 <ITM_SendChar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800079e:	697b      	ldr	r3, [r7, #20]
 80007a0:	3301      	adds	r3, #1
 80007a2:	617b      	str	r3, [r7, #20]
 80007a4:	697a      	ldr	r2, [r7, #20]
 80007a6:	687b      	ldr	r3, [r7, #4]
 80007a8:	429a      	cmp	r2, r3
 80007aa:	dbf1      	blt.n	8000790 <_write+0x12>
  }
  return len;
 80007ac:	687b      	ldr	r3, [r7, #4]
}
 80007ae:	4618      	mov	r0, r3
 80007b0:	3718      	adds	r7, #24
 80007b2:	46bd      	mov	sp, r7
 80007b4:	bd80      	pop	{r7, pc}

080007b6 <_close>:

int _close(int file)
{
 80007b6:	b480      	push	{r7}
 80007b8:	b083      	sub	sp, #12
 80007ba:	af00      	add	r7, sp, #0
 80007bc:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80007be:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80007c2:	4618      	mov	r0, r3
 80007c4:	370c      	adds	r7, #12
 80007c6:	46bd      	mov	sp, r7
 80007c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007cc:	4770      	bx	lr

080007ce <_fstat>:


int _fstat(int file, struct stat *st)
{
 80007ce:	b480      	push	{r7}
 80007d0:	b083      	sub	sp, #12
 80007d2:	af00      	add	r7, sp, #0
 80007d4:	6078      	str	r0, [r7, #4]
 80007d6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80007d8:	683b      	ldr	r3, [r7, #0]
 80007da:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80007de:	605a      	str	r2, [r3, #4]
  return 0;
 80007e0:	2300      	movs	r3, #0
}
 80007e2:	4618      	mov	r0, r3
 80007e4:	370c      	adds	r7, #12
 80007e6:	46bd      	mov	sp, r7
 80007e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ec:	4770      	bx	lr

080007ee <_isatty>:

int _isatty(int file)
{
 80007ee:	b480      	push	{r7}
 80007f0:	b083      	sub	sp, #12
 80007f2:	af00      	add	r7, sp, #0
 80007f4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80007f6:	2301      	movs	r3, #1
}
 80007f8:	4618      	mov	r0, r3
 80007fa:	370c      	adds	r7, #12
 80007fc:	46bd      	mov	sp, r7
 80007fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000802:	4770      	bx	lr

08000804 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000804:	b480      	push	{r7}
 8000806:	b085      	sub	sp, #20
 8000808:	af00      	add	r7, sp, #0
 800080a:	60f8      	str	r0, [r7, #12]
 800080c:	60b9      	str	r1, [r7, #8]
 800080e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000810:	2300      	movs	r3, #0
}
 8000812:	4618      	mov	r0, r3
 8000814:	3714      	adds	r7, #20
 8000816:	46bd      	mov	sp, r7
 8000818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800081c:	4770      	bx	lr
	...

08000820 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	b086      	sub	sp, #24
 8000824:	af00      	add	r7, sp, #0
 8000826:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000828:	4a14      	ldr	r2, [pc, #80]	@ (800087c <_sbrk+0x5c>)
 800082a:	4b15      	ldr	r3, [pc, #84]	@ (8000880 <_sbrk+0x60>)
 800082c:	1ad3      	subs	r3, r2, r3
 800082e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000830:	697b      	ldr	r3, [r7, #20]
 8000832:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000834:	4b13      	ldr	r3, [pc, #76]	@ (8000884 <_sbrk+0x64>)
 8000836:	681b      	ldr	r3, [r3, #0]
 8000838:	2b00      	cmp	r3, #0
 800083a:	d102      	bne.n	8000842 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800083c:	4b11      	ldr	r3, [pc, #68]	@ (8000884 <_sbrk+0x64>)
 800083e:	4a12      	ldr	r2, [pc, #72]	@ (8000888 <_sbrk+0x68>)
 8000840:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000842:	4b10      	ldr	r3, [pc, #64]	@ (8000884 <_sbrk+0x64>)
 8000844:	681a      	ldr	r2, [r3, #0]
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	4413      	add	r3, r2
 800084a:	693a      	ldr	r2, [r7, #16]
 800084c:	429a      	cmp	r2, r3
 800084e:	d207      	bcs.n	8000860 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000850:	f002 fdb0 	bl	80033b4 <__errno>
 8000854:	4603      	mov	r3, r0
 8000856:	220c      	movs	r2, #12
 8000858:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800085a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800085e:	e009      	b.n	8000874 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000860:	4b08      	ldr	r3, [pc, #32]	@ (8000884 <_sbrk+0x64>)
 8000862:	681b      	ldr	r3, [r3, #0]
 8000864:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000866:	4b07      	ldr	r3, [pc, #28]	@ (8000884 <_sbrk+0x64>)
 8000868:	681a      	ldr	r2, [r3, #0]
 800086a:	687b      	ldr	r3, [r7, #4]
 800086c:	4413      	add	r3, r2
 800086e:	4a05      	ldr	r2, [pc, #20]	@ (8000884 <_sbrk+0x64>)
 8000870:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000872:	68fb      	ldr	r3, [r7, #12]
}
 8000874:	4618      	mov	r0, r3
 8000876:	3718      	adds	r7, #24
 8000878:	46bd      	mov	sp, r7
 800087a:	bd80      	pop	{r7, pc}
 800087c:	20010000 	.word	0x20010000
 8000880:	00000400 	.word	0x00000400
 8000884:	20000080 	.word	0x20000080
 8000888:	2000f778 	.word	0x2000f778

0800088c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800088c:	b480      	push	{r7}
 800088e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000890:	4b06      	ldr	r3, [pc, #24]	@ (80008ac <SystemInit+0x20>)
 8000892:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000896:	4a05      	ldr	r2, [pc, #20]	@ (80008ac <SystemInit+0x20>)
 8000898:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800089c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80008a0:	bf00      	nop
 80008a2:	46bd      	mov	sp, r7
 80008a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a8:	4770      	bx	lr
 80008aa:	bf00      	nop
 80008ac:	e000ed00 	.word	0xe000ed00

080008b0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80008b0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80008e8 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80008b4:	f7ff ffea 	bl	800088c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80008b8:	480c      	ldr	r0, [pc, #48]	@ (80008ec <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80008ba:	490d      	ldr	r1, [pc, #52]	@ (80008f0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80008bc:	4a0d      	ldr	r2, [pc, #52]	@ (80008f4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80008be:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80008c0:	e002      	b.n	80008c8 <LoopCopyDataInit>

080008c2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80008c2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80008c4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80008c6:	3304      	adds	r3, #4

080008c8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80008c8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80008ca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80008cc:	d3f9      	bcc.n	80008c2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80008ce:	4a0a      	ldr	r2, [pc, #40]	@ (80008f8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80008d0:	4c0a      	ldr	r4, [pc, #40]	@ (80008fc <LoopFillZerobss+0x22>)
  movs r3, #0
 80008d2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80008d4:	e001      	b.n	80008da <LoopFillZerobss>

080008d6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80008d6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80008d8:	3204      	adds	r2, #4

080008da <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80008da:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80008dc:	d3fb      	bcc.n	80008d6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80008de:	f002 fd6f 	bl	80033c0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80008e2:	f7ff fe31 	bl	8000548 <main>
  bx  lr    
 80008e6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80008e8:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80008ec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80008f0:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 80008f4:	08003924 	.word	0x08003924
  ldr r2, =_sbss
 80008f8:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 80008fc:	2000f774 	.word	0x2000f774

08000900 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000900:	e7fe      	b.n	8000900 <ADC_IRQHandler>
	...

08000904 <LL_InitTick>:
  *         configuration by calling this function, for a delay use rather osDelay RTOS service.
  * @param  Ticks Frequency of Ticks (Hz)
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
 8000904:	b480      	push	{r7}
 8000906:	b083      	sub	sp, #12
 8000908:	af00      	add	r7, sp, #0
 800090a:	6078      	str	r0, [r7, #4]
 800090c:	6039      	str	r1, [r7, #0]
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 800090e:	687a      	ldr	r2, [r7, #4]
 8000910:	683b      	ldr	r3, [r7, #0]
 8000912:	fbb2 f3f3 	udiv	r3, r2, r3
 8000916:	4a07      	ldr	r2, [pc, #28]	@ (8000934 <LL_InitTick+0x30>)
 8000918:	3b01      	subs	r3, #1
 800091a:	6053      	str	r3, [r2, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 800091c:	4b05      	ldr	r3, [pc, #20]	@ (8000934 <LL_InitTick+0x30>)
 800091e:	2200      	movs	r2, #0
 8000920:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000922:	4b04      	ldr	r3, [pc, #16]	@ (8000934 <LL_InitTick+0x30>)
 8000924:	2205      	movs	r2, #5
 8000926:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_ENABLE_Msk;                   /* Enable the Systick Timer */
}
 8000928:	bf00      	nop
 800092a:	370c      	adds	r7, #12
 800092c:	46bd      	mov	sp, r7
 800092e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000932:	4770      	bx	lr
 8000934:	e000e010 	.word	0xe000e010

08000938 <LL_Init1msTick>:
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	b082      	sub	sp, #8
 800093c:	af00      	add	r7, sp, #0
 800093e:	6078      	str	r0, [r7, #4]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
 8000940:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000944:	6878      	ldr	r0, [r7, #4]
 8000946:	f7ff ffdd 	bl	8000904 <LL_InitTick>
}
 800094a:	bf00      	nop
 800094c:	3708      	adds	r7, #8
 800094e:	46bd      	mov	sp, r7
 8000950:	bd80      	pop	{r7, pc}
	...

08000954 <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 8000954:	b480      	push	{r7}
 8000956:	b083      	sub	sp, #12
 8000958:	af00      	add	r7, sp, #0
 800095a:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 800095c:	4a04      	ldr	r2, [pc, #16]	@ (8000970 <LL_SetSystemCoreClock+0x1c>)
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	6013      	str	r3, [r2, #0]
}
 8000962:	bf00      	nop
 8000964:	370c      	adds	r7, #12
 8000966:	46bd      	mov	sp, r7
 8000968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800096c:	4770      	bx	lr
 800096e:	bf00      	nop
 8000970:	20000000 	.word	0x20000000

08000974 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8000974:	b480      	push	{r7}
 8000976:	b083      	sub	sp, #12
 8000978:	af00      	add	r7, sp, #0
 800097a:	6078      	str	r0, [r7, #4]
    traceENTER_vListInitialise( pxList );

    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	f103 0208 	add.w	r2, r3, #8
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800098c:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	f103 0208 	add.w	r2, r3, #8
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	f103 0208 	add.w	r2, r3, #8
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	611a      	str	r2, [r3, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	2200      	movs	r2, #0
 80009a6:	601a      	str	r2, [r3, #0]
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );

    traceRETURN_vListInitialise();
}
 80009a8:	bf00      	nop
 80009aa:	370c      	adds	r7, #12
 80009ac:	46bd      	mov	sp, r7
 80009ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b2:	4770      	bx	lr

080009b4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80009b4:	b480      	push	{r7}
 80009b6:	b083      	sub	sp, #12
 80009b8:	af00      	add	r7, sp, #0
 80009ba:	6078      	str	r0, [r7, #4]
    traceENTER_vListInitialiseItem( pxItem );

    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	2200      	movs	r2, #0
 80009c0:	611a      	str	r2, [r3, #16]
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );

    traceRETURN_vListInitialiseItem();
}
 80009c2:	bf00      	nop
 80009c4:	370c      	adds	r7, #12
 80009c6:	46bd      	mov	sp, r7
 80009c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009cc:	4770      	bx	lr

080009ce <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 80009ce:	b480      	push	{r7}
 80009d0:	b085      	sub	sp, #20
 80009d2:	af00      	add	r7, sp, #0
 80009d4:	6078      	str	r0, [r7, #4]
 80009d6:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80009d8:	683b      	ldr	r3, [r7, #0]
 80009da:	681b      	ldr	r3, [r3, #0]
 80009dc:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 80009de:	68bb      	ldr	r3, [r7, #8]
 80009e0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80009e4:	d103      	bne.n	80009ee <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	691b      	ldr	r3, [r3, #16]
 80009ea:	60fb      	str	r3, [r7, #12]
 80009ec:	e00c      	b.n	8000a08 <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext )
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	3308      	adds	r3, #8
 80009f2:	60fb      	str	r3, [r7, #12]
 80009f4:	e002      	b.n	80009fc <vListInsert+0x2e>
 80009f6:	68fb      	ldr	r3, [r7, #12]
 80009f8:	685b      	ldr	r3, [r3, #4]
 80009fa:	60fb      	str	r3, [r7, #12]
 80009fc:	68fb      	ldr	r3, [r7, #12]
 80009fe:	685b      	ldr	r3, [r3, #4]
 8000a00:	681b      	ldr	r3, [r3, #0]
 8000a02:	68ba      	ldr	r2, [r7, #8]
 8000a04:	429a      	cmp	r2, r3
 8000a06:	d2f6      	bcs.n	80009f6 <vListInsert+0x28>
             * IF YOU FIND YOUR CODE STUCK HERE, SEE THE NOTE JUST ABOVE.
             */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8000a08:	68fb      	ldr	r3, [r7, #12]
 8000a0a:	685a      	ldr	r2, [r3, #4]
 8000a0c:	683b      	ldr	r3, [r7, #0]
 8000a0e:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8000a10:	683b      	ldr	r3, [r7, #0]
 8000a12:	685b      	ldr	r3, [r3, #4]
 8000a14:	683a      	ldr	r2, [r7, #0]
 8000a16:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8000a18:	683b      	ldr	r3, [r7, #0]
 8000a1a:	68fa      	ldr	r2, [r7, #12]
 8000a1c:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 8000a1e:	68fb      	ldr	r3, [r7, #12]
 8000a20:	683a      	ldr	r2, [r7, #0]
 8000a22:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8000a24:	683b      	ldr	r3, [r7, #0]
 8000a26:	687a      	ldr	r2, [r7, #4]
 8000a28:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems ) = ( UBaseType_t ) ( pxList->uxNumberOfItems + 1U );
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	681b      	ldr	r3, [r3, #0]
 8000a2e:	1c5a      	adds	r2, r3, #1
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	601a      	str	r2, [r3, #0]

    traceRETURN_vListInsert();
}
 8000a34:	bf00      	nop
 8000a36:	3714      	adds	r7, #20
 8000a38:	46bd      	mov	sp, r7
 8000a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a3e:	4770      	bx	lr

08000a40 <uxListRemove>:
/*-----------------------------------------------------------*/


UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8000a40:	b480      	push	{r7}
 8000a42:	b085      	sub	sp, #20
 8000a44:	af00      	add	r7, sp, #0
 8000a46:	6078      	str	r0, [r7, #4]
    /* The list item knows which list it is in.  Obtain the list from the list
     * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	691b      	ldr	r3, [r3, #16]
 8000a4c:	60fb      	str	r3, [r7, #12]

    traceENTER_uxListRemove( pxItemToRemove );

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	685b      	ldr	r3, [r3, #4]
 8000a52:	687a      	ldr	r2, [r7, #4]
 8000a54:	6892      	ldr	r2, [r2, #8]
 8000a56:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	689b      	ldr	r3, [r3, #8]
 8000a5c:	687a      	ldr	r2, [r7, #4]
 8000a5e:	6852      	ldr	r2, [r2, #4]
 8000a60:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8000a62:	68fb      	ldr	r3, [r7, #12]
 8000a64:	685b      	ldr	r3, [r3, #4]
 8000a66:	687a      	ldr	r2, [r7, #4]
 8000a68:	429a      	cmp	r2, r3
 8000a6a:	d103      	bne.n	8000a74 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	689a      	ldr	r2, [r3, #8]
 8000a70:	68fb      	ldr	r3, [r7, #12]
 8000a72:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	2200      	movs	r2, #0
 8000a78:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems ) = ( UBaseType_t ) ( pxList->uxNumberOfItems - 1U );
 8000a7a:	68fb      	ldr	r3, [r7, #12]
 8000a7c:	681b      	ldr	r3, [r3, #0]
 8000a7e:	1e5a      	subs	r2, r3, #1
 8000a80:	68fb      	ldr	r3, [r7, #12]
 8000a82:	601a      	str	r2, [r3, #0]

    traceRETURN_uxListRemove( pxList->uxNumberOfItems );

    return pxList->uxNumberOfItems;
 8000a84:	68fb      	ldr	r3, [r7, #12]
 8000a86:	681b      	ldr	r3, [r3, #0]
}
 8000a88:	4618      	mov	r0, r3
 8000a8a:	3714      	adds	r7, #20
 8000a8c:	46bd      	mov	sp, r7
 8000a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a92:	4770      	bx	lr

08000a94 <xQueueGenericReset>:
    } while( 0 )
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	b086      	sub	sp, #24
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	6078      	str	r0, [r7, #4]
 8000a9c:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 8000a9e:	2301      	movs	r3, #1
 8000aa0:	617b      	str	r3, [r7, #20]
    Queue_t * const pxQueue = xQueue;
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	613b      	str	r3, [r7, #16]

    traceENTER_xQueueGenericReset( xQueue, xNewQueue );

    configASSERT( pxQueue );
 8000aa6:	693b      	ldr	r3, [r7, #16]
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	d10b      	bne.n	8000ac4 <xQueueGenericReset+0x30>
    __asm volatile
 8000aac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000ab0:	f383 8811 	msr	BASEPRI, r3
 8000ab4:	f3bf 8f6f 	isb	sy
 8000ab8:	f3bf 8f4f 	dsb	sy
 8000abc:	60fb      	str	r3, [r7, #12]
}
 8000abe:	bf00      	nop
 8000ac0:	bf00      	nop
 8000ac2:	e7fd      	b.n	8000ac0 <xQueueGenericReset+0x2c>

    if( ( pxQueue != NULL ) &&
 8000ac4:	693b      	ldr	r3, [r7, #16]
 8000ac6:	2b00      	cmp	r3, #0
 8000ac8:	d05d      	beq.n	8000b86 <xQueueGenericReset+0xf2>
        ( pxQueue->uxLength >= 1U ) &&
 8000aca:	693b      	ldr	r3, [r7, #16]
 8000acc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    if( ( pxQueue != NULL ) &&
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	d059      	beq.n	8000b86 <xQueueGenericReset+0xf2>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 8000ad2:	693b      	ldr	r3, [r7, #16]
 8000ad4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000ad6:	693b      	ldr	r3, [r7, #16]
 8000ad8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000ada:	2100      	movs	r1, #0
 8000adc:	fba3 2302 	umull	r2, r3, r3, r2
 8000ae0:	2b00      	cmp	r3, #0
 8000ae2:	d000      	beq.n	8000ae6 <xQueueGenericReset+0x52>
 8000ae4:	2101      	movs	r1, #1
 8000ae6:	460b      	mov	r3, r1
        ( pxQueue->uxLength >= 1U ) &&
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	d14c      	bne.n	8000b86 <xQueueGenericReset+0xf2>
    {
        taskENTER_CRITICAL();
 8000aec:	f001 feba 	bl	8002864 <vPortEnterCritical>
        {
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8000af0:	693b      	ldr	r3, [r7, #16]
 8000af2:	681a      	ldr	r2, [r3, #0]
 8000af4:	693b      	ldr	r3, [r7, #16]
 8000af6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000af8:	6939      	ldr	r1, [r7, #16]
 8000afa:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8000afc:	fb01 f303 	mul.w	r3, r1, r3
 8000b00:	441a      	add	r2, r3
 8000b02:	693b      	ldr	r3, [r7, #16]
 8000b04:	609a      	str	r2, [r3, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8000b06:	693b      	ldr	r3, [r7, #16]
 8000b08:	2200      	movs	r2, #0
 8000b0a:	639a      	str	r2, [r3, #56]	@ 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8000b0c:	693b      	ldr	r3, [r7, #16]
 8000b0e:	681a      	ldr	r2, [r3, #0]
 8000b10:	693b      	ldr	r3, [r7, #16]
 8000b12:	605a      	str	r2, [r3, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize );
 8000b14:	693b      	ldr	r3, [r7, #16]
 8000b16:	681a      	ldr	r2, [r3, #0]
 8000b18:	693b      	ldr	r3, [r7, #16]
 8000b1a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000b1c:	3b01      	subs	r3, #1
 8000b1e:	6939      	ldr	r1, [r7, #16]
 8000b20:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8000b22:	fb01 f303 	mul.w	r3, r1, r3
 8000b26:	441a      	add	r2, r3
 8000b28:	693b      	ldr	r3, [r7, #16]
 8000b2a:	60da      	str	r2, [r3, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 8000b2c:	693b      	ldr	r3, [r7, #16]
 8000b2e:	22ff      	movs	r2, #255	@ 0xff
 8000b30:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
            pxQueue->cTxLock = queueUNLOCKED;
 8000b34:	693b      	ldr	r3, [r7, #16]
 8000b36:	22ff      	movs	r2, #255	@ 0xff
 8000b38:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

            if( xNewQueue == pdFALSE )
 8000b3c:	683b      	ldr	r3, [r7, #0]
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	d114      	bne.n	8000b6c <xQueueGenericReset+0xd8>
                /* If there are tasks blocked waiting to read from the queue, then
                 * the tasks will remain blocked as after this function exits the queue
                 * will still be empty.  If there are tasks blocked waiting to write to
                 * the queue, then one should be unblocked as after this function exits
                 * it will be possible to write to it. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8000b42:	693b      	ldr	r3, [r7, #16]
 8000b44:	691b      	ldr	r3, [r3, #16]
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	d01a      	beq.n	8000b80 <xQueueGenericReset+0xec>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8000b4a:	693b      	ldr	r3, [r7, #16]
 8000b4c:	3310      	adds	r3, #16
 8000b4e:	4618      	mov	r0, r3
 8000b50:	f000 ffc2 	bl	8001ad8 <xTaskRemoveFromEventList>
 8000b54:	4603      	mov	r3, r0
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	d012      	beq.n	8000b80 <xQueueGenericReset+0xec>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8000b5a:	4b16      	ldr	r3, [pc, #88]	@ (8000bb4 <xQueueGenericReset+0x120>)
 8000b5c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8000b60:	601a      	str	r2, [r3, #0]
 8000b62:	f3bf 8f4f 	dsb	sy
 8000b66:	f3bf 8f6f 	isb	sy
 8000b6a:	e009      	b.n	8000b80 <xQueueGenericReset+0xec>
                }
            }
            else
            {
                /* Ensure the event queues start in the correct state. */
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8000b6c:	693b      	ldr	r3, [r7, #16]
 8000b6e:	3310      	adds	r3, #16
 8000b70:	4618      	mov	r0, r3
 8000b72:	f7ff feff 	bl	8000974 <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8000b76:	693b      	ldr	r3, [r7, #16]
 8000b78:	3324      	adds	r3, #36	@ 0x24
 8000b7a:	4618      	mov	r0, r3
 8000b7c:	f7ff fefa 	bl	8000974 <vListInitialise>
            }
        }
        taskEXIT_CRITICAL();
 8000b80:	f001 fea2 	bl	80028c8 <vPortExitCritical>
 8000b84:	e001      	b.n	8000b8a <xQueueGenericReset+0xf6>
    }
    else
    {
        xReturn = pdFAIL;
 8000b86:	2300      	movs	r3, #0
 8000b88:	617b      	str	r3, [r7, #20]
    }

    configASSERT( xReturn != pdFAIL );
 8000b8a:	697b      	ldr	r3, [r7, #20]
 8000b8c:	2b00      	cmp	r3, #0
 8000b8e:	d10b      	bne.n	8000ba8 <xQueueGenericReset+0x114>
    __asm volatile
 8000b90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000b94:	f383 8811 	msr	BASEPRI, r3
 8000b98:	f3bf 8f6f 	isb	sy
 8000b9c:	f3bf 8f4f 	dsb	sy
 8000ba0:	60bb      	str	r3, [r7, #8]
}
 8000ba2:	bf00      	nop
 8000ba4:	bf00      	nop
 8000ba6:	e7fd      	b.n	8000ba4 <xQueueGenericReset+0x110>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    traceRETURN_xQueueGenericReset( xReturn );

    return xReturn;
 8000ba8:	697b      	ldr	r3, [r7, #20]
}
 8000baa:	4618      	mov	r0, r3
 8000bac:	3718      	adds	r7, #24
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	bd80      	pop	{r7, pc}
 8000bb2:	bf00      	nop
 8000bb4:	e000ed04 	.word	0xe000ed04

08000bb8 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b08a      	sub	sp, #40	@ 0x28
 8000bbc:	af02      	add	r7, sp, #8
 8000bbe:	60f8      	str	r0, [r7, #12]
 8000bc0:	60b9      	str	r1, [r7, #8]
 8000bc2:	4613      	mov	r3, r2
 8000bc4:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue = NULL;
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	61fb      	str	r3, [r7, #28]
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        traceENTER_xQueueGenericCreate( uxQueueLength, uxItemSize, ucQueueType );

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8000bca:	68fb      	ldr	r3, [r7, #12]
 8000bcc:	2b00      	cmp	r3, #0
 8000bce:	d02e      	beq.n	8000c2e <xQueueGenericCreate+0x76>
            /* Check for multiplication overflow. */
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8000bd0:	2100      	movs	r1, #0
 8000bd2:	68ba      	ldr	r2, [r7, #8]
 8000bd4:	68fb      	ldr	r3, [r7, #12]
 8000bd6:	fba3 2302 	umull	r2, r3, r3, r2
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	d000      	beq.n	8000be0 <xQueueGenericCreate+0x28>
 8000bde:	2101      	movs	r1, #1
 8000be0:	460b      	mov	r3, r1
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d123      	bne.n	8000c2e <xQueueGenericCreate+0x76>
            /* Check for addition overflow. */
            /* MISRA Ref 14.3.1 [Configuration dependent invariant] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-143. */
            /* coverity[misra_c_2012_rule_14_3_violation] */
            ( ( SIZE_MAX - sizeof( Queue_t ) ) >= ( size_t ) ( ( size_t ) uxQueueLength * ( size_t ) uxItemSize ) ) )
 8000be6:	68fb      	ldr	r3, [r7, #12]
 8000be8:	68ba      	ldr	r2, [r7, #8]
 8000bea:	fb02 f303 	mul.w	r3, r2, r3
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8000bee:	f113 0f51 	cmn.w	r3, #81	@ 0x51
 8000bf2:	d81c      	bhi.n	8000c2e <xQueueGenericCreate+0x76>
        {
            /* Allocate enough space to hold the maximum number of items that
             * can be in the queue at any time.  It is valid for uxItemSize to be
             * zero in the case the queue is used as a semaphore. */
            xQueueSizeInBytes = ( size_t ) ( ( size_t ) uxQueueLength * ( size_t ) uxItemSize );
 8000bf4:	68fb      	ldr	r3, [r7, #12]
 8000bf6:	68ba      	ldr	r2, [r7, #8]
 8000bf8:	fb02 f303 	mul.w	r3, r2, r3
 8000bfc:	61bb      	str	r3, [r7, #24]

            /* MISRA Ref 11.5.1 [Malloc memory assignment] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
            /* coverity[misra_c_2012_rule_11_5_violation] */
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8000bfe:	69bb      	ldr	r3, [r7, #24]
 8000c00:	3350      	adds	r3, #80	@ 0x50
 8000c02:	4618      	mov	r0, r3
 8000c04:	f001 ff0e 	bl	8002a24 <pvPortMalloc>
 8000c08:	61f8      	str	r0, [r7, #28]

            if( pxNewQueue != NULL )
 8000c0a:	69fb      	ldr	r3, [r7, #28]
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	d01d      	beq.n	8000c4c <xQueueGenericCreate+0x94>
            {
                /* Jump past the queue structure to find the location of the queue
                 * storage area. */
                pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8000c10:	69fb      	ldr	r3, [r7, #28]
 8000c12:	617b      	str	r3, [r7, #20]
                pucQueueStorage += sizeof( Queue_t );
 8000c14:	697b      	ldr	r3, [r7, #20]
 8000c16:	3350      	adds	r3, #80	@ 0x50
 8000c18:	617b      	str	r3, [r7, #20]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
                #endif /* configSUPPORT_STATIC_ALLOCATION */

                prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8000c1a:	79fa      	ldrb	r2, [r7, #7]
 8000c1c:	69fb      	ldr	r3, [r7, #28]
 8000c1e:	9300      	str	r3, [sp, #0]
 8000c20:	4613      	mov	r3, r2
 8000c22:	697a      	ldr	r2, [r7, #20]
 8000c24:	68b9      	ldr	r1, [r7, #8]
 8000c26:	68f8      	ldr	r0, [r7, #12]
 8000c28:	f000 f815 	bl	8000c56 <prvInitialiseNewQueue>
            if( pxNewQueue != NULL )
 8000c2c:	e00e      	b.n	8000c4c <xQueueGenericCreate+0x94>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            configASSERT( pxNewQueue );
 8000c2e:	69fb      	ldr	r3, [r7, #28]
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d10b      	bne.n	8000c4c <xQueueGenericCreate+0x94>
    __asm volatile
 8000c34:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000c38:	f383 8811 	msr	BASEPRI, r3
 8000c3c:	f3bf 8f6f 	isb	sy
 8000c40:	f3bf 8f4f 	dsb	sy
 8000c44:	613b      	str	r3, [r7, #16]
}
 8000c46:	bf00      	nop
 8000c48:	bf00      	nop
 8000c4a:	e7fd      	b.n	8000c48 <xQueueGenericCreate+0x90>
            mtCOVERAGE_TEST_MARKER();
        }

        traceRETURN_xQueueGenericCreate( pxNewQueue );

        return pxNewQueue;
 8000c4c:	69fb      	ldr	r3, [r7, #28]
    }
 8000c4e:	4618      	mov	r0, r3
 8000c50:	3720      	adds	r7, #32
 8000c52:	46bd      	mov	sp, r7
 8000c54:	bd80      	pop	{r7, pc}

08000c56 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 8000c56:	b580      	push	{r7, lr}
 8000c58:	b084      	sub	sp, #16
 8000c5a:	af00      	add	r7, sp, #0
 8000c5c:	60f8      	str	r0, [r7, #12]
 8000c5e:	60b9      	str	r1, [r7, #8]
 8000c60:	607a      	str	r2, [r7, #4]
 8000c62:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 8000c64:	68bb      	ldr	r3, [r7, #8]
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	d103      	bne.n	8000c72 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8000c6a:	69bb      	ldr	r3, [r7, #24]
 8000c6c:	69ba      	ldr	r2, [r7, #24]
 8000c6e:	601a      	str	r2, [r3, #0]
 8000c70:	e002      	b.n	8000c78 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8000c72:	69bb      	ldr	r3, [r7, #24]
 8000c74:	687a      	ldr	r2, [r7, #4]
 8000c76:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 8000c78:	69bb      	ldr	r3, [r7, #24]
 8000c7a:	68fa      	ldr	r2, [r7, #12]
 8000c7c:	63da      	str	r2, [r3, #60]	@ 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 8000c7e:	69bb      	ldr	r3, [r7, #24]
 8000c80:	68ba      	ldr	r2, [r7, #8]
 8000c82:	641a      	str	r2, [r3, #64]	@ 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8000c84:	2101      	movs	r1, #1
 8000c86:	69b8      	ldr	r0, [r7, #24]
 8000c88:	f7ff ff04 	bl	8000a94 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
    {
        pxNewQueue->ucQueueType = ucQueueType;
 8000c8c:	69bb      	ldr	r3, [r7, #24]
 8000c8e:	78fa      	ldrb	r2, [r7, #3]
 8000c90:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        pxNewQueue->pxQueueSetContainer = NULL;
    }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 8000c94:	bf00      	nop
 8000c96:	3710      	adds	r7, #16
 8000c98:	46bd      	mov	sp, r7
 8000c9a:	bd80      	pop	{r7, pc}

08000c9c <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	b08c      	sub	sp, #48	@ 0x30
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	60f8      	str	r0, [r7, #12]
 8000ca4:	60b9      	str	r1, [r7, #8]
 8000ca6:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8000ca8:	2300      	movs	r3, #0
 8000caa:	62fb      	str	r3, [r7, #44]	@ 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8000cac:	68fb      	ldr	r3, [r7, #12]
 8000cae:	62bb      	str	r3, [r7, #40]	@ 0x28

    traceENTER_xQueueReceive( xQueue, pvBuffer, xTicksToWait );

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8000cb0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	d10b      	bne.n	8000cce <xQueueReceive+0x32>
    __asm volatile
 8000cb6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000cba:	f383 8811 	msr	BASEPRI, r3
 8000cbe:	f3bf 8f6f 	isb	sy
 8000cc2:	f3bf 8f4f 	dsb	sy
 8000cc6:	623b      	str	r3, [r7, #32]
}
 8000cc8:	bf00      	nop
 8000cca:	bf00      	nop
 8000ccc:	e7fd      	b.n	8000cca <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8000cce:	68bb      	ldr	r3, [r7, #8]
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	d103      	bne.n	8000cdc <xQueueReceive+0x40>
 8000cd4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000cd6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cd8:	2b00      	cmp	r3, #0
 8000cda:	d101      	bne.n	8000ce0 <xQueueReceive+0x44>
 8000cdc:	2301      	movs	r3, #1
 8000cde:	e000      	b.n	8000ce2 <xQueueReceive+0x46>
 8000ce0:	2300      	movs	r3, #0
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d10b      	bne.n	8000cfe <xQueueReceive+0x62>
    __asm volatile
 8000ce6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000cea:	f383 8811 	msr	BASEPRI, r3
 8000cee:	f3bf 8f6f 	isb	sy
 8000cf2:	f3bf 8f4f 	dsb	sy
 8000cf6:	61fb      	str	r3, [r7, #28]
}
 8000cf8:	bf00      	nop
 8000cfa:	bf00      	nop
 8000cfc:	e7fd      	b.n	8000cfa <xQueueReceive+0x5e>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8000cfe:	f001 f901 	bl	8001f04 <xTaskGetSchedulerState>
 8000d02:	4603      	mov	r3, r0
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	d102      	bne.n	8000d0e <xQueueReceive+0x72>
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	d101      	bne.n	8000d12 <xQueueReceive+0x76>
 8000d0e:	2301      	movs	r3, #1
 8000d10:	e000      	b.n	8000d14 <xQueueReceive+0x78>
 8000d12:	2300      	movs	r3, #0
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	d10b      	bne.n	8000d30 <xQueueReceive+0x94>
    __asm volatile
 8000d18:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000d1c:	f383 8811 	msr	BASEPRI, r3
 8000d20:	f3bf 8f6f 	isb	sy
 8000d24:	f3bf 8f4f 	dsb	sy
 8000d28:	61bb      	str	r3, [r7, #24]
}
 8000d2a:	bf00      	nop
 8000d2c:	bf00      	nop
 8000d2e:	e7fd      	b.n	8000d2c <xQueueReceive+0x90>
    }
    #endif

    for( ; ; )
    {
        taskENTER_CRITICAL();
 8000d30:	f001 fd98 	bl	8002864 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8000d34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000d36:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000d38:	627b      	str	r3, [r7, #36]	@ 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8000d3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d01f      	beq.n	8000d80 <xQueueReceive+0xe4>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8000d40:	68b9      	ldr	r1, [r7, #8]
 8000d42:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8000d44:	f000 f88c 	bl	8000e60 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = ( UBaseType_t ) ( uxMessagesWaiting - ( UBaseType_t ) 1 );
 8000d48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d4a:	1e5a      	subs	r2, r3, #1
 8000d4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000d4e:	639a      	str	r2, [r3, #56]	@ 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8000d50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000d52:	691b      	ldr	r3, [r3, #16]
 8000d54:	2b00      	cmp	r3, #0
 8000d56:	d00f      	beq.n	8000d78 <xQueueReceive+0xdc>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8000d58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000d5a:	3310      	adds	r3, #16
 8000d5c:	4618      	mov	r0, r3
 8000d5e:	f000 febb 	bl	8001ad8 <xTaskRemoveFromEventList>
 8000d62:	4603      	mov	r3, r0
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	d007      	beq.n	8000d78 <xQueueReceive+0xdc>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8000d68:	4b3c      	ldr	r3, [pc, #240]	@ (8000e5c <xQueueReceive+0x1c0>)
 8000d6a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8000d6e:	601a      	str	r2, [r3, #0]
 8000d70:	f3bf 8f4f 	dsb	sy
 8000d74:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8000d78:	f001 fda6 	bl	80028c8 <vPortExitCritical>

                traceRETURN_xQueueReceive( pdPASS );

                return pdPASS;
 8000d7c:	2301      	movs	r3, #1
 8000d7e:	e069      	b.n	8000e54 <xQueueReceive+0x1b8>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d103      	bne.n	8000d8e <xQueueReceive+0xf2>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8000d86:	f001 fd9f 	bl	80028c8 <vPortExitCritical>

                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    traceRETURN_xQueueReceive( errQUEUE_EMPTY );

                    return errQUEUE_EMPTY;
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	e062      	b.n	8000e54 <xQueueReceive+0x1b8>
                }
                else if( xEntryTimeSet == pdFALSE )
 8000d8e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	d106      	bne.n	8000da2 <xQueueReceive+0x106>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8000d94:	f107 0310 	add.w	r3, r7, #16
 8000d98:	4618      	mov	r0, r3
 8000d9a:	f000 ff77 	bl	8001c8c <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8000d9e:	2301      	movs	r3, #1
 8000da0:	62fb      	str	r3, [r7, #44]	@ 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8000da2:	f001 fd91 	bl	80028c8 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8000da6:	f000 fb8d 	bl	80014c4 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8000daa:	f001 fd5b 	bl	8002864 <vPortEnterCritical>
 8000dae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000db0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8000db4:	b25b      	sxtb	r3, r3
 8000db6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8000dba:	d103      	bne.n	8000dc4 <xQueueReceive+0x128>
 8000dbc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8000dc4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000dc6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8000dca:	b25b      	sxtb	r3, r3
 8000dcc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8000dd0:	d103      	bne.n	8000dda <xQueueReceive+0x13e>
 8000dd2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8000dda:	f001 fd75 	bl	80028c8 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8000dde:	1d3a      	adds	r2, r7, #4
 8000de0:	f107 0310 	add.w	r3, r7, #16
 8000de4:	4611      	mov	r1, r2
 8000de6:	4618      	mov	r0, r3
 8000de8:	f000 ff66 	bl	8001cb8 <xTaskCheckForTimeOut>
 8000dec:	4603      	mov	r3, r0
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d123      	bne.n	8000e3a <xQueueReceive+0x19e>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8000df2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8000df4:	f000 f8ac 	bl	8000f50 <prvIsQueueEmpty>
 8000df8:	4603      	mov	r3, r0
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d017      	beq.n	8000e2e <xQueueReceive+0x192>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8000dfe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000e00:	3324      	adds	r3, #36	@ 0x24
 8000e02:	687a      	ldr	r2, [r7, #4]
 8000e04:	4611      	mov	r1, r2
 8000e06:	4618      	mov	r0, r3
 8000e08:	f000 fdfa 	bl	8001a00 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8000e0c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8000e0e:	f000 f84d 	bl	8000eac <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8000e12:	f000 fb65 	bl	80014e0 <xTaskResumeAll>
 8000e16:	4603      	mov	r3, r0
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	d189      	bne.n	8000d30 <xQueueReceive+0x94>
                {
                    taskYIELD_WITHIN_API();
 8000e1c:	4b0f      	ldr	r3, [pc, #60]	@ (8000e5c <xQueueReceive+0x1c0>)
 8000e1e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8000e22:	601a      	str	r2, [r3, #0]
 8000e24:	f3bf 8f4f 	dsb	sy
 8000e28:	f3bf 8f6f 	isb	sy
 8000e2c:	e780      	b.n	8000d30 <xQueueReceive+0x94>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8000e2e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8000e30:	f000 f83c 	bl	8000eac <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8000e34:	f000 fb54 	bl	80014e0 <xTaskResumeAll>
 8000e38:	e77a      	b.n	8000d30 <xQueueReceive+0x94>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8000e3a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8000e3c:	f000 f836 	bl	8000eac <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8000e40:	f000 fb4e 	bl	80014e0 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8000e44:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8000e46:	f000 f883 	bl	8000f50 <prvIsQueueEmpty>
 8000e4a:	4603      	mov	r3, r0
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	f43f af6f 	beq.w	8000d30 <xQueueReceive+0x94>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                traceRETURN_xQueueReceive( errQUEUE_EMPTY );

                return errQUEUE_EMPTY;
 8000e52:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
}
 8000e54:	4618      	mov	r0, r3
 8000e56:	3730      	adds	r7, #48	@ 0x30
 8000e58:	46bd      	mov	sp, r7
 8000e5a:	bd80      	pop	{r7, pc}
 8000e5c:	e000ed04 	.word	0xe000ed04

08000e60 <prvCopyDataFromQueue>:
}
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	b082      	sub	sp, #8
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	6078      	str	r0, [r7, #4]
 8000e68:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d018      	beq.n	8000ea4 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	68da      	ldr	r2, [r3, #12]
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e7a:	441a      	add	r2, r3
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail )
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	68da      	ldr	r2, [r3, #12]
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	689b      	ldr	r3, [r3, #8]
 8000e88:	429a      	cmp	r2, r3
 8000e8a:	d303      	bcc.n	8000e94 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	681a      	ldr	r2, [r3, #0]
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize );
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	68d9      	ldr	r1, [r3, #12]
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e9c:	461a      	mov	r2, r3
 8000e9e:	6838      	ldr	r0, [r7, #0]
 8000ea0:	f002 fab5 	bl	800340e <memcpy>
    }
}
 8000ea4:	bf00      	nop
 8000ea6:	3708      	adds	r7, #8
 8000ea8:	46bd      	mov	sp, r7
 8000eaa:	bd80      	pop	{r7, pc}

08000eac <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b084      	sub	sp, #16
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8000eb4:	f001 fcd6 	bl	8002864 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8000ebe:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8000ec0:	e011      	b.n	8000ee6 <prvUnlockQueue+0x3a>
            }
            #else /* configUSE_QUEUE_SETS */
            {
                /* Tasks that are removed from the event list will get added to
                 * the pending ready list as the scheduler is still suspended. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d012      	beq.n	8000ef0 <prvUnlockQueue+0x44>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	3324      	adds	r3, #36	@ 0x24
 8000ece:	4618      	mov	r0, r3
 8000ed0:	f000 fe02 	bl	8001ad8 <xTaskRemoveFromEventList>
 8000ed4:	4603      	mov	r3, r0
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	d001      	beq.n	8000ede <prvUnlockQueue+0x32>
                    {
                        /* The task waiting has a higher priority so record that
                         * a context switch is required. */
                        vTaskMissedYield();
 8000eda:	f000 ff55 	bl	8001d88 <vTaskMissedYield>
                    break;
                }
            }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 8000ede:	7bfb      	ldrb	r3, [r7, #15]
 8000ee0:	3b01      	subs	r3, #1
 8000ee2:	b2db      	uxtb	r3, r3
 8000ee4:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8000ee6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	dce9      	bgt.n	8000ec2 <prvUnlockQueue+0x16>
 8000eee:	e000      	b.n	8000ef2 <prvUnlockQueue+0x46>
                    break;
 8000ef0:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	22ff      	movs	r2, #255	@ 0xff
 8000ef6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
    taskEXIT_CRITICAL();
 8000efa:	f001 fce5 	bl	80028c8 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8000efe:	f001 fcb1 	bl	8002864 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8000f08:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8000f0a:	e011      	b.n	8000f30 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	691b      	ldr	r3, [r3, #16]
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d012      	beq.n	8000f3a <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	3310      	adds	r3, #16
 8000f18:	4618      	mov	r0, r3
 8000f1a:	f000 fddd 	bl	8001ad8 <xTaskRemoveFromEventList>
 8000f1e:	4603      	mov	r3, r0
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d001      	beq.n	8000f28 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 8000f24:	f000 ff30 	bl	8001d88 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8000f28:	7bbb      	ldrb	r3, [r7, #14]
 8000f2a:	3b01      	subs	r3, #1
 8000f2c:	b2db      	uxtb	r3, r3
 8000f2e:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8000f30:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	dce9      	bgt.n	8000f0c <prvUnlockQueue+0x60>
 8000f38:	e000      	b.n	8000f3c <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 8000f3a:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	22ff      	movs	r2, #255	@ 0xff
 8000f40:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
    }
    taskEXIT_CRITICAL();
 8000f44:	f001 fcc0 	bl	80028c8 <vPortExitCritical>
}
 8000f48:	bf00      	nop
 8000f4a:	3710      	adds	r7, #16
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	bd80      	pop	{r7, pc}

08000f50 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b084      	sub	sp, #16
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8000f58:	f001 fc84 	bl	8002864 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d102      	bne.n	8000f6a <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8000f64:	2301      	movs	r3, #1
 8000f66:	60fb      	str	r3, [r7, #12]
 8000f68:	e001      	b.n	8000f6e <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8000f6e:	f001 fcab 	bl	80028c8 <vPortExitCritical>

    return xReturn;
 8000f72:	68fb      	ldr	r3, [r7, #12]
}
 8000f74:	4618      	mov	r0, r3
 8000f76:	3710      	adds	r7, #16
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	bd80      	pop	{r7, pc}

08000f7c <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName )
    {
 8000f7c:	b480      	push	{r7}
 8000f7e:	b087      	sub	sp, #28
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	6078      	str	r0, [r7, #4]
 8000f84:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;
        QueueRegistryItem_t * pxEntryToWrite = NULL;
 8000f86:	2300      	movs	r3, #0
 8000f88:	613b      	str	r3, [r7, #16]

        traceENTER_vQueueAddToRegistry( xQueue, pcQueueName );

        configASSERT( xQueue );
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d10b      	bne.n	8000fa8 <vQueueAddToRegistry+0x2c>
    __asm volatile
 8000f90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000f94:	f383 8811 	msr	BASEPRI, r3
 8000f98:	f3bf 8f6f 	isb	sy
 8000f9c:	f3bf 8f4f 	dsb	sy
 8000fa0:	60fb      	str	r3, [r7, #12]
}
 8000fa2:	bf00      	nop
 8000fa4:	bf00      	nop
 8000fa6:	e7fd      	b.n	8000fa4 <vQueueAddToRegistry+0x28>

        if( pcQueueName != NULL )
 8000fa8:	683b      	ldr	r3, [r7, #0]
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d024      	beq.n	8000ff8 <vQueueAddToRegistry+0x7c>
        {
            /* See if there is an empty space in the registry.  A NULL name denotes
             * a free slot. */
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8000fae:	2300      	movs	r3, #0
 8000fb0:	617b      	str	r3, [r7, #20]
 8000fb2:	e01e      	b.n	8000ff2 <vQueueAddToRegistry+0x76>
            {
                /* Replace an existing entry if the queue is already in the registry. */
                if( xQueue == xQueueRegistry[ ux ].xHandle )
 8000fb4:	4a18      	ldr	r2, [pc, #96]	@ (8001018 <vQueueAddToRegistry+0x9c>)
 8000fb6:	697b      	ldr	r3, [r7, #20]
 8000fb8:	00db      	lsls	r3, r3, #3
 8000fba:	4413      	add	r3, r2
 8000fbc:	685b      	ldr	r3, [r3, #4]
 8000fbe:	687a      	ldr	r2, [r7, #4]
 8000fc0:	429a      	cmp	r2, r3
 8000fc2:	d105      	bne.n	8000fd0 <vQueueAddToRegistry+0x54>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 8000fc4:	697b      	ldr	r3, [r7, #20]
 8000fc6:	00db      	lsls	r3, r3, #3
 8000fc8:	4a13      	ldr	r2, [pc, #76]	@ (8001018 <vQueueAddToRegistry+0x9c>)
 8000fca:	4413      	add	r3, r2
 8000fcc:	613b      	str	r3, [r7, #16]
                    break;
 8000fce:	e013      	b.n	8000ff8 <vQueueAddToRegistry+0x7c>
                }
                /* Otherwise, store in the next empty location */
                else if( ( pxEntryToWrite == NULL ) && ( xQueueRegistry[ ux ].pcQueueName == NULL ) )
 8000fd0:	693b      	ldr	r3, [r7, #16]
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d10a      	bne.n	8000fec <vQueueAddToRegistry+0x70>
 8000fd6:	4a10      	ldr	r2, [pc, #64]	@ (8001018 <vQueueAddToRegistry+0x9c>)
 8000fd8:	697b      	ldr	r3, [r7, #20]
 8000fda:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d104      	bne.n	8000fec <vQueueAddToRegistry+0x70>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 8000fe2:	697b      	ldr	r3, [r7, #20]
 8000fe4:	00db      	lsls	r3, r3, #3
 8000fe6:	4a0c      	ldr	r2, [pc, #48]	@ (8001018 <vQueueAddToRegistry+0x9c>)
 8000fe8:	4413      	add	r3, r2
 8000fea:	613b      	str	r3, [r7, #16]
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8000fec:	697b      	ldr	r3, [r7, #20]
 8000fee:	3301      	adds	r3, #1
 8000ff0:	617b      	str	r3, [r7, #20]
 8000ff2:	697b      	ldr	r3, [r7, #20]
 8000ff4:	2b07      	cmp	r3, #7
 8000ff6:	d9dd      	bls.n	8000fb4 <vQueueAddToRegistry+0x38>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }

        if( pxEntryToWrite != NULL )
 8000ff8:	693b      	ldr	r3, [r7, #16]
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d005      	beq.n	800100a <vQueueAddToRegistry+0x8e>
        {
            /* Store the information on this queue. */
            pxEntryToWrite->pcQueueName = pcQueueName;
 8000ffe:	693b      	ldr	r3, [r7, #16]
 8001000:	683a      	ldr	r2, [r7, #0]
 8001002:	601a      	str	r2, [r3, #0]
            pxEntryToWrite->xHandle = xQueue;
 8001004:	693b      	ldr	r3, [r7, #16]
 8001006:	687a      	ldr	r2, [r7, #4]
 8001008:	605a      	str	r2, [r3, #4]

            traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
        }

        traceRETURN_vQueueAddToRegistry();
    }
 800100a:	bf00      	nop
 800100c:	371c      	adds	r7, #28
 800100e:	46bd      	mov	sp, r7
 8001010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001014:	4770      	bx	lr
 8001016:	bf00      	nop
 8001018:	20000084 	.word	0x20000084

0800101c <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 800101c:	b580      	push	{r7, lr}
 800101e:	b086      	sub	sp, #24
 8001020:	af00      	add	r7, sp, #0
 8001022:	60f8      	str	r0, [r7, #12]
 8001024:	60b9      	str	r1, [r7, #8]
 8001026:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 8001028:	68fb      	ldr	r3, [r7, #12]
 800102a:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 800102c:	f001 fc1a 	bl	8002864 <vPortEnterCritical>
 8001030:	697b      	ldr	r3, [r7, #20]
 8001032:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8001036:	b25b      	sxtb	r3, r3
 8001038:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800103c:	d103      	bne.n	8001046 <vQueueWaitForMessageRestricted+0x2a>
 800103e:	697b      	ldr	r3, [r7, #20]
 8001040:	2200      	movs	r2, #0
 8001042:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001046:	697b      	ldr	r3, [r7, #20]
 8001048:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800104c:	b25b      	sxtb	r3, r3
 800104e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001052:	d103      	bne.n	800105c <vQueueWaitForMessageRestricted+0x40>
 8001054:	697b      	ldr	r3, [r7, #20]
 8001056:	2200      	movs	r2, #0
 8001058:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800105c:	f001 fc34 	bl	80028c8 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8001060:	697b      	ldr	r3, [r7, #20]
 8001062:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001064:	2b00      	cmp	r3, #0
 8001066:	d106      	bne.n	8001076 <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8001068:	697b      	ldr	r3, [r7, #20]
 800106a:	3324      	adds	r3, #36	@ 0x24
 800106c:	687a      	ldr	r2, [r7, #4]
 800106e:	68b9      	ldr	r1, [r7, #8]
 8001070:	4618      	mov	r0, r3
 8001072:	f000 fceb 	bl	8001a4c <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 8001076:	6978      	ldr	r0, [r7, #20]
 8001078:	f7ff ff18 	bl	8000eac <prvUnlockQueue>

        traceRETURN_vQueueWaitForMessageRestricted();
    }
 800107c:	bf00      	nop
 800107e:	3718      	adds	r7, #24
 8001080:	46bd      	mov	sp, r7
 8001082:	bd80      	pop	{r7, pc}

08001084 <prvCreateTask>:
                                  const char * const pcName,
                                  const configSTACK_DEPTH_TYPE uxStackDepth,
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask )
    {
 8001084:	b580      	push	{r7, lr}
 8001086:	b08a      	sub	sp, #40	@ 0x28
 8001088:	af04      	add	r7, sp, #16
 800108a:	60f8      	str	r0, [r7, #12]
 800108c:	60b9      	str	r1, [r7, #8]
 800108e:	607a      	str	r2, [r7, #4]
 8001090:	603b      	str	r3, [r7, #0]

            /* Allocate space for the stack used by the task being created. */
            /* MISRA Ref 11.5.1 [Malloc memory assignment] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
            /* coverity[misra_c_2012_rule_11_5_violation] */
            pxStack = pvPortMallocStack( ( ( ( size_t ) uxStackDepth ) * sizeof( StackType_t ) ) );
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	009b      	lsls	r3, r3, #2
 8001096:	4618      	mov	r0, r3
 8001098:	f001 fcc4 	bl	8002a24 <pvPortMalloc>
 800109c:	6138      	str	r0, [r7, #16]

            if( pxStack != NULL )
 800109e:	693b      	ldr	r3, [r7, #16]
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d013      	beq.n	80010cc <prvCreateTask+0x48>
            {
                /* Allocate space for the TCB. */
                /* MISRA Ref 11.5.1 [Malloc memory assignment] */
                /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                /* coverity[misra_c_2012_rule_11_5_violation] */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
 80010a4:	2058      	movs	r0, #88	@ 0x58
 80010a6:	f001 fcbd 	bl	8002a24 <pvPortMalloc>
 80010aa:	6178      	str	r0, [r7, #20]

                if( pxNewTCB != NULL )
 80010ac:	697b      	ldr	r3, [r7, #20]
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d008      	beq.n	80010c4 <prvCreateTask+0x40>
                {
                    ( void ) memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 80010b2:	2258      	movs	r2, #88	@ 0x58
 80010b4:	2100      	movs	r1, #0
 80010b6:	6978      	ldr	r0, [r7, #20]
 80010b8:	f002 f92e 	bl	8003318 <memset>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
 80010bc:	697b      	ldr	r3, [r7, #20]
 80010be:	693a      	ldr	r2, [r7, #16]
 80010c0:	631a      	str	r2, [r3, #48]	@ 0x30
 80010c2:	e005      	b.n	80010d0 <prvCreateTask+0x4c>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
 80010c4:	6938      	ldr	r0, [r7, #16]
 80010c6:	f001 fde5 	bl	8002c94 <vPortFree>
 80010ca:	e001      	b.n	80010d0 <prvCreateTask+0x4c>
                }
            }
            else
            {
                pxNewTCB = NULL;
 80010cc:	2300      	movs	r3, #0
 80010ce:	617b      	str	r3, [r7, #20]
            }
        }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 80010d0:	697b      	ldr	r3, [r7, #20]
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d00d      	beq.n	80010f2 <prvCreateTask+0x6e>
                 * task was created dynamically in case it is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, uxStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80010d6:	2300      	movs	r3, #0
 80010d8:	9303      	str	r3, [sp, #12]
 80010da:	697b      	ldr	r3, [r7, #20]
 80010dc:	9302      	str	r3, [sp, #8]
 80010de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010e0:	9301      	str	r3, [sp, #4]
 80010e2:	6a3b      	ldr	r3, [r7, #32]
 80010e4:	9300      	str	r3, [sp, #0]
 80010e6:	683b      	ldr	r3, [r7, #0]
 80010e8:	687a      	ldr	r2, [r7, #4]
 80010ea:	68b9      	ldr	r1, [r7, #8]
 80010ec:	68f8      	ldr	r0, [r7, #12]
 80010ee:	f000 f828 	bl	8001142 <prvInitialiseNewTask>
        }

        return pxNewTCB;
 80010f2:	697b      	ldr	r3, [r7, #20]
    }
 80010f4:	4618      	mov	r0, r3
 80010f6:	3718      	adds	r7, #24
 80010f8:	46bd      	mov	sp, r7
 80010fa:	bd80      	pop	{r7, pc}

080010fc <xTaskCreate>:
                            const char * const pcName,
                            const configSTACK_DEPTH_TYPE uxStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b088      	sub	sp, #32
 8001100:	af02      	add	r7, sp, #8
 8001102:	60f8      	str	r0, [r7, #12]
 8001104:	60b9      	str	r1, [r7, #8]
 8001106:	607a      	str	r2, [r7, #4]
 8001108:	603b      	str	r3, [r7, #0]
        TCB_t * pxNewTCB;
        BaseType_t xReturn;

        traceENTER_xTaskCreate( pxTaskCode, pcName, uxStackDepth, pvParameters, uxPriority, pxCreatedTask );

        pxNewTCB = prvCreateTask( pxTaskCode, pcName, uxStackDepth, pvParameters, uxPriority, pxCreatedTask );
 800110a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800110c:	9301      	str	r3, [sp, #4]
 800110e:	6a3b      	ldr	r3, [r7, #32]
 8001110:	9300      	str	r3, [sp, #0]
 8001112:	683b      	ldr	r3, [r7, #0]
 8001114:	687a      	ldr	r2, [r7, #4]
 8001116:	68b9      	ldr	r1, [r7, #8]
 8001118:	68f8      	ldr	r0, [r7, #12]
 800111a:	f7ff ffb3 	bl	8001084 <prvCreateTask>
 800111e:	6138      	str	r0, [r7, #16]

        if( pxNewTCB != NULL )
 8001120:	693b      	ldr	r3, [r7, #16]
 8001122:	2b00      	cmp	r3, #0
 8001124:	d005      	beq.n	8001132 <xTaskCreate+0x36>
                /* Set the task's affinity before scheduling it. */
                pxNewTCB->uxCoreAffinityMask = configTASK_DEFAULT_CORE_AFFINITY;
            }
            #endif

            prvAddNewTaskToReadyList( pxNewTCB );
 8001126:	6938      	ldr	r0, [r7, #16]
 8001128:	f000 f89c 	bl	8001264 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 800112c:	2301      	movs	r3, #1
 800112e:	617b      	str	r3, [r7, #20]
 8001130:	e002      	b.n	8001138 <xTaskCreate+0x3c>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8001132:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001136:	617b      	str	r3, [r7, #20]
        }

        traceRETURN_xTaskCreate( xReturn );

        return xReturn;
 8001138:	697b      	ldr	r3, [r7, #20]
    }
 800113a:	4618      	mov	r0, r3
 800113c:	3718      	adds	r7, #24
 800113e:	46bd      	mov	sp, r7
 8001140:	bd80      	pop	{r7, pc}

08001142 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8001142:	b580      	push	{r7, lr}
 8001144:	b088      	sub	sp, #32
 8001146:	af00      	add	r7, sp, #0
 8001148:	60f8      	str	r0, [r7, #12]
 800114a:	60b9      	str	r1, [r7, #8]
 800114c:	607a      	str	r2, [r7, #4]
 800114e:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
    {
        /* Fill the stack with a known value to assist debugging. */
        ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) uxStackDepth * sizeof( StackType_t ) );
 8001150:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001152:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	009b      	lsls	r3, r3, #2
 8001158:	461a      	mov	r2, r3
 800115a:	21a5      	movs	r1, #165	@ 0xa5
 800115c:	f002 f8dc 	bl	8003318 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ uxStackDepth - ( configSTACK_DEPTH_TYPE ) 1 ] );
 8001160:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001162:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800116a:	3b01      	subs	r3, #1
 800116c:	009b      	lsls	r3, r3, #2
 800116e:	4413      	add	r3, r2
 8001170:	61bb      	str	r3, [r7, #24]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
 8001172:	69bb      	ldr	r3, [r7, #24]
 8001174:	f023 0307 	bic.w	r3, r3, #7
 8001178:	61bb      	str	r3, [r7, #24]

        /* Check the alignment of the calculated top of stack is correct. */
        configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0U ) );
 800117a:	69bb      	ldr	r3, [r7, #24]
 800117c:	f003 0307 	and.w	r3, r3, #7
 8001180:	2b00      	cmp	r3, #0
 8001182:	d00b      	beq.n	800119c <prvInitialiseNewTask+0x5a>
    __asm volatile
 8001184:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001188:	f383 8811 	msr	BASEPRI, r3
 800118c:	f3bf 8f6f 	isb	sy
 8001190:	f3bf 8f4f 	dsb	sy
 8001194:	617b      	str	r3, [r7, #20]
}
 8001196:	bf00      	nop
 8001198:	bf00      	nop
 800119a:	e7fd      	b.n	8001198 <prvInitialiseNewTask+0x56>
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( uxStackDepth - ( configSTACK_DEPTH_TYPE ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 800119c:	68bb      	ldr	r3, [r7, #8]
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d01e      	beq.n	80011e0 <prvInitialiseNewTask+0x9e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80011a2:	2300      	movs	r3, #0
 80011a4:	61fb      	str	r3, [r7, #28]
 80011a6:	e012      	b.n	80011ce <prvInitialiseNewTask+0x8c>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80011a8:	68ba      	ldr	r2, [r7, #8]
 80011aa:	69fb      	ldr	r3, [r7, #28]
 80011ac:	4413      	add	r3, r2
 80011ae:	7819      	ldrb	r1, [r3, #0]
 80011b0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80011b2:	69fb      	ldr	r3, [r7, #28]
 80011b4:	4413      	add	r3, r2
 80011b6:	3334      	adds	r3, #52	@ 0x34
 80011b8:	460a      	mov	r2, r1
 80011ba:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 80011bc:	68ba      	ldr	r2, [r7, #8]
 80011be:	69fb      	ldr	r3, [r7, #28]
 80011c0:	4413      	add	r3, r2
 80011c2:	781b      	ldrb	r3, [r3, #0]
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d006      	beq.n	80011d6 <prvInitialiseNewTask+0x94>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80011c8:	69fb      	ldr	r3, [r7, #28]
 80011ca:	3301      	adds	r3, #1
 80011cc:	61fb      	str	r3, [r7, #28]
 80011ce:	69fb      	ldr	r3, [r7, #28]
 80011d0:	2b09      	cmp	r3, #9
 80011d2:	d9e9      	bls.n	80011a8 <prvInitialiseNewTask+0x66>
 80011d4:	e000      	b.n	80011d8 <prvInitialiseNewTask+0x96>
            {
                break;
 80011d6:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1U ] = '\0';
 80011d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80011da:	2200      	movs	r2, #0
 80011dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    {
        mtCOVERAGE_TEST_MARKER();
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 80011e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80011e2:	2b04      	cmp	r3, #4
 80011e4:	d90b      	bls.n	80011fe <prvInitialiseNewTask+0xbc>
    __asm volatile
 80011e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80011ea:	f383 8811 	msr	BASEPRI, r3
 80011ee:	f3bf 8f6f 	isb	sy
 80011f2:	f3bf 8f4f 	dsb	sy
 80011f6:	613b      	str	r3, [r7, #16]
}
 80011f8:	bf00      	nop
 80011fa:	bf00      	nop
 80011fc:	e7fd      	b.n	80011fa <prvInitialiseNewTask+0xb8>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80011fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001200:	2b04      	cmp	r3, #4
 8001202:	d901      	bls.n	8001208 <prvInitialiseNewTask+0xc6>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8001204:	2304      	movs	r3, #4
 8001206:	62bb      	str	r3, [r7, #40]	@ 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8001208:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800120a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800120c:	62da      	str	r2, [r3, #44]	@ 0x2c
    #if ( configUSE_MUTEXES == 1 )
    {
        pxNewTCB->uxBasePriority = uxPriority;
 800120e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001210:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001212:	649a      	str	r2, [r3, #72]	@ 0x48
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8001214:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001216:	3304      	adds	r3, #4
 8001218:	4618      	mov	r0, r3
 800121a:	f7ff fbcb 	bl	80009b4 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800121e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001220:	3318      	adds	r3, #24
 8001222:	4618      	mov	r0, r3
 8001224:	f7ff fbc6 	bl	80009b4 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8001228:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800122a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800122c:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority );
 800122e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001230:	f1c3 0205 	rsb	r2, r3, #5
 8001234:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001236:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8001238:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800123a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800123c:	625a      	str	r2, [r3, #36]	@ 0x24
            }
            #endif /* portSTACK_GROWTH */
        }
        #else /* portHAS_STACK_OVERFLOW_CHECKING */
        {
            pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800123e:	683a      	ldr	r2, [r7, #0]
 8001240:	68f9      	ldr	r1, [r7, #12]
 8001242:	69b8      	ldr	r0, [r7, #24]
 8001244:	f001 f994 	bl	8002570 <pxPortInitialiseStack>
 8001248:	4602      	mov	r2, r0
 800124a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800124c:	601a      	str	r2, [r3, #0]
            pxNewTCB->uxTaskAttributes |= taskATTRIBUTE_IS_IDLE;
        }
    }
    #endif /* #if ( configNUMBER_OF_CORES > 1 ) */

    if( pxCreatedTask != NULL )
 800124e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001250:	2b00      	cmp	r3, #0
 8001252:	d002      	beq.n	800125a <prvInitialiseNewTask+0x118>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8001254:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001256:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001258:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800125a:	bf00      	nop
 800125c:	3720      	adds	r7, #32
 800125e:	46bd      	mov	sp, r7
 8001260:	bd80      	pop	{r7, pc}
	...

08001264 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

#if ( configNUMBER_OF_CORES == 1 )

    static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
    {
 8001264:	b580      	push	{r7, lr}
 8001266:	b084      	sub	sp, #16
 8001268:	af00      	add	r7, sp, #0
 800126a:	6078      	str	r0, [r7, #4]
        /* Ensure interrupts don't access the task lists while the lists are being
         * updated. */
        taskENTER_CRITICAL();
 800126c:	f001 fafa 	bl	8002864 <vPortEnterCritical>
        {
            uxCurrentNumberOfTasks = ( UBaseType_t ) ( uxCurrentNumberOfTasks + 1U );
 8001270:	4b41      	ldr	r3, [pc, #260]	@ (8001378 <prvAddNewTaskToReadyList+0x114>)
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	3301      	adds	r3, #1
 8001276:	4a40      	ldr	r2, [pc, #256]	@ (8001378 <prvAddNewTaskToReadyList+0x114>)
 8001278:	6013      	str	r3, [r2, #0]

            if( pxCurrentTCB == NULL )
 800127a:	4b40      	ldr	r3, [pc, #256]	@ (800137c <prvAddNewTaskToReadyList+0x118>)
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	2b00      	cmp	r3, #0
 8001280:	d109      	bne.n	8001296 <prvAddNewTaskToReadyList+0x32>
            {
                /* There are no other tasks, or all the other tasks are in
                 * the suspended state - make this the current task. */
                pxCurrentTCB = pxNewTCB;
 8001282:	4a3e      	ldr	r2, [pc, #248]	@ (800137c <prvAddNewTaskToReadyList+0x118>)
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	6013      	str	r3, [r2, #0]

                if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8001288:	4b3b      	ldr	r3, [pc, #236]	@ (8001378 <prvAddNewTaskToReadyList+0x114>)
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	2b01      	cmp	r3, #1
 800128e:	d110      	bne.n	80012b2 <prvAddNewTaskToReadyList+0x4e>
                {
                    /* This is the first task to be created so do the preliminary
                     * initialisation required.  We will not recover if this call
                     * fails, but we will report the failure. */
                    prvInitialiseTaskLists();
 8001290:	f000 fd9e 	bl	8001dd0 <prvInitialiseTaskLists>
 8001294:	e00d      	b.n	80012b2 <prvAddNewTaskToReadyList+0x4e>
            else
            {
                /* If the scheduler is not already running, make this task the
                 * current task if it is the highest priority task to be created
                 * so far. */
                if( xSchedulerRunning == pdFALSE )
 8001296:	4b3a      	ldr	r3, [pc, #232]	@ (8001380 <prvAddNewTaskToReadyList+0x11c>)
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	2b00      	cmp	r3, #0
 800129c:	d109      	bne.n	80012b2 <prvAddNewTaskToReadyList+0x4e>
                {
                    if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800129e:	4b37      	ldr	r3, [pc, #220]	@ (800137c <prvAddNewTaskToReadyList+0x118>)
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80012a8:	429a      	cmp	r2, r3
 80012aa:	d802      	bhi.n	80012b2 <prvAddNewTaskToReadyList+0x4e>
                    {
                        pxCurrentTCB = pxNewTCB;
 80012ac:	4a33      	ldr	r2, [pc, #204]	@ (800137c <prvAddNewTaskToReadyList+0x118>)
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	6013      	str	r3, [r2, #0]
                {
                    mtCOVERAGE_TEST_MARKER();
                }
            }

            uxTaskNumber++;
 80012b2:	4b34      	ldr	r3, [pc, #208]	@ (8001384 <prvAddNewTaskToReadyList+0x120>)
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	3301      	adds	r3, #1
 80012b8:	4a32      	ldr	r2, [pc, #200]	@ (8001384 <prvAddNewTaskToReadyList+0x120>)
 80012ba:	6013      	str	r3, [r2, #0]

            #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 80012bc:	4b31      	ldr	r3, [pc, #196]	@ (8001384 <prvAddNewTaskToReadyList+0x120>)
 80012be:	681a      	ldr	r2, [r3, #0]
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	641a      	str	r2, [r3, #64]	@ 0x40
            }
            #endif /* configUSE_TRACE_FACILITY */
            traceTASK_CREATE( pxNewTCB );

            prvAddTaskToReadyList( pxNewTCB );
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80012c8:	2201      	movs	r2, #1
 80012ca:	409a      	lsls	r2, r3
 80012cc:	4b2e      	ldr	r3, [pc, #184]	@ (8001388 <prvAddNewTaskToReadyList+0x124>)
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	4313      	orrs	r3, r2
 80012d2:	4a2d      	ldr	r2, [pc, #180]	@ (8001388 <prvAddNewTaskToReadyList+0x124>)
 80012d4:	6013      	str	r3, [r2, #0]
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80012da:	492c      	ldr	r1, [pc, #176]	@ (800138c <prvAddNewTaskToReadyList+0x128>)
 80012dc:	4613      	mov	r3, r2
 80012de:	009b      	lsls	r3, r3, #2
 80012e0:	4413      	add	r3, r2
 80012e2:	009b      	lsls	r3, r3, #2
 80012e4:	440b      	add	r3, r1
 80012e6:	3304      	adds	r3, #4
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	60fb      	str	r3, [r7, #12]
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	68fa      	ldr	r2, [r7, #12]
 80012f0:	609a      	str	r2, [r3, #8]
 80012f2:	68fb      	ldr	r3, [r7, #12]
 80012f4:	689a      	ldr	r2, [r3, #8]
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	60da      	str	r2, [r3, #12]
 80012fa:	68fb      	ldr	r3, [r7, #12]
 80012fc:	689b      	ldr	r3, [r3, #8]
 80012fe:	687a      	ldr	r2, [r7, #4]
 8001300:	3204      	adds	r2, #4
 8001302:	605a      	str	r2, [r3, #4]
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	1d1a      	adds	r2, r3, #4
 8001308:	68fb      	ldr	r3, [r7, #12]
 800130a:	609a      	str	r2, [r3, #8]
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001310:	4613      	mov	r3, r2
 8001312:	009b      	lsls	r3, r3, #2
 8001314:	4413      	add	r3, r2
 8001316:	009b      	lsls	r3, r3, #2
 8001318:	4a1c      	ldr	r2, [pc, #112]	@ (800138c <prvAddNewTaskToReadyList+0x128>)
 800131a:	441a      	add	r2, r3
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	615a      	str	r2, [r3, #20]
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001324:	4919      	ldr	r1, [pc, #100]	@ (800138c <prvAddNewTaskToReadyList+0x128>)
 8001326:	4613      	mov	r3, r2
 8001328:	009b      	lsls	r3, r3, #2
 800132a:	4413      	add	r3, r2
 800132c:	009b      	lsls	r3, r3, #2
 800132e:	440b      	add	r3, r1
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	687a      	ldr	r2, [r7, #4]
 8001334:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8001336:	1c59      	adds	r1, r3, #1
 8001338:	4814      	ldr	r0, [pc, #80]	@ (800138c <prvAddNewTaskToReadyList+0x128>)
 800133a:	4613      	mov	r3, r2
 800133c:	009b      	lsls	r3, r3, #2
 800133e:	4413      	add	r3, r2
 8001340:	009b      	lsls	r3, r3, #2
 8001342:	4403      	add	r3, r0
 8001344:	6019      	str	r1, [r3, #0]

            portSETUP_TCB( pxNewTCB );
        }
        taskEXIT_CRITICAL();
 8001346:	f001 fabf 	bl	80028c8 <vPortExitCritical>

        if( xSchedulerRunning != pdFALSE )
 800134a:	4b0d      	ldr	r3, [pc, #52]	@ (8001380 <prvAddNewTaskToReadyList+0x11c>)
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	2b00      	cmp	r3, #0
 8001350:	d00e      	beq.n	8001370 <prvAddNewTaskToReadyList+0x10c>
        {
            /* If the created task is of a higher priority than the current task
             * then it should run now. */
            taskYIELD_ANY_CORE_IF_USING_PREEMPTION( pxNewTCB );
 8001352:	4b0a      	ldr	r3, [pc, #40]	@ (800137c <prvAddNewTaskToReadyList+0x118>)
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800135c:	429a      	cmp	r2, r3
 800135e:	d207      	bcs.n	8001370 <prvAddNewTaskToReadyList+0x10c>
 8001360:	4b0b      	ldr	r3, [pc, #44]	@ (8001390 <prvAddNewTaskToReadyList+0x12c>)
 8001362:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001366:	601a      	str	r2, [r3, #0]
 8001368:	f3bf 8f4f 	dsb	sy
 800136c:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8001370:	bf00      	nop
 8001372:	3710      	adds	r7, #16
 8001374:	46bd      	mov	sp, r7
 8001376:	bd80      	pop	{r7, pc}
 8001378:	2000019c 	.word	0x2000019c
 800137c:	200000c4 	.word	0x200000c4
 8001380:	200001a8 	.word	0x200001a8
 8001384:	200001b8 	.word	0x200001b8
 8001388:	200001a4 	.word	0x200001a4
 800138c:	200000c8 	.word	0x200000c8
 8001390:	e000ed04 	.word	0xe000ed04

08001394 <prvCreateIdleTasks>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

static BaseType_t prvCreateIdleTasks( void )
{
 8001394:	b580      	push	{r7, lr}
 8001396:	b08a      	sub	sp, #40	@ 0x28
 8001398:	af02      	add	r7, sp, #8
    BaseType_t xReturn = pdPASS;
 800139a:	2301      	movs	r3, #1
 800139c:	61fb      	str	r3, [r7, #28]
    BaseType_t xCoreID;
    char cIdleName[ configMAX_TASK_NAME_LEN ] = { 0 };
 800139e:	1d3b      	adds	r3, r7, #4
 80013a0:	2200      	movs	r2, #0
 80013a2:	601a      	str	r2, [r3, #0]
 80013a4:	605a      	str	r2, [r3, #4]
 80013a6:	811a      	strh	r2, [r3, #8]
    TaskFunction_t pxIdleTaskFunction = NULL;
 80013a8:	2300      	movs	r3, #0
 80013aa:	613b      	str	r3, [r7, #16]
    UBaseType_t xIdleTaskNameIndex;

    /* MISRA Ref 14.3.1 [Configuration dependent invariant] */
    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-143. */
    /* coverity[misra_c_2012_rule_14_3_violation] */
    for( xIdleTaskNameIndex = 0U; xIdleTaskNameIndex < ( configMAX_TASK_NAME_LEN - taskRESERVED_TASK_NAME_LENGTH ); xIdleTaskNameIndex++ )
 80013ac:	2300      	movs	r3, #0
 80013ae:	617b      	str	r3, [r7, #20]
 80013b0:	e011      	b.n	80013d6 <prvCreateIdleTasks+0x42>
    {
        /* MISRA Ref 18.1.1 [Configuration dependent bounds checking] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-181. */
        /* coverity[misra_c_2012_rule_18_1_violation] */
        cIdleName[ xIdleTaskNameIndex ] = configIDLE_TASK_NAME[ xIdleTaskNameIndex ];
 80013b2:	4a1f      	ldr	r2, [pc, #124]	@ (8001430 <prvCreateIdleTasks+0x9c>)
 80013b4:	697b      	ldr	r3, [r7, #20]
 80013b6:	4413      	add	r3, r2
 80013b8:	7819      	ldrb	r1, [r3, #0]
 80013ba:	1d3a      	adds	r2, r7, #4
 80013bc:	697b      	ldr	r3, [r7, #20]
 80013be:	4413      	add	r3, r2
 80013c0:	460a      	mov	r2, r1
 80013c2:	701a      	strb	r2, [r3, #0]

        if( cIdleName[ xIdleTaskNameIndex ] == ( char ) 0x00 )
 80013c4:	1d3a      	adds	r2, r7, #4
 80013c6:	697b      	ldr	r3, [r7, #20]
 80013c8:	4413      	add	r3, r2
 80013ca:	781b      	ldrb	r3, [r3, #0]
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d006      	beq.n	80013de <prvCreateIdleTasks+0x4a>
    for( xIdleTaskNameIndex = 0U; xIdleTaskNameIndex < ( configMAX_TASK_NAME_LEN - taskRESERVED_TASK_NAME_LENGTH ); xIdleTaskNameIndex++ )
 80013d0:	697b      	ldr	r3, [r7, #20]
 80013d2:	3301      	adds	r3, #1
 80013d4:	617b      	str	r3, [r7, #20]
 80013d6:	697b      	ldr	r3, [r7, #20]
 80013d8:	2b08      	cmp	r3, #8
 80013da:	d9ea      	bls.n	80013b2 <prvCreateIdleTasks+0x1e>
 80013dc:	e000      	b.n	80013e0 <prvCreateIdleTasks+0x4c>
        {
            break;
 80013de:	bf00      	nop
            mtCOVERAGE_TEST_MARKER();
        }
    }

    /* Ensure null termination. */
    cIdleName[ xIdleTaskNameIndex ] = '\0';
 80013e0:	1d3a      	adds	r2, r7, #4
 80013e2:	697b      	ldr	r3, [r7, #20]
 80013e4:	4413      	add	r3, r2
 80013e6:	2200      	movs	r2, #0
 80013e8:	701a      	strb	r2, [r3, #0]

    /* Add each idle task at the lowest priority. */
    for( xCoreID = ( BaseType_t ) 0; xCoreID < ( BaseType_t ) configNUMBER_OF_CORES; xCoreID++ )
 80013ea:	2300      	movs	r3, #0
 80013ec:	61bb      	str	r3, [r7, #24]
 80013ee:	e015      	b.n	800141c <prvCreateIdleTasks+0x88>
    {
        #if ( configNUMBER_OF_CORES == 1 )
        {
            pxIdleTaskFunction = &prvIdleTask;
 80013f0:	4b10      	ldr	r3, [pc, #64]	@ (8001434 <prvCreateIdleTasks+0xa0>)
 80013f2:	613b      	str	r3, [r7, #16]
            }
        }
        #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( pxIdleTaskFunction,
 80013f4:	69bb      	ldr	r3, [r7, #24]
 80013f6:	009b      	lsls	r3, r3, #2
 80013f8:	4a0f      	ldr	r2, [pc, #60]	@ (8001438 <prvCreateIdleTasks+0xa4>)
 80013fa:	4413      	add	r3, r2
 80013fc:	1d39      	adds	r1, r7, #4
 80013fe:	9301      	str	r3, [sp, #4]
 8001400:	2300      	movs	r3, #0
 8001402:	9300      	str	r3, [sp, #0]
 8001404:	2300      	movs	r3, #0
 8001406:	2282      	movs	r2, #130	@ 0x82
 8001408:	6938      	ldr	r0, [r7, #16]
 800140a:	f7ff fe77 	bl	80010fc <xTaskCreate>
 800140e:	61f8      	str	r0, [r7, #28]
                                   &xIdleTaskHandles[ xCoreID ] );
        }
        #endif /* configSUPPORT_STATIC_ALLOCATION */

        /* Break the loop if any of the idle task is failed to be created. */
        if( xReturn != pdPASS )
 8001410:	69fb      	ldr	r3, [r7, #28]
 8001412:	2b01      	cmp	r3, #1
 8001414:	d106      	bne.n	8001424 <prvCreateIdleTasks+0x90>
    for( xCoreID = ( BaseType_t ) 0; xCoreID < ( BaseType_t ) configNUMBER_OF_CORES; xCoreID++ )
 8001416:	69bb      	ldr	r3, [r7, #24]
 8001418:	3301      	adds	r3, #1
 800141a:	61bb      	str	r3, [r7, #24]
 800141c:	69bb      	ldr	r3, [r7, #24]
 800141e:	2b00      	cmp	r3, #0
 8001420:	dde6      	ble.n	80013f0 <prvCreateIdleTasks+0x5c>
 8001422:	e000      	b.n	8001426 <prvCreateIdleTasks+0x92>
        {
            break;
 8001424:	bf00      	nop
            }
            #endif
        }
    }

    return xReturn;
 8001426:	69fb      	ldr	r3, [r7, #28]
}
 8001428:	4618      	mov	r0, r3
 800142a:	3720      	adds	r7, #32
 800142c:	46bd      	mov	sp, r7
 800142e:	bd80      	pop	{r7, pc}
 8001430:	08003900 	.word	0x08003900
 8001434:	08001da1 	.word	0x08001da1
 8001438:	200001c0 	.word	0x200001c0

0800143c <vTaskStartScheduler>:

/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800143c:	b580      	push	{r7, lr}
 800143e:	b084      	sub	sp, #16
 8001440:	af00      	add	r7, sp, #0
         * the number of bits as confNUMBER_OF_CORES. */
        configASSERT( ( sizeof( UBaseType_t ) * taskBITS_PER_BYTE ) >= configNUMBER_OF_CORES );
    }
    #endif /* #if ( configUSE_CORE_AFFINITY == 1 ) && ( configNUMBER_OF_CORES > 1 ) */

    xReturn = prvCreateIdleTasks();
 8001442:	f7ff ffa7 	bl	8001394 <prvCreateIdleTasks>
 8001446:	60f8      	str	r0, [r7, #12]

    #if ( configUSE_TIMERS == 1 )
    {
        if( xReturn == pdPASS )
 8001448:	68fb      	ldr	r3, [r7, #12]
 800144a:	2b01      	cmp	r3, #1
 800144c:	d102      	bne.n	8001454 <vTaskStartScheduler+0x18>
        {
            xReturn = xTimerCreateTimerTask();
 800144e:	f000 fdf9 	bl	8002044 <xTimerCreateTimerTask>
 8001452:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8001454:	68fb      	ldr	r3, [r7, #12]
 8001456:	2b01      	cmp	r3, #1
 8001458:	d116      	bne.n	8001488 <vTaskStartScheduler+0x4c>
    __asm volatile
 800145a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800145e:	f383 8811 	msr	BASEPRI, r3
 8001462:	f3bf 8f6f 	isb	sy
 8001466:	f3bf 8f4f 	dsb	sy
 800146a:	60bb      	str	r3, [r7, #8]
}
 800146c:	bf00      	nop
             * block specific to the task that will run first. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif

        xNextTaskUnblockTime = portMAX_DELAY;
 800146e:	4b11      	ldr	r3, [pc, #68]	@ (80014b4 <vTaskStartScheduler+0x78>)
 8001470:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001474:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8001476:	4b10      	ldr	r3, [pc, #64]	@ (80014b8 <vTaskStartScheduler+0x7c>)
 8001478:	2201      	movs	r2, #1
 800147a:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800147c:	4b0f      	ldr	r3, [pc, #60]	@ (80014bc <vTaskStartScheduler+0x80>)
 800147e:	2200      	movs	r2, #0
 8001480:	601a      	str	r2, [r3, #0]
        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */

        /* The return value for xPortStartScheduler is not required
         * hence using a void datatype. */
        ( void ) xPortStartScheduler();
 8001482:	f001 f8ff 	bl	8002684 <xPortStartScheduler>
 8001486:	e00f      	b.n	80014a8 <vTaskStartScheduler+0x6c>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8001488:	68fb      	ldr	r3, [r7, #12]
 800148a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800148e:	d10b      	bne.n	80014a8 <vTaskStartScheduler+0x6c>
    __asm volatile
 8001490:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001494:	f383 8811 	msr	BASEPRI, r3
 8001498:	f3bf 8f6f 	isb	sy
 800149c:	f3bf 8f4f 	dsb	sy
 80014a0:	607b      	str	r3, [r7, #4]
}
 80014a2:	bf00      	nop
 80014a4:	bf00      	nop
 80014a6:	e7fd      	b.n	80014a4 <vTaskStartScheduler+0x68>
     * meaning xIdleTaskHandles are not used anywhere else. */
    ( void ) xIdleTaskHandles;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 80014a8:	4b05      	ldr	r3, [pc, #20]	@ (80014c0 <vTaskStartScheduler+0x84>)
 80014aa:	681b      	ldr	r3, [r3, #0]

    traceRETURN_vTaskStartScheduler();
}
 80014ac:	bf00      	nop
 80014ae:	3710      	adds	r7, #16
 80014b0:	46bd      	mov	sp, r7
 80014b2:	bd80      	pop	{r7, pc}
 80014b4:	200001bc 	.word	0x200001bc
 80014b8:	200001a8 	.word	0x200001a8
 80014bc:	200001a0 	.word	0x200001a0
 80014c0:	08003918 	.word	0x08003918

080014c4 <vTaskSuspendAll>:
    traceRETURN_vTaskEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80014c4:	b480      	push	{r7}
 80014c6:	af00      	add	r7, sp, #0
         * do not otherwise exhibit real time behaviour. */
        portSOFTWARE_BARRIER();

        /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
         * is used to allow calls to vTaskSuspendAll() to nest. */
        uxSchedulerSuspended = ( UBaseType_t ) ( uxSchedulerSuspended + 1U );
 80014c8:	4b04      	ldr	r3, [pc, #16]	@ (80014dc <vTaskSuspendAll+0x18>)
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	3301      	adds	r3, #1
 80014ce:	4a03      	ldr	r2, [pc, #12]	@ (80014dc <vTaskSuspendAll+0x18>)
 80014d0:	6013      	str	r3, [r2, #0]
        }
    }
    #endif /* #if ( configNUMBER_OF_CORES == 1 ) */

    traceRETURN_vTaskSuspendAll();
}
 80014d2:	bf00      	nop
 80014d4:	46bd      	mov	sp, r7
 80014d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014da:	4770      	bx	lr
 80014dc:	200001c4 	.word	0x200001c4

080014e0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	b088      	sub	sp, #32
 80014e4:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 80014e6:	2300      	movs	r3, #0
 80014e8:	61fb      	str	r3, [r7, #28]
    BaseType_t xAlreadyYielded = pdFALSE;
 80014ea:	2300      	movs	r3, #0
 80014ec:	61bb      	str	r3, [r7, #24]
        /* It is possible that an ISR caused a task to be removed from an event
         * list while the scheduler was suspended.  If this was the case then the
         * removed task will have been added to the xPendingReadyList.  Once the
         * scheduler has been resumed it is safe to move all the pending ready
         * tasks from this list into their appropriate ready list. */
        taskENTER_CRITICAL();
 80014ee:	f001 f9b9 	bl	8002864 <vPortEnterCritical>
        {
            const BaseType_t xCoreID = ( BaseType_t ) portGET_CORE_ID();
 80014f2:	2300      	movs	r3, #0
 80014f4:	613b      	str	r3, [r7, #16]

            /* If uxSchedulerSuspended is zero then this function does not match a
             * previous call to vTaskSuspendAll(). */
            configASSERT( uxSchedulerSuspended != 0U );
 80014f6:	4b75      	ldr	r3, [pc, #468]	@ (80016cc <xTaskResumeAll+0x1ec>)
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d10b      	bne.n	8001516 <xTaskResumeAll+0x36>
    __asm volatile
 80014fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001502:	f383 8811 	msr	BASEPRI, r3
 8001506:	f3bf 8f6f 	isb	sy
 800150a:	f3bf 8f4f 	dsb	sy
 800150e:	603b      	str	r3, [r7, #0]
}
 8001510:	bf00      	nop
 8001512:	bf00      	nop
 8001514:	e7fd      	b.n	8001512 <xTaskResumeAll+0x32>

            uxSchedulerSuspended = ( UBaseType_t ) ( uxSchedulerSuspended - 1U );
 8001516:	4b6d      	ldr	r3, [pc, #436]	@ (80016cc <xTaskResumeAll+0x1ec>)
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	3b01      	subs	r3, #1
 800151c:	4a6b      	ldr	r2, [pc, #428]	@ (80016cc <xTaskResumeAll+0x1ec>)
 800151e:	6013      	str	r3, [r2, #0]
            portRELEASE_TASK_LOCK( xCoreID );

            if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 8001520:	4b6a      	ldr	r3, [pc, #424]	@ (80016cc <xTaskResumeAll+0x1ec>)
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	2b00      	cmp	r3, #0
 8001526:	f040 80ca 	bne.w	80016be <xTaskResumeAll+0x1de>
            {
                if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800152a:	4b69      	ldr	r3, [pc, #420]	@ (80016d0 <xTaskResumeAll+0x1f0>)
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	2b00      	cmp	r3, #0
 8001530:	f000 80c5 	beq.w	80016be <xTaskResumeAll+0x1de>
                {
                    /* Move any readied tasks from the pending list into the
                     * appropriate ready list. */
                    while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8001534:	e08e      	b.n	8001654 <xTaskResumeAll+0x174>
                    {
                        /* MISRA Ref 11.5.3 [Void pointer assignment] */
                        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                        /* coverity[misra_c_2012_rule_11_5_violation] */
                        pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8001536:	4b67      	ldr	r3, [pc, #412]	@ (80016d4 <xTaskResumeAll+0x1f4>)
 8001538:	68db      	ldr	r3, [r3, #12]
 800153a:	68db      	ldr	r3, [r3, #12]
 800153c:	61fb      	str	r3, [r7, #28]
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 800153e:	69fb      	ldr	r3, [r7, #28]
 8001540:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001542:	60fb      	str	r3, [r7, #12]
 8001544:	69fb      	ldr	r3, [r7, #28]
 8001546:	69db      	ldr	r3, [r3, #28]
 8001548:	69fa      	ldr	r2, [r7, #28]
 800154a:	6a12      	ldr	r2, [r2, #32]
 800154c:	609a      	str	r2, [r3, #8]
 800154e:	69fb      	ldr	r3, [r7, #28]
 8001550:	6a1b      	ldr	r3, [r3, #32]
 8001552:	69fa      	ldr	r2, [r7, #28]
 8001554:	69d2      	ldr	r2, [r2, #28]
 8001556:	605a      	str	r2, [r3, #4]
 8001558:	68fb      	ldr	r3, [r7, #12]
 800155a:	685a      	ldr	r2, [r3, #4]
 800155c:	69fb      	ldr	r3, [r7, #28]
 800155e:	3318      	adds	r3, #24
 8001560:	429a      	cmp	r2, r3
 8001562:	d103      	bne.n	800156c <xTaskResumeAll+0x8c>
 8001564:	69fb      	ldr	r3, [r7, #28]
 8001566:	6a1a      	ldr	r2, [r3, #32]
 8001568:	68fb      	ldr	r3, [r7, #12]
 800156a:	605a      	str	r2, [r3, #4]
 800156c:	69fb      	ldr	r3, [r7, #28]
 800156e:	2200      	movs	r2, #0
 8001570:	629a      	str	r2, [r3, #40]	@ 0x28
 8001572:	68fb      	ldr	r3, [r7, #12]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	1e5a      	subs	r2, r3, #1
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	601a      	str	r2, [r3, #0]
                        portMEMORY_BARRIER();
                        listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 800157c:	69fb      	ldr	r3, [r7, #28]
 800157e:	695b      	ldr	r3, [r3, #20]
 8001580:	60bb      	str	r3, [r7, #8]
 8001582:	69fb      	ldr	r3, [r7, #28]
 8001584:	689b      	ldr	r3, [r3, #8]
 8001586:	69fa      	ldr	r2, [r7, #28]
 8001588:	68d2      	ldr	r2, [r2, #12]
 800158a:	609a      	str	r2, [r3, #8]
 800158c:	69fb      	ldr	r3, [r7, #28]
 800158e:	68db      	ldr	r3, [r3, #12]
 8001590:	69fa      	ldr	r2, [r7, #28]
 8001592:	6892      	ldr	r2, [r2, #8]
 8001594:	605a      	str	r2, [r3, #4]
 8001596:	68bb      	ldr	r3, [r7, #8]
 8001598:	685a      	ldr	r2, [r3, #4]
 800159a:	69fb      	ldr	r3, [r7, #28]
 800159c:	3304      	adds	r3, #4
 800159e:	429a      	cmp	r2, r3
 80015a0:	d103      	bne.n	80015aa <xTaskResumeAll+0xca>
 80015a2:	69fb      	ldr	r3, [r7, #28]
 80015a4:	68da      	ldr	r2, [r3, #12]
 80015a6:	68bb      	ldr	r3, [r7, #8]
 80015a8:	605a      	str	r2, [r3, #4]
 80015aa:	69fb      	ldr	r3, [r7, #28]
 80015ac:	2200      	movs	r2, #0
 80015ae:	615a      	str	r2, [r3, #20]
 80015b0:	68bb      	ldr	r3, [r7, #8]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	1e5a      	subs	r2, r3, #1
 80015b6:	68bb      	ldr	r3, [r7, #8]
 80015b8:	601a      	str	r2, [r3, #0]
                        prvAddTaskToReadyList( pxTCB );
 80015ba:	69fb      	ldr	r3, [r7, #28]
 80015bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80015be:	2201      	movs	r2, #1
 80015c0:	409a      	lsls	r2, r3
 80015c2:	4b45      	ldr	r3, [pc, #276]	@ (80016d8 <xTaskResumeAll+0x1f8>)
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	4313      	orrs	r3, r2
 80015c8:	4a43      	ldr	r2, [pc, #268]	@ (80016d8 <xTaskResumeAll+0x1f8>)
 80015ca:	6013      	str	r3, [r2, #0]
 80015cc:	69fb      	ldr	r3, [r7, #28]
 80015ce:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80015d0:	4942      	ldr	r1, [pc, #264]	@ (80016dc <xTaskResumeAll+0x1fc>)
 80015d2:	4613      	mov	r3, r2
 80015d4:	009b      	lsls	r3, r3, #2
 80015d6:	4413      	add	r3, r2
 80015d8:	009b      	lsls	r3, r3, #2
 80015da:	440b      	add	r3, r1
 80015dc:	3304      	adds	r3, #4
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	607b      	str	r3, [r7, #4]
 80015e2:	69fb      	ldr	r3, [r7, #28]
 80015e4:	687a      	ldr	r2, [r7, #4]
 80015e6:	609a      	str	r2, [r3, #8]
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	689a      	ldr	r2, [r3, #8]
 80015ec:	69fb      	ldr	r3, [r7, #28]
 80015ee:	60da      	str	r2, [r3, #12]
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	689b      	ldr	r3, [r3, #8]
 80015f4:	69fa      	ldr	r2, [r7, #28]
 80015f6:	3204      	adds	r2, #4
 80015f8:	605a      	str	r2, [r3, #4]
 80015fa:	69fb      	ldr	r3, [r7, #28]
 80015fc:	1d1a      	adds	r2, r3, #4
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	609a      	str	r2, [r3, #8]
 8001602:	69fb      	ldr	r3, [r7, #28]
 8001604:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001606:	4613      	mov	r3, r2
 8001608:	009b      	lsls	r3, r3, #2
 800160a:	4413      	add	r3, r2
 800160c:	009b      	lsls	r3, r3, #2
 800160e:	4a33      	ldr	r2, [pc, #204]	@ (80016dc <xTaskResumeAll+0x1fc>)
 8001610:	441a      	add	r2, r3
 8001612:	69fb      	ldr	r3, [r7, #28]
 8001614:	615a      	str	r2, [r3, #20]
 8001616:	69fb      	ldr	r3, [r7, #28]
 8001618:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800161a:	4930      	ldr	r1, [pc, #192]	@ (80016dc <xTaskResumeAll+0x1fc>)
 800161c:	4613      	mov	r3, r2
 800161e:	009b      	lsls	r3, r3, #2
 8001620:	4413      	add	r3, r2
 8001622:	009b      	lsls	r3, r3, #2
 8001624:	440b      	add	r3, r1
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	69fa      	ldr	r2, [r7, #28]
 800162a:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800162c:	1c59      	adds	r1, r3, #1
 800162e:	482b      	ldr	r0, [pc, #172]	@ (80016dc <xTaskResumeAll+0x1fc>)
 8001630:	4613      	mov	r3, r2
 8001632:	009b      	lsls	r3, r3, #2
 8001634:	4413      	add	r3, r2
 8001636:	009b      	lsls	r3, r3, #2
 8001638:	4403      	add	r3, r0
 800163a:	6019      	str	r1, [r3, #0]

                        #if ( configNUMBER_OF_CORES == 1 )
                        {
                            /* If the moved task has a priority higher than the current
                             * task then a yield must be performed. */
                            if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800163c:	69fb      	ldr	r3, [r7, #28]
 800163e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001640:	4b27      	ldr	r3, [pc, #156]	@ (80016e0 <xTaskResumeAll+0x200>)
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001646:	429a      	cmp	r2, r3
 8001648:	d904      	bls.n	8001654 <xTaskResumeAll+0x174>
                            {
                                xYieldPendings[ xCoreID ] = pdTRUE;
 800164a:	4a26      	ldr	r2, [pc, #152]	@ (80016e4 <xTaskResumeAll+0x204>)
 800164c:	693b      	ldr	r3, [r7, #16]
 800164e:	2101      	movs	r1, #1
 8001650:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                    while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8001654:	4b1f      	ldr	r3, [pc, #124]	@ (80016d4 <xTaskResumeAll+0x1f4>)
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	2b00      	cmp	r3, #0
 800165a:	f47f af6c 	bne.w	8001536 <xTaskResumeAll+0x56>
                             * which sets xYieldPendings for the current core to pdTRUE. */
                        }
                        #endif /* #if ( configNUMBER_OF_CORES == 1 ) */
                    }

                    if( pxTCB != NULL )
 800165e:	69fb      	ldr	r3, [r7, #28]
 8001660:	2b00      	cmp	r3, #0
 8001662:	d001      	beq.n	8001668 <xTaskResumeAll+0x188>
                         * which may have prevented the next unblock time from being
                         * re-calculated, in which case re-calculate it now.  Mainly
                         * important for low power tickless implementations, where
                         * this can prevent an unnecessary exit from low power
                         * state. */
                        prvResetNextTaskUnblockTime();
 8001664:	f000 fc32 	bl	8001ecc <prvResetNextTaskUnblockTime>
                     * It should be safe to call xTaskIncrementTick here from any core
                     * since we are in a critical section and xTaskIncrementTick itself
                     * protects itself within a critical section. Suspending the scheduler
                     * from any core causes xTaskIncrementTick to increment uxPendedCounts. */
                    {
                        TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8001668:	4b1f      	ldr	r3, [pc, #124]	@ (80016e8 <xTaskResumeAll+0x208>)
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	617b      	str	r3, [r7, #20]

                        if( xPendedCounts > ( TickType_t ) 0U )
 800166e:	697b      	ldr	r3, [r7, #20]
 8001670:	2b00      	cmp	r3, #0
 8001672:	d012      	beq.n	800169a <xTaskResumeAll+0x1ba>
                        {
                            do
                            {
                                if( xTaskIncrementTick() != pdFALSE )
 8001674:	f000 f84c 	bl	8001710 <xTaskIncrementTick>
 8001678:	4603      	mov	r3, r0
 800167a:	2b00      	cmp	r3, #0
 800167c:	d004      	beq.n	8001688 <xTaskResumeAll+0x1a8>
                                {
                                    /* Other cores are interrupted from
                                     * within xTaskIncrementTick(). */
                                    xYieldPendings[ xCoreID ] = pdTRUE;
 800167e:	4a19      	ldr	r2, [pc, #100]	@ (80016e4 <xTaskResumeAll+0x204>)
 8001680:	693b      	ldr	r3, [r7, #16]
 8001682:	2101      	movs	r1, #1
 8001684:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                                else
                                {
                                    mtCOVERAGE_TEST_MARKER();
                                }

                                --xPendedCounts;
 8001688:	697b      	ldr	r3, [r7, #20]
 800168a:	3b01      	subs	r3, #1
 800168c:	617b      	str	r3, [r7, #20]
                            } while( xPendedCounts > ( TickType_t ) 0U );
 800168e:	697b      	ldr	r3, [r7, #20]
 8001690:	2b00      	cmp	r3, #0
 8001692:	d1ef      	bne.n	8001674 <xTaskResumeAll+0x194>

                            xPendedTicks = 0;
 8001694:	4b14      	ldr	r3, [pc, #80]	@ (80016e8 <xTaskResumeAll+0x208>)
 8001696:	2200      	movs	r2, #0
 8001698:	601a      	str	r2, [r3, #0]
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }

                    if( xYieldPendings[ xCoreID ] != pdFALSE )
 800169a:	4a12      	ldr	r2, [pc, #72]	@ (80016e4 <xTaskResumeAll+0x204>)
 800169c:	693b      	ldr	r3, [r7, #16]
 800169e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d00b      	beq.n	80016be <xTaskResumeAll+0x1de>
                    {
                        #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 80016a6:	2301      	movs	r3, #1
 80016a8:	61bb      	str	r3, [r7, #24]
                        }
                        #endif /* #if ( configUSE_PREEMPTION != 0 ) */

                        #if ( configNUMBER_OF_CORES == 1 )
                        {
                            taskYIELD_TASK_CORE_IF_USING_PREEMPTION( pxCurrentTCB );
 80016aa:	4b0d      	ldr	r3, [pc, #52]	@ (80016e0 <xTaskResumeAll+0x200>)
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	4b0f      	ldr	r3, [pc, #60]	@ (80016ec <xTaskResumeAll+0x20c>)
 80016b0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80016b4:	601a      	str	r2, [r3, #0]
 80016b6:	f3bf 8f4f 	dsb	sy
 80016ba:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 80016be:	f001 f903 	bl	80028c8 <vPortExitCritical>
    }

    traceRETURN_xTaskResumeAll( xAlreadyYielded );

    return xAlreadyYielded;
 80016c2:	69bb      	ldr	r3, [r7, #24]
}
 80016c4:	4618      	mov	r0, r3
 80016c6:	3720      	adds	r7, #32
 80016c8:	46bd      	mov	sp, r7
 80016ca:	bd80      	pop	{r7, pc}
 80016cc:	200001c4 	.word	0x200001c4
 80016d0:	2000019c 	.word	0x2000019c
 80016d4:	2000015c 	.word	0x2000015c
 80016d8:	200001a4 	.word	0x200001a4
 80016dc:	200000c8 	.word	0x200000c8
 80016e0:	200000c4 	.word	0x200000c4
 80016e4:	200001b0 	.word	0x200001b0
 80016e8:	200001ac 	.word	0x200001ac
 80016ec:	e000ed04 	.word	0xe000ed04

080016f0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80016f0:	b480      	push	{r7}
 80016f2:	b083      	sub	sp, #12
 80016f4:	af00      	add	r7, sp, #0
    traceENTER_xTaskGetTickCount();

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 80016f6:	4b05      	ldr	r3, [pc, #20]	@ (800170c <xTaskGetTickCount+0x1c>)
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    traceRETURN_xTaskGetTickCount( xTicks );

    return xTicks;
 80016fc:	687b      	ldr	r3, [r7, #4]
}
 80016fe:	4618      	mov	r0, r3
 8001700:	370c      	adds	r7, #12
 8001702:	46bd      	mov	sp, r7
 8001704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001708:	4770      	bx	lr
 800170a:	bf00      	nop
 800170c:	200001a0 	.word	0x200001a0

08001710 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8001710:	b580      	push	{r7, lr}
 8001712:	b08a      	sub	sp, #40	@ 0x28
 8001714:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8001716:	2300      	movs	r3, #0
 8001718:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Tick increment should occur on every kernel timer event. Core 0 has the
     * responsibility to increment the tick, or increment the pended ticks if the
     * scheduler is suspended.  If pended ticks is greater than zero, the core that
     * calls xTaskResumeAll has the responsibility to increment the tick. */
    if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 800171a:	4b7f      	ldr	r3, [pc, #508]	@ (8001918 <xTaskIncrementTick+0x208>)
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	2b00      	cmp	r3, #0
 8001720:	f040 80ef 	bne.w	8001902 <xTaskIncrementTick+0x1f2>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8001724:	4b7d      	ldr	r3, [pc, #500]	@ (800191c <xTaskIncrementTick+0x20c>)
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	3301      	adds	r3, #1
 800172a:	623b      	str	r3, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 800172c:	4a7b      	ldr	r2, [pc, #492]	@ (800191c <xTaskIncrementTick+0x20c>)
 800172e:	6a3b      	ldr	r3, [r7, #32]
 8001730:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U )
 8001732:	6a3b      	ldr	r3, [r7, #32]
 8001734:	2b00      	cmp	r3, #0
 8001736:	d121      	bne.n	800177c <xTaskIncrementTick+0x6c>
        {
            taskSWITCH_DELAYED_LISTS();
 8001738:	4b79      	ldr	r3, [pc, #484]	@ (8001920 <xTaskIncrementTick+0x210>)
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	2b00      	cmp	r3, #0
 8001740:	d00b      	beq.n	800175a <xTaskIncrementTick+0x4a>
    __asm volatile
 8001742:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001746:	f383 8811 	msr	BASEPRI, r3
 800174a:	f3bf 8f6f 	isb	sy
 800174e:	f3bf 8f4f 	dsb	sy
 8001752:	607b      	str	r3, [r7, #4]
}
 8001754:	bf00      	nop
 8001756:	bf00      	nop
 8001758:	e7fd      	b.n	8001756 <xTaskIncrementTick+0x46>
 800175a:	4b71      	ldr	r3, [pc, #452]	@ (8001920 <xTaskIncrementTick+0x210>)
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	61fb      	str	r3, [r7, #28]
 8001760:	4b70      	ldr	r3, [pc, #448]	@ (8001924 <xTaskIncrementTick+0x214>)
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	4a6e      	ldr	r2, [pc, #440]	@ (8001920 <xTaskIncrementTick+0x210>)
 8001766:	6013      	str	r3, [r2, #0]
 8001768:	4a6e      	ldr	r2, [pc, #440]	@ (8001924 <xTaskIncrementTick+0x214>)
 800176a:	69fb      	ldr	r3, [r7, #28]
 800176c:	6013      	str	r3, [r2, #0]
 800176e:	4b6e      	ldr	r3, [pc, #440]	@ (8001928 <xTaskIncrementTick+0x218>)
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	3301      	adds	r3, #1
 8001774:	4a6c      	ldr	r2, [pc, #432]	@ (8001928 <xTaskIncrementTick+0x218>)
 8001776:	6013      	str	r3, [r2, #0]
 8001778:	f000 fba8 	bl	8001ecc <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 800177c:	4b6b      	ldr	r3, [pc, #428]	@ (800192c <xTaskIncrementTick+0x21c>)
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	6a3a      	ldr	r2, [r7, #32]
 8001782:	429a      	cmp	r2, r3
 8001784:	f0c0 80a8 	bcc.w	80018d8 <xTaskIncrementTick+0x1c8>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001788:	4b65      	ldr	r3, [pc, #404]	@ (8001920 <xTaskIncrementTick+0x210>)
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	2b00      	cmp	r3, #0
 8001790:	d104      	bne.n	800179c <xTaskIncrementTick+0x8c>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY;
 8001792:	4b66      	ldr	r3, [pc, #408]	@ (800192c <xTaskIncrementTick+0x21c>)
 8001794:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001798:	601a      	str	r2, [r3, #0]
                    break;
 800179a:	e09d      	b.n	80018d8 <xTaskIncrementTick+0x1c8>
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    /* MISRA Ref 11.5.3 [Void pointer assignment] */
                    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                    /* coverity[misra_c_2012_rule_11_5_violation] */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800179c:	4b60      	ldr	r3, [pc, #384]	@ (8001920 <xTaskIncrementTick+0x210>)
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	68db      	ldr	r3, [r3, #12]
 80017a2:	68db      	ldr	r3, [r3, #12]
 80017a4:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80017a6:	69bb      	ldr	r3, [r7, #24]
 80017a8:	685b      	ldr	r3, [r3, #4]
 80017aa:	617b      	str	r3, [r7, #20]

                    if( xConstTickCount < xItemValue )
 80017ac:	6a3a      	ldr	r2, [r7, #32]
 80017ae:	697b      	ldr	r3, [r7, #20]
 80017b0:	429a      	cmp	r2, r3
 80017b2:	d203      	bcs.n	80017bc <xTaskIncrementTick+0xac>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 80017b4:	4a5d      	ldr	r2, [pc, #372]	@ (800192c <xTaskIncrementTick+0x21c>)
 80017b6:	697b      	ldr	r3, [r7, #20]
 80017b8:	6013      	str	r3, [r2, #0]
                        break;
 80017ba:	e08d      	b.n	80018d8 <xTaskIncrementTick+0x1c8>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 80017bc:	69bb      	ldr	r3, [r7, #24]
 80017be:	695b      	ldr	r3, [r3, #20]
 80017c0:	613b      	str	r3, [r7, #16]
 80017c2:	69bb      	ldr	r3, [r7, #24]
 80017c4:	689b      	ldr	r3, [r3, #8]
 80017c6:	69ba      	ldr	r2, [r7, #24]
 80017c8:	68d2      	ldr	r2, [r2, #12]
 80017ca:	609a      	str	r2, [r3, #8]
 80017cc:	69bb      	ldr	r3, [r7, #24]
 80017ce:	68db      	ldr	r3, [r3, #12]
 80017d0:	69ba      	ldr	r2, [r7, #24]
 80017d2:	6892      	ldr	r2, [r2, #8]
 80017d4:	605a      	str	r2, [r3, #4]
 80017d6:	693b      	ldr	r3, [r7, #16]
 80017d8:	685a      	ldr	r2, [r3, #4]
 80017da:	69bb      	ldr	r3, [r7, #24]
 80017dc:	3304      	adds	r3, #4
 80017de:	429a      	cmp	r2, r3
 80017e0:	d103      	bne.n	80017ea <xTaskIncrementTick+0xda>
 80017e2:	69bb      	ldr	r3, [r7, #24]
 80017e4:	68da      	ldr	r2, [r3, #12]
 80017e6:	693b      	ldr	r3, [r7, #16]
 80017e8:	605a      	str	r2, [r3, #4]
 80017ea:	69bb      	ldr	r3, [r7, #24]
 80017ec:	2200      	movs	r2, #0
 80017ee:	615a      	str	r2, [r3, #20]
 80017f0:	693b      	ldr	r3, [r7, #16]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	1e5a      	subs	r2, r3, #1
 80017f6:	693b      	ldr	r3, [r7, #16]
 80017f8:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80017fa:	69bb      	ldr	r3, [r7, #24]
 80017fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d01e      	beq.n	8001840 <xTaskIncrementTick+0x130>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8001802:	69bb      	ldr	r3, [r7, #24]
 8001804:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001806:	60fb      	str	r3, [r7, #12]
 8001808:	69bb      	ldr	r3, [r7, #24]
 800180a:	69db      	ldr	r3, [r3, #28]
 800180c:	69ba      	ldr	r2, [r7, #24]
 800180e:	6a12      	ldr	r2, [r2, #32]
 8001810:	609a      	str	r2, [r3, #8]
 8001812:	69bb      	ldr	r3, [r7, #24]
 8001814:	6a1b      	ldr	r3, [r3, #32]
 8001816:	69ba      	ldr	r2, [r7, #24]
 8001818:	69d2      	ldr	r2, [r2, #28]
 800181a:	605a      	str	r2, [r3, #4]
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	685a      	ldr	r2, [r3, #4]
 8001820:	69bb      	ldr	r3, [r7, #24]
 8001822:	3318      	adds	r3, #24
 8001824:	429a      	cmp	r2, r3
 8001826:	d103      	bne.n	8001830 <xTaskIncrementTick+0x120>
 8001828:	69bb      	ldr	r3, [r7, #24]
 800182a:	6a1a      	ldr	r2, [r3, #32]
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	605a      	str	r2, [r3, #4]
 8001830:	69bb      	ldr	r3, [r7, #24]
 8001832:	2200      	movs	r2, #0
 8001834:	629a      	str	r2, [r3, #40]	@ 0x28
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	1e5a      	subs	r2, r3, #1
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8001840:	69bb      	ldr	r3, [r7, #24]
 8001842:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001844:	2201      	movs	r2, #1
 8001846:	409a      	lsls	r2, r3
 8001848:	4b39      	ldr	r3, [pc, #228]	@ (8001930 <xTaskIncrementTick+0x220>)
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	4313      	orrs	r3, r2
 800184e:	4a38      	ldr	r2, [pc, #224]	@ (8001930 <xTaskIncrementTick+0x220>)
 8001850:	6013      	str	r3, [r2, #0]
 8001852:	69bb      	ldr	r3, [r7, #24]
 8001854:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001856:	4937      	ldr	r1, [pc, #220]	@ (8001934 <xTaskIncrementTick+0x224>)
 8001858:	4613      	mov	r3, r2
 800185a:	009b      	lsls	r3, r3, #2
 800185c:	4413      	add	r3, r2
 800185e:	009b      	lsls	r3, r3, #2
 8001860:	440b      	add	r3, r1
 8001862:	3304      	adds	r3, #4
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	60bb      	str	r3, [r7, #8]
 8001868:	69bb      	ldr	r3, [r7, #24]
 800186a:	68ba      	ldr	r2, [r7, #8]
 800186c:	609a      	str	r2, [r3, #8]
 800186e:	68bb      	ldr	r3, [r7, #8]
 8001870:	689a      	ldr	r2, [r3, #8]
 8001872:	69bb      	ldr	r3, [r7, #24]
 8001874:	60da      	str	r2, [r3, #12]
 8001876:	68bb      	ldr	r3, [r7, #8]
 8001878:	689b      	ldr	r3, [r3, #8]
 800187a:	69ba      	ldr	r2, [r7, #24]
 800187c:	3204      	adds	r2, #4
 800187e:	605a      	str	r2, [r3, #4]
 8001880:	69bb      	ldr	r3, [r7, #24]
 8001882:	1d1a      	adds	r2, r3, #4
 8001884:	68bb      	ldr	r3, [r7, #8]
 8001886:	609a      	str	r2, [r3, #8]
 8001888:	69bb      	ldr	r3, [r7, #24]
 800188a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800188c:	4613      	mov	r3, r2
 800188e:	009b      	lsls	r3, r3, #2
 8001890:	4413      	add	r3, r2
 8001892:	009b      	lsls	r3, r3, #2
 8001894:	4a27      	ldr	r2, [pc, #156]	@ (8001934 <xTaskIncrementTick+0x224>)
 8001896:	441a      	add	r2, r3
 8001898:	69bb      	ldr	r3, [r7, #24]
 800189a:	615a      	str	r2, [r3, #20]
 800189c:	69bb      	ldr	r3, [r7, #24]
 800189e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80018a0:	4924      	ldr	r1, [pc, #144]	@ (8001934 <xTaskIncrementTick+0x224>)
 80018a2:	4613      	mov	r3, r2
 80018a4:	009b      	lsls	r3, r3, #2
 80018a6:	4413      	add	r3, r2
 80018a8:	009b      	lsls	r3, r3, #2
 80018aa:	440b      	add	r3, r1
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	69ba      	ldr	r2, [r7, #24]
 80018b0:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80018b2:	1c59      	adds	r1, r3, #1
 80018b4:	481f      	ldr	r0, [pc, #124]	@ (8001934 <xTaskIncrementTick+0x224>)
 80018b6:	4613      	mov	r3, r2
 80018b8:	009b      	lsls	r3, r3, #2
 80018ba:	4413      	add	r3, r2
 80018bc:	009b      	lsls	r3, r3, #2
 80018be:	4403      	add	r3, r0
 80018c0:	6019      	str	r1, [r3, #0]
                             * task.
                             * The case of equal priority tasks sharing
                             * processing time (which happens when both
                             * preemption and time slicing are on) is
                             * handled below.*/
                            if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80018c2:	69bb      	ldr	r3, [r7, #24]
 80018c4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80018c6:	4b1c      	ldr	r3, [pc, #112]	@ (8001938 <xTaskIncrementTick+0x228>)
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80018cc:	429a      	cmp	r2, r3
 80018ce:	f67f af5b 	bls.w	8001788 <xTaskIncrementTick+0x78>
                            {
                                xSwitchRequired = pdTRUE;
 80018d2:	2301      	movs	r3, #1
 80018d4:	627b      	str	r3, [r7, #36]	@ 0x24
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80018d6:	e757      	b.n	8001788 <xTaskIncrementTick+0x78>
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
        {
            #if ( configNUMBER_OF_CORES == 1 )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > 1U )
 80018d8:	4b17      	ldr	r3, [pc, #92]	@ (8001938 <xTaskIncrementTick+0x228>)
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80018de:	4915      	ldr	r1, [pc, #84]	@ (8001934 <xTaskIncrementTick+0x224>)
 80018e0:	4613      	mov	r3, r2
 80018e2:	009b      	lsls	r3, r3, #2
 80018e4:	4413      	add	r3, r2
 80018e6:	009b      	lsls	r3, r3, #2
 80018e8:	440b      	add	r3, r1
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	2b01      	cmp	r3, #1
 80018ee:	d901      	bls.n	80018f4 <xTaskIncrementTick+0x1e4>
                {
                    xSwitchRequired = pdTRUE;
 80018f0:	2301      	movs	r3, #1
 80018f2:	627b      	str	r3, [r7, #36]	@ 0x24
        #if ( configUSE_PREEMPTION == 1 )
        {
            #if ( configNUMBER_OF_CORES == 1 )
            {
                /* For single core the core ID is always 0. */
                if( xYieldPendings[ 0 ] != pdFALSE )
 80018f4:	4b11      	ldr	r3, [pc, #68]	@ (800193c <xTaskIncrementTick+0x22c>)
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d007      	beq.n	800190c <xTaskIncrementTick+0x1fc>
                {
                    xSwitchRequired = pdTRUE;
 80018fc:	2301      	movs	r3, #1
 80018fe:	627b      	str	r3, [r7, #36]	@ 0x24
 8001900:	e004      	b.n	800190c <xTaskIncrementTick+0x1fc>
        }
        #endif /* #if ( configUSE_PREEMPTION == 1 ) */
    }
    else
    {
        xPendedTicks += 1U;
 8001902:	4b0f      	ldr	r3, [pc, #60]	@ (8001940 <xTaskIncrementTick+0x230>)
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	3301      	adds	r3, #1
 8001908:	4a0d      	ldr	r2, [pc, #52]	@ (8001940 <xTaskIncrementTick+0x230>)
 800190a:	6013      	str	r3, [r2, #0]
        #endif
    }

    traceRETURN_xTaskIncrementTick( xSwitchRequired );

    return xSwitchRequired;
 800190c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800190e:	4618      	mov	r0, r3
 8001910:	3728      	adds	r7, #40	@ 0x28
 8001912:	46bd      	mov	sp, r7
 8001914:	bd80      	pop	{r7, pc}
 8001916:	bf00      	nop
 8001918:	200001c4 	.word	0x200001c4
 800191c:	200001a0 	.word	0x200001a0
 8001920:	20000154 	.word	0x20000154
 8001924:	20000158 	.word	0x20000158
 8001928:	200001b4 	.word	0x200001b4
 800192c:	200001bc 	.word	0x200001bc
 8001930:	200001a4 	.word	0x200001a4
 8001934:	200000c8 	.word	0x200000c8
 8001938:	200000c4 	.word	0x200000c4
 800193c:	200001b0 	.word	0x200001b0
 8001940:	200001ac 	.word	0x200001ac

08001944 <vTaskSwitchContext>:
#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

#if ( configNUMBER_OF_CORES == 1 )
    void vTaskSwitchContext( void )
    {
 8001944:	b480      	push	{r7}
 8001946:	b087      	sub	sp, #28
 8001948:	af00      	add	r7, sp, #0
        traceENTER_vTaskSwitchContext();

        if( uxSchedulerSuspended != ( UBaseType_t ) 0U )
 800194a:	4b28      	ldr	r3, [pc, #160]	@ (80019ec <vTaskSwitchContext+0xa8>)
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	2b00      	cmp	r3, #0
 8001950:	d003      	beq.n	800195a <vTaskSwitchContext+0x16>
        {
            /* The scheduler is currently suspended - do not allow a context
             * switch. */
            xYieldPendings[ 0 ] = pdTRUE;
 8001952:	4b27      	ldr	r3, [pc, #156]	@ (80019f0 <vTaskSwitchContext+0xac>)
 8001954:	2201      	movs	r2, #1
 8001956:	601a      	str	r2, [r3, #0]
            }
            #endif
        }

        traceRETURN_vTaskSwitchContext();
    }
 8001958:	e041      	b.n	80019de <vTaskSwitchContext+0x9a>
            xYieldPendings[ 0 ] = pdFALSE;
 800195a:	4b25      	ldr	r3, [pc, #148]	@ (80019f0 <vTaskSwitchContext+0xac>)
 800195c:	2200      	movs	r2, #0
 800195e:	601a      	str	r2, [r3, #0]
            taskSELECT_HIGHEST_PRIORITY_TASK();
 8001960:	4b24      	ldr	r3, [pc, #144]	@ (80019f4 <vTaskSwitchContext+0xb0>)
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	60fb      	str	r3, [r7, #12]
        __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	fab3 f383 	clz	r3, r3
 800196c:	72fb      	strb	r3, [r7, #11]
        return ucReturn;
 800196e:	7afb      	ldrb	r3, [r7, #11]
 8001970:	f1c3 031f 	rsb	r3, r3, #31
 8001974:	617b      	str	r3, [r7, #20]
 8001976:	4920      	ldr	r1, [pc, #128]	@ (80019f8 <vTaskSwitchContext+0xb4>)
 8001978:	697a      	ldr	r2, [r7, #20]
 800197a:	4613      	mov	r3, r2
 800197c:	009b      	lsls	r3, r3, #2
 800197e:	4413      	add	r3, r2
 8001980:	009b      	lsls	r3, r3, #2
 8001982:	440b      	add	r3, r1
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	2b00      	cmp	r3, #0
 8001988:	d10b      	bne.n	80019a2 <vTaskSwitchContext+0x5e>
    __asm volatile
 800198a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800198e:	f383 8811 	msr	BASEPRI, r3
 8001992:	f3bf 8f6f 	isb	sy
 8001996:	f3bf 8f4f 	dsb	sy
 800199a:	607b      	str	r3, [r7, #4]
}
 800199c:	bf00      	nop
 800199e:	bf00      	nop
 80019a0:	e7fd      	b.n	800199e <vTaskSwitchContext+0x5a>
 80019a2:	697a      	ldr	r2, [r7, #20]
 80019a4:	4613      	mov	r3, r2
 80019a6:	009b      	lsls	r3, r3, #2
 80019a8:	4413      	add	r3, r2
 80019aa:	009b      	lsls	r3, r3, #2
 80019ac:	4a12      	ldr	r2, [pc, #72]	@ (80019f8 <vTaskSwitchContext+0xb4>)
 80019ae:	4413      	add	r3, r2
 80019b0:	613b      	str	r3, [r7, #16]
 80019b2:	693b      	ldr	r3, [r7, #16]
 80019b4:	685b      	ldr	r3, [r3, #4]
 80019b6:	685a      	ldr	r2, [r3, #4]
 80019b8:	693b      	ldr	r3, [r7, #16]
 80019ba:	605a      	str	r2, [r3, #4]
 80019bc:	693b      	ldr	r3, [r7, #16]
 80019be:	685a      	ldr	r2, [r3, #4]
 80019c0:	693b      	ldr	r3, [r7, #16]
 80019c2:	3308      	adds	r3, #8
 80019c4:	429a      	cmp	r2, r3
 80019c6:	d103      	bne.n	80019d0 <vTaskSwitchContext+0x8c>
 80019c8:	693b      	ldr	r3, [r7, #16]
 80019ca:	68da      	ldr	r2, [r3, #12]
 80019cc:	693b      	ldr	r3, [r7, #16]
 80019ce:	605a      	str	r2, [r3, #4]
 80019d0:	693b      	ldr	r3, [r7, #16]
 80019d2:	685b      	ldr	r3, [r3, #4]
 80019d4:	68db      	ldr	r3, [r3, #12]
 80019d6:	4a09      	ldr	r2, [pc, #36]	@ (80019fc <vTaskSwitchContext+0xb8>)
 80019d8:	6013      	str	r3, [r2, #0]
            portTASK_SWITCH_HOOK( pxCurrentTCB );
 80019da:	4b08      	ldr	r3, [pc, #32]	@ (80019fc <vTaskSwitchContext+0xb8>)
 80019dc:	681b      	ldr	r3, [r3, #0]
    }
 80019de:	bf00      	nop
 80019e0:	371c      	adds	r7, #28
 80019e2:	46bd      	mov	sp, r7
 80019e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e8:	4770      	bx	lr
 80019ea:	bf00      	nop
 80019ec:	200001c4 	.word	0x200001c4
 80019f0:	200001b0 	.word	0x200001b0
 80019f4:	200001a4 	.word	0x200001a4
 80019f8:	200000c8 	.word	0x200000c8
 80019fc:	200000c4 	.word	0x200000c4

08001a00 <vTaskPlaceOnEventList>:
#endif /* if ( configNUMBER_OF_CORES > 1 ) */
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	b084      	sub	sp, #16
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	6078      	str	r0, [r7, #4]
 8001a08:	6039      	str	r1, [r7, #0]
    traceENTER_vTaskPlaceOnEventList( pxEventList, xTicksToWait );

    configASSERT( pxEventList );
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d10b      	bne.n	8001a28 <vTaskPlaceOnEventList+0x28>
    __asm volatile
 8001a10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001a14:	f383 8811 	msr	BASEPRI, r3
 8001a18:	f3bf 8f6f 	isb	sy
 8001a1c:	f3bf 8f4f 	dsb	sy
 8001a20:	60fb      	str	r3, [r7, #12]
}
 8001a22:	bf00      	nop
 8001a24:	bf00      	nop
 8001a26:	e7fd      	b.n	8001a24 <vTaskPlaceOnEventList+0x24>
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8001a28:	4b07      	ldr	r3, [pc, #28]	@ (8001a48 <vTaskPlaceOnEventList+0x48>)
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	3318      	adds	r3, #24
 8001a2e:	4619      	mov	r1, r3
 8001a30:	6878      	ldr	r0, [r7, #4]
 8001a32:	f7fe ffcc 	bl	80009ce <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8001a36:	2101      	movs	r1, #1
 8001a38:	6838      	ldr	r0, [r7, #0]
 8001a3a:	f000 fa81 	bl	8001f40 <prvAddCurrentTaskToDelayedList>

    traceRETURN_vTaskPlaceOnEventList();
}
 8001a3e:	bf00      	nop
 8001a40:	3710      	adds	r7, #16
 8001a42:	46bd      	mov	sp, r7
 8001a44:	bd80      	pop	{r7, pc}
 8001a46:	bf00      	nop
 8001a48:	200000c4 	.word	0x200000c4

08001a4c <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	b086      	sub	sp, #24
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	60f8      	str	r0, [r7, #12]
 8001a54:	60b9      	str	r1, [r7, #8]
 8001a56:	607a      	str	r2, [r7, #4]
        traceENTER_vTaskPlaceOnEventListRestricted( pxEventList, xTicksToWait, xWaitIndefinitely );

        configASSERT( pxEventList );
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d10b      	bne.n	8001a76 <vTaskPlaceOnEventListRestricted+0x2a>
    __asm volatile
 8001a5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001a62:	f383 8811 	msr	BASEPRI, r3
 8001a66:	f3bf 8f6f 	isb	sy
 8001a6a:	f3bf 8f4f 	dsb	sy
 8001a6e:	613b      	str	r3, [r7, #16]
}
 8001a70:	bf00      	nop
 8001a72:	bf00      	nop
 8001a74:	e7fd      	b.n	8001a72 <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	685b      	ldr	r3, [r3, #4]
 8001a7a:	617b      	str	r3, [r7, #20]
 8001a7c:	4b15      	ldr	r3, [pc, #84]	@ (8001ad4 <vTaskPlaceOnEventListRestricted+0x88>)
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	697a      	ldr	r2, [r7, #20]
 8001a82:	61da      	str	r2, [r3, #28]
 8001a84:	4b13      	ldr	r3, [pc, #76]	@ (8001ad4 <vTaskPlaceOnEventListRestricted+0x88>)
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	697a      	ldr	r2, [r7, #20]
 8001a8a:	6892      	ldr	r2, [r2, #8]
 8001a8c:	621a      	str	r2, [r3, #32]
 8001a8e:	4b11      	ldr	r3, [pc, #68]	@ (8001ad4 <vTaskPlaceOnEventListRestricted+0x88>)
 8001a90:	681a      	ldr	r2, [r3, #0]
 8001a92:	697b      	ldr	r3, [r7, #20]
 8001a94:	689b      	ldr	r3, [r3, #8]
 8001a96:	3218      	adds	r2, #24
 8001a98:	605a      	str	r2, [r3, #4]
 8001a9a:	4b0e      	ldr	r3, [pc, #56]	@ (8001ad4 <vTaskPlaceOnEventListRestricted+0x88>)
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	f103 0218 	add.w	r2, r3, #24
 8001aa2:	697b      	ldr	r3, [r7, #20]
 8001aa4:	609a      	str	r2, [r3, #8]
 8001aa6:	4b0b      	ldr	r3, [pc, #44]	@ (8001ad4 <vTaskPlaceOnEventListRestricted+0x88>)
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	68fa      	ldr	r2, [r7, #12]
 8001aac:	629a      	str	r2, [r3, #40]	@ 0x28
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	1c5a      	adds	r2, r3, #1
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	601a      	str	r2, [r3, #0]

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d002      	beq.n	8001ac4 <vTaskPlaceOnEventListRestricted+0x78>
        {
            xTicksToWait = portMAX_DELAY;
 8001abe:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001ac2:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8001ac4:	6879      	ldr	r1, [r7, #4]
 8001ac6:	68b8      	ldr	r0, [r7, #8]
 8001ac8:	f000 fa3a 	bl	8001f40 <prvAddCurrentTaskToDelayedList>

        traceRETURN_vTaskPlaceOnEventListRestricted();
    }
 8001acc:	bf00      	nop
 8001ace:	3718      	adds	r7, #24
 8001ad0:	46bd      	mov	sp, r7
 8001ad2:	bd80      	pop	{r7, pc}
 8001ad4:	200000c4 	.word	0x200000c4

08001ad8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8001ad8:	b480      	push	{r7}
 8001ada:	b08b      	sub	sp, #44	@ 0x2c
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	6078      	str	r0, [r7, #4]
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    /* MISRA Ref 11.5.3 [Void pointer assignment] */
    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
    /* coverity[misra_c_2012_rule_11_5_violation] */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	68db      	ldr	r3, [r3, #12]
 8001ae4:	68db      	ldr	r3, [r3, #12]
 8001ae6:	623b      	str	r3, [r7, #32]
    configASSERT( pxUnblockedTCB );
 8001ae8:	6a3b      	ldr	r3, [r7, #32]
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d10b      	bne.n	8001b06 <xTaskRemoveFromEventList+0x2e>
    __asm volatile
 8001aee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001af2:	f383 8811 	msr	BASEPRI, r3
 8001af6:	f3bf 8f6f 	isb	sy
 8001afa:	f3bf 8f4f 	dsb	sy
 8001afe:	60fb      	str	r3, [r7, #12]
}
 8001b00:	bf00      	nop
 8001b02:	bf00      	nop
 8001b04:	e7fd      	b.n	8001b02 <xTaskRemoveFromEventList+0x2a>
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 8001b06:	6a3b      	ldr	r3, [r7, #32]
 8001b08:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b0a:	61fb      	str	r3, [r7, #28]
 8001b0c:	6a3b      	ldr	r3, [r7, #32]
 8001b0e:	69db      	ldr	r3, [r3, #28]
 8001b10:	6a3a      	ldr	r2, [r7, #32]
 8001b12:	6a12      	ldr	r2, [r2, #32]
 8001b14:	609a      	str	r2, [r3, #8]
 8001b16:	6a3b      	ldr	r3, [r7, #32]
 8001b18:	6a1b      	ldr	r3, [r3, #32]
 8001b1a:	6a3a      	ldr	r2, [r7, #32]
 8001b1c:	69d2      	ldr	r2, [r2, #28]
 8001b1e:	605a      	str	r2, [r3, #4]
 8001b20:	69fb      	ldr	r3, [r7, #28]
 8001b22:	685a      	ldr	r2, [r3, #4]
 8001b24:	6a3b      	ldr	r3, [r7, #32]
 8001b26:	3318      	adds	r3, #24
 8001b28:	429a      	cmp	r2, r3
 8001b2a:	d103      	bne.n	8001b34 <xTaskRemoveFromEventList+0x5c>
 8001b2c:	6a3b      	ldr	r3, [r7, #32]
 8001b2e:	6a1a      	ldr	r2, [r3, #32]
 8001b30:	69fb      	ldr	r3, [r7, #28]
 8001b32:	605a      	str	r2, [r3, #4]
 8001b34:	6a3b      	ldr	r3, [r7, #32]
 8001b36:	2200      	movs	r2, #0
 8001b38:	629a      	str	r2, [r3, #40]	@ 0x28
 8001b3a:	69fb      	ldr	r3, [r7, #28]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	1e5a      	subs	r2, r3, #1
 8001b40:	69fb      	ldr	r3, [r7, #28]
 8001b42:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 8001b44:	4b4b      	ldr	r3, [pc, #300]	@ (8001c74 <xTaskRemoveFromEventList+0x19c>)
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d160      	bne.n	8001c0e <xTaskRemoveFromEventList+0x136>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 8001b4c:	6a3b      	ldr	r3, [r7, #32]
 8001b4e:	695b      	ldr	r3, [r3, #20]
 8001b50:	617b      	str	r3, [r7, #20]
 8001b52:	6a3b      	ldr	r3, [r7, #32]
 8001b54:	689b      	ldr	r3, [r3, #8]
 8001b56:	6a3a      	ldr	r2, [r7, #32]
 8001b58:	68d2      	ldr	r2, [r2, #12]
 8001b5a:	609a      	str	r2, [r3, #8]
 8001b5c:	6a3b      	ldr	r3, [r7, #32]
 8001b5e:	68db      	ldr	r3, [r3, #12]
 8001b60:	6a3a      	ldr	r2, [r7, #32]
 8001b62:	6892      	ldr	r2, [r2, #8]
 8001b64:	605a      	str	r2, [r3, #4]
 8001b66:	697b      	ldr	r3, [r7, #20]
 8001b68:	685a      	ldr	r2, [r3, #4]
 8001b6a:	6a3b      	ldr	r3, [r7, #32]
 8001b6c:	3304      	adds	r3, #4
 8001b6e:	429a      	cmp	r2, r3
 8001b70:	d103      	bne.n	8001b7a <xTaskRemoveFromEventList+0xa2>
 8001b72:	6a3b      	ldr	r3, [r7, #32]
 8001b74:	68da      	ldr	r2, [r3, #12]
 8001b76:	697b      	ldr	r3, [r7, #20]
 8001b78:	605a      	str	r2, [r3, #4]
 8001b7a:	6a3b      	ldr	r3, [r7, #32]
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	615a      	str	r2, [r3, #20]
 8001b80:	697b      	ldr	r3, [r7, #20]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	1e5a      	subs	r2, r3, #1
 8001b86:	697b      	ldr	r3, [r7, #20]
 8001b88:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 8001b8a:	6a3b      	ldr	r3, [r7, #32]
 8001b8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b8e:	2201      	movs	r2, #1
 8001b90:	409a      	lsls	r2, r3
 8001b92:	4b39      	ldr	r3, [pc, #228]	@ (8001c78 <xTaskRemoveFromEventList+0x1a0>)
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	4313      	orrs	r3, r2
 8001b98:	4a37      	ldr	r2, [pc, #220]	@ (8001c78 <xTaskRemoveFromEventList+0x1a0>)
 8001b9a:	6013      	str	r3, [r2, #0]
 8001b9c:	6a3b      	ldr	r3, [r7, #32]
 8001b9e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001ba0:	4936      	ldr	r1, [pc, #216]	@ (8001c7c <xTaskRemoveFromEventList+0x1a4>)
 8001ba2:	4613      	mov	r3, r2
 8001ba4:	009b      	lsls	r3, r3, #2
 8001ba6:	4413      	add	r3, r2
 8001ba8:	009b      	lsls	r3, r3, #2
 8001baa:	440b      	add	r3, r1
 8001bac:	3304      	adds	r3, #4
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	613b      	str	r3, [r7, #16]
 8001bb2:	6a3b      	ldr	r3, [r7, #32]
 8001bb4:	693a      	ldr	r2, [r7, #16]
 8001bb6:	609a      	str	r2, [r3, #8]
 8001bb8:	693b      	ldr	r3, [r7, #16]
 8001bba:	689a      	ldr	r2, [r3, #8]
 8001bbc:	6a3b      	ldr	r3, [r7, #32]
 8001bbe:	60da      	str	r2, [r3, #12]
 8001bc0:	693b      	ldr	r3, [r7, #16]
 8001bc2:	689b      	ldr	r3, [r3, #8]
 8001bc4:	6a3a      	ldr	r2, [r7, #32]
 8001bc6:	3204      	adds	r2, #4
 8001bc8:	605a      	str	r2, [r3, #4]
 8001bca:	6a3b      	ldr	r3, [r7, #32]
 8001bcc:	1d1a      	adds	r2, r3, #4
 8001bce:	693b      	ldr	r3, [r7, #16]
 8001bd0:	609a      	str	r2, [r3, #8]
 8001bd2:	6a3b      	ldr	r3, [r7, #32]
 8001bd4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001bd6:	4613      	mov	r3, r2
 8001bd8:	009b      	lsls	r3, r3, #2
 8001bda:	4413      	add	r3, r2
 8001bdc:	009b      	lsls	r3, r3, #2
 8001bde:	4a27      	ldr	r2, [pc, #156]	@ (8001c7c <xTaskRemoveFromEventList+0x1a4>)
 8001be0:	441a      	add	r2, r3
 8001be2:	6a3b      	ldr	r3, [r7, #32]
 8001be4:	615a      	str	r2, [r3, #20]
 8001be6:	6a3b      	ldr	r3, [r7, #32]
 8001be8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001bea:	4924      	ldr	r1, [pc, #144]	@ (8001c7c <xTaskRemoveFromEventList+0x1a4>)
 8001bec:	4613      	mov	r3, r2
 8001bee:	009b      	lsls	r3, r3, #2
 8001bf0:	4413      	add	r3, r2
 8001bf2:	009b      	lsls	r3, r3, #2
 8001bf4:	440b      	add	r3, r1
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	6a3a      	ldr	r2, [r7, #32]
 8001bfa:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8001bfc:	1c59      	adds	r1, r3, #1
 8001bfe:	481f      	ldr	r0, [pc, #124]	@ (8001c7c <xTaskRemoveFromEventList+0x1a4>)
 8001c00:	4613      	mov	r3, r2
 8001c02:	009b      	lsls	r3, r3, #2
 8001c04:	4413      	add	r3, r2
 8001c06:	009b      	lsls	r3, r3, #2
 8001c08:	4403      	add	r3, r0
 8001c0a:	6019      	str	r1, [r3, #0]
 8001c0c:	e01b      	b.n	8001c46 <xTaskRemoveFromEventList+0x16e>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8001c0e:	4b1c      	ldr	r3, [pc, #112]	@ (8001c80 <xTaskRemoveFromEventList+0x1a8>)
 8001c10:	685b      	ldr	r3, [r3, #4]
 8001c12:	61bb      	str	r3, [r7, #24]
 8001c14:	6a3b      	ldr	r3, [r7, #32]
 8001c16:	69ba      	ldr	r2, [r7, #24]
 8001c18:	61da      	str	r2, [r3, #28]
 8001c1a:	69bb      	ldr	r3, [r7, #24]
 8001c1c:	689a      	ldr	r2, [r3, #8]
 8001c1e:	6a3b      	ldr	r3, [r7, #32]
 8001c20:	621a      	str	r2, [r3, #32]
 8001c22:	69bb      	ldr	r3, [r7, #24]
 8001c24:	689b      	ldr	r3, [r3, #8]
 8001c26:	6a3a      	ldr	r2, [r7, #32]
 8001c28:	3218      	adds	r2, #24
 8001c2a:	605a      	str	r2, [r3, #4]
 8001c2c:	6a3b      	ldr	r3, [r7, #32]
 8001c2e:	f103 0218 	add.w	r2, r3, #24
 8001c32:	69bb      	ldr	r3, [r7, #24]
 8001c34:	609a      	str	r2, [r3, #8]
 8001c36:	6a3b      	ldr	r3, [r7, #32]
 8001c38:	4a11      	ldr	r2, [pc, #68]	@ (8001c80 <xTaskRemoveFromEventList+0x1a8>)
 8001c3a:	629a      	str	r2, [r3, #40]	@ 0x28
 8001c3c:	4b10      	ldr	r3, [pc, #64]	@ (8001c80 <xTaskRemoveFromEventList+0x1a8>)
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	3301      	adds	r3, #1
 8001c42:	4a0f      	ldr	r2, [pc, #60]	@ (8001c80 <xTaskRemoveFromEventList+0x1a8>)
 8001c44:	6013      	str	r3, [r2, #0]
    }

    #if ( configNUMBER_OF_CORES == 1 )
    {
        if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8001c46:	6a3b      	ldr	r3, [r7, #32]
 8001c48:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001c4a:	4b0e      	ldr	r3, [pc, #56]	@ (8001c84 <xTaskRemoveFromEventList+0x1ac>)
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c50:	429a      	cmp	r2, r3
 8001c52:	d905      	bls.n	8001c60 <xTaskRemoveFromEventList+0x188>
        {
            /* Return true if the task removed from the event list has a higher
             * priority than the calling task.  This allows the calling task to know if
             * it should force a context switch now. */
            xReturn = pdTRUE;
 8001c54:	2301      	movs	r3, #1
 8001c56:	627b      	str	r3, [r7, #36]	@ 0x24

            /* Mark that a yield is pending in case the user is not using the
             * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
            xYieldPendings[ 0 ] = pdTRUE;
 8001c58:	4b0b      	ldr	r3, [pc, #44]	@ (8001c88 <xTaskRemoveFromEventList+0x1b0>)
 8001c5a:	2201      	movs	r2, #1
 8001c5c:	601a      	str	r2, [r3, #0]
 8001c5e:	e001      	b.n	8001c64 <xTaskRemoveFromEventList+0x18c>
        }
        else
        {
            xReturn = pdFALSE;
 8001c60:	2300      	movs	r3, #0
 8001c62:	627b      	str	r3, [r7, #36]	@ 0x24
        #endif /* #if ( configUSE_PREEMPTION == 1 ) */
    }
    #endif /* #if ( configNUMBER_OF_CORES == 1 ) */

    traceRETURN_xTaskRemoveFromEventList( xReturn );
    return xReturn;
 8001c64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8001c66:	4618      	mov	r0, r3
 8001c68:	372c      	adds	r7, #44	@ 0x2c
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c70:	4770      	bx	lr
 8001c72:	bf00      	nop
 8001c74:	200001c4 	.word	0x200001c4
 8001c78:	200001a4 	.word	0x200001a4
 8001c7c:	200000c8 	.word	0x200000c8
 8001c80:	2000015c 	.word	0x2000015c
 8001c84:	200000c4 	.word	0x200000c4
 8001c88:	200001b0 	.word	0x200001b0

08001c8c <vTaskInternalSetTimeOutState>:
    traceRETURN_vTaskSetTimeOutState();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8001c8c:	b480      	push	{r7}
 8001c8e:	b083      	sub	sp, #12
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	6078      	str	r0, [r7, #4]
    traceENTER_vTaskInternalSetTimeOutState( pxTimeOut );

    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8001c94:	4b06      	ldr	r3, [pc, #24]	@ (8001cb0 <vTaskInternalSetTimeOutState+0x24>)
 8001c96:	681a      	ldr	r2, [r3, #0]
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8001c9c:	4b05      	ldr	r3, [pc, #20]	@ (8001cb4 <vTaskInternalSetTimeOutState+0x28>)
 8001c9e:	681a      	ldr	r2, [r3, #0]
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	605a      	str	r2, [r3, #4]

    traceRETURN_vTaskInternalSetTimeOutState();
}
 8001ca4:	bf00      	nop
 8001ca6:	370c      	adds	r7, #12
 8001ca8:	46bd      	mov	sp, r7
 8001caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cae:	4770      	bx	lr
 8001cb0:	200001b4 	.word	0x200001b4
 8001cb4:	200001a0 	.word	0x200001a0

08001cb8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	b088      	sub	sp, #32
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	6078      	str	r0, [r7, #4]
 8001cc0:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    traceENTER_xTaskCheckForTimeOut( pxTimeOut, pxTicksToWait );

    configASSERT( pxTimeOut );
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d10b      	bne.n	8001ce0 <xTaskCheckForTimeOut+0x28>
    __asm volatile
 8001cc8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001ccc:	f383 8811 	msr	BASEPRI, r3
 8001cd0:	f3bf 8f6f 	isb	sy
 8001cd4:	f3bf 8f4f 	dsb	sy
 8001cd8:	613b      	str	r3, [r7, #16]
}
 8001cda:	bf00      	nop
 8001cdc:	bf00      	nop
 8001cde:	e7fd      	b.n	8001cdc <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 8001ce0:	683b      	ldr	r3, [r7, #0]
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d10b      	bne.n	8001cfe <xTaskCheckForTimeOut+0x46>
    __asm volatile
 8001ce6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001cea:	f383 8811 	msr	BASEPRI, r3
 8001cee:	f3bf 8f6f 	isb	sy
 8001cf2:	f3bf 8f4f 	dsb	sy
 8001cf6:	60fb      	str	r3, [r7, #12]
}
 8001cf8:	bf00      	nop
 8001cfa:	bf00      	nop
 8001cfc:	e7fd      	b.n	8001cfa <xTaskCheckForTimeOut+0x42>

    taskENTER_CRITICAL();
 8001cfe:	f000 fdb1 	bl	8002864 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 8001d02:	4b1f      	ldr	r3, [pc, #124]	@ (8001d80 <xTaskCheckForTimeOut+0xc8>)
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	685b      	ldr	r3, [r3, #4]
 8001d0c:	69ba      	ldr	r2, [r7, #24]
 8001d0e:	1ad3      	subs	r3, r2, r3
 8001d10:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 8001d12:	683b      	ldr	r3, [r7, #0]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001d1a:	d102      	bne.n	8001d22 <xTaskCheckForTimeOut+0x6a>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8001d1c:	2300      	movs	r3, #0
 8001d1e:	61fb      	str	r3, [r7, #28]
 8001d20:	e026      	b.n	8001d70 <xTaskCheckForTimeOut+0xb8>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) )
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681a      	ldr	r2, [r3, #0]
 8001d26:	4b17      	ldr	r3, [pc, #92]	@ (8001d84 <xTaskCheckForTimeOut+0xcc>)
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	429a      	cmp	r2, r3
 8001d2c:	d00a      	beq.n	8001d44 <xTaskCheckForTimeOut+0x8c>
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	685b      	ldr	r3, [r3, #4]
 8001d32:	69ba      	ldr	r2, [r7, #24]
 8001d34:	429a      	cmp	r2, r3
 8001d36:	d305      	bcc.n	8001d44 <xTaskCheckForTimeOut+0x8c>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8001d38:	2301      	movs	r3, #1
 8001d3a:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 8001d3c:	683b      	ldr	r3, [r7, #0]
 8001d3e:	2200      	movs	r2, #0
 8001d40:	601a      	str	r2, [r3, #0]
 8001d42:	e015      	b.n	8001d70 <xTaskCheckForTimeOut+0xb8>
        }
        else if( xElapsedTime < *pxTicksToWait )
 8001d44:	683b      	ldr	r3, [r7, #0]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	697a      	ldr	r2, [r7, #20]
 8001d4a:	429a      	cmp	r2, r3
 8001d4c:	d20b      	bcs.n	8001d66 <xTaskCheckForTimeOut+0xae>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 8001d4e:	683b      	ldr	r3, [r7, #0]
 8001d50:	681a      	ldr	r2, [r3, #0]
 8001d52:	697b      	ldr	r3, [r7, #20]
 8001d54:	1ad2      	subs	r2, r2, r3
 8001d56:	683b      	ldr	r3, [r7, #0]
 8001d58:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 8001d5a:	6878      	ldr	r0, [r7, #4]
 8001d5c:	f7ff ff96 	bl	8001c8c <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8001d60:	2300      	movs	r3, #0
 8001d62:	61fb      	str	r3, [r7, #28]
 8001d64:	e004      	b.n	8001d70 <xTaskCheckForTimeOut+0xb8>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 8001d66:	683b      	ldr	r3, [r7, #0]
 8001d68:	2200      	movs	r2, #0
 8001d6a:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8001d6c:	2301      	movs	r3, #1
 8001d6e:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 8001d70:	f000 fdaa 	bl	80028c8 <vPortExitCritical>

    traceRETURN_xTaskCheckForTimeOut( xReturn );

    return xReturn;
 8001d74:	69fb      	ldr	r3, [r7, #28]
}
 8001d76:	4618      	mov	r0, r3
 8001d78:	3720      	adds	r7, #32
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	bd80      	pop	{r7, pc}
 8001d7e:	bf00      	nop
 8001d80:	200001a0 	.word	0x200001a0
 8001d84:	200001b4 	.word	0x200001b4

08001d88 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8001d88:	b480      	push	{r7}
 8001d8a:	af00      	add	r7, sp, #0
    traceENTER_vTaskMissedYield();

    /* Must be called from within a critical section. */
    xYieldPendings[ portGET_CORE_ID() ] = pdTRUE;
 8001d8c:	4b03      	ldr	r3, [pc, #12]	@ (8001d9c <vTaskMissedYield+0x14>)
 8001d8e:	2201      	movs	r2, #1
 8001d90:	601a      	str	r2, [r3, #0]

    traceRETURN_vTaskMissedYield();
}
 8001d92:	bf00      	nop
 8001d94:	46bd      	mov	sp, r7
 8001d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9a:	4770      	bx	lr
 8001d9c:	200001b0 	.word	0x200001b0

08001da0 <prvIdleTask>:
 * void prvIdleTask( void *pvParameters );
 *
 */

static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8001da0:	b580      	push	{r7, lr}
 8001da2:	b082      	sub	sp, #8
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	6078      	str	r0, [r7, #4]

    for( ; configCONTROL_INFINITE_LOOP(); )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8001da8:	f000 f852 	bl	8001e50 <prvCheckTasksWaitingTermination>
             * A critical region is not required here as we are just reading from
             * the list, and an occasional incorrect value will not matter.  If
             * the ready list at the idle priority contains one more task than the
             * number of idle tasks, which is equal to the configured numbers of cores
             * then a task other than the idle task is ready to execute. */
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) configNUMBER_OF_CORES )
 8001dac:	4b06      	ldr	r3, [pc, #24]	@ (8001dc8 <prvIdleTask+0x28>)
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	2b01      	cmp	r3, #1
 8001db2:	d9f9      	bls.n	8001da8 <prvIdleTask+0x8>
            {
                taskYIELD();
 8001db4:	4b05      	ldr	r3, [pc, #20]	@ (8001dcc <prvIdleTask+0x2c>)
 8001db6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001dba:	601a      	str	r2, [r3, #0]
 8001dbc:	f3bf 8f4f 	dsb	sy
 8001dc0:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8001dc4:	e7f0      	b.n	8001da8 <prvIdleTask+0x8>
 8001dc6:	bf00      	nop
 8001dc8:	200000c8 	.word	0x200000c8
 8001dcc:	e000ed04 	.word	0xe000ed04

08001dd0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	b082      	sub	sp, #8
 8001dd4:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	607b      	str	r3, [r7, #4]
 8001dda:	e00c      	b.n	8001df6 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8001ddc:	687a      	ldr	r2, [r7, #4]
 8001dde:	4613      	mov	r3, r2
 8001de0:	009b      	lsls	r3, r3, #2
 8001de2:	4413      	add	r3, r2
 8001de4:	009b      	lsls	r3, r3, #2
 8001de6:	4a12      	ldr	r2, [pc, #72]	@ (8001e30 <prvInitialiseTaskLists+0x60>)
 8001de8:	4413      	add	r3, r2
 8001dea:	4618      	mov	r0, r3
 8001dec:	f7fe fdc2 	bl	8000974 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	3301      	adds	r3, #1
 8001df4:	607b      	str	r3, [r7, #4]
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	2b04      	cmp	r3, #4
 8001dfa:	d9ef      	bls.n	8001ddc <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8001dfc:	480d      	ldr	r0, [pc, #52]	@ (8001e34 <prvInitialiseTaskLists+0x64>)
 8001dfe:	f7fe fdb9 	bl	8000974 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8001e02:	480d      	ldr	r0, [pc, #52]	@ (8001e38 <prvInitialiseTaskLists+0x68>)
 8001e04:	f7fe fdb6 	bl	8000974 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8001e08:	480c      	ldr	r0, [pc, #48]	@ (8001e3c <prvInitialiseTaskLists+0x6c>)
 8001e0a:	f7fe fdb3 	bl	8000974 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
    {
        vListInitialise( &xTasksWaitingTermination );
 8001e0e:	480c      	ldr	r0, [pc, #48]	@ (8001e40 <prvInitialiseTaskLists+0x70>)
 8001e10:	f7fe fdb0 	bl	8000974 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        vListInitialise( &xSuspendedTaskList );
 8001e14:	480b      	ldr	r0, [pc, #44]	@ (8001e44 <prvInitialiseTaskLists+0x74>)
 8001e16:	f7fe fdad 	bl	8000974 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8001e1a:	4b0b      	ldr	r3, [pc, #44]	@ (8001e48 <prvInitialiseTaskLists+0x78>)
 8001e1c:	4a05      	ldr	r2, [pc, #20]	@ (8001e34 <prvInitialiseTaskLists+0x64>)
 8001e1e:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8001e20:	4b0a      	ldr	r3, [pc, #40]	@ (8001e4c <prvInitialiseTaskLists+0x7c>)
 8001e22:	4a05      	ldr	r2, [pc, #20]	@ (8001e38 <prvInitialiseTaskLists+0x68>)
 8001e24:	601a      	str	r2, [r3, #0]
}
 8001e26:	bf00      	nop
 8001e28:	3708      	adds	r7, #8
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	bd80      	pop	{r7, pc}
 8001e2e:	bf00      	nop
 8001e30:	200000c8 	.word	0x200000c8
 8001e34:	2000012c 	.word	0x2000012c
 8001e38:	20000140 	.word	0x20000140
 8001e3c:	2000015c 	.word	0x2000015c
 8001e40:	20000170 	.word	0x20000170
 8001e44:	20000188 	.word	0x20000188
 8001e48:	20000154 	.word	0x20000154
 8001e4c:	20000158 	.word	0x20000158

08001e50 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8001e50:	b580      	push	{r7, lr}
 8001e52:	b082      	sub	sp, #8
 8001e54:	af00      	add	r7, sp, #0
    {
        TCB_t * pxTCB;

        /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
         * being called too often in the idle task. */
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8001e56:	e019      	b.n	8001e8c <prvCheckTasksWaitingTermination+0x3c>
        {
            #if ( configNUMBER_OF_CORES == 1 )
            {
                taskENTER_CRITICAL();
 8001e58:	f000 fd04 	bl	8002864 <vPortEnterCritical>
                {
                    {
                        /* MISRA Ref 11.5.3 [Void pointer assignment] */
                        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                        /* coverity[misra_c_2012_rule_11_5_violation] */
                        pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8001e5c:	4b10      	ldr	r3, [pc, #64]	@ (8001ea0 <prvCheckTasksWaitingTermination+0x50>)
 8001e5e:	68db      	ldr	r3, [r3, #12]
 8001e60:	68db      	ldr	r3, [r3, #12]
 8001e62:	607b      	str	r3, [r7, #4]
                        ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	3304      	adds	r3, #4
 8001e68:	4618      	mov	r0, r3
 8001e6a:	f7fe fde9 	bl	8000a40 <uxListRemove>
                        --uxCurrentNumberOfTasks;
 8001e6e:	4b0d      	ldr	r3, [pc, #52]	@ (8001ea4 <prvCheckTasksWaitingTermination+0x54>)
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	3b01      	subs	r3, #1
 8001e74:	4a0b      	ldr	r2, [pc, #44]	@ (8001ea4 <prvCheckTasksWaitingTermination+0x54>)
 8001e76:	6013      	str	r3, [r2, #0]
                        --uxDeletedTasksWaitingCleanUp;
 8001e78:	4b0b      	ldr	r3, [pc, #44]	@ (8001ea8 <prvCheckTasksWaitingTermination+0x58>)
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	3b01      	subs	r3, #1
 8001e7e:	4a0a      	ldr	r2, [pc, #40]	@ (8001ea8 <prvCheckTasksWaitingTermination+0x58>)
 8001e80:	6013      	str	r3, [r2, #0]
                    }
                }
                taskEXIT_CRITICAL();
 8001e82:	f000 fd21 	bl	80028c8 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 8001e86:	6878      	ldr	r0, [r7, #4]
 8001e88:	f000 f810 	bl	8001eac <prvDeleteTCB>
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8001e8c:	4b06      	ldr	r3, [pc, #24]	@ (8001ea8 <prvCheckTasksWaitingTermination+0x58>)
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d1e1      	bne.n	8001e58 <prvCheckTasksWaitingTermination+0x8>
            }
            #endif /* #if( configNUMBER_OF_CORES == 1 ) */
        }
    }
    #endif /* INCLUDE_vTaskDelete */
}
 8001e94:	bf00      	nop
 8001e96:	bf00      	nop
 8001e98:	3708      	adds	r7, #8
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	bd80      	pop	{r7, pc}
 8001e9e:	bf00      	nop
 8001ea0:	20000170 	.word	0x20000170
 8001ea4:	2000019c 	.word	0x2000019c
 8001ea8:	20000184 	.word	0x20000184

08001eac <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8001eac:	b580      	push	{r7, lr}
 8001eae:	b082      	sub	sp, #8
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
        {
            /* The task can only have been allocated dynamically - free both
             * the stack and TCB. */
            vPortFreeStack( pxTCB->pxStack );
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001eb8:	4618      	mov	r0, r3
 8001eba:	f000 feeb 	bl	8002c94 <vPortFree>
            vPortFree( pxTCB );
 8001ebe:	6878      	ldr	r0, [r7, #4]
 8001ec0:	f000 fee8 	bl	8002c94 <vPortFree>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8001ec4:	bf00      	nop
 8001ec6:	3708      	adds	r7, #8
 8001ec8:	46bd      	mov	sp, r7
 8001eca:	bd80      	pop	{r7, pc}

08001ecc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8001ecc:	b480      	push	{r7}
 8001ece:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001ed0:	4b0a      	ldr	r3, [pc, #40]	@ (8001efc <prvResetNextTaskUnblockTime+0x30>)
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d104      	bne.n	8001ee4 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8001eda:	4b09      	ldr	r3, [pc, #36]	@ (8001f00 <prvResetNextTaskUnblockTime+0x34>)
 8001edc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001ee0:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8001ee2:	e005      	b.n	8001ef0 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8001ee4:	4b05      	ldr	r3, [pc, #20]	@ (8001efc <prvResetNextTaskUnblockTime+0x30>)
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	68db      	ldr	r3, [r3, #12]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	4a04      	ldr	r2, [pc, #16]	@ (8001f00 <prvResetNextTaskUnblockTime+0x34>)
 8001eee:	6013      	str	r3, [r2, #0]
}
 8001ef0:	bf00      	nop
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef8:	4770      	bx	lr
 8001efa:	bf00      	nop
 8001efc:	20000154 	.word	0x20000154
 8001f00:	200001bc 	.word	0x200001bc

08001f04 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8001f04:	b480      	push	{r7}
 8001f06:	b083      	sub	sp, #12
 8001f08:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        traceENTER_xTaskGetSchedulerState();

        if( xSchedulerRunning == pdFALSE )
 8001f0a:	4b0b      	ldr	r3, [pc, #44]	@ (8001f38 <xTaskGetSchedulerState+0x34>)
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d102      	bne.n	8001f18 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 8001f12:	2301      	movs	r3, #1
 8001f14:	607b      	str	r3, [r7, #4]
 8001f16:	e008      	b.n	8001f2a <xTaskGetSchedulerState+0x26>
        {
            #if ( configNUMBER_OF_CORES > 1 )
                taskENTER_CRITICAL();
            #endif
            {
                if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 8001f18:	4b08      	ldr	r3, [pc, #32]	@ (8001f3c <xTaskGetSchedulerState+0x38>)
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d102      	bne.n	8001f26 <xTaskGetSchedulerState+0x22>
                {
                    xReturn = taskSCHEDULER_RUNNING;
 8001f20:	2302      	movs	r3, #2
 8001f22:	607b      	str	r3, [r7, #4]
 8001f24:	e001      	b.n	8001f2a <xTaskGetSchedulerState+0x26>
                }
                else
                {
                    xReturn = taskSCHEDULER_SUSPENDED;
 8001f26:	2300      	movs	r3, #0
 8001f28:	607b      	str	r3, [r7, #4]
            #endif
        }

        traceRETURN_xTaskGetSchedulerState( xReturn );

        return xReturn;
 8001f2a:	687b      	ldr	r3, [r7, #4]
    }
 8001f2c:	4618      	mov	r0, r3
 8001f2e:	370c      	adds	r7, #12
 8001f30:	46bd      	mov	sp, r7
 8001f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f36:	4770      	bx	lr
 8001f38:	200001a8 	.word	0x200001a8
 8001f3c:	200001c4 	.word	0x200001c4

08001f40 <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8001f40:	b580      	push	{r7, lr}
 8001f42:	b088      	sub	sp, #32
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	6078      	str	r0, [r7, #4]
 8001f48:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8001f4a:	4b37      	ldr	r3, [pc, #220]	@ (8002028 <prvAddCurrentTaskToDelayedList+0xe8>)
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	61fb      	str	r3, [r7, #28]
    List_t * const pxDelayedList = pxDelayedTaskList;
 8001f50:	4b36      	ldr	r3, [pc, #216]	@ (800202c <prvAddCurrentTaskToDelayedList+0xec>)
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	61bb      	str	r3, [r7, #24]
    List_t * const pxOverflowDelayedList = pxOverflowDelayedTaskList;
 8001f56:	4b36      	ldr	r3, [pc, #216]	@ (8002030 <prvAddCurrentTaskToDelayedList+0xf0>)
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	617b      	str	r3, [r7, #20]
    }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8001f5c:	4b35      	ldr	r3, [pc, #212]	@ (8002034 <prvAddCurrentTaskToDelayedList+0xf4>)
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	3304      	adds	r3, #4
 8001f62:	4618      	mov	r0, r3
 8001f64:	f7fe fd6c 	bl	8000a40 <uxListRemove>
 8001f68:	4603      	mov	r3, r0
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d10b      	bne.n	8001f86 <prvAddCurrentTaskToDelayedList+0x46>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8001f6e:	4b31      	ldr	r3, [pc, #196]	@ (8002034 <prvAddCurrentTaskToDelayedList+0xf4>)
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f74:	2201      	movs	r2, #1
 8001f76:	fa02 f303 	lsl.w	r3, r2, r3
 8001f7a:	43da      	mvns	r2, r3
 8001f7c:	4b2e      	ldr	r3, [pc, #184]	@ (8002038 <prvAddCurrentTaskToDelayedList+0xf8>)
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	4013      	ands	r3, r2
 8001f82:	4a2d      	ldr	r2, [pc, #180]	@ (8002038 <prvAddCurrentTaskToDelayedList+0xf8>)
 8001f84:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001f8c:	d124      	bne.n	8001fd8 <prvAddCurrentTaskToDelayedList+0x98>
 8001f8e:	683b      	ldr	r3, [r7, #0]
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d021      	beq.n	8001fd8 <prvAddCurrentTaskToDelayedList+0x98>
        {
            /* Add the task to the suspended task list instead of a delayed task
             * list to ensure it is not woken by a timing event.  It will block
             * indefinitely. */
            listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8001f94:	4b29      	ldr	r3, [pc, #164]	@ (800203c <prvAddCurrentTaskToDelayedList+0xfc>)
 8001f96:	685b      	ldr	r3, [r3, #4]
 8001f98:	613b      	str	r3, [r7, #16]
 8001f9a:	4b26      	ldr	r3, [pc, #152]	@ (8002034 <prvAddCurrentTaskToDelayedList+0xf4>)
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	693a      	ldr	r2, [r7, #16]
 8001fa0:	609a      	str	r2, [r3, #8]
 8001fa2:	4b24      	ldr	r3, [pc, #144]	@ (8002034 <prvAddCurrentTaskToDelayedList+0xf4>)
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	693a      	ldr	r2, [r7, #16]
 8001fa8:	6892      	ldr	r2, [r2, #8]
 8001faa:	60da      	str	r2, [r3, #12]
 8001fac:	4b21      	ldr	r3, [pc, #132]	@ (8002034 <prvAddCurrentTaskToDelayedList+0xf4>)
 8001fae:	681a      	ldr	r2, [r3, #0]
 8001fb0:	693b      	ldr	r3, [r7, #16]
 8001fb2:	689b      	ldr	r3, [r3, #8]
 8001fb4:	3204      	adds	r2, #4
 8001fb6:	605a      	str	r2, [r3, #4]
 8001fb8:	4b1e      	ldr	r3, [pc, #120]	@ (8002034 <prvAddCurrentTaskToDelayedList+0xf4>)
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	1d1a      	adds	r2, r3, #4
 8001fbe:	693b      	ldr	r3, [r7, #16]
 8001fc0:	609a      	str	r2, [r3, #8]
 8001fc2:	4b1c      	ldr	r3, [pc, #112]	@ (8002034 <prvAddCurrentTaskToDelayedList+0xf4>)
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	4a1d      	ldr	r2, [pc, #116]	@ (800203c <prvAddCurrentTaskToDelayedList+0xfc>)
 8001fc8:	615a      	str	r2, [r3, #20]
 8001fca:	4b1c      	ldr	r3, [pc, #112]	@ (800203c <prvAddCurrentTaskToDelayedList+0xfc>)
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	3301      	adds	r3, #1
 8001fd0:	4a1a      	ldr	r2, [pc, #104]	@ (800203c <prvAddCurrentTaskToDelayedList+0xfc>)
 8001fd2:	6013      	str	r3, [r2, #0]
 8001fd4:	bf00      	nop

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
 8001fd6:	e022      	b.n	800201e <prvAddCurrentTaskToDelayedList+0xde>
            xTimeToWake = xConstTickCount + xTicksToWait;
 8001fd8:	69fa      	ldr	r2, [r7, #28]
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	4413      	add	r3, r2
 8001fde:	60fb      	str	r3, [r7, #12]
            listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8001fe0:	4b14      	ldr	r3, [pc, #80]	@ (8002034 <prvAddCurrentTaskToDelayedList+0xf4>)
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	68fa      	ldr	r2, [r7, #12]
 8001fe6:	605a      	str	r2, [r3, #4]
            if( xTimeToWake < xConstTickCount )
 8001fe8:	68fa      	ldr	r2, [r7, #12]
 8001fea:	69fb      	ldr	r3, [r7, #28]
 8001fec:	429a      	cmp	r2, r3
 8001fee:	d207      	bcs.n	8002000 <prvAddCurrentTaskToDelayedList+0xc0>
                vListInsert( pxOverflowDelayedList, &( pxCurrentTCB->xStateListItem ) );
 8001ff0:	4b10      	ldr	r3, [pc, #64]	@ (8002034 <prvAddCurrentTaskToDelayedList+0xf4>)
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	3304      	adds	r3, #4
 8001ff6:	4619      	mov	r1, r3
 8001ff8:	6978      	ldr	r0, [r7, #20]
 8001ffa:	f7fe fce8 	bl	80009ce <vListInsert>
}
 8001ffe:	e00e      	b.n	800201e <prvAddCurrentTaskToDelayedList+0xde>
                vListInsert( pxDelayedList, &( pxCurrentTCB->xStateListItem ) );
 8002000:	4b0c      	ldr	r3, [pc, #48]	@ (8002034 <prvAddCurrentTaskToDelayedList+0xf4>)
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	3304      	adds	r3, #4
 8002006:	4619      	mov	r1, r3
 8002008:	69b8      	ldr	r0, [r7, #24]
 800200a:	f7fe fce0 	bl	80009ce <vListInsert>
                if( xTimeToWake < xNextTaskUnblockTime )
 800200e:	4b0c      	ldr	r3, [pc, #48]	@ (8002040 <prvAddCurrentTaskToDelayedList+0x100>)
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	68fa      	ldr	r2, [r7, #12]
 8002014:	429a      	cmp	r2, r3
 8002016:	d202      	bcs.n	800201e <prvAddCurrentTaskToDelayedList+0xde>
                    xNextTaskUnblockTime = xTimeToWake;
 8002018:	4a09      	ldr	r2, [pc, #36]	@ (8002040 <prvAddCurrentTaskToDelayedList+0x100>)
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	6013      	str	r3, [r2, #0]
}
 800201e:	bf00      	nop
 8002020:	3720      	adds	r7, #32
 8002022:	46bd      	mov	sp, r7
 8002024:	bd80      	pop	{r7, pc}
 8002026:	bf00      	nop
 8002028:	200001a0 	.word	0x200001a0
 800202c:	20000154 	.word	0x20000154
 8002030:	20000158 	.word	0x20000158
 8002034:	200000c4 	.word	0x200000c4
 8002038:	200001a4 	.word	0x200001a4
 800203c:	20000188 	.word	0x20000188
 8002040:	200001bc 	.word	0x200001bc

08002044 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 8002044:	b580      	push	{r7, lr}
 8002046:	b084      	sub	sp, #16
 8002048:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 800204a:	2300      	movs	r3, #0
 800204c:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 800204e:	f000 fa59 	bl	8002504 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 8002052:	4b12      	ldr	r3, [pc, #72]	@ (800209c <xTimerCreateTimerTask+0x58>)
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	2b00      	cmp	r3, #0
 8002058:	d00b      	beq.n	8002072 <xTimerCreateTimerTask+0x2e>
                        xReturn = pdPASS;
                    }
                }
                #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
                {
                    xReturn = xTaskCreate( &prvTimerTask,
 800205a:	4b11      	ldr	r3, [pc, #68]	@ (80020a0 <xTimerCreateTimerTask+0x5c>)
 800205c:	9301      	str	r3, [sp, #4]
 800205e:	2302      	movs	r3, #2
 8002060:	9300      	str	r3, [sp, #0]
 8002062:	2300      	movs	r3, #0
 8002064:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8002068:	490e      	ldr	r1, [pc, #56]	@ (80020a4 <xTimerCreateTimerTask+0x60>)
 800206a:	480f      	ldr	r0, [pc, #60]	@ (80020a8 <xTimerCreateTimerTask+0x64>)
 800206c:	f7ff f846 	bl	80010fc <xTaskCreate>
 8002070:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	2b00      	cmp	r3, #0
 8002076:	d10b      	bne.n	8002090 <xTimerCreateTimerTask+0x4c>
    __asm volatile
 8002078:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800207c:	f383 8811 	msr	BASEPRI, r3
 8002080:	f3bf 8f6f 	isb	sy
 8002084:	f3bf 8f4f 	dsb	sy
 8002088:	603b      	str	r3, [r7, #0]
}
 800208a:	bf00      	nop
 800208c:	bf00      	nop
 800208e:	e7fd      	b.n	800208c <xTimerCreateTimerTask+0x48>

        traceRETURN_xTimerCreateTimerTask( xReturn );

        return xReturn;
 8002090:	687b      	ldr	r3, [r7, #4]
    }
 8002092:	4618      	mov	r0, r3
 8002094:	3708      	adds	r7, #8
 8002096:	46bd      	mov	sp, r7
 8002098:	bd80      	pop	{r7, pc}
 800209a:	bf00      	nop
 800209c:	200001f8 	.word	0x200001f8
 80020a0:	200001fc 	.word	0x200001fc
 80020a4:	08003908 	.word	0x08003908
 80020a8:	08002151 	.word	0x08002151

080020ac <prvReloadTimer>:
/*-----------------------------------------------------------*/

    static void prvReloadTimer( Timer_t * const pxTimer,
                                TickType_t xExpiredTime,
                                const TickType_t xTimeNow )
    {
 80020ac:	b580      	push	{r7, lr}
 80020ae:	b084      	sub	sp, #16
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	60f8      	str	r0, [r7, #12]
 80020b4:	60b9      	str	r1, [r7, #8]
 80020b6:	607a      	str	r2, [r7, #4]
        /* Insert the timer into the appropriate list for the next expiry time.
         * If the next expiry time has already passed, advance the expiry time,
         * call the callback function, and try again. */
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 80020b8:	e008      	b.n	80020cc <prvReloadTimer+0x20>
        {
            /* Advance the expiry time. */
            xExpiredTime += pxTimer->xTimerPeriodInTicks;
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	699b      	ldr	r3, [r3, #24]
 80020be:	68ba      	ldr	r2, [r7, #8]
 80020c0:	4413      	add	r3, r2
 80020c2:	60bb      	str	r3, [r7, #8]

            /* Call the timer callback. */
            traceTIMER_EXPIRED( pxTimer );
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	6a1b      	ldr	r3, [r3, #32]
 80020c8:	68f8      	ldr	r0, [r7, #12]
 80020ca:	4798      	blx	r3
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	699a      	ldr	r2, [r3, #24]
 80020d0:	68bb      	ldr	r3, [r7, #8]
 80020d2:	18d1      	adds	r1, r2, r3
 80020d4:	68bb      	ldr	r3, [r7, #8]
 80020d6:	687a      	ldr	r2, [r7, #4]
 80020d8:	68f8      	ldr	r0, [r7, #12]
 80020da:	f000 f8df 	bl	800229c <prvInsertTimerInActiveList>
 80020de:	4603      	mov	r3, r0
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d1ea      	bne.n	80020ba <prvReloadTimer+0xe>
        }
    }
 80020e4:	bf00      	nop
 80020e6:	bf00      	nop
 80020e8:	3710      	adds	r7, #16
 80020ea:	46bd      	mov	sp, r7
 80020ec:	bd80      	pop	{r7, pc}
	...

080020f0 <prvProcessExpiredTimer>:
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 80020f0:	b580      	push	{r7, lr}
 80020f2:	b084      	sub	sp, #16
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	6078      	str	r0, [r7, #4]
 80020f8:	6039      	str	r1, [r7, #0]
        /* MISRA Ref 11.5.3 [Void pointer assignment] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
        /* coverity[misra_c_2012_rule_11_5_violation] */
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 80020fa:	4b14      	ldr	r3, [pc, #80]	@ (800214c <prvProcessExpiredTimer+0x5c>)
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	68db      	ldr	r3, [r3, #12]
 8002100:	68db      	ldr	r3, [r3, #12]
 8002102:	60fb      	str	r3, [r7, #12]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	3304      	adds	r3, #4
 8002108:	4618      	mov	r0, r3
 800210a:	f7fe fc99 	bl	8000a40 <uxListRemove>

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0U )
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8002114:	f003 0304 	and.w	r3, r3, #4
 8002118:	2b00      	cmp	r3, #0
 800211a:	d005      	beq.n	8002128 <prvProcessExpiredTimer+0x38>
        {
            prvReloadTimer( pxTimer, xNextExpireTime, xTimeNow );
 800211c:	683a      	ldr	r2, [r7, #0]
 800211e:	6879      	ldr	r1, [r7, #4]
 8002120:	68f8      	ldr	r0, [r7, #12]
 8002122:	f7ff ffc3 	bl	80020ac <prvReloadTimer>
 8002126:	e008      	b.n	800213a <prvProcessExpiredTimer+0x4a>
        }
        else
        {
            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800212e:	f023 0301 	bic.w	r3, r3, #1
 8002132:	b2da      	uxtb	r2, r3
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
        }

        /* Call the timer callback. */
        traceTIMER_EXPIRED( pxTimer );
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	6a1b      	ldr	r3, [r3, #32]
 800213e:	68f8      	ldr	r0, [r7, #12]
 8002140:	4798      	blx	r3
    }
 8002142:	bf00      	nop
 8002144:	3710      	adds	r7, #16
 8002146:	46bd      	mov	sp, r7
 8002148:	bd80      	pop	{r7, pc}
 800214a:	bf00      	nop
 800214c:	200001f0 	.word	0x200001f0

08002150 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 8002150:	b580      	push	{r7, lr}
 8002152:	b084      	sub	sp, #16
 8002154:	af00      	add	r7, sp, #0
 8002156:	6078      	str	r0, [r7, #4]

        for( ; configCONTROL_INFINITE_LOOP(); )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8002158:	f107 0308 	add.w	r3, r7, #8
 800215c:	4618      	mov	r0, r3
 800215e:	f000 f859 	bl	8002214 <prvGetNextExpireTime>
 8002162:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8002164:	68bb      	ldr	r3, [r7, #8]
 8002166:	4619      	mov	r1, r3
 8002168:	68f8      	ldr	r0, [r7, #12]
 800216a:	f000 f805 	bl	8002178 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 800216e:	f000 f8d7 	bl	8002320 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8002172:	bf00      	nop
 8002174:	e7f0      	b.n	8002158 <prvTimerTask+0x8>
	...

08002178 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 8002178:	b580      	push	{r7, lr}
 800217a:	b084      	sub	sp, #16
 800217c:	af00      	add	r7, sp, #0
 800217e:	6078      	str	r0, [r7, #4]
 8002180:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 8002182:	f7ff f99f 	bl	80014c4 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8002186:	f107 0308 	add.w	r3, r7, #8
 800218a:	4618      	mov	r0, r3
 800218c:	f000 f866 	bl	800225c <prvSampleTimeNow>
 8002190:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 8002192:	68bb      	ldr	r3, [r7, #8]
 8002194:	2b00      	cmp	r3, #0
 8002196:	d130      	bne.n	80021fa <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8002198:	683b      	ldr	r3, [r7, #0]
 800219a:	2b00      	cmp	r3, #0
 800219c:	d10a      	bne.n	80021b4 <prvProcessTimerOrBlockTask+0x3c>
 800219e:	687a      	ldr	r2, [r7, #4]
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	429a      	cmp	r2, r3
 80021a4:	d806      	bhi.n	80021b4 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 80021a6:	f7ff f99b 	bl	80014e0 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80021aa:	68f9      	ldr	r1, [r7, #12]
 80021ac:	6878      	ldr	r0, [r7, #4]
 80021ae:	f7ff ff9f 	bl	80020f0 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 80021b2:	e024      	b.n	80021fe <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 80021b4:	683b      	ldr	r3, [r7, #0]
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d008      	beq.n	80021cc <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80021ba:	4b13      	ldr	r3, [pc, #76]	@ (8002208 <prvProcessTimerOrBlockTask+0x90>)
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d101      	bne.n	80021c8 <prvProcessTimerOrBlockTask+0x50>
 80021c4:	2301      	movs	r3, #1
 80021c6:	e000      	b.n	80021ca <prvProcessTimerOrBlockTask+0x52>
 80021c8:	2300      	movs	r3, #0
 80021ca:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80021cc:	4b0f      	ldr	r3, [pc, #60]	@ (800220c <prvProcessTimerOrBlockTask+0x94>)
 80021ce:	6818      	ldr	r0, [r3, #0]
 80021d0:	687a      	ldr	r2, [r7, #4]
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	1ad3      	subs	r3, r2, r3
 80021d6:	683a      	ldr	r2, [r7, #0]
 80021d8:	4619      	mov	r1, r3
 80021da:	f7fe ff1f 	bl	800101c <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 80021de:	f7ff f97f 	bl	80014e0 <xTaskResumeAll>
 80021e2:	4603      	mov	r3, r0
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d10a      	bne.n	80021fe <prvProcessTimerOrBlockTask+0x86>
                        taskYIELD_WITHIN_API();
 80021e8:	4b09      	ldr	r3, [pc, #36]	@ (8002210 <prvProcessTimerOrBlockTask+0x98>)
 80021ea:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80021ee:	601a      	str	r2, [r3, #0]
 80021f0:	f3bf 8f4f 	dsb	sy
 80021f4:	f3bf 8f6f 	isb	sy
    }
 80021f8:	e001      	b.n	80021fe <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 80021fa:	f7ff f971 	bl	80014e0 <xTaskResumeAll>
    }
 80021fe:	bf00      	nop
 8002200:	3710      	adds	r7, #16
 8002202:	46bd      	mov	sp, r7
 8002204:	bd80      	pop	{r7, pc}
 8002206:	bf00      	nop
 8002208:	200001f4 	.word	0x200001f4
 800220c:	200001f8 	.word	0x200001f8
 8002210:	e000ed04 	.word	0xe000ed04

08002214 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 8002214:	b480      	push	{r7}
 8002216:	b085      	sub	sp, #20
 8002218:	af00      	add	r7, sp, #0
 800221a:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800221c:	4b0e      	ldr	r3, [pc, #56]	@ (8002258 <prvGetNextExpireTime+0x44>)
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	2b00      	cmp	r3, #0
 8002224:	d101      	bne.n	800222a <prvGetNextExpireTime+0x16>
 8002226:	2201      	movs	r2, #1
 8002228:	e000      	b.n	800222c <prvGetNextExpireTime+0x18>
 800222a:	2200      	movs	r2, #0
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	2b00      	cmp	r3, #0
 8002236:	d105      	bne.n	8002244 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8002238:	4b07      	ldr	r3, [pc, #28]	@ (8002258 <prvGetNextExpireTime+0x44>)
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	68db      	ldr	r3, [r3, #12]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	60fb      	str	r3, [r7, #12]
 8002242:	e001      	b.n	8002248 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 8002244:	2300      	movs	r3, #0
 8002246:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 8002248:	68fb      	ldr	r3, [r7, #12]
    }
 800224a:	4618      	mov	r0, r3
 800224c:	3714      	adds	r7, #20
 800224e:	46bd      	mov	sp, r7
 8002250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002254:	4770      	bx	lr
 8002256:	bf00      	nop
 8002258:	200001f0 	.word	0x200001f0

0800225c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 800225c:	b580      	push	{r7, lr}
 800225e:	b084      	sub	sp, #16
 8002260:	af00      	add	r7, sp, #0
 8002262:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U;

        xTimeNow = xTaskGetTickCount();
 8002264:	f7ff fa44 	bl	80016f0 <xTaskGetTickCount>
 8002268:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 800226a:	4b0b      	ldr	r3, [pc, #44]	@ (8002298 <prvSampleTimeNow+0x3c>)
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	68fa      	ldr	r2, [r7, #12]
 8002270:	429a      	cmp	r2, r3
 8002272:	d205      	bcs.n	8002280 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 8002274:	f000 f920 	bl	80024b8 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	2201      	movs	r2, #1
 800227c:	601a      	str	r2, [r3, #0]
 800227e:	e002      	b.n	8002286 <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	2200      	movs	r2, #0
 8002284:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 8002286:	4a04      	ldr	r2, [pc, #16]	@ (8002298 <prvSampleTimeNow+0x3c>)
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 800228c:	68fb      	ldr	r3, [r7, #12]
    }
 800228e:	4618      	mov	r0, r3
 8002290:	3710      	adds	r7, #16
 8002292:	46bd      	mov	sp, r7
 8002294:	bd80      	pop	{r7, pc}
 8002296:	bf00      	nop
 8002298:	20000200 	.word	0x20000200

0800229c <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 800229c:	b580      	push	{r7, lr}
 800229e:	b086      	sub	sp, #24
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	60f8      	str	r0, [r7, #12]
 80022a4:	60b9      	str	r1, [r7, #8]
 80022a6:	607a      	str	r2, [r7, #4]
 80022a8:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 80022aa:	2300      	movs	r3, #0
 80022ac:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	68ba      	ldr	r2, [r7, #8]
 80022b2:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	68fa      	ldr	r2, [r7, #12]
 80022b8:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 80022ba:	68ba      	ldr	r2, [r7, #8]
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	429a      	cmp	r2, r3
 80022c0:	d812      	bhi.n	80022e8 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks )
 80022c2:	687a      	ldr	r2, [r7, #4]
 80022c4:	683b      	ldr	r3, [r7, #0]
 80022c6:	1ad2      	subs	r2, r2, r3
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	699b      	ldr	r3, [r3, #24]
 80022cc:	429a      	cmp	r2, r3
 80022ce:	d302      	bcc.n	80022d6 <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 80022d0:	2301      	movs	r3, #1
 80022d2:	617b      	str	r3, [r7, #20]
 80022d4:	e01b      	b.n	800230e <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80022d6:	4b10      	ldr	r3, [pc, #64]	@ (8002318 <prvInsertTimerInActiveList+0x7c>)
 80022d8:	681a      	ldr	r2, [r3, #0]
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	3304      	adds	r3, #4
 80022de:	4619      	mov	r1, r3
 80022e0:	4610      	mov	r0, r2
 80022e2:	f7fe fb74 	bl	80009ce <vListInsert>
 80022e6:	e012      	b.n	800230e <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80022e8:	687a      	ldr	r2, [r7, #4]
 80022ea:	683b      	ldr	r3, [r7, #0]
 80022ec:	429a      	cmp	r2, r3
 80022ee:	d206      	bcs.n	80022fe <prvInsertTimerInActiveList+0x62>
 80022f0:	68ba      	ldr	r2, [r7, #8]
 80022f2:	683b      	ldr	r3, [r7, #0]
 80022f4:	429a      	cmp	r2, r3
 80022f6:	d302      	bcc.n	80022fe <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 80022f8:	2301      	movs	r3, #1
 80022fa:	617b      	str	r3, [r7, #20]
 80022fc:	e007      	b.n	800230e <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80022fe:	4b07      	ldr	r3, [pc, #28]	@ (800231c <prvInsertTimerInActiveList+0x80>)
 8002300:	681a      	ldr	r2, [r3, #0]
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	3304      	adds	r3, #4
 8002306:	4619      	mov	r1, r3
 8002308:	4610      	mov	r0, r2
 800230a:	f7fe fb60 	bl	80009ce <vListInsert>
            }
        }

        return xProcessTimerNow;
 800230e:	697b      	ldr	r3, [r7, #20]
    }
 8002310:	4618      	mov	r0, r3
 8002312:	3718      	adds	r7, #24
 8002314:	46bd      	mov	sp, r7
 8002316:	bd80      	pop	{r7, pc}
 8002318:	200001f4 	.word	0x200001f4
 800231c:	200001f0 	.word	0x200001f0

08002320 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 8002320:	b580      	push	{r7, lr}
 8002322:	b088      	sub	sp, #32
 8002324:	af00      	add	r7, sp, #0
        DaemonTaskMessage_t xMessage = { 0 };
 8002326:	f107 0308 	add.w	r3, r7, #8
 800232a:	2200      	movs	r2, #0
 800232c:	601a      	str	r2, [r3, #0]
 800232e:	605a      	str	r2, [r3, #4]
 8002330:	609a      	str	r2, [r3, #8]
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL )
 8002332:	e0ad      	b.n	8002490 <prvProcessReceivedCommands+0x170>
            }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8002334:	68bb      	ldr	r3, [r7, #8]
 8002336:	2b00      	cmp	r3, #0
 8002338:	f2c0 80aa 	blt.w	8002490 <prvProcessReceivedCommands+0x170>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800233c:	693b      	ldr	r3, [r7, #16]
 800233e:	61fb      	str	r3, [r7, #28]

                if( pxTimer != NULL )
 8002340:	69fb      	ldr	r3, [r7, #28]
 8002342:	2b00      	cmp	r3, #0
 8002344:	f000 80a4 	beq.w	8002490 <prvProcessReceivedCommands+0x170>
                {
                    if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE )
 8002348:	69fb      	ldr	r3, [r7, #28]
 800234a:	695b      	ldr	r3, [r3, #20]
 800234c:	2b00      	cmp	r3, #0
 800234e:	d004      	beq.n	800235a <prvProcessReceivedCommands+0x3a>
                    {
                        /* The timer is in a list, remove it. */
                        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8002350:	69fb      	ldr	r3, [r7, #28]
 8002352:	3304      	adds	r3, #4
 8002354:	4618      	mov	r0, r3
 8002356:	f7fe fb73 	bl	8000a40 <uxListRemove>
                     *  it must be present in the function call.  prvSampleTimeNow() must be
                     *  called after the message is received from xTimerQueue so there is no
                     *  possibility of a higher priority task adding a message to the message
                     *  queue with a time that is ahead of the timer daemon task (because it
                     *  pre-empted the timer daemon task after the xTimeNow value was set). */
                    xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800235a:	1d3b      	adds	r3, r7, #4
 800235c:	4618      	mov	r0, r3
 800235e:	f7ff ff7d 	bl	800225c <prvSampleTimeNow>
 8002362:	61b8      	str	r0, [r7, #24]

                    switch( xMessage.xMessageID )
 8002364:	68bb      	ldr	r3, [r7, #8]
 8002366:	3b01      	subs	r3, #1
 8002368:	2b08      	cmp	r3, #8
 800236a:	f200 808e 	bhi.w	800248a <prvProcessReceivedCommands+0x16a>
 800236e:	a201      	add	r2, pc, #4	@ (adr r2, 8002374 <prvProcessReceivedCommands+0x54>)
 8002370:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002374:	08002399 	.word	0x08002399
 8002378:	08002399 	.word	0x08002399
 800237c:	08002401 	.word	0x08002401
 8002380:	08002415 	.word	0x08002415
 8002384:	08002461 	.word	0x08002461
 8002388:	08002399 	.word	0x08002399
 800238c:	08002399 	.word	0x08002399
 8002390:	08002401 	.word	0x08002401
 8002394:	08002415 	.word	0x08002415
                        case tmrCOMMAND_START:
                        case tmrCOMMAND_START_FROM_ISR:
                        case tmrCOMMAND_RESET:
                        case tmrCOMMAND_RESET_FROM_ISR:
                            /* Start or restart a timer. */
                            pxTimer->ucStatus |= ( uint8_t ) tmrSTATUS_IS_ACTIVE;
 8002398:	69fb      	ldr	r3, [r7, #28]
 800239a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800239e:	f043 0301 	orr.w	r3, r3, #1
 80023a2:	b2da      	uxtb	r2, r3
 80023a4:	69fb      	ldr	r3, [r7, #28]
 80023a6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

                            if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80023aa:	68fa      	ldr	r2, [r7, #12]
 80023ac:	69fb      	ldr	r3, [r7, #28]
 80023ae:	699b      	ldr	r3, [r3, #24]
 80023b0:	18d1      	adds	r1, r2, r3
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	69ba      	ldr	r2, [r7, #24]
 80023b6:	69f8      	ldr	r0, [r7, #28]
 80023b8:	f7ff ff70 	bl	800229c <prvInsertTimerInActiveList>
 80023bc:	4603      	mov	r3, r0
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d065      	beq.n	800248e <prvProcessReceivedCommands+0x16e>
                            {
                                /* The timer expired before it was added to the active
                                 * timer list.  Process it now. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0U )
 80023c2:	69fb      	ldr	r3, [r7, #28]
 80023c4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80023c8:	f003 0304 	and.w	r3, r3, #4
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d009      	beq.n	80023e4 <prvProcessReceivedCommands+0xc4>
                                {
                                    prvReloadTimer( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow );
 80023d0:	68fa      	ldr	r2, [r7, #12]
 80023d2:	69fb      	ldr	r3, [r7, #28]
 80023d4:	699b      	ldr	r3, [r3, #24]
 80023d6:	4413      	add	r3, r2
 80023d8:	69ba      	ldr	r2, [r7, #24]
 80023da:	4619      	mov	r1, r3
 80023dc:	69f8      	ldr	r0, [r7, #28]
 80023de:	f7ff fe65 	bl	80020ac <prvReloadTimer>
 80023e2:	e008      	b.n	80023f6 <prvProcessReceivedCommands+0xd6>
                                }
                                else
                                {
                                    pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 80023e4:	69fb      	ldr	r3, [r7, #28]
 80023e6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80023ea:	f023 0301 	bic.w	r3, r3, #1
 80023ee:	b2da      	uxtb	r2, r3
 80023f0:	69fb      	ldr	r3, [r7, #28]
 80023f2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                                }

                                /* Call the timer callback. */
                                traceTIMER_EXPIRED( pxTimer );
                                pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80023f6:	69fb      	ldr	r3, [r7, #28]
 80023f8:	6a1b      	ldr	r3, [r3, #32]
 80023fa:	69f8      	ldr	r0, [r7, #28]
 80023fc:	4798      	blx	r3
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            break;
 80023fe:	e046      	b.n	800248e <prvProcessReceivedCommands+0x16e>

                        case tmrCOMMAND_STOP:
                        case tmrCOMMAND_STOP_FROM_ISR:
                            /* The timer has already been removed from the active list. */
                            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8002400:	69fb      	ldr	r3, [r7, #28]
 8002402:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8002406:	f023 0301 	bic.w	r3, r3, #1
 800240a:	b2da      	uxtb	r2, r3
 800240c:	69fb      	ldr	r3, [r7, #28]
 800240e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                            break;
 8002412:	e03d      	b.n	8002490 <prvProcessReceivedCommands+0x170>

                        case tmrCOMMAND_CHANGE_PERIOD:
                        case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                            pxTimer->ucStatus |= ( uint8_t ) tmrSTATUS_IS_ACTIVE;
 8002414:	69fb      	ldr	r3, [r7, #28]
 8002416:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800241a:	f043 0301 	orr.w	r3, r3, #1
 800241e:	b2da      	uxtb	r2, r3
 8002420:	69fb      	ldr	r3, [r7, #28]
 8002422:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                            pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8002426:	68fa      	ldr	r2, [r7, #12]
 8002428:	69fb      	ldr	r3, [r7, #28]
 800242a:	619a      	str	r2, [r3, #24]
                            configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800242c:	69fb      	ldr	r3, [r7, #28]
 800242e:	699b      	ldr	r3, [r3, #24]
 8002430:	2b00      	cmp	r3, #0
 8002432:	d10b      	bne.n	800244c <prvProcessReceivedCommands+0x12c>
    __asm volatile
 8002434:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002438:	f383 8811 	msr	BASEPRI, r3
 800243c:	f3bf 8f6f 	isb	sy
 8002440:	f3bf 8f4f 	dsb	sy
 8002444:	617b      	str	r3, [r7, #20]
}
 8002446:	bf00      	nop
 8002448:	bf00      	nop
 800244a:	e7fd      	b.n	8002448 <prvProcessReceivedCommands+0x128>
                             * be longer or shorter than the old one.  The command time is
                             * therefore set to the current time, and as the period cannot
                             * be zero the next expiry time can only be in the future,
                             * meaning (unlike for the xTimerStart() case above) there is
                             * no fail case that needs to be handled here. */
                            ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800244c:	69fb      	ldr	r3, [r7, #28]
 800244e:	699a      	ldr	r2, [r3, #24]
 8002450:	69bb      	ldr	r3, [r7, #24]
 8002452:	18d1      	adds	r1, r2, r3
 8002454:	69bb      	ldr	r3, [r7, #24]
 8002456:	69ba      	ldr	r2, [r7, #24]
 8002458:	69f8      	ldr	r0, [r7, #28]
 800245a:	f7ff ff1f 	bl	800229c <prvInsertTimerInActiveList>
                            break;
 800245e:	e017      	b.n	8002490 <prvProcessReceivedCommands+0x170>
                            #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8002460:	69fb      	ldr	r3, [r7, #28]
 8002462:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8002466:	f003 0302 	and.w	r3, r3, #2
 800246a:	2b00      	cmp	r3, #0
 800246c:	d103      	bne.n	8002476 <prvProcessReceivedCommands+0x156>
                                {
                                    vPortFree( pxTimer );
 800246e:	69f8      	ldr	r0, [r7, #28]
 8002470:	f000 fc10 	bl	8002c94 <vPortFree>
                                 * no need to free the memory - just mark the timer as
                                 * "not active". */
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
                            }
                            #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                            break;
 8002474:	e00c      	b.n	8002490 <prvProcessReceivedCommands+0x170>
                                    pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8002476:	69fb      	ldr	r3, [r7, #28]
 8002478:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800247c:	f023 0301 	bic.w	r3, r3, #1
 8002480:	b2da      	uxtb	r2, r3
 8002482:	69fb      	ldr	r3, [r7, #28]
 8002484:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                            break;
 8002488:	e002      	b.n	8002490 <prvProcessReceivedCommands+0x170>

                        default:
                            /* Don't expect to get here. */
                            break;
 800248a:	bf00      	nop
 800248c:	e000      	b.n	8002490 <prvProcessReceivedCommands+0x170>
                            break;
 800248e:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL )
 8002490:	4b08      	ldr	r3, [pc, #32]	@ (80024b4 <prvProcessReceivedCommands+0x194>)
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	f107 0108 	add.w	r1, r7, #8
 8002498:	2200      	movs	r2, #0
 800249a:	4618      	mov	r0, r3
 800249c:	f7fe fbfe 	bl	8000c9c <xQueueReceive>
 80024a0:	4603      	mov	r3, r0
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	f47f af46 	bne.w	8002334 <prvProcessReceivedCommands+0x14>
                {
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
    }
 80024a8:	bf00      	nop
 80024aa:	bf00      	nop
 80024ac:	3720      	adds	r7, #32
 80024ae:	46bd      	mov	sp, r7
 80024b0:	bd80      	pop	{r7, pc}
 80024b2:	bf00      	nop
 80024b4:	200001f8 	.word	0x200001f8

080024b8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 80024b8:	b580      	push	{r7, lr}
 80024ba:	b082      	sub	sp, #8
 80024bc:	af00      	add	r7, sp, #0

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80024be:	e009      	b.n	80024d4 <prvSwitchTimerLists+0x1c>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80024c0:	4b0e      	ldr	r3, [pc, #56]	@ (80024fc <prvSwitchTimerLists+0x44>)
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	68db      	ldr	r3, [r3, #12]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	603b      	str	r3, [r7, #0]

            /* Process the expired timer.  For auto-reload timers, be careful to
             * process only expirations that occur on the current list.  Further
             * expirations must wait until after the lists are switched. */
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
 80024ca:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80024ce:	6838      	ldr	r0, [r7, #0]
 80024d0:	f7ff fe0e 	bl	80020f0 <prvProcessExpiredTimer>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80024d4:	4b09      	ldr	r3, [pc, #36]	@ (80024fc <prvSwitchTimerLists+0x44>)
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d1f0      	bne.n	80024c0 <prvSwitchTimerLists+0x8>
        }

        pxTemp = pxCurrentTimerList;
 80024de:	4b07      	ldr	r3, [pc, #28]	@ (80024fc <prvSwitchTimerLists+0x44>)
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	607b      	str	r3, [r7, #4]
        pxCurrentTimerList = pxOverflowTimerList;
 80024e4:	4b06      	ldr	r3, [pc, #24]	@ (8002500 <prvSwitchTimerLists+0x48>)
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	4a04      	ldr	r2, [pc, #16]	@ (80024fc <prvSwitchTimerLists+0x44>)
 80024ea:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 80024ec:	4a04      	ldr	r2, [pc, #16]	@ (8002500 <prvSwitchTimerLists+0x48>)
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	6013      	str	r3, [r2, #0]
    }
 80024f2:	bf00      	nop
 80024f4:	3708      	adds	r7, #8
 80024f6:	46bd      	mov	sp, r7
 80024f8:	bd80      	pop	{r7, pc}
 80024fa:	bf00      	nop
 80024fc:	200001f0 	.word	0x200001f0
 8002500:	200001f4 	.word	0x200001f4

08002504 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 8002504:	b580      	push	{r7, lr}
 8002506:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 8002508:	f000 f9ac 	bl	8002864 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 800250c:	4b12      	ldr	r3, [pc, #72]	@ (8002558 <prvCheckForValidListAndQueue+0x54>)
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	2b00      	cmp	r3, #0
 8002512:	d11d      	bne.n	8002550 <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 8002514:	4811      	ldr	r0, [pc, #68]	@ (800255c <prvCheckForValidListAndQueue+0x58>)
 8002516:	f7fe fa2d 	bl	8000974 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 800251a:	4811      	ldr	r0, [pc, #68]	@ (8002560 <prvCheckForValidListAndQueue+0x5c>)
 800251c:	f7fe fa2a 	bl	8000974 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 8002520:	4b10      	ldr	r3, [pc, #64]	@ (8002564 <prvCheckForValidListAndQueue+0x60>)
 8002522:	4a0e      	ldr	r2, [pc, #56]	@ (800255c <prvCheckForValidListAndQueue+0x58>)
 8002524:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 8002526:	4b10      	ldr	r3, [pc, #64]	@ (8002568 <prvCheckForValidListAndQueue+0x64>)
 8002528:	4a0d      	ldr	r2, [pc, #52]	@ (8002560 <prvCheckForValidListAndQueue+0x5c>)
 800252a:	601a      	str	r2, [r3, #0]

                    xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                }
                #else
                {
                    xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ) );
 800252c:	2200      	movs	r2, #0
 800252e:	210c      	movs	r1, #12
 8002530:	200a      	movs	r0, #10
 8002532:	f7fe fb41 	bl	8000bb8 <xQueueGenericCreate>
 8002536:	4603      	mov	r3, r0
 8002538:	4a07      	ldr	r2, [pc, #28]	@ (8002558 <prvCheckForValidListAndQueue+0x54>)
 800253a:	6013      	str	r3, [r2, #0]
                }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                {
                    if( xTimerQueue != NULL )
 800253c:	4b06      	ldr	r3, [pc, #24]	@ (8002558 <prvCheckForValidListAndQueue+0x54>)
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	2b00      	cmp	r3, #0
 8002542:	d005      	beq.n	8002550 <prvCheckForValidListAndQueue+0x4c>
                    {
                        vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8002544:	4b04      	ldr	r3, [pc, #16]	@ (8002558 <prvCheckForValidListAndQueue+0x54>)
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	4908      	ldr	r1, [pc, #32]	@ (800256c <prvCheckForValidListAndQueue+0x68>)
 800254a:	4618      	mov	r0, r3
 800254c:	f7fe fd16 	bl	8000f7c <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8002550:	f000 f9ba 	bl	80028c8 <vPortExitCritical>
    }
 8002554:	bf00      	nop
 8002556:	bd80      	pop	{r7, pc}
 8002558:	200001f8 	.word	0x200001f8
 800255c:	200001c8 	.word	0x200001c8
 8002560:	200001dc 	.word	0x200001dc
 8002564:	200001f0 	.word	0x200001f0
 8002568:	200001f4 	.word	0x200001f4
 800256c:	08003910 	.word	0x08003910

08002570 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8002570:	b480      	push	{r7}
 8002572:	b085      	sub	sp, #20
 8002574:	af00      	add	r7, sp, #0
 8002576:	60f8      	str	r0, [r7, #12]
 8002578:	60b9      	str	r1, [r7, #8]
 800257a:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	3b04      	subs	r3, #4
 8002580:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002588:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	3b04      	subs	r3, #4
 800258e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8002590:	68bb      	ldr	r3, [r7, #8]
 8002592:	f023 0201 	bic.w	r2, r3, #1
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	3b04      	subs	r3, #4
 800259e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 80025a0:	4a0c      	ldr	r2, [pc, #48]	@ (80025d4 <pxPortInitialiseStack+0x64>)
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	3b14      	subs	r3, #20
 80025aa:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 80025ac:	687a      	ldr	r2, [r7, #4]
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	3b04      	subs	r3, #4
 80025b6:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	f06f 0202 	mvn.w	r2, #2
 80025be:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	3b20      	subs	r3, #32
 80025c4:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 80025c6:	68fb      	ldr	r3, [r7, #12]
}
 80025c8:	4618      	mov	r0, r3
 80025ca:	3714      	adds	r7, #20
 80025cc:	46bd      	mov	sp, r7
 80025ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d2:	4770      	bx	lr
 80025d4:	080025d9 	.word	0x080025d9

080025d8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80025d8:	b480      	push	{r7}
 80025da:	b085      	sub	sp, #20
 80025dc:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 80025de:	2300      	movs	r3, #0
 80025e0:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 80025e2:	4b13      	ldr	r3, [pc, #76]	@ (8002630 <prvTaskExitError+0x58>)
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80025ea:	d00b      	beq.n	8002604 <prvTaskExitError+0x2c>
    __asm volatile
 80025ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80025f0:	f383 8811 	msr	BASEPRI, r3
 80025f4:	f3bf 8f6f 	isb	sy
 80025f8:	f3bf 8f4f 	dsb	sy
 80025fc:	60fb      	str	r3, [r7, #12]
}
 80025fe:	bf00      	nop
 8002600:	bf00      	nop
 8002602:	e7fd      	b.n	8002600 <prvTaskExitError+0x28>
    __asm volatile
 8002604:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002608:	f383 8811 	msr	BASEPRI, r3
 800260c:	f3bf 8f6f 	isb	sy
 8002610:	f3bf 8f4f 	dsb	sy
 8002614:	60bb      	str	r3, [r7, #8]
}
 8002616:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8002618:	bf00      	nop
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	2b00      	cmp	r3, #0
 800261e:	d0fc      	beq.n	800261a <prvTaskExitError+0x42>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8002620:	bf00      	nop
 8002622:	bf00      	nop
 8002624:	3714      	adds	r7, #20
 8002626:	46bd      	mov	sp, r7
 8002628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800262c:	4770      	bx	lr
 800262e:	bf00      	nop
 8002630:	20000004 	.word	0x20000004

08002634 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8002634:	4b06      	ldr	r3, [pc, #24]	@ (8002650 <SVC_Handler+0x1c>)
 8002636:	6819      	ldr	r1, [r3, #0]
 8002638:	6808      	ldr	r0, [r1, #0]
 800263a:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800263e:	f380 8809 	msr	PSP, r0
 8002642:	f3bf 8f6f 	isb	sy
 8002646:	f04f 0000 	mov.w	r0, #0
 800264a:	f380 8811 	msr	BASEPRI, r0
 800264e:	4770      	bx	lr
 8002650:	200000c4 	.word	0x200000c4
        "   msr basepri, r0                 \n"
        "   bx r14                          \n"
        "                                   \n"
        "   .ltorg                          \n"
        );
}
 8002654:	bf00      	nop
 8002656:	bf00      	nop

08002658 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8002658:	4808      	ldr	r0, [pc, #32]	@ (800267c <prvPortStartFirstTask+0x24>)
 800265a:	6800      	ldr	r0, [r0, #0]
 800265c:	6800      	ldr	r0, [r0, #0]
 800265e:	f380 8808 	msr	MSP, r0
 8002662:	f04f 0000 	mov.w	r0, #0
 8002666:	f380 8814 	msr	CONTROL, r0
 800266a:	b662      	cpsie	i
 800266c:	b661      	cpsie	f
 800266e:	f3bf 8f4f 	dsb	sy
 8002672:	f3bf 8f6f 	isb	sy
 8002676:	df00      	svc	0
 8002678:	bf00      	nop
 800267a:	0000      	.short	0x0000
 800267c:	e000ed08 	.word	0xe000ed08
        " isb                   \n"
        " svc 0                 \n" /* System call to start first task. */
        " nop                   \n"
        " .ltorg                \n"
        );
}
 8002680:	bf00      	nop
 8002682:	bf00      	nop

08002684 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8002684:	b580      	push	{r7, lr}
 8002686:	b08c      	sub	sp, #48	@ 0x30
 8002688:	af00      	add	r7, sp, #0
    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800268a:	4b69      	ldr	r3, [pc, #420]	@ (8002830 <xPortStartScheduler+0x1ac>)
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	4a69      	ldr	r2, [pc, #420]	@ (8002834 <xPortStartScheduler+0x1b0>)
 8002690:	4293      	cmp	r3, r2
 8002692:	d10b      	bne.n	80026ac <xPortStartScheduler+0x28>
    __asm volatile
 8002694:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002698:	f383 8811 	msr	BASEPRI, r3
 800269c:	f3bf 8f6f 	isb	sy
 80026a0:	f3bf 8f4f 	dsb	sy
 80026a4:	623b      	str	r3, [r7, #32]
}
 80026a6:	bf00      	nop
 80026a8:	bf00      	nop
 80026aa:	e7fd      	b.n	80026a8 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80026ac:	4b60      	ldr	r3, [pc, #384]	@ (8002830 <xPortStartScheduler+0x1ac>)
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	4a61      	ldr	r2, [pc, #388]	@ (8002838 <xPortStartScheduler+0x1b4>)
 80026b2:	4293      	cmp	r3, r2
 80026b4:	d10b      	bne.n	80026ce <xPortStartScheduler+0x4a>
    __asm volatile
 80026b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80026ba:	f383 8811 	msr	BASEPRI, r3
 80026be:	f3bf 8f6f 	isb	sy
 80026c2:	f3bf 8f4f 	dsb	sy
 80026c6:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80026c8:	bf00      	nop
 80026ca:	bf00      	nop
 80026cc:	e7fd      	b.n	80026ca <xPortStartScheduler+0x46>
     * configCHECK_HANDLER_INSTALLATION to 0 in their FreeRTOSConfig.h. Direct
     * routing, which is validated here when configCHECK_HANDLER_INSTALLATION
     * is 1, should be preferred when possible. */
    #if ( configCHECK_HANDLER_INSTALLATION == 1 )
    {
        const portISR_t * const pxVectorTable = portSCB_VTOR_REG;
 80026ce:	4b5b      	ldr	r3, [pc, #364]	@ (800283c <xPortStartScheduler+0x1b8>)
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
         * https://www.freertos.org/Why-FreeRTOS/FAQs.
         *
         * Systems with a configurable address for the interrupt vector table
         * can also encounter assertion failures or even system faults here if
         * VTOR is not set correctly to point to the application's vector table. */
        configASSERT( pxVectorTable[ portVECTOR_INDEX_SVC ] == vPortSVCHandler );
 80026d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80026d6:	332c      	adds	r3, #44	@ 0x2c
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	4a59      	ldr	r2, [pc, #356]	@ (8002840 <xPortStartScheduler+0x1bc>)
 80026dc:	4293      	cmp	r3, r2
 80026de:	d00b      	beq.n	80026f8 <xPortStartScheduler+0x74>
    __asm volatile
 80026e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80026e4:	f383 8811 	msr	BASEPRI, r3
 80026e8:	f3bf 8f6f 	isb	sy
 80026ec:	f3bf 8f4f 	dsb	sy
 80026f0:	61fb      	str	r3, [r7, #28]
}
 80026f2:	bf00      	nop
 80026f4:	bf00      	nop
 80026f6:	e7fd      	b.n	80026f4 <xPortStartScheduler+0x70>
        configASSERT( pxVectorTable[ portVECTOR_INDEX_PENDSV ] == xPortPendSVHandler );
 80026f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80026fa:	3338      	adds	r3, #56	@ 0x38
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	4a51      	ldr	r2, [pc, #324]	@ (8002844 <xPortStartScheduler+0x1c0>)
 8002700:	4293      	cmp	r3, r2
 8002702:	d00b      	beq.n	800271c <xPortStartScheduler+0x98>
    __asm volatile
 8002704:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002708:	f383 8811 	msr	BASEPRI, r3
 800270c:	f3bf 8f6f 	isb	sy
 8002710:	f3bf 8f4f 	dsb	sy
 8002714:	61bb      	str	r3, [r7, #24]
}
 8002716:	bf00      	nop
 8002718:	bf00      	nop
 800271a:	e7fd      	b.n	8002718 <xPortStartScheduler+0x94>
    #endif /* configCHECK_HANDLER_INSTALLATION */

    #if ( configASSERT_DEFINED == 1 )
    {
        volatile uint8_t ucOriginalPriority;
        volatile uint32_t ulImplementedPrioBits = 0;
 800271c:	2300      	movs	r3, #0
 800271e:	60bb      	str	r3, [r7, #8]
        volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8002720:	4b49      	ldr	r3, [pc, #292]	@ (8002848 <xPortStartScheduler+0x1c4>)
 8002722:	62bb      	str	r3, [r7, #40]	@ 0x28
         * functions can be called.  ISR safe functions are those that end in
         * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
         * ensure interrupt entry is as fast and simple as possible.
         *
         * Save the interrupt priority value that is about to be clobbered. */
        ucOriginalPriority = *pucFirstUserPriorityRegister;
 8002724:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002726:	781b      	ldrb	r3, [r3, #0]
 8002728:	b2db      	uxtb	r3, r3
 800272a:	73fb      	strb	r3, [r7, #15]

        /* Determine the number of priority bits available.  First write to all
         * possible bits. */
        *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800272c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800272e:	22ff      	movs	r2, #255	@ 0xff
 8002730:	701a      	strb	r2, [r3, #0]

        /* Read the value back to see how many bits stuck. */
        ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8002732:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002734:	781b      	ldrb	r3, [r3, #0]
 8002736:	b2db      	uxtb	r3, r3
 8002738:	71fb      	strb	r3, [r7, #7]

        /* Use the same mask on the maximum system call priority. */
        ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800273a:	79fb      	ldrb	r3, [r7, #7]
 800273c:	b2db      	uxtb	r3, r3
 800273e:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8002742:	b2da      	uxtb	r2, r3
 8002744:	4b41      	ldr	r3, [pc, #260]	@ (800284c <xPortStartScheduler+0x1c8>)
 8002746:	701a      	strb	r2, [r3, #0]
         * accounting for the number of priority bits supported by the
         * hardware. A priority of 0 is invalid because setting the BASEPRI
         * register to 0 unmasks all interrupts, and interrupts with priority 0
         * cannot be masked using BASEPRI.
         * See https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
        configASSERT( ucMaxSysCallPriority );
 8002748:	4b40      	ldr	r3, [pc, #256]	@ (800284c <xPortStartScheduler+0x1c8>)
 800274a:	781b      	ldrb	r3, [r3, #0]
 800274c:	2b00      	cmp	r3, #0
 800274e:	d10b      	bne.n	8002768 <xPortStartScheduler+0xe4>
    __asm volatile
 8002750:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002754:	f383 8811 	msr	BASEPRI, r3
 8002758:	f3bf 8f6f 	isb	sy
 800275c:	f3bf 8f4f 	dsb	sy
 8002760:	617b      	str	r3, [r7, #20]
}
 8002762:	bf00      	nop
 8002764:	bf00      	nop
 8002766:	e7fd      	b.n	8002764 <xPortStartScheduler+0xe0>

        /* Check that the bits not implemented in hardware are zero in
         * configMAX_SYSCALL_INTERRUPT_PRIORITY. */
        configASSERT( ( configMAX_SYSCALL_INTERRUPT_PRIORITY & ( ~ucMaxPriorityValue ) ) == 0U );
 8002768:	79fb      	ldrb	r3, [r7, #7]
 800276a:	b2db      	uxtb	r3, r3
 800276c:	43db      	mvns	r3, r3
 800276e:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8002772:	2b00      	cmp	r3, #0
 8002774:	d013      	beq.n	800279e <xPortStartScheduler+0x11a>
    __asm volatile
 8002776:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800277a:	f383 8811 	msr	BASEPRI, r3
 800277e:	f3bf 8f6f 	isb	sy
 8002782:	f3bf 8f4f 	dsb	sy
 8002786:	613b      	str	r3, [r7, #16]
}
 8002788:	bf00      	nop
 800278a:	bf00      	nop
 800278c:	e7fd      	b.n	800278a <xPortStartScheduler+0x106>
        /* Calculate the maximum acceptable priority group value for the number
         * of bits read back. */

        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
        {
            ulImplementedPrioBits++;
 800278e:	68bb      	ldr	r3, [r7, #8]
 8002790:	3301      	adds	r3, #1
 8002792:	60bb      	str	r3, [r7, #8]
            ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8002794:	79fb      	ldrb	r3, [r7, #7]
 8002796:	b2db      	uxtb	r3, r3
 8002798:	005b      	lsls	r3, r3, #1
 800279a:	b2db      	uxtb	r3, r3
 800279c:	71fb      	strb	r3, [r7, #7]
        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800279e:	79fb      	ldrb	r3, [r7, #7]
 80027a0:	b2db      	uxtb	r3, r3
 80027a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80027a6:	2b80      	cmp	r3, #128	@ 0x80
 80027a8:	d0f1      	beq.n	800278e <xPortStartScheduler+0x10a>
        }

        if( ulImplementedPrioBits == 8 )
 80027aa:	68bb      	ldr	r3, [r7, #8]
 80027ac:	2b08      	cmp	r3, #8
 80027ae:	d103      	bne.n	80027b8 <xPortStartScheduler+0x134>
             *
             * The following assert ensures that the sub-priority bit in the
             * configMAX_SYSCALL_INTERRUPT_PRIORITY is clear to avoid the above mentioned
             * confusion. */
            configASSERT( ( configMAX_SYSCALL_INTERRUPT_PRIORITY & 0x1U ) == 0U );
            ulMaxPRIGROUPValue = 0;
 80027b0:	4b27      	ldr	r3, [pc, #156]	@ (8002850 <xPortStartScheduler+0x1cc>)
 80027b2:	2200      	movs	r2, #0
 80027b4:	601a      	str	r2, [r3, #0]
 80027b6:	e004      	b.n	80027c2 <xPortStartScheduler+0x13e>
        }
        else
        {
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS - ulImplementedPrioBits;
 80027b8:	68bb      	ldr	r3, [r7, #8]
 80027ba:	f1c3 0307 	rsb	r3, r3, #7
 80027be:	4a24      	ldr	r2, [pc, #144]	@ (8002850 <xPortStartScheduler+0x1cc>)
 80027c0:	6013      	str	r3, [r2, #0]
        }

        /* Shift the priority group value back to its position within the AIRCR
         * register. */
        ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80027c2:	4b23      	ldr	r3, [pc, #140]	@ (8002850 <xPortStartScheduler+0x1cc>)
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	021b      	lsls	r3, r3, #8
 80027c8:	4a21      	ldr	r2, [pc, #132]	@ (8002850 <xPortStartScheduler+0x1cc>)
 80027ca:	6013      	str	r3, [r2, #0]
        ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80027cc:	4b20      	ldr	r3, [pc, #128]	@ (8002850 <xPortStartScheduler+0x1cc>)
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80027d4:	4a1e      	ldr	r2, [pc, #120]	@ (8002850 <xPortStartScheduler+0x1cc>)
 80027d6:	6013      	str	r3, [r2, #0]

        /* Restore the clobbered interrupt priority register to its original
         * value. */
        *pucFirstUserPriorityRegister = ucOriginalPriority;
 80027d8:	7bfb      	ldrb	r3, [r7, #15]
 80027da:	b2da      	uxtb	r2, r3
 80027dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80027de:	701a      	strb	r2, [r3, #0]
    }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts, and make SVCall
     * the highest priority. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 80027e0:	4b1c      	ldr	r3, [pc, #112]	@ (8002854 <xPortStartScheduler+0x1d0>)
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	4a1b      	ldr	r2, [pc, #108]	@ (8002854 <xPortStartScheduler+0x1d0>)
 80027e6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80027ea:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 80027ec:	4b19      	ldr	r3, [pc, #100]	@ (8002854 <xPortStartScheduler+0x1d0>)
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	4a18      	ldr	r2, [pc, #96]	@ (8002854 <xPortStartScheduler+0x1d0>)
 80027f2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80027f6:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR2_REG = 0;
 80027f8:	4b17      	ldr	r3, [pc, #92]	@ (8002858 <xPortStartScheduler+0x1d4>)
 80027fa:	2200      	movs	r2, #0
 80027fc:	601a      	str	r2, [r3, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 80027fe:	f000 f8e1 	bl	80029c4 <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8002802:	4b16      	ldr	r3, [pc, #88]	@ (800285c <xPortStartScheduler+0x1d8>)
 8002804:	2200      	movs	r2, #0
 8002806:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 8002808:	f000 f900 	bl	8002a0c <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800280c:	4b14      	ldr	r3, [pc, #80]	@ (8002860 <xPortStartScheduler+0x1dc>)
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	4a13      	ldr	r2, [pc, #76]	@ (8002860 <xPortStartScheduler+0x1dc>)
 8002812:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8002816:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8002818:	f7ff ff1e 	bl	8002658 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 800281c:	f7ff f892 	bl	8001944 <vTaskSwitchContext>
    prvTaskExitError();
 8002820:	f7ff feda 	bl	80025d8 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8002824:	2300      	movs	r3, #0
}
 8002826:	4618      	mov	r0, r3
 8002828:	3730      	adds	r7, #48	@ 0x30
 800282a:	46bd      	mov	sp, r7
 800282c:	bd80      	pop	{r7, pc}
 800282e:	bf00      	nop
 8002830:	e000ed00 	.word	0xe000ed00
 8002834:	410fc271 	.word	0x410fc271
 8002838:	410fc270 	.word	0x410fc270
 800283c:	e000ed08 	.word	0xe000ed08
 8002840:	08002635 	.word	0x08002635
 8002844:	0800291d 	.word	0x0800291d
 8002848:	e000e400 	.word	0xe000e400
 800284c:	20000204 	.word	0x20000204
 8002850:	20000208 	.word	0x20000208
 8002854:	e000ed20 	.word	0xe000ed20
 8002858:	e000ed1c 	.word	0xe000ed1c
 800285c:	20000004 	.word	0x20000004
 8002860:	e000ef34 	.word	0xe000ef34

08002864 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8002864:	b480      	push	{r7}
 8002866:	b083      	sub	sp, #12
 8002868:	af00      	add	r7, sp, #0
    __asm volatile
 800286a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800286e:	f383 8811 	msr	BASEPRI, r3
 8002872:	f3bf 8f6f 	isb	sy
 8002876:	f3bf 8f4f 	dsb	sy
 800287a:	607b      	str	r3, [r7, #4]
}
 800287c:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 800287e:	4b10      	ldr	r3, [pc, #64]	@ (80028c0 <vPortEnterCritical+0x5c>)
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	3301      	adds	r3, #1
 8002884:	4a0e      	ldr	r2, [pc, #56]	@ (80028c0 <vPortEnterCritical+0x5c>)
 8002886:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8002888:	4b0d      	ldr	r3, [pc, #52]	@ (80028c0 <vPortEnterCritical+0x5c>)
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	2b01      	cmp	r3, #1
 800288e:	d110      	bne.n	80028b2 <vPortEnterCritical+0x4e>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8002890:	4b0c      	ldr	r3, [pc, #48]	@ (80028c4 <vPortEnterCritical+0x60>)
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	b2db      	uxtb	r3, r3
 8002896:	2b00      	cmp	r3, #0
 8002898:	d00b      	beq.n	80028b2 <vPortEnterCritical+0x4e>
    __asm volatile
 800289a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800289e:	f383 8811 	msr	BASEPRI, r3
 80028a2:	f3bf 8f6f 	isb	sy
 80028a6:	f3bf 8f4f 	dsb	sy
 80028aa:	603b      	str	r3, [r7, #0]
}
 80028ac:	bf00      	nop
 80028ae:	bf00      	nop
 80028b0:	e7fd      	b.n	80028ae <vPortEnterCritical+0x4a>
    }
}
 80028b2:	bf00      	nop
 80028b4:	370c      	adds	r7, #12
 80028b6:	46bd      	mov	sp, r7
 80028b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028bc:	4770      	bx	lr
 80028be:	bf00      	nop
 80028c0:	20000004 	.word	0x20000004
 80028c4:	e000ed04 	.word	0xe000ed04

080028c8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80028c8:	b480      	push	{r7}
 80028ca:	b083      	sub	sp, #12
 80028cc:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 80028ce:	4b12      	ldr	r3, [pc, #72]	@ (8002918 <vPortExitCritical+0x50>)
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d10b      	bne.n	80028ee <vPortExitCritical+0x26>
    __asm volatile
 80028d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80028da:	f383 8811 	msr	BASEPRI, r3
 80028de:	f3bf 8f6f 	isb	sy
 80028e2:	f3bf 8f4f 	dsb	sy
 80028e6:	607b      	str	r3, [r7, #4]
}
 80028e8:	bf00      	nop
 80028ea:	bf00      	nop
 80028ec:	e7fd      	b.n	80028ea <vPortExitCritical+0x22>
    uxCriticalNesting--;
 80028ee:	4b0a      	ldr	r3, [pc, #40]	@ (8002918 <vPortExitCritical+0x50>)
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	3b01      	subs	r3, #1
 80028f4:	4a08      	ldr	r2, [pc, #32]	@ (8002918 <vPortExitCritical+0x50>)
 80028f6:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 80028f8:	4b07      	ldr	r3, [pc, #28]	@ (8002918 <vPortExitCritical+0x50>)
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d105      	bne.n	800290c <vPortExitCritical+0x44>
 8002900:	2300      	movs	r3, #0
 8002902:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
    __asm volatile
 8002904:	683b      	ldr	r3, [r7, #0]
 8002906:	f383 8811 	msr	BASEPRI, r3
    (
        "   msr basepri, %0 " ::"r" ( ulNewMaskValue ) : "memory"
    );
}
 800290a:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 800290c:	bf00      	nop
 800290e:	370c      	adds	r7, #12
 8002910:	46bd      	mov	sp, r7
 8002912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002916:	4770      	bx	lr
 8002918:	20000004 	.word	0x20000004

0800291c <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 800291c:	f3ef 8009 	mrs	r0, PSP
 8002920:	f3bf 8f6f 	isb	sy
 8002924:	4b14      	ldr	r3, [pc, #80]	@ (8002978 <PendSV_Handler+0x5c>)
 8002926:	681a      	ldr	r2, [r3, #0]
 8002928:	f01e 0f10 	tst.w	lr, #16
 800292c:	bf08      	it	eq
 800292e:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8002932:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002936:	6010      	str	r0, [r2, #0]
 8002938:	e92d 0009 	stmdb	sp!, {r0, r3}
 800293c:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8002940:	f380 8811 	msr	BASEPRI, r0
 8002944:	f3bf 8f4f 	dsb	sy
 8002948:	f3bf 8f6f 	isb	sy
 800294c:	f7fe fffa 	bl	8001944 <vTaskSwitchContext>
 8002950:	f04f 0000 	mov.w	r0, #0
 8002954:	f380 8811 	msr	BASEPRI, r0
 8002958:	bc09      	pop	{r0, r3}
 800295a:	6819      	ldr	r1, [r3, #0]
 800295c:	6808      	ldr	r0, [r1, #0]
 800295e:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002962:	f01e 0f10 	tst.w	lr, #16
 8002966:	bf08      	it	eq
 8002968:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800296c:	f380 8809 	msr	PSP, r0
 8002970:	f3bf 8f6f 	isb	sy
 8002974:	4770      	bx	lr
 8002976:	0000      	.short	0x0000
 8002978:	200000c4 	.word	0x200000c4
        "   bx r14                              \n"
        "                                       \n"
        "   .ltorg                              \n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 800297c:	bf00      	nop
 800297e:	bf00      	nop

08002980 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8002980:	b580      	push	{r7, lr}
 8002982:	b082      	sub	sp, #8
 8002984:	af00      	add	r7, sp, #0
    __asm volatile
 8002986:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800298a:	f383 8811 	msr	BASEPRI, r3
 800298e:	f3bf 8f6f 	isb	sy
 8002992:	f3bf 8f4f 	dsb	sy
 8002996:	607b      	str	r3, [r7, #4]
}
 8002998:	bf00      	nop
     * known. */
    portDISABLE_INTERRUPTS();
    traceISR_ENTER();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 800299a:	f7fe feb9 	bl	8001710 <xTaskIncrementTick>
 800299e:	4603      	mov	r3, r0
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d003      	beq.n	80029ac <SysTick_Handler+0x2c>
        {
            traceISR_EXIT_TO_SCHEDULER();

            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80029a4:	4b06      	ldr	r3, [pc, #24]	@ (80029c0 <SysTick_Handler+0x40>)
 80029a6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80029aa:	601a      	str	r2, [r3, #0]
 80029ac:	2300      	movs	r3, #0
 80029ae:	603b      	str	r3, [r7, #0]
    __asm volatile
 80029b0:	683b      	ldr	r3, [r7, #0]
 80029b2:	f383 8811 	msr	BASEPRI, r3
}
 80029b6:	bf00      	nop
        {
            traceISR_EXIT();
        }
    }
    portENABLE_INTERRUPTS();
}
 80029b8:	bf00      	nop
 80029ba:	3708      	adds	r7, #8
 80029bc:	46bd      	mov	sp, r7
 80029be:	bd80      	pop	{r7, pc}
 80029c0:	e000ed04 	.word	0xe000ed04

080029c4 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 80029c4:	b480      	push	{r7}
 80029c6:	af00      	add	r7, sp, #0
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
    }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 80029c8:	4b0b      	ldr	r3, [pc, #44]	@ (80029f8 <vPortSetupTimerInterrupt+0x34>)
 80029ca:	2200      	movs	r2, #0
 80029cc:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80029ce:	4b0b      	ldr	r3, [pc, #44]	@ (80029fc <vPortSetupTimerInterrupt+0x38>)
 80029d0:	2200      	movs	r2, #0
 80029d2:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80029d4:	4b0a      	ldr	r3, [pc, #40]	@ (8002a00 <vPortSetupTimerInterrupt+0x3c>)
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	4a0a      	ldr	r2, [pc, #40]	@ (8002a04 <vPortSetupTimerInterrupt+0x40>)
 80029da:	fba2 2303 	umull	r2, r3, r2, r3
 80029de:	099b      	lsrs	r3, r3, #6
 80029e0:	4a09      	ldr	r2, [pc, #36]	@ (8002a08 <vPortSetupTimerInterrupt+0x44>)
 80029e2:	3b01      	subs	r3, #1
 80029e4:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80029e6:	4b04      	ldr	r3, [pc, #16]	@ (80029f8 <vPortSetupTimerInterrupt+0x34>)
 80029e8:	2207      	movs	r2, #7
 80029ea:	601a      	str	r2, [r3, #0]
}
 80029ec:	bf00      	nop
 80029ee:	46bd      	mov	sp, r7
 80029f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f4:	4770      	bx	lr
 80029f6:	bf00      	nop
 80029f8:	e000e010 	.word	0xe000e010
 80029fc:	e000e018 	.word	0xe000e018
 8002a00:	20000000 	.word	0x20000000
 8002a04:	10624dd3 	.word	0x10624dd3
 8002a08:	e000e014 	.word	0xe000e014

08002a0c <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8002a0c:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8002a1c <vPortEnableVFP+0x10>
 8002a10:	6801      	ldr	r1, [r0, #0]
 8002a12:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8002a16:	6001      	str	r1, [r0, #0]
 8002a18:	4770      	bx	lr
 8002a1a:	0000      	.short	0x0000
 8002a1c:	e000ed88 	.word	0xe000ed88
        "   orr r1, r1, #( 0xf << 20 )  \n" /* Enable CP10 and CP11 coprocessors, then save back. */
        "   str r1, [r0]                \n"
        "   bx r14                      \n"
        "   .ltorg                      \n"
    );
}
 8002a20:	bf00      	nop
 8002a22:	bf00      	nop

08002a24 <pvPortMalloc>:
PRIVILEGED_DATA static size_t xNumberOfSuccessfulFrees = ( size_t ) 0U;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8002a24:	b580      	push	{r7, lr}
 8002a26:	b08e      	sub	sp, #56	@ 0x38
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock;
    BlockLink_t * pxPreviousBlock;
    BlockLink_t * pxNewBlockLink;
    void * pvReturn = NULL;
 8002a2c:	2300      	movs	r3, #0
 8002a2e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    size_t xAdditionalRequiredSize;
    size_t xAllocatedBlockSize = 0;
 8002a30:	2300      	movs	r3, #0
 8002a32:	62bb      	str	r3, [r7, #40]	@ 0x28

    if( xWantedSize > 0 )
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d022      	beq.n	8002a80 <pvPortMalloc+0x5c>
    {
        /* The wanted size must be increased so it can contain a BlockLink_t
         * structure in addition to the requested amount of bytes. */
        if( heapADD_WILL_OVERFLOW( xWantedSize, xHeapStructSize ) == 0 )
 8002a3a:	2308      	movs	r3, #8
 8002a3c:	43db      	mvns	r3, r3
 8002a3e:	687a      	ldr	r2, [r7, #4]
 8002a40:	429a      	cmp	r2, r3
 8002a42:	d81b      	bhi.n	8002a7c <pvPortMalloc+0x58>
        {
            xWantedSize += xHeapStructSize;
 8002a44:	2208      	movs	r2, #8
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	4413      	add	r3, r2
 8002a4a:	607b      	str	r3, [r7, #4]

            /* Ensure that blocks are always aligned to the required number
             * of bytes. */
            if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	f003 0307 	and.w	r3, r3, #7
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d014      	beq.n	8002a80 <pvPortMalloc+0x5c>
            {
                /* Byte alignment required. */
                xAdditionalRequiredSize = portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK );
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	f003 0307 	and.w	r3, r3, #7
 8002a5c:	f1c3 0308 	rsb	r3, r3, #8
 8002a60:	627b      	str	r3, [r7, #36]	@ 0x24

                if( heapADD_WILL_OVERFLOW( xWantedSize, xAdditionalRequiredSize ) == 0 )
 8002a62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a64:	43db      	mvns	r3, r3
 8002a66:	687a      	ldr	r2, [r7, #4]
 8002a68:	429a      	cmp	r2, r3
 8002a6a:	d804      	bhi.n	8002a76 <pvPortMalloc+0x52>
                {
                    xWantedSize += xAdditionalRequiredSize;
 8002a6c:	687a      	ldr	r2, [r7, #4]
 8002a6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a70:	4413      	add	r3, r2
 8002a72:	607b      	str	r3, [r7, #4]
 8002a74:	e004      	b.n	8002a80 <pvPortMalloc+0x5c>
                }
                else
                {
                    xWantedSize = 0;
 8002a76:	2300      	movs	r3, #0
 8002a78:	607b      	str	r3, [r7, #4]
 8002a7a:	e001      	b.n	8002a80 <pvPortMalloc+0x5c>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            xWantedSize = 0;
 8002a7c:	2300      	movs	r3, #0
 8002a7e:	607b      	str	r3, [r7, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    vTaskSuspendAll();
 8002a80:	f7fe fd20 	bl	80014c4 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 8002a84:	4b7c      	ldr	r3, [pc, #496]	@ (8002c78 <pvPortMalloc+0x254>)
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d101      	bne.n	8002a90 <pvPortMalloc+0x6c>
        {
            prvHeapInit();
 8002a8c:	f000 f978 	bl	8002d80 <prvHeapInit>

        /* Check the block size we are trying to allocate is not so large that the
         * top bit is set.  The top bit of the block size member of the BlockLink_t
         * structure is used to determine who owns the block - the application or
         * the kernel, so it must be free. */
        if( heapBLOCK_SIZE_IS_VALID( xWantedSize ) != 0 )
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	f2c0 80d7 	blt.w	8002c46 <pvPortMalloc+0x222>
        {
            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	f000 80d3 	beq.w	8002c46 <pvPortMalloc+0x222>
 8002aa0:	4b76      	ldr	r3, [pc, #472]	@ (8002c7c <pvPortMalloc+0x258>)
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	687a      	ldr	r2, [r7, #4]
 8002aa6:	429a      	cmp	r2, r3
 8002aa8:	f200 80cd 	bhi.w	8002c46 <pvPortMalloc+0x222>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8002aac:	4b74      	ldr	r3, [pc, #464]	@ (8002c80 <pvPortMalloc+0x25c>)
 8002aae:	633b      	str	r3, [r7, #48]	@ 0x30
                pxBlock = heapPROTECT_BLOCK_POINTER( xStart.pxNextFreeBlock );
 8002ab0:	4b73      	ldr	r3, [pc, #460]	@ (8002c80 <pvPortMalloc+0x25c>)
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	637b      	str	r3, [r7, #52]	@ 0x34
                heapVALIDATE_BLOCK_POINTER( pxBlock );
 8002ab6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002ab8:	4a72      	ldr	r2, [pc, #456]	@ (8002c84 <pvPortMalloc+0x260>)
 8002aba:	4293      	cmp	r3, r2
 8002abc:	d305      	bcc.n	8002aca <pvPortMalloc+0xa6>
 8002abe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002ac0:	4a71      	ldr	r2, [pc, #452]	@ (8002c88 <pvPortMalloc+0x264>)
 8002ac2:	4293      	cmp	r3, r2
 8002ac4:	d801      	bhi.n	8002aca <pvPortMalloc+0xa6>
 8002ac6:	2301      	movs	r3, #1
 8002ac8:	e000      	b.n	8002acc <pvPortMalloc+0xa8>
 8002aca:	2300      	movs	r3, #0
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d129      	bne.n	8002b24 <pvPortMalloc+0x100>
    __asm volatile
 8002ad0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002ad4:	f383 8811 	msr	BASEPRI, r3
 8002ad8:	f3bf 8f6f 	isb	sy
 8002adc:	f3bf 8f4f 	dsb	sy
 8002ae0:	61fb      	str	r3, [r7, #28]
}
 8002ae2:	bf00      	nop
 8002ae4:	bf00      	nop
 8002ae6:	e7fd      	b.n	8002ae4 <pvPortMalloc+0xc0>

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != heapPROTECT_BLOCK_POINTER( NULL ) ) )
                {
                    pxPreviousBlock = pxBlock;
 8002ae8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002aea:	633b      	str	r3, [r7, #48]	@ 0x30
                    pxBlock = heapPROTECT_BLOCK_POINTER( pxBlock->pxNextFreeBlock );
 8002aec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	637b      	str	r3, [r7, #52]	@ 0x34
                    heapVALIDATE_BLOCK_POINTER( pxBlock );
 8002af2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002af4:	4a63      	ldr	r2, [pc, #396]	@ (8002c84 <pvPortMalloc+0x260>)
 8002af6:	4293      	cmp	r3, r2
 8002af8:	d305      	bcc.n	8002b06 <pvPortMalloc+0xe2>
 8002afa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002afc:	4a62      	ldr	r2, [pc, #392]	@ (8002c88 <pvPortMalloc+0x264>)
 8002afe:	4293      	cmp	r3, r2
 8002b00:	d801      	bhi.n	8002b06 <pvPortMalloc+0xe2>
 8002b02:	2301      	movs	r3, #1
 8002b04:	e000      	b.n	8002b08 <pvPortMalloc+0xe4>
 8002b06:	2300      	movs	r3, #0
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d10b      	bne.n	8002b24 <pvPortMalloc+0x100>
    __asm volatile
 8002b0c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002b10:	f383 8811 	msr	BASEPRI, r3
 8002b14:	f3bf 8f6f 	isb	sy
 8002b18:	f3bf 8f4f 	dsb	sy
 8002b1c:	61bb      	str	r3, [r7, #24]
}
 8002b1e:	bf00      	nop
 8002b20:	bf00      	nop
 8002b22:	e7fd      	b.n	8002b20 <pvPortMalloc+0xfc>
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != heapPROTECT_BLOCK_POINTER( NULL ) ) )
 8002b24:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002b26:	685b      	ldr	r3, [r3, #4]
 8002b28:	687a      	ldr	r2, [r7, #4]
 8002b2a:	429a      	cmp	r2, r3
 8002b2c:	d903      	bls.n	8002b36 <pvPortMalloc+0x112>
 8002b2e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d1d8      	bne.n	8002ae8 <pvPortMalloc+0xc4>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8002b36:	4b50      	ldr	r3, [pc, #320]	@ (8002c78 <pvPortMalloc+0x254>)
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002b3c:	429a      	cmp	r2, r3
 8002b3e:	f000 8082 	beq.w	8002c46 <pvPortMalloc+0x222>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) heapPROTECT_BLOCK_POINTER( pxPreviousBlock->pxNextFreeBlock ) ) + xHeapStructSize );
 8002b42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	2208      	movs	r2, #8
 8002b48:	4413      	add	r3, r2
 8002b4a:	62fb      	str	r3, [r7, #44]	@ 0x2c
                    heapVALIDATE_BLOCK_POINTER( pvReturn );
 8002b4c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002b4e:	4a4d      	ldr	r2, [pc, #308]	@ (8002c84 <pvPortMalloc+0x260>)
 8002b50:	4293      	cmp	r3, r2
 8002b52:	d305      	bcc.n	8002b60 <pvPortMalloc+0x13c>
 8002b54:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002b56:	4a4c      	ldr	r2, [pc, #304]	@ (8002c88 <pvPortMalloc+0x264>)
 8002b58:	4293      	cmp	r3, r2
 8002b5a:	d801      	bhi.n	8002b60 <pvPortMalloc+0x13c>
 8002b5c:	2301      	movs	r3, #1
 8002b5e:	e000      	b.n	8002b62 <pvPortMalloc+0x13e>
 8002b60:	2300      	movs	r3, #0
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d10b      	bne.n	8002b7e <pvPortMalloc+0x15a>
    __asm volatile
 8002b66:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002b6a:	f383 8811 	msr	BASEPRI, r3
 8002b6e:	f3bf 8f6f 	isb	sy
 8002b72:	f3bf 8f4f 	dsb	sy
 8002b76:	617b      	str	r3, [r7, #20]
}
 8002b78:	bf00      	nop
 8002b7a:	bf00      	nop
 8002b7c:	e7fd      	b.n	8002b7a <pvPortMalloc+0x156>

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8002b7e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002b80:	681a      	ldr	r2, [r3, #0]
 8002b82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b84:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    configASSERT( heapSUBTRACT_WILL_UNDERFLOW( pxBlock->xBlockSize, xWantedSize ) == 0 );
 8002b86:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002b88:	685b      	ldr	r3, [r3, #4]
 8002b8a:	687a      	ldr	r2, [r7, #4]
 8002b8c:	429a      	cmp	r2, r3
 8002b8e:	d90b      	bls.n	8002ba8 <pvPortMalloc+0x184>
    __asm volatile
 8002b90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002b94:	f383 8811 	msr	BASEPRI, r3
 8002b98:	f3bf 8f6f 	isb	sy
 8002b9c:	f3bf 8f4f 	dsb	sy
 8002ba0:	613b      	str	r3, [r7, #16]
}
 8002ba2:	bf00      	nop
 8002ba4:	bf00      	nop
 8002ba6:	e7fd      	b.n	8002ba4 <pvPortMalloc+0x180>

                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8002ba8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002baa:	685a      	ldr	r2, [r3, #4]
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	1ad2      	subs	r2, r2, r3
 8002bb0:	2308      	movs	r3, #8
 8002bb2:	005b      	lsls	r3, r3, #1
 8002bb4:	429a      	cmp	r2, r3
 8002bb6:	d924      	bls.n	8002c02 <pvPortMalloc+0x1de>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8002bb8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	4413      	add	r3, r2
 8002bbe:	623b      	str	r3, [r7, #32]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8002bc0:	6a3b      	ldr	r3, [r7, #32]
 8002bc2:	f003 0307 	and.w	r3, r3, #7
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d00b      	beq.n	8002be2 <pvPortMalloc+0x1be>
    __asm volatile
 8002bca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002bce:	f383 8811 	msr	BASEPRI, r3
 8002bd2:	f3bf 8f6f 	isb	sy
 8002bd6:	f3bf 8f4f 	dsb	sy
 8002bda:	60fb      	str	r3, [r7, #12]
}
 8002bdc:	bf00      	nop
 8002bde:	bf00      	nop
 8002be0:	e7fd      	b.n	8002bde <pvPortMalloc+0x1ba>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8002be2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002be4:	685a      	ldr	r2, [r3, #4]
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	1ad2      	subs	r2, r2, r3
 8002bea:	6a3b      	ldr	r3, [r7, #32]
 8002bec:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8002bee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002bf0:	687a      	ldr	r2, [r7, #4]
 8002bf2:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        pxNewBlockLink->pxNextFreeBlock = pxPreviousBlock->pxNextFreeBlock;
 8002bf4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002bf6:	681a      	ldr	r2, [r3, #0]
 8002bf8:	6a3b      	ldr	r3, [r7, #32]
 8002bfa:	601a      	str	r2, [r3, #0]
                        pxPreviousBlock->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxNewBlockLink );
 8002bfc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002bfe:	6a3a      	ldr	r2, [r7, #32]
 8002c00:	601a      	str	r2, [r3, #0]
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8002c02:	4b1e      	ldr	r3, [pc, #120]	@ (8002c7c <pvPortMalloc+0x258>)
 8002c04:	681a      	ldr	r2, [r3, #0]
 8002c06:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002c08:	685b      	ldr	r3, [r3, #4]
 8002c0a:	1ad3      	subs	r3, r2, r3
 8002c0c:	4a1b      	ldr	r2, [pc, #108]	@ (8002c7c <pvPortMalloc+0x258>)
 8002c0e:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8002c10:	4b1a      	ldr	r3, [pc, #104]	@ (8002c7c <pvPortMalloc+0x258>)
 8002c12:	681a      	ldr	r2, [r3, #0]
 8002c14:	4b1d      	ldr	r3, [pc, #116]	@ (8002c8c <pvPortMalloc+0x268>)
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	429a      	cmp	r2, r3
 8002c1a:	d203      	bcs.n	8002c24 <pvPortMalloc+0x200>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8002c1c:	4b17      	ldr	r3, [pc, #92]	@ (8002c7c <pvPortMalloc+0x258>)
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	4a1a      	ldr	r2, [pc, #104]	@ (8002c8c <pvPortMalloc+0x268>)
 8002c22:	6013      	str	r3, [r2, #0]
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xAllocatedBlockSize = pxBlock->xBlockSize;
 8002c24:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002c26:	685b      	ldr	r3, [r3, #4]
 8002c28:	62bb      	str	r3, [r7, #40]	@ 0x28

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    heapALLOCATE_BLOCK( pxBlock );
 8002c2a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002c2c:	685b      	ldr	r3, [r3, #4]
 8002c2e:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8002c32:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002c34:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( NULL );
 8002c36:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002c38:	2200      	movs	r2, #0
 8002c3a:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 8002c3c:	4b14      	ldr	r3, [pc, #80]	@ (8002c90 <pvPortMalloc+0x26c>)
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	3301      	adds	r3, #1
 8002c42:	4a13      	ldr	r2, [pc, #76]	@ (8002c90 <pvPortMalloc+0x26c>)
 8002c44:	6013      	str	r3, [r2, #0]
        traceMALLOC( pvReturn, xAllocatedBlockSize );

        /* Prevent compiler warnings when trace macros are not used. */
        ( void ) xAllocatedBlockSize;
    }
    ( void ) xTaskResumeAll();
 8002c46:	f7fe fc4b 	bl	80014e0 <xTaskResumeAll>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8002c4a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002c4c:	f003 0307 	and.w	r3, r3, #7
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d00b      	beq.n	8002c6c <pvPortMalloc+0x248>
    __asm volatile
 8002c54:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002c58:	f383 8811 	msr	BASEPRI, r3
 8002c5c:	f3bf 8f6f 	isb	sy
 8002c60:	f3bf 8f4f 	dsb	sy
 8002c64:	60bb      	str	r3, [r7, #8]
}
 8002c66:	bf00      	nop
 8002c68:	bf00      	nop
 8002c6a:	e7fd      	b.n	8002c68 <pvPortMalloc+0x244>
    return pvReturn;
 8002c6c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8002c6e:	4618      	mov	r0, r3
 8002c70:	3738      	adds	r7, #56	@ 0x38
 8002c72:	46bd      	mov	sp, r7
 8002c74:	bd80      	pop	{r7, pc}
 8002c76:	bf00      	nop
 8002c78:	2000f614 	.word	0x2000f614
 8002c7c:	2000f618 	.word	0x2000f618
 8002c80:	2000f60c 	.word	0x2000f60c
 8002c84:	2000020c 	.word	0x2000020c
 8002c88:	2000f60b 	.word	0x2000f60b
 8002c8c:	2000f61c 	.word	0x2000f61c
 8002c90:	2000f620 	.word	0x2000f620

08002c94 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8002c94:	b580      	push	{r7, lr}
 8002c96:	b088      	sub	sp, #32
 8002c98:	af00      	add	r7, sp, #0
 8002c9a:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	61fb      	str	r3, [r7, #28]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d060      	beq.n	8002d68 <vPortFree+0xd4>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 8002ca6:	2308      	movs	r3, #8
 8002ca8:	425b      	negs	r3, r3
 8002caa:	69fa      	ldr	r2, [r7, #28]
 8002cac:	4413      	add	r3, r2
 8002cae:	61fb      	str	r3, [r7, #28]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8002cb0:	69fb      	ldr	r3, [r7, #28]
 8002cb2:	61bb      	str	r3, [r7, #24]

        heapVALIDATE_BLOCK_POINTER( pxLink );
 8002cb4:	69bb      	ldr	r3, [r7, #24]
 8002cb6:	4a2e      	ldr	r2, [pc, #184]	@ (8002d70 <vPortFree+0xdc>)
 8002cb8:	4293      	cmp	r3, r2
 8002cba:	d305      	bcc.n	8002cc8 <vPortFree+0x34>
 8002cbc:	69bb      	ldr	r3, [r7, #24]
 8002cbe:	4a2d      	ldr	r2, [pc, #180]	@ (8002d74 <vPortFree+0xe0>)
 8002cc0:	4293      	cmp	r3, r2
 8002cc2:	d801      	bhi.n	8002cc8 <vPortFree+0x34>
 8002cc4:	2301      	movs	r3, #1
 8002cc6:	e000      	b.n	8002cca <vPortFree+0x36>
 8002cc8:	2300      	movs	r3, #0
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d10b      	bne.n	8002ce6 <vPortFree+0x52>
    __asm volatile
 8002cce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002cd2:	f383 8811 	msr	BASEPRI, r3
 8002cd6:	f3bf 8f6f 	isb	sy
 8002cda:	f3bf 8f4f 	dsb	sy
 8002cde:	617b      	str	r3, [r7, #20]
}
 8002ce0:	bf00      	nop
 8002ce2:	bf00      	nop
 8002ce4:	e7fd      	b.n	8002ce2 <vPortFree+0x4e>
        configASSERT( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 );
 8002ce6:	69bb      	ldr	r3, [r7, #24]
 8002ce8:	685b      	ldr	r3, [r3, #4]
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	db0b      	blt.n	8002d06 <vPortFree+0x72>
    __asm volatile
 8002cee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002cf2:	f383 8811 	msr	BASEPRI, r3
 8002cf6:	f3bf 8f6f 	isb	sy
 8002cfa:	f3bf 8f4f 	dsb	sy
 8002cfe:	613b      	str	r3, [r7, #16]
}
 8002d00:	bf00      	nop
 8002d02:	bf00      	nop
 8002d04:	e7fd      	b.n	8002d02 <vPortFree+0x6e>
        configASSERT( pxLink->pxNextFreeBlock == heapPROTECT_BLOCK_POINTER( NULL ) );
 8002d06:	69bb      	ldr	r3, [r7, #24]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d00b      	beq.n	8002d26 <vPortFree+0x92>
    __asm volatile
 8002d0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002d12:	f383 8811 	msr	BASEPRI, r3
 8002d16:	f3bf 8f6f 	isb	sy
 8002d1a:	f3bf 8f4f 	dsb	sy
 8002d1e:	60fb      	str	r3, [r7, #12]
}
 8002d20:	bf00      	nop
 8002d22:	bf00      	nop
 8002d24:	e7fd      	b.n	8002d22 <vPortFree+0x8e>

        if( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 )
 8002d26:	69bb      	ldr	r3, [r7, #24]
 8002d28:	685b      	ldr	r3, [r3, #4]
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	da1c      	bge.n	8002d68 <vPortFree+0xd4>
        {
            if( pxLink->pxNextFreeBlock == heapPROTECT_BLOCK_POINTER( NULL ) )
 8002d2e:	69bb      	ldr	r3, [r7, #24]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d118      	bne.n	8002d68 <vPortFree+0xd4>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                heapFREE_BLOCK( pxLink );
 8002d36:	69bb      	ldr	r3, [r7, #24]
 8002d38:	685b      	ldr	r3, [r3, #4]
 8002d3a:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002d3e:	69bb      	ldr	r3, [r7, #24]
 8002d40:	605a      	str	r2, [r3, #4]
                        ( void ) memset( puc + xHeapStructSize, 0, pxLink->xBlockSize - xHeapStructSize );
                    }
                }
                #endif

                vTaskSuspendAll();
 8002d42:	f7fe fbbf 	bl	80014c4 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8002d46:	69bb      	ldr	r3, [r7, #24]
 8002d48:	685a      	ldr	r2, [r3, #4]
 8002d4a:	4b0b      	ldr	r3, [pc, #44]	@ (8002d78 <vPortFree+0xe4>)
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	4413      	add	r3, r2
 8002d50:	4a09      	ldr	r2, [pc, #36]	@ (8002d78 <vPortFree+0xe4>)
 8002d52:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8002d54:	69b8      	ldr	r0, [r7, #24]
 8002d56:	f000 f86d 	bl	8002e34 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8002d5a:	4b08      	ldr	r3, [pc, #32]	@ (8002d7c <vPortFree+0xe8>)
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	3301      	adds	r3, #1
 8002d60:	4a06      	ldr	r2, [pc, #24]	@ (8002d7c <vPortFree+0xe8>)
 8002d62:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8002d64:	f7fe fbbc 	bl	80014e0 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 8002d68:	bf00      	nop
 8002d6a:	3720      	adds	r7, #32
 8002d6c:	46bd      	mov	sp, r7
 8002d6e:	bd80      	pop	{r7, pc}
 8002d70:	2000020c 	.word	0x2000020c
 8002d74:	2000f60b 	.word	0x2000f60b
 8002d78:	2000f618 	.word	0x2000f618
 8002d7c:	2000f624 	.word	0x2000f624

08002d80 <prvHeapInit>:
    return pv;
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8002d80:	b480      	push	{r7}
 8002d82:	b085      	sub	sp, #20
 8002d84:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    portPOINTER_SIZE_TYPE uxStartAddress, uxEndAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8002d86:	f44f 4374 	mov.w	r3, #62464	@ 0xf400
 8002d8a:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxStartAddress = ( portPOINTER_SIZE_TYPE ) ucHeap;
 8002d8c:	4b24      	ldr	r3, [pc, #144]	@ (8002e20 <prvHeapInit+0xa0>)
 8002d8e:	60fb      	str	r3, [r7, #12]

    if( ( uxStartAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	f003 0307 	and.w	r3, r3, #7
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d00c      	beq.n	8002db4 <prvHeapInit+0x34>
    {
        uxStartAddress += ( portBYTE_ALIGNMENT - 1 );
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	3307      	adds	r3, #7
 8002d9e:	60fb      	str	r3, [r7, #12]
        uxStartAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	f023 0307 	bic.w	r3, r3, #7
 8002da6:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= ( size_t ) ( uxStartAddress - ( portPOINTER_SIZE_TYPE ) ucHeap );
 8002da8:	68ba      	ldr	r2, [r7, #8]
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	1ad3      	subs	r3, r2, r3
 8002dae:	4a1c      	ldr	r2, [pc, #112]	@ (8002e20 <prvHeapInit+0xa0>)
 8002db0:	4413      	add	r3, r2
 8002db2:	60bb      	str	r3, [r7, #8]
    }
    #endif

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) heapPROTECT_BLOCK_POINTER( uxStartAddress );
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	4a1b      	ldr	r2, [pc, #108]	@ (8002e24 <prvHeapInit+0xa4>)
 8002db8:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 8002dba:	4b1a      	ldr	r3, [pc, #104]	@ (8002e24 <prvHeapInit+0xa4>)
 8002dbc:	2200      	movs	r2, #0
 8002dbe:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxEndAddress = uxStartAddress + ( portPOINTER_SIZE_TYPE ) xTotalHeapSize;
 8002dc0:	68fa      	ldr	r2, [r7, #12]
 8002dc2:	68bb      	ldr	r3, [r7, #8]
 8002dc4:	4413      	add	r3, r2
 8002dc6:	607b      	str	r3, [r7, #4]
    uxEndAddress -= ( portPOINTER_SIZE_TYPE ) xHeapStructSize;
 8002dc8:	2208      	movs	r2, #8
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	1a9b      	subs	r3, r3, r2
 8002dce:	607b      	str	r3, [r7, #4]
    uxEndAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	f023 0307 	bic.w	r3, r3, #7
 8002dd6:	607b      	str	r3, [r7, #4]
    pxEnd = ( BlockLink_t * ) uxEndAddress;
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	4a13      	ldr	r2, [pc, #76]	@ (8002e28 <prvHeapInit+0xa8>)
 8002ddc:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8002dde:	4b12      	ldr	r3, [pc, #72]	@ (8002e28 <prvHeapInit+0xa8>)
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	2200      	movs	r2, #0
 8002de4:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( NULL );
 8002de6:	4b10      	ldr	r3, [pc, #64]	@ (8002e28 <prvHeapInit+0xa8>)
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	2200      	movs	r2, #0
 8002dec:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( BlockLink_t * ) uxStartAddress;
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = ( size_t ) ( uxEndAddress - ( portPOINTER_SIZE_TYPE ) pxFirstFreeBlock );
 8002df2:	683b      	ldr	r3, [r7, #0]
 8002df4:	687a      	ldr	r2, [r7, #4]
 8002df6:	1ad2      	subs	r2, r2, r3
 8002df8:	683b      	ldr	r3, [r7, #0]
 8002dfa:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxEnd );
 8002dfc:	4b0a      	ldr	r3, [pc, #40]	@ (8002e28 <prvHeapInit+0xa8>)
 8002dfe:	681a      	ldr	r2, [r3, #0]
 8002e00:	683b      	ldr	r3, [r7, #0]
 8002e02:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8002e04:	683b      	ldr	r3, [r7, #0]
 8002e06:	685b      	ldr	r3, [r3, #4]
 8002e08:	4a08      	ldr	r2, [pc, #32]	@ (8002e2c <prvHeapInit+0xac>)
 8002e0a:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8002e0c:	683b      	ldr	r3, [r7, #0]
 8002e0e:	685b      	ldr	r3, [r3, #4]
 8002e10:	4a07      	ldr	r2, [pc, #28]	@ (8002e30 <prvHeapInit+0xb0>)
 8002e12:	6013      	str	r3, [r2, #0]
}
 8002e14:	bf00      	nop
 8002e16:	3714      	adds	r7, #20
 8002e18:	46bd      	mov	sp, r7
 8002e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e1e:	4770      	bx	lr
 8002e20:	2000020c 	.word	0x2000020c
 8002e24:	2000f60c 	.word	0x2000f60c
 8002e28:	2000f614 	.word	0x2000f614
 8002e2c:	2000f61c 	.word	0x2000f61c
 8002e30:	2000f618 	.word	0x2000f618

08002e34 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8002e34:	b480      	push	{r7}
 8002e36:	b087      	sub	sp, #28
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) < pxBlockToInsert; pxIterator = heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) )
 8002e3c:	4b36      	ldr	r3, [pc, #216]	@ (8002f18 <prvInsertBlockIntoFreeList+0xe4>)
 8002e3e:	617b      	str	r3, [r7, #20]
 8002e40:	e002      	b.n	8002e48 <prvInsertBlockIntoFreeList+0x14>
 8002e42:	697b      	ldr	r3, [r7, #20]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	617b      	str	r3, [r7, #20]
 8002e48:	697b      	ldr	r3, [r7, #20]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	687a      	ldr	r2, [r7, #4]
 8002e4e:	429a      	cmp	r2, r3
 8002e50:	d8f7      	bhi.n	8002e42 <prvInsertBlockIntoFreeList+0xe>
    {
        /* Nothing to do here, just iterate to the right position. */
    }

    if( pxIterator != &xStart )
 8002e52:	697b      	ldr	r3, [r7, #20]
 8002e54:	4a30      	ldr	r2, [pc, #192]	@ (8002f18 <prvInsertBlockIntoFreeList+0xe4>)
 8002e56:	4293      	cmp	r3, r2
 8002e58:	d018      	beq.n	8002e8c <prvInsertBlockIntoFreeList+0x58>
    {
        heapVALIDATE_BLOCK_POINTER( pxIterator );
 8002e5a:	697b      	ldr	r3, [r7, #20]
 8002e5c:	4a2f      	ldr	r2, [pc, #188]	@ (8002f1c <prvInsertBlockIntoFreeList+0xe8>)
 8002e5e:	4293      	cmp	r3, r2
 8002e60:	d305      	bcc.n	8002e6e <prvInsertBlockIntoFreeList+0x3a>
 8002e62:	697b      	ldr	r3, [r7, #20]
 8002e64:	4a2e      	ldr	r2, [pc, #184]	@ (8002f20 <prvInsertBlockIntoFreeList+0xec>)
 8002e66:	4293      	cmp	r3, r2
 8002e68:	d801      	bhi.n	8002e6e <prvInsertBlockIntoFreeList+0x3a>
 8002e6a:	2301      	movs	r3, #1
 8002e6c:	e000      	b.n	8002e70 <prvInsertBlockIntoFreeList+0x3c>
 8002e6e:	2300      	movs	r3, #0
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d10b      	bne.n	8002e8c <prvInsertBlockIntoFreeList+0x58>
    __asm volatile
 8002e74:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002e78:	f383 8811 	msr	BASEPRI, r3
 8002e7c:	f3bf 8f6f 	isb	sy
 8002e80:	f3bf 8f4f 	dsb	sy
 8002e84:	60fb      	str	r3, [r7, #12]
}
 8002e86:	bf00      	nop
 8002e88:	bf00      	nop
 8002e8a:	e7fd      	b.n	8002e88 <prvInsertBlockIntoFreeList+0x54>
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8002e8c:	697b      	ldr	r3, [r7, #20]
 8002e8e:	613b      	str	r3, [r7, #16]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8002e90:	697b      	ldr	r3, [r7, #20]
 8002e92:	685b      	ldr	r3, [r3, #4]
 8002e94:	693a      	ldr	r2, [r7, #16]
 8002e96:	4413      	add	r3, r2
 8002e98:	687a      	ldr	r2, [r7, #4]
 8002e9a:	429a      	cmp	r2, r3
 8002e9c:	d108      	bne.n	8002eb0 <prvInsertBlockIntoFreeList+0x7c>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8002e9e:	697b      	ldr	r3, [r7, #20]
 8002ea0:	685a      	ldr	r2, [r3, #4]
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	685b      	ldr	r3, [r3, #4]
 8002ea6:	441a      	add	r2, r3
 8002ea8:	697b      	ldr	r3, [r7, #20]
 8002eaa:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8002eac:	697b      	ldr	r3, [r7, #20]
 8002eae:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	613b      	str	r3, [r7, #16]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) )
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	685b      	ldr	r3, [r3, #4]
 8002eb8:	693a      	ldr	r2, [r7, #16]
 8002eba:	441a      	add	r2, r3
 8002ebc:	697b      	ldr	r3, [r7, #20]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	429a      	cmp	r2, r3
 8002ec2:	d118      	bne.n	8002ef6 <prvInsertBlockIntoFreeList+0xc2>
    {
        if( heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) != pxEnd )
 8002ec4:	697b      	ldr	r3, [r7, #20]
 8002ec6:	681a      	ldr	r2, [r3, #0]
 8002ec8:	4b16      	ldr	r3, [pc, #88]	@ (8002f24 <prvInsertBlockIntoFreeList+0xf0>)
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	429a      	cmp	r2, r3
 8002ece:	d00d      	beq.n	8002eec <prvInsertBlockIntoFreeList+0xb8>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock )->xBlockSize;
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	685a      	ldr	r2, [r3, #4]
 8002ed4:	697b      	ldr	r3, [r7, #20]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	685b      	ldr	r3, [r3, #4]
 8002eda:	441a      	add	r2, r3
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock )->pxNextFreeBlock;
 8002ee0:	697b      	ldr	r3, [r7, #20]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	681a      	ldr	r2, [r3, #0]
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	601a      	str	r2, [r3, #0]
 8002eea:	e008      	b.n	8002efe <prvInsertBlockIntoFreeList+0xca>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxEnd );
 8002eec:	4b0d      	ldr	r3, [pc, #52]	@ (8002f24 <prvInsertBlockIntoFreeList+0xf0>)
 8002eee:	681a      	ldr	r2, [r3, #0]
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	601a      	str	r2, [r3, #0]
 8002ef4:	e003      	b.n	8002efe <prvInsertBlockIntoFreeList+0xca>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8002ef6:	697b      	ldr	r3, [r7, #20]
 8002ef8:	681a      	ldr	r2, [r3, #0]
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gap, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8002efe:	697a      	ldr	r2, [r7, #20]
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	429a      	cmp	r2, r3
 8002f04:	d002      	beq.n	8002f0c <prvInsertBlockIntoFreeList+0xd8>
    {
        pxIterator->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxBlockToInsert );
 8002f06:	697b      	ldr	r3, [r7, #20]
 8002f08:	687a      	ldr	r2, [r7, #4]
 8002f0a:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002f0c:	bf00      	nop
 8002f0e:	371c      	adds	r7, #28
 8002f10:	46bd      	mov	sp, r7
 8002f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f16:	4770      	bx	lr
 8002f18:	2000f60c 	.word	0x2000f60c
 8002f1c:	2000020c 	.word	0x2000020c
 8002f20:	2000f60b 	.word	0x2000f60b
 8002f24:	2000f614 	.word	0x2000f614

08002f28 <std>:
 8002f28:	2300      	movs	r3, #0
 8002f2a:	b510      	push	{r4, lr}
 8002f2c:	4604      	mov	r4, r0
 8002f2e:	e9c0 3300 	strd	r3, r3, [r0]
 8002f32:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8002f36:	6083      	str	r3, [r0, #8]
 8002f38:	8181      	strh	r1, [r0, #12]
 8002f3a:	6643      	str	r3, [r0, #100]	@ 0x64
 8002f3c:	81c2      	strh	r2, [r0, #14]
 8002f3e:	6183      	str	r3, [r0, #24]
 8002f40:	4619      	mov	r1, r3
 8002f42:	2208      	movs	r2, #8
 8002f44:	305c      	adds	r0, #92	@ 0x5c
 8002f46:	f000 f9e7 	bl	8003318 <memset>
 8002f4a:	4b0d      	ldr	r3, [pc, #52]	@ (8002f80 <std+0x58>)
 8002f4c:	6263      	str	r3, [r4, #36]	@ 0x24
 8002f4e:	4b0d      	ldr	r3, [pc, #52]	@ (8002f84 <std+0x5c>)
 8002f50:	62a3      	str	r3, [r4, #40]	@ 0x28
 8002f52:	4b0d      	ldr	r3, [pc, #52]	@ (8002f88 <std+0x60>)
 8002f54:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8002f56:	4b0d      	ldr	r3, [pc, #52]	@ (8002f8c <std+0x64>)
 8002f58:	6323      	str	r3, [r4, #48]	@ 0x30
 8002f5a:	4b0d      	ldr	r3, [pc, #52]	@ (8002f90 <std+0x68>)
 8002f5c:	6224      	str	r4, [r4, #32]
 8002f5e:	429c      	cmp	r4, r3
 8002f60:	d006      	beq.n	8002f70 <std+0x48>
 8002f62:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8002f66:	4294      	cmp	r4, r2
 8002f68:	d002      	beq.n	8002f70 <std+0x48>
 8002f6a:	33d0      	adds	r3, #208	@ 0xd0
 8002f6c:	429c      	cmp	r4, r3
 8002f6e:	d105      	bne.n	8002f7c <std+0x54>
 8002f70:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8002f74:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002f78:	f000 ba46 	b.w	8003408 <__retarget_lock_init_recursive>
 8002f7c:	bd10      	pop	{r4, pc}
 8002f7e:	bf00      	nop
 8002f80:	08003169 	.word	0x08003169
 8002f84:	0800318b 	.word	0x0800318b
 8002f88:	080031c3 	.word	0x080031c3
 8002f8c:	080031e7 	.word	0x080031e7
 8002f90:	2000f628 	.word	0x2000f628

08002f94 <stdio_exit_handler>:
 8002f94:	4a02      	ldr	r2, [pc, #8]	@ (8002fa0 <stdio_exit_handler+0xc>)
 8002f96:	4903      	ldr	r1, [pc, #12]	@ (8002fa4 <stdio_exit_handler+0x10>)
 8002f98:	4803      	ldr	r0, [pc, #12]	@ (8002fa8 <stdio_exit_handler+0x14>)
 8002f9a:	f000 b869 	b.w	8003070 <_fwalk_sglue>
 8002f9e:	bf00      	nop
 8002fa0:	20000008 	.word	0x20000008
 8002fa4:	08003725 	.word	0x08003725
 8002fa8:	20000018 	.word	0x20000018

08002fac <cleanup_stdio>:
 8002fac:	6841      	ldr	r1, [r0, #4]
 8002fae:	4b0c      	ldr	r3, [pc, #48]	@ (8002fe0 <cleanup_stdio+0x34>)
 8002fb0:	4299      	cmp	r1, r3
 8002fb2:	b510      	push	{r4, lr}
 8002fb4:	4604      	mov	r4, r0
 8002fb6:	d001      	beq.n	8002fbc <cleanup_stdio+0x10>
 8002fb8:	f000 fbb4 	bl	8003724 <_fflush_r>
 8002fbc:	68a1      	ldr	r1, [r4, #8]
 8002fbe:	4b09      	ldr	r3, [pc, #36]	@ (8002fe4 <cleanup_stdio+0x38>)
 8002fc0:	4299      	cmp	r1, r3
 8002fc2:	d002      	beq.n	8002fca <cleanup_stdio+0x1e>
 8002fc4:	4620      	mov	r0, r4
 8002fc6:	f000 fbad 	bl	8003724 <_fflush_r>
 8002fca:	68e1      	ldr	r1, [r4, #12]
 8002fcc:	4b06      	ldr	r3, [pc, #24]	@ (8002fe8 <cleanup_stdio+0x3c>)
 8002fce:	4299      	cmp	r1, r3
 8002fd0:	d004      	beq.n	8002fdc <cleanup_stdio+0x30>
 8002fd2:	4620      	mov	r0, r4
 8002fd4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002fd8:	f000 bba4 	b.w	8003724 <_fflush_r>
 8002fdc:	bd10      	pop	{r4, pc}
 8002fde:	bf00      	nop
 8002fe0:	2000f628 	.word	0x2000f628
 8002fe4:	2000f690 	.word	0x2000f690
 8002fe8:	2000f6f8 	.word	0x2000f6f8

08002fec <global_stdio_init.part.0>:
 8002fec:	b510      	push	{r4, lr}
 8002fee:	4b0b      	ldr	r3, [pc, #44]	@ (800301c <global_stdio_init.part.0+0x30>)
 8002ff0:	4c0b      	ldr	r4, [pc, #44]	@ (8003020 <global_stdio_init.part.0+0x34>)
 8002ff2:	4a0c      	ldr	r2, [pc, #48]	@ (8003024 <global_stdio_init.part.0+0x38>)
 8002ff4:	601a      	str	r2, [r3, #0]
 8002ff6:	4620      	mov	r0, r4
 8002ff8:	2200      	movs	r2, #0
 8002ffa:	2104      	movs	r1, #4
 8002ffc:	f7ff ff94 	bl	8002f28 <std>
 8003000:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8003004:	2201      	movs	r2, #1
 8003006:	2109      	movs	r1, #9
 8003008:	f7ff ff8e 	bl	8002f28 <std>
 800300c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8003010:	2202      	movs	r2, #2
 8003012:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003016:	2112      	movs	r1, #18
 8003018:	f7ff bf86 	b.w	8002f28 <std>
 800301c:	2000f760 	.word	0x2000f760
 8003020:	2000f628 	.word	0x2000f628
 8003024:	08002f95 	.word	0x08002f95

08003028 <__sfp_lock_acquire>:
 8003028:	4801      	ldr	r0, [pc, #4]	@ (8003030 <__sfp_lock_acquire+0x8>)
 800302a:	f000 b9ee 	b.w	800340a <__retarget_lock_acquire_recursive>
 800302e:	bf00      	nop
 8003030:	2000f769 	.word	0x2000f769

08003034 <__sfp_lock_release>:
 8003034:	4801      	ldr	r0, [pc, #4]	@ (800303c <__sfp_lock_release+0x8>)
 8003036:	f000 b9e9 	b.w	800340c <__retarget_lock_release_recursive>
 800303a:	bf00      	nop
 800303c:	2000f769 	.word	0x2000f769

08003040 <__sinit>:
 8003040:	b510      	push	{r4, lr}
 8003042:	4604      	mov	r4, r0
 8003044:	f7ff fff0 	bl	8003028 <__sfp_lock_acquire>
 8003048:	6a23      	ldr	r3, [r4, #32]
 800304a:	b11b      	cbz	r3, 8003054 <__sinit+0x14>
 800304c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003050:	f7ff bff0 	b.w	8003034 <__sfp_lock_release>
 8003054:	4b04      	ldr	r3, [pc, #16]	@ (8003068 <__sinit+0x28>)
 8003056:	6223      	str	r3, [r4, #32]
 8003058:	4b04      	ldr	r3, [pc, #16]	@ (800306c <__sinit+0x2c>)
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	2b00      	cmp	r3, #0
 800305e:	d1f5      	bne.n	800304c <__sinit+0xc>
 8003060:	f7ff ffc4 	bl	8002fec <global_stdio_init.part.0>
 8003064:	e7f2      	b.n	800304c <__sinit+0xc>
 8003066:	bf00      	nop
 8003068:	08002fad 	.word	0x08002fad
 800306c:	2000f760 	.word	0x2000f760

08003070 <_fwalk_sglue>:
 8003070:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003074:	4607      	mov	r7, r0
 8003076:	4688      	mov	r8, r1
 8003078:	4614      	mov	r4, r2
 800307a:	2600      	movs	r6, #0
 800307c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003080:	f1b9 0901 	subs.w	r9, r9, #1
 8003084:	d505      	bpl.n	8003092 <_fwalk_sglue+0x22>
 8003086:	6824      	ldr	r4, [r4, #0]
 8003088:	2c00      	cmp	r4, #0
 800308a:	d1f7      	bne.n	800307c <_fwalk_sglue+0xc>
 800308c:	4630      	mov	r0, r6
 800308e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003092:	89ab      	ldrh	r3, [r5, #12]
 8003094:	2b01      	cmp	r3, #1
 8003096:	d907      	bls.n	80030a8 <_fwalk_sglue+0x38>
 8003098:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800309c:	3301      	adds	r3, #1
 800309e:	d003      	beq.n	80030a8 <_fwalk_sglue+0x38>
 80030a0:	4629      	mov	r1, r5
 80030a2:	4638      	mov	r0, r7
 80030a4:	47c0      	blx	r8
 80030a6:	4306      	orrs	r6, r0
 80030a8:	3568      	adds	r5, #104	@ 0x68
 80030aa:	e7e9      	b.n	8003080 <_fwalk_sglue+0x10>

080030ac <_puts_r>:
 80030ac:	6a03      	ldr	r3, [r0, #32]
 80030ae:	b570      	push	{r4, r5, r6, lr}
 80030b0:	6884      	ldr	r4, [r0, #8]
 80030b2:	4605      	mov	r5, r0
 80030b4:	460e      	mov	r6, r1
 80030b6:	b90b      	cbnz	r3, 80030bc <_puts_r+0x10>
 80030b8:	f7ff ffc2 	bl	8003040 <__sinit>
 80030bc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80030be:	07db      	lsls	r3, r3, #31
 80030c0:	d405      	bmi.n	80030ce <_puts_r+0x22>
 80030c2:	89a3      	ldrh	r3, [r4, #12]
 80030c4:	0598      	lsls	r0, r3, #22
 80030c6:	d402      	bmi.n	80030ce <_puts_r+0x22>
 80030c8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80030ca:	f000 f99e 	bl	800340a <__retarget_lock_acquire_recursive>
 80030ce:	89a3      	ldrh	r3, [r4, #12]
 80030d0:	0719      	lsls	r1, r3, #28
 80030d2:	d502      	bpl.n	80030da <_puts_r+0x2e>
 80030d4:	6923      	ldr	r3, [r4, #16]
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d135      	bne.n	8003146 <_puts_r+0x9a>
 80030da:	4621      	mov	r1, r4
 80030dc:	4628      	mov	r0, r5
 80030de:	f000 f8c5 	bl	800326c <__swsetup_r>
 80030e2:	b380      	cbz	r0, 8003146 <_puts_r+0x9a>
 80030e4:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 80030e8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80030ea:	07da      	lsls	r2, r3, #31
 80030ec:	d405      	bmi.n	80030fa <_puts_r+0x4e>
 80030ee:	89a3      	ldrh	r3, [r4, #12]
 80030f0:	059b      	lsls	r3, r3, #22
 80030f2:	d402      	bmi.n	80030fa <_puts_r+0x4e>
 80030f4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80030f6:	f000 f989 	bl	800340c <__retarget_lock_release_recursive>
 80030fa:	4628      	mov	r0, r5
 80030fc:	bd70      	pop	{r4, r5, r6, pc}
 80030fe:	2b00      	cmp	r3, #0
 8003100:	da04      	bge.n	800310c <_puts_r+0x60>
 8003102:	69a2      	ldr	r2, [r4, #24]
 8003104:	429a      	cmp	r2, r3
 8003106:	dc17      	bgt.n	8003138 <_puts_r+0x8c>
 8003108:	290a      	cmp	r1, #10
 800310a:	d015      	beq.n	8003138 <_puts_r+0x8c>
 800310c:	6823      	ldr	r3, [r4, #0]
 800310e:	1c5a      	adds	r2, r3, #1
 8003110:	6022      	str	r2, [r4, #0]
 8003112:	7019      	strb	r1, [r3, #0]
 8003114:	68a3      	ldr	r3, [r4, #8]
 8003116:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800311a:	3b01      	subs	r3, #1
 800311c:	60a3      	str	r3, [r4, #8]
 800311e:	2900      	cmp	r1, #0
 8003120:	d1ed      	bne.n	80030fe <_puts_r+0x52>
 8003122:	2b00      	cmp	r3, #0
 8003124:	da11      	bge.n	800314a <_puts_r+0x9e>
 8003126:	4622      	mov	r2, r4
 8003128:	210a      	movs	r1, #10
 800312a:	4628      	mov	r0, r5
 800312c:	f000 f85f 	bl	80031ee <__swbuf_r>
 8003130:	3001      	adds	r0, #1
 8003132:	d0d7      	beq.n	80030e4 <_puts_r+0x38>
 8003134:	250a      	movs	r5, #10
 8003136:	e7d7      	b.n	80030e8 <_puts_r+0x3c>
 8003138:	4622      	mov	r2, r4
 800313a:	4628      	mov	r0, r5
 800313c:	f000 f857 	bl	80031ee <__swbuf_r>
 8003140:	3001      	adds	r0, #1
 8003142:	d1e7      	bne.n	8003114 <_puts_r+0x68>
 8003144:	e7ce      	b.n	80030e4 <_puts_r+0x38>
 8003146:	3e01      	subs	r6, #1
 8003148:	e7e4      	b.n	8003114 <_puts_r+0x68>
 800314a:	6823      	ldr	r3, [r4, #0]
 800314c:	1c5a      	adds	r2, r3, #1
 800314e:	6022      	str	r2, [r4, #0]
 8003150:	220a      	movs	r2, #10
 8003152:	701a      	strb	r2, [r3, #0]
 8003154:	e7ee      	b.n	8003134 <_puts_r+0x88>
	...

08003158 <puts>:
 8003158:	4b02      	ldr	r3, [pc, #8]	@ (8003164 <puts+0xc>)
 800315a:	4601      	mov	r1, r0
 800315c:	6818      	ldr	r0, [r3, #0]
 800315e:	f7ff bfa5 	b.w	80030ac <_puts_r>
 8003162:	bf00      	nop
 8003164:	20000014 	.word	0x20000014

08003168 <__sread>:
 8003168:	b510      	push	{r4, lr}
 800316a:	460c      	mov	r4, r1
 800316c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003170:	f000 f8fc 	bl	800336c <_read_r>
 8003174:	2800      	cmp	r0, #0
 8003176:	bfab      	itete	ge
 8003178:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800317a:	89a3      	ldrhlt	r3, [r4, #12]
 800317c:	181b      	addge	r3, r3, r0
 800317e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8003182:	bfac      	ite	ge
 8003184:	6563      	strge	r3, [r4, #84]	@ 0x54
 8003186:	81a3      	strhlt	r3, [r4, #12]
 8003188:	bd10      	pop	{r4, pc}

0800318a <__swrite>:
 800318a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800318e:	461f      	mov	r7, r3
 8003190:	898b      	ldrh	r3, [r1, #12]
 8003192:	05db      	lsls	r3, r3, #23
 8003194:	4605      	mov	r5, r0
 8003196:	460c      	mov	r4, r1
 8003198:	4616      	mov	r6, r2
 800319a:	d505      	bpl.n	80031a8 <__swrite+0x1e>
 800319c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80031a0:	2302      	movs	r3, #2
 80031a2:	2200      	movs	r2, #0
 80031a4:	f000 f8d0 	bl	8003348 <_lseek_r>
 80031a8:	89a3      	ldrh	r3, [r4, #12]
 80031aa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80031ae:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80031b2:	81a3      	strh	r3, [r4, #12]
 80031b4:	4632      	mov	r2, r6
 80031b6:	463b      	mov	r3, r7
 80031b8:	4628      	mov	r0, r5
 80031ba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80031be:	f000 b8e7 	b.w	8003390 <_write_r>

080031c2 <__sseek>:
 80031c2:	b510      	push	{r4, lr}
 80031c4:	460c      	mov	r4, r1
 80031c6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80031ca:	f000 f8bd 	bl	8003348 <_lseek_r>
 80031ce:	1c43      	adds	r3, r0, #1
 80031d0:	89a3      	ldrh	r3, [r4, #12]
 80031d2:	bf15      	itete	ne
 80031d4:	6560      	strne	r0, [r4, #84]	@ 0x54
 80031d6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80031da:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80031de:	81a3      	strheq	r3, [r4, #12]
 80031e0:	bf18      	it	ne
 80031e2:	81a3      	strhne	r3, [r4, #12]
 80031e4:	bd10      	pop	{r4, pc}

080031e6 <__sclose>:
 80031e6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80031ea:	f000 b89d 	b.w	8003328 <_close_r>

080031ee <__swbuf_r>:
 80031ee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80031f0:	460e      	mov	r6, r1
 80031f2:	4614      	mov	r4, r2
 80031f4:	4605      	mov	r5, r0
 80031f6:	b118      	cbz	r0, 8003200 <__swbuf_r+0x12>
 80031f8:	6a03      	ldr	r3, [r0, #32]
 80031fa:	b90b      	cbnz	r3, 8003200 <__swbuf_r+0x12>
 80031fc:	f7ff ff20 	bl	8003040 <__sinit>
 8003200:	69a3      	ldr	r3, [r4, #24]
 8003202:	60a3      	str	r3, [r4, #8]
 8003204:	89a3      	ldrh	r3, [r4, #12]
 8003206:	071a      	lsls	r2, r3, #28
 8003208:	d501      	bpl.n	800320e <__swbuf_r+0x20>
 800320a:	6923      	ldr	r3, [r4, #16]
 800320c:	b943      	cbnz	r3, 8003220 <__swbuf_r+0x32>
 800320e:	4621      	mov	r1, r4
 8003210:	4628      	mov	r0, r5
 8003212:	f000 f82b 	bl	800326c <__swsetup_r>
 8003216:	b118      	cbz	r0, 8003220 <__swbuf_r+0x32>
 8003218:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 800321c:	4638      	mov	r0, r7
 800321e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003220:	6823      	ldr	r3, [r4, #0]
 8003222:	6922      	ldr	r2, [r4, #16]
 8003224:	1a98      	subs	r0, r3, r2
 8003226:	6963      	ldr	r3, [r4, #20]
 8003228:	b2f6      	uxtb	r6, r6
 800322a:	4283      	cmp	r3, r0
 800322c:	4637      	mov	r7, r6
 800322e:	dc05      	bgt.n	800323c <__swbuf_r+0x4e>
 8003230:	4621      	mov	r1, r4
 8003232:	4628      	mov	r0, r5
 8003234:	f000 fa76 	bl	8003724 <_fflush_r>
 8003238:	2800      	cmp	r0, #0
 800323a:	d1ed      	bne.n	8003218 <__swbuf_r+0x2a>
 800323c:	68a3      	ldr	r3, [r4, #8]
 800323e:	3b01      	subs	r3, #1
 8003240:	60a3      	str	r3, [r4, #8]
 8003242:	6823      	ldr	r3, [r4, #0]
 8003244:	1c5a      	adds	r2, r3, #1
 8003246:	6022      	str	r2, [r4, #0]
 8003248:	701e      	strb	r6, [r3, #0]
 800324a:	6962      	ldr	r2, [r4, #20]
 800324c:	1c43      	adds	r3, r0, #1
 800324e:	429a      	cmp	r2, r3
 8003250:	d004      	beq.n	800325c <__swbuf_r+0x6e>
 8003252:	89a3      	ldrh	r3, [r4, #12]
 8003254:	07db      	lsls	r3, r3, #31
 8003256:	d5e1      	bpl.n	800321c <__swbuf_r+0x2e>
 8003258:	2e0a      	cmp	r6, #10
 800325a:	d1df      	bne.n	800321c <__swbuf_r+0x2e>
 800325c:	4621      	mov	r1, r4
 800325e:	4628      	mov	r0, r5
 8003260:	f000 fa60 	bl	8003724 <_fflush_r>
 8003264:	2800      	cmp	r0, #0
 8003266:	d0d9      	beq.n	800321c <__swbuf_r+0x2e>
 8003268:	e7d6      	b.n	8003218 <__swbuf_r+0x2a>
	...

0800326c <__swsetup_r>:
 800326c:	b538      	push	{r3, r4, r5, lr}
 800326e:	4b29      	ldr	r3, [pc, #164]	@ (8003314 <__swsetup_r+0xa8>)
 8003270:	4605      	mov	r5, r0
 8003272:	6818      	ldr	r0, [r3, #0]
 8003274:	460c      	mov	r4, r1
 8003276:	b118      	cbz	r0, 8003280 <__swsetup_r+0x14>
 8003278:	6a03      	ldr	r3, [r0, #32]
 800327a:	b90b      	cbnz	r3, 8003280 <__swsetup_r+0x14>
 800327c:	f7ff fee0 	bl	8003040 <__sinit>
 8003280:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003284:	0719      	lsls	r1, r3, #28
 8003286:	d422      	bmi.n	80032ce <__swsetup_r+0x62>
 8003288:	06da      	lsls	r2, r3, #27
 800328a:	d407      	bmi.n	800329c <__swsetup_r+0x30>
 800328c:	2209      	movs	r2, #9
 800328e:	602a      	str	r2, [r5, #0]
 8003290:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003294:	81a3      	strh	r3, [r4, #12]
 8003296:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800329a:	e033      	b.n	8003304 <__swsetup_r+0x98>
 800329c:	0758      	lsls	r0, r3, #29
 800329e:	d512      	bpl.n	80032c6 <__swsetup_r+0x5a>
 80032a0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80032a2:	b141      	cbz	r1, 80032b6 <__swsetup_r+0x4a>
 80032a4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80032a8:	4299      	cmp	r1, r3
 80032aa:	d002      	beq.n	80032b2 <__swsetup_r+0x46>
 80032ac:	4628      	mov	r0, r5
 80032ae:	f000 f8bd 	bl	800342c <_free_r>
 80032b2:	2300      	movs	r3, #0
 80032b4:	6363      	str	r3, [r4, #52]	@ 0x34
 80032b6:	89a3      	ldrh	r3, [r4, #12]
 80032b8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80032bc:	81a3      	strh	r3, [r4, #12]
 80032be:	2300      	movs	r3, #0
 80032c0:	6063      	str	r3, [r4, #4]
 80032c2:	6923      	ldr	r3, [r4, #16]
 80032c4:	6023      	str	r3, [r4, #0]
 80032c6:	89a3      	ldrh	r3, [r4, #12]
 80032c8:	f043 0308 	orr.w	r3, r3, #8
 80032cc:	81a3      	strh	r3, [r4, #12]
 80032ce:	6923      	ldr	r3, [r4, #16]
 80032d0:	b94b      	cbnz	r3, 80032e6 <__swsetup_r+0x7a>
 80032d2:	89a3      	ldrh	r3, [r4, #12]
 80032d4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80032d8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80032dc:	d003      	beq.n	80032e6 <__swsetup_r+0x7a>
 80032de:	4621      	mov	r1, r4
 80032e0:	4628      	mov	r0, r5
 80032e2:	f000 fa6d 	bl	80037c0 <__smakebuf_r>
 80032e6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80032ea:	f013 0201 	ands.w	r2, r3, #1
 80032ee:	d00a      	beq.n	8003306 <__swsetup_r+0x9a>
 80032f0:	2200      	movs	r2, #0
 80032f2:	60a2      	str	r2, [r4, #8]
 80032f4:	6962      	ldr	r2, [r4, #20]
 80032f6:	4252      	negs	r2, r2
 80032f8:	61a2      	str	r2, [r4, #24]
 80032fa:	6922      	ldr	r2, [r4, #16]
 80032fc:	b942      	cbnz	r2, 8003310 <__swsetup_r+0xa4>
 80032fe:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8003302:	d1c5      	bne.n	8003290 <__swsetup_r+0x24>
 8003304:	bd38      	pop	{r3, r4, r5, pc}
 8003306:	0799      	lsls	r1, r3, #30
 8003308:	bf58      	it	pl
 800330a:	6962      	ldrpl	r2, [r4, #20]
 800330c:	60a2      	str	r2, [r4, #8]
 800330e:	e7f4      	b.n	80032fa <__swsetup_r+0x8e>
 8003310:	2000      	movs	r0, #0
 8003312:	e7f7      	b.n	8003304 <__swsetup_r+0x98>
 8003314:	20000014 	.word	0x20000014

08003318 <memset>:
 8003318:	4402      	add	r2, r0
 800331a:	4603      	mov	r3, r0
 800331c:	4293      	cmp	r3, r2
 800331e:	d100      	bne.n	8003322 <memset+0xa>
 8003320:	4770      	bx	lr
 8003322:	f803 1b01 	strb.w	r1, [r3], #1
 8003326:	e7f9      	b.n	800331c <memset+0x4>

08003328 <_close_r>:
 8003328:	b538      	push	{r3, r4, r5, lr}
 800332a:	4d06      	ldr	r5, [pc, #24]	@ (8003344 <_close_r+0x1c>)
 800332c:	2300      	movs	r3, #0
 800332e:	4604      	mov	r4, r0
 8003330:	4608      	mov	r0, r1
 8003332:	602b      	str	r3, [r5, #0]
 8003334:	f7fd fa3f 	bl	80007b6 <_close>
 8003338:	1c43      	adds	r3, r0, #1
 800333a:	d102      	bne.n	8003342 <_close_r+0x1a>
 800333c:	682b      	ldr	r3, [r5, #0]
 800333e:	b103      	cbz	r3, 8003342 <_close_r+0x1a>
 8003340:	6023      	str	r3, [r4, #0]
 8003342:	bd38      	pop	{r3, r4, r5, pc}
 8003344:	2000f764 	.word	0x2000f764

08003348 <_lseek_r>:
 8003348:	b538      	push	{r3, r4, r5, lr}
 800334a:	4d07      	ldr	r5, [pc, #28]	@ (8003368 <_lseek_r+0x20>)
 800334c:	4604      	mov	r4, r0
 800334e:	4608      	mov	r0, r1
 8003350:	4611      	mov	r1, r2
 8003352:	2200      	movs	r2, #0
 8003354:	602a      	str	r2, [r5, #0]
 8003356:	461a      	mov	r2, r3
 8003358:	f7fd fa54 	bl	8000804 <_lseek>
 800335c:	1c43      	adds	r3, r0, #1
 800335e:	d102      	bne.n	8003366 <_lseek_r+0x1e>
 8003360:	682b      	ldr	r3, [r5, #0]
 8003362:	b103      	cbz	r3, 8003366 <_lseek_r+0x1e>
 8003364:	6023      	str	r3, [r4, #0]
 8003366:	bd38      	pop	{r3, r4, r5, pc}
 8003368:	2000f764 	.word	0x2000f764

0800336c <_read_r>:
 800336c:	b538      	push	{r3, r4, r5, lr}
 800336e:	4d07      	ldr	r5, [pc, #28]	@ (800338c <_read_r+0x20>)
 8003370:	4604      	mov	r4, r0
 8003372:	4608      	mov	r0, r1
 8003374:	4611      	mov	r1, r2
 8003376:	2200      	movs	r2, #0
 8003378:	602a      	str	r2, [r5, #0]
 800337a:	461a      	mov	r2, r3
 800337c:	f7fd f9e2 	bl	8000744 <_read>
 8003380:	1c43      	adds	r3, r0, #1
 8003382:	d102      	bne.n	800338a <_read_r+0x1e>
 8003384:	682b      	ldr	r3, [r5, #0]
 8003386:	b103      	cbz	r3, 800338a <_read_r+0x1e>
 8003388:	6023      	str	r3, [r4, #0]
 800338a:	bd38      	pop	{r3, r4, r5, pc}
 800338c:	2000f764 	.word	0x2000f764

08003390 <_write_r>:
 8003390:	b538      	push	{r3, r4, r5, lr}
 8003392:	4d07      	ldr	r5, [pc, #28]	@ (80033b0 <_write_r+0x20>)
 8003394:	4604      	mov	r4, r0
 8003396:	4608      	mov	r0, r1
 8003398:	4611      	mov	r1, r2
 800339a:	2200      	movs	r2, #0
 800339c:	602a      	str	r2, [r5, #0]
 800339e:	461a      	mov	r2, r3
 80033a0:	f7fd f9ed 	bl	800077e <_write>
 80033a4:	1c43      	adds	r3, r0, #1
 80033a6:	d102      	bne.n	80033ae <_write_r+0x1e>
 80033a8:	682b      	ldr	r3, [r5, #0]
 80033aa:	b103      	cbz	r3, 80033ae <_write_r+0x1e>
 80033ac:	6023      	str	r3, [r4, #0]
 80033ae:	bd38      	pop	{r3, r4, r5, pc}
 80033b0:	2000f764 	.word	0x2000f764

080033b4 <__errno>:
 80033b4:	4b01      	ldr	r3, [pc, #4]	@ (80033bc <__errno+0x8>)
 80033b6:	6818      	ldr	r0, [r3, #0]
 80033b8:	4770      	bx	lr
 80033ba:	bf00      	nop
 80033bc:	20000014 	.word	0x20000014

080033c0 <__libc_init_array>:
 80033c0:	b570      	push	{r4, r5, r6, lr}
 80033c2:	4d0d      	ldr	r5, [pc, #52]	@ (80033f8 <__libc_init_array+0x38>)
 80033c4:	4c0d      	ldr	r4, [pc, #52]	@ (80033fc <__libc_init_array+0x3c>)
 80033c6:	1b64      	subs	r4, r4, r5
 80033c8:	10a4      	asrs	r4, r4, #2
 80033ca:	2600      	movs	r6, #0
 80033cc:	42a6      	cmp	r6, r4
 80033ce:	d109      	bne.n	80033e4 <__libc_init_array+0x24>
 80033d0:	4d0b      	ldr	r5, [pc, #44]	@ (8003400 <__libc_init_array+0x40>)
 80033d2:	4c0c      	ldr	r4, [pc, #48]	@ (8003404 <__libc_init_array+0x44>)
 80033d4:	f000 fa62 	bl	800389c <_init>
 80033d8:	1b64      	subs	r4, r4, r5
 80033da:	10a4      	asrs	r4, r4, #2
 80033dc:	2600      	movs	r6, #0
 80033de:	42a6      	cmp	r6, r4
 80033e0:	d105      	bne.n	80033ee <__libc_init_array+0x2e>
 80033e2:	bd70      	pop	{r4, r5, r6, pc}
 80033e4:	f855 3b04 	ldr.w	r3, [r5], #4
 80033e8:	4798      	blx	r3
 80033ea:	3601      	adds	r6, #1
 80033ec:	e7ee      	b.n	80033cc <__libc_init_array+0xc>
 80033ee:	f855 3b04 	ldr.w	r3, [r5], #4
 80033f2:	4798      	blx	r3
 80033f4:	3601      	adds	r6, #1
 80033f6:	e7f2      	b.n	80033de <__libc_init_array+0x1e>
 80033f8:	0800391c 	.word	0x0800391c
 80033fc:	0800391c 	.word	0x0800391c
 8003400:	0800391c 	.word	0x0800391c
 8003404:	08003920 	.word	0x08003920

08003408 <__retarget_lock_init_recursive>:
 8003408:	4770      	bx	lr

0800340a <__retarget_lock_acquire_recursive>:
 800340a:	4770      	bx	lr

0800340c <__retarget_lock_release_recursive>:
 800340c:	4770      	bx	lr

0800340e <memcpy>:
 800340e:	440a      	add	r2, r1
 8003410:	4291      	cmp	r1, r2
 8003412:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8003416:	d100      	bne.n	800341a <memcpy+0xc>
 8003418:	4770      	bx	lr
 800341a:	b510      	push	{r4, lr}
 800341c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003420:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003424:	4291      	cmp	r1, r2
 8003426:	d1f9      	bne.n	800341c <memcpy+0xe>
 8003428:	bd10      	pop	{r4, pc}
	...

0800342c <_free_r>:
 800342c:	b538      	push	{r3, r4, r5, lr}
 800342e:	4605      	mov	r5, r0
 8003430:	2900      	cmp	r1, #0
 8003432:	d041      	beq.n	80034b8 <_free_r+0x8c>
 8003434:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003438:	1f0c      	subs	r4, r1, #4
 800343a:	2b00      	cmp	r3, #0
 800343c:	bfb8      	it	lt
 800343e:	18e4      	addlt	r4, r4, r3
 8003440:	f000 f8e0 	bl	8003604 <__malloc_lock>
 8003444:	4a1d      	ldr	r2, [pc, #116]	@ (80034bc <_free_r+0x90>)
 8003446:	6813      	ldr	r3, [r2, #0]
 8003448:	b933      	cbnz	r3, 8003458 <_free_r+0x2c>
 800344a:	6063      	str	r3, [r4, #4]
 800344c:	6014      	str	r4, [r2, #0]
 800344e:	4628      	mov	r0, r5
 8003450:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003454:	f000 b8dc 	b.w	8003610 <__malloc_unlock>
 8003458:	42a3      	cmp	r3, r4
 800345a:	d908      	bls.n	800346e <_free_r+0x42>
 800345c:	6820      	ldr	r0, [r4, #0]
 800345e:	1821      	adds	r1, r4, r0
 8003460:	428b      	cmp	r3, r1
 8003462:	bf01      	itttt	eq
 8003464:	6819      	ldreq	r1, [r3, #0]
 8003466:	685b      	ldreq	r3, [r3, #4]
 8003468:	1809      	addeq	r1, r1, r0
 800346a:	6021      	streq	r1, [r4, #0]
 800346c:	e7ed      	b.n	800344a <_free_r+0x1e>
 800346e:	461a      	mov	r2, r3
 8003470:	685b      	ldr	r3, [r3, #4]
 8003472:	b10b      	cbz	r3, 8003478 <_free_r+0x4c>
 8003474:	42a3      	cmp	r3, r4
 8003476:	d9fa      	bls.n	800346e <_free_r+0x42>
 8003478:	6811      	ldr	r1, [r2, #0]
 800347a:	1850      	adds	r0, r2, r1
 800347c:	42a0      	cmp	r0, r4
 800347e:	d10b      	bne.n	8003498 <_free_r+0x6c>
 8003480:	6820      	ldr	r0, [r4, #0]
 8003482:	4401      	add	r1, r0
 8003484:	1850      	adds	r0, r2, r1
 8003486:	4283      	cmp	r3, r0
 8003488:	6011      	str	r1, [r2, #0]
 800348a:	d1e0      	bne.n	800344e <_free_r+0x22>
 800348c:	6818      	ldr	r0, [r3, #0]
 800348e:	685b      	ldr	r3, [r3, #4]
 8003490:	6053      	str	r3, [r2, #4]
 8003492:	4408      	add	r0, r1
 8003494:	6010      	str	r0, [r2, #0]
 8003496:	e7da      	b.n	800344e <_free_r+0x22>
 8003498:	d902      	bls.n	80034a0 <_free_r+0x74>
 800349a:	230c      	movs	r3, #12
 800349c:	602b      	str	r3, [r5, #0]
 800349e:	e7d6      	b.n	800344e <_free_r+0x22>
 80034a0:	6820      	ldr	r0, [r4, #0]
 80034a2:	1821      	adds	r1, r4, r0
 80034a4:	428b      	cmp	r3, r1
 80034a6:	bf04      	itt	eq
 80034a8:	6819      	ldreq	r1, [r3, #0]
 80034aa:	685b      	ldreq	r3, [r3, #4]
 80034ac:	6063      	str	r3, [r4, #4]
 80034ae:	bf04      	itt	eq
 80034b0:	1809      	addeq	r1, r1, r0
 80034b2:	6021      	streq	r1, [r4, #0]
 80034b4:	6054      	str	r4, [r2, #4]
 80034b6:	e7ca      	b.n	800344e <_free_r+0x22>
 80034b8:	bd38      	pop	{r3, r4, r5, pc}
 80034ba:	bf00      	nop
 80034bc:	2000f770 	.word	0x2000f770

080034c0 <sbrk_aligned>:
 80034c0:	b570      	push	{r4, r5, r6, lr}
 80034c2:	4e0f      	ldr	r6, [pc, #60]	@ (8003500 <sbrk_aligned+0x40>)
 80034c4:	460c      	mov	r4, r1
 80034c6:	6831      	ldr	r1, [r6, #0]
 80034c8:	4605      	mov	r5, r0
 80034ca:	b911      	cbnz	r1, 80034d2 <sbrk_aligned+0x12>
 80034cc:	f000 f9d6 	bl	800387c <_sbrk_r>
 80034d0:	6030      	str	r0, [r6, #0]
 80034d2:	4621      	mov	r1, r4
 80034d4:	4628      	mov	r0, r5
 80034d6:	f000 f9d1 	bl	800387c <_sbrk_r>
 80034da:	1c43      	adds	r3, r0, #1
 80034dc:	d103      	bne.n	80034e6 <sbrk_aligned+0x26>
 80034de:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 80034e2:	4620      	mov	r0, r4
 80034e4:	bd70      	pop	{r4, r5, r6, pc}
 80034e6:	1cc4      	adds	r4, r0, #3
 80034e8:	f024 0403 	bic.w	r4, r4, #3
 80034ec:	42a0      	cmp	r0, r4
 80034ee:	d0f8      	beq.n	80034e2 <sbrk_aligned+0x22>
 80034f0:	1a21      	subs	r1, r4, r0
 80034f2:	4628      	mov	r0, r5
 80034f4:	f000 f9c2 	bl	800387c <_sbrk_r>
 80034f8:	3001      	adds	r0, #1
 80034fa:	d1f2      	bne.n	80034e2 <sbrk_aligned+0x22>
 80034fc:	e7ef      	b.n	80034de <sbrk_aligned+0x1e>
 80034fe:	bf00      	nop
 8003500:	2000f76c 	.word	0x2000f76c

08003504 <_malloc_r>:
 8003504:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003508:	1ccd      	adds	r5, r1, #3
 800350a:	f025 0503 	bic.w	r5, r5, #3
 800350e:	3508      	adds	r5, #8
 8003510:	2d0c      	cmp	r5, #12
 8003512:	bf38      	it	cc
 8003514:	250c      	movcc	r5, #12
 8003516:	2d00      	cmp	r5, #0
 8003518:	4606      	mov	r6, r0
 800351a:	db01      	blt.n	8003520 <_malloc_r+0x1c>
 800351c:	42a9      	cmp	r1, r5
 800351e:	d904      	bls.n	800352a <_malloc_r+0x26>
 8003520:	230c      	movs	r3, #12
 8003522:	6033      	str	r3, [r6, #0]
 8003524:	2000      	movs	r0, #0
 8003526:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800352a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8003600 <_malloc_r+0xfc>
 800352e:	f000 f869 	bl	8003604 <__malloc_lock>
 8003532:	f8d8 3000 	ldr.w	r3, [r8]
 8003536:	461c      	mov	r4, r3
 8003538:	bb44      	cbnz	r4, 800358c <_malloc_r+0x88>
 800353a:	4629      	mov	r1, r5
 800353c:	4630      	mov	r0, r6
 800353e:	f7ff ffbf 	bl	80034c0 <sbrk_aligned>
 8003542:	1c43      	adds	r3, r0, #1
 8003544:	4604      	mov	r4, r0
 8003546:	d158      	bne.n	80035fa <_malloc_r+0xf6>
 8003548:	f8d8 4000 	ldr.w	r4, [r8]
 800354c:	4627      	mov	r7, r4
 800354e:	2f00      	cmp	r7, #0
 8003550:	d143      	bne.n	80035da <_malloc_r+0xd6>
 8003552:	2c00      	cmp	r4, #0
 8003554:	d04b      	beq.n	80035ee <_malloc_r+0xea>
 8003556:	6823      	ldr	r3, [r4, #0]
 8003558:	4639      	mov	r1, r7
 800355a:	4630      	mov	r0, r6
 800355c:	eb04 0903 	add.w	r9, r4, r3
 8003560:	f000 f98c 	bl	800387c <_sbrk_r>
 8003564:	4581      	cmp	r9, r0
 8003566:	d142      	bne.n	80035ee <_malloc_r+0xea>
 8003568:	6821      	ldr	r1, [r4, #0]
 800356a:	1a6d      	subs	r5, r5, r1
 800356c:	4629      	mov	r1, r5
 800356e:	4630      	mov	r0, r6
 8003570:	f7ff ffa6 	bl	80034c0 <sbrk_aligned>
 8003574:	3001      	adds	r0, #1
 8003576:	d03a      	beq.n	80035ee <_malloc_r+0xea>
 8003578:	6823      	ldr	r3, [r4, #0]
 800357a:	442b      	add	r3, r5
 800357c:	6023      	str	r3, [r4, #0]
 800357e:	f8d8 3000 	ldr.w	r3, [r8]
 8003582:	685a      	ldr	r2, [r3, #4]
 8003584:	bb62      	cbnz	r2, 80035e0 <_malloc_r+0xdc>
 8003586:	f8c8 7000 	str.w	r7, [r8]
 800358a:	e00f      	b.n	80035ac <_malloc_r+0xa8>
 800358c:	6822      	ldr	r2, [r4, #0]
 800358e:	1b52      	subs	r2, r2, r5
 8003590:	d420      	bmi.n	80035d4 <_malloc_r+0xd0>
 8003592:	2a0b      	cmp	r2, #11
 8003594:	d917      	bls.n	80035c6 <_malloc_r+0xc2>
 8003596:	1961      	adds	r1, r4, r5
 8003598:	42a3      	cmp	r3, r4
 800359a:	6025      	str	r5, [r4, #0]
 800359c:	bf18      	it	ne
 800359e:	6059      	strne	r1, [r3, #4]
 80035a0:	6863      	ldr	r3, [r4, #4]
 80035a2:	bf08      	it	eq
 80035a4:	f8c8 1000 	streq.w	r1, [r8]
 80035a8:	5162      	str	r2, [r4, r5]
 80035aa:	604b      	str	r3, [r1, #4]
 80035ac:	4630      	mov	r0, r6
 80035ae:	f000 f82f 	bl	8003610 <__malloc_unlock>
 80035b2:	f104 000b 	add.w	r0, r4, #11
 80035b6:	1d23      	adds	r3, r4, #4
 80035b8:	f020 0007 	bic.w	r0, r0, #7
 80035bc:	1ac2      	subs	r2, r0, r3
 80035be:	bf1c      	itt	ne
 80035c0:	1a1b      	subne	r3, r3, r0
 80035c2:	50a3      	strne	r3, [r4, r2]
 80035c4:	e7af      	b.n	8003526 <_malloc_r+0x22>
 80035c6:	6862      	ldr	r2, [r4, #4]
 80035c8:	42a3      	cmp	r3, r4
 80035ca:	bf0c      	ite	eq
 80035cc:	f8c8 2000 	streq.w	r2, [r8]
 80035d0:	605a      	strne	r2, [r3, #4]
 80035d2:	e7eb      	b.n	80035ac <_malloc_r+0xa8>
 80035d4:	4623      	mov	r3, r4
 80035d6:	6864      	ldr	r4, [r4, #4]
 80035d8:	e7ae      	b.n	8003538 <_malloc_r+0x34>
 80035da:	463c      	mov	r4, r7
 80035dc:	687f      	ldr	r7, [r7, #4]
 80035de:	e7b6      	b.n	800354e <_malloc_r+0x4a>
 80035e0:	461a      	mov	r2, r3
 80035e2:	685b      	ldr	r3, [r3, #4]
 80035e4:	42a3      	cmp	r3, r4
 80035e6:	d1fb      	bne.n	80035e0 <_malloc_r+0xdc>
 80035e8:	2300      	movs	r3, #0
 80035ea:	6053      	str	r3, [r2, #4]
 80035ec:	e7de      	b.n	80035ac <_malloc_r+0xa8>
 80035ee:	230c      	movs	r3, #12
 80035f0:	6033      	str	r3, [r6, #0]
 80035f2:	4630      	mov	r0, r6
 80035f4:	f000 f80c 	bl	8003610 <__malloc_unlock>
 80035f8:	e794      	b.n	8003524 <_malloc_r+0x20>
 80035fa:	6005      	str	r5, [r0, #0]
 80035fc:	e7d6      	b.n	80035ac <_malloc_r+0xa8>
 80035fe:	bf00      	nop
 8003600:	2000f770 	.word	0x2000f770

08003604 <__malloc_lock>:
 8003604:	4801      	ldr	r0, [pc, #4]	@ (800360c <__malloc_lock+0x8>)
 8003606:	f7ff bf00 	b.w	800340a <__retarget_lock_acquire_recursive>
 800360a:	bf00      	nop
 800360c:	2000f768 	.word	0x2000f768

08003610 <__malloc_unlock>:
 8003610:	4801      	ldr	r0, [pc, #4]	@ (8003618 <__malloc_unlock+0x8>)
 8003612:	f7ff befb 	b.w	800340c <__retarget_lock_release_recursive>
 8003616:	bf00      	nop
 8003618:	2000f768 	.word	0x2000f768

0800361c <__sflush_r>:
 800361c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8003620:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003624:	0716      	lsls	r6, r2, #28
 8003626:	4605      	mov	r5, r0
 8003628:	460c      	mov	r4, r1
 800362a:	d454      	bmi.n	80036d6 <__sflush_r+0xba>
 800362c:	684b      	ldr	r3, [r1, #4]
 800362e:	2b00      	cmp	r3, #0
 8003630:	dc02      	bgt.n	8003638 <__sflush_r+0x1c>
 8003632:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8003634:	2b00      	cmp	r3, #0
 8003636:	dd48      	ble.n	80036ca <__sflush_r+0xae>
 8003638:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800363a:	2e00      	cmp	r6, #0
 800363c:	d045      	beq.n	80036ca <__sflush_r+0xae>
 800363e:	2300      	movs	r3, #0
 8003640:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8003644:	682f      	ldr	r7, [r5, #0]
 8003646:	6a21      	ldr	r1, [r4, #32]
 8003648:	602b      	str	r3, [r5, #0]
 800364a:	d030      	beq.n	80036ae <__sflush_r+0x92>
 800364c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800364e:	89a3      	ldrh	r3, [r4, #12]
 8003650:	0759      	lsls	r1, r3, #29
 8003652:	d505      	bpl.n	8003660 <__sflush_r+0x44>
 8003654:	6863      	ldr	r3, [r4, #4]
 8003656:	1ad2      	subs	r2, r2, r3
 8003658:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800365a:	b10b      	cbz	r3, 8003660 <__sflush_r+0x44>
 800365c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800365e:	1ad2      	subs	r2, r2, r3
 8003660:	2300      	movs	r3, #0
 8003662:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8003664:	6a21      	ldr	r1, [r4, #32]
 8003666:	4628      	mov	r0, r5
 8003668:	47b0      	blx	r6
 800366a:	1c43      	adds	r3, r0, #1
 800366c:	89a3      	ldrh	r3, [r4, #12]
 800366e:	d106      	bne.n	800367e <__sflush_r+0x62>
 8003670:	6829      	ldr	r1, [r5, #0]
 8003672:	291d      	cmp	r1, #29
 8003674:	d82b      	bhi.n	80036ce <__sflush_r+0xb2>
 8003676:	4a2a      	ldr	r2, [pc, #168]	@ (8003720 <__sflush_r+0x104>)
 8003678:	40ca      	lsrs	r2, r1
 800367a:	07d6      	lsls	r6, r2, #31
 800367c:	d527      	bpl.n	80036ce <__sflush_r+0xb2>
 800367e:	2200      	movs	r2, #0
 8003680:	6062      	str	r2, [r4, #4]
 8003682:	04d9      	lsls	r1, r3, #19
 8003684:	6922      	ldr	r2, [r4, #16]
 8003686:	6022      	str	r2, [r4, #0]
 8003688:	d504      	bpl.n	8003694 <__sflush_r+0x78>
 800368a:	1c42      	adds	r2, r0, #1
 800368c:	d101      	bne.n	8003692 <__sflush_r+0x76>
 800368e:	682b      	ldr	r3, [r5, #0]
 8003690:	b903      	cbnz	r3, 8003694 <__sflush_r+0x78>
 8003692:	6560      	str	r0, [r4, #84]	@ 0x54
 8003694:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8003696:	602f      	str	r7, [r5, #0]
 8003698:	b1b9      	cbz	r1, 80036ca <__sflush_r+0xae>
 800369a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800369e:	4299      	cmp	r1, r3
 80036a0:	d002      	beq.n	80036a8 <__sflush_r+0x8c>
 80036a2:	4628      	mov	r0, r5
 80036a4:	f7ff fec2 	bl	800342c <_free_r>
 80036a8:	2300      	movs	r3, #0
 80036aa:	6363      	str	r3, [r4, #52]	@ 0x34
 80036ac:	e00d      	b.n	80036ca <__sflush_r+0xae>
 80036ae:	2301      	movs	r3, #1
 80036b0:	4628      	mov	r0, r5
 80036b2:	47b0      	blx	r6
 80036b4:	4602      	mov	r2, r0
 80036b6:	1c50      	adds	r0, r2, #1
 80036b8:	d1c9      	bne.n	800364e <__sflush_r+0x32>
 80036ba:	682b      	ldr	r3, [r5, #0]
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d0c6      	beq.n	800364e <__sflush_r+0x32>
 80036c0:	2b1d      	cmp	r3, #29
 80036c2:	d001      	beq.n	80036c8 <__sflush_r+0xac>
 80036c4:	2b16      	cmp	r3, #22
 80036c6:	d11e      	bne.n	8003706 <__sflush_r+0xea>
 80036c8:	602f      	str	r7, [r5, #0]
 80036ca:	2000      	movs	r0, #0
 80036cc:	e022      	b.n	8003714 <__sflush_r+0xf8>
 80036ce:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80036d2:	b21b      	sxth	r3, r3
 80036d4:	e01b      	b.n	800370e <__sflush_r+0xf2>
 80036d6:	690f      	ldr	r7, [r1, #16]
 80036d8:	2f00      	cmp	r7, #0
 80036da:	d0f6      	beq.n	80036ca <__sflush_r+0xae>
 80036dc:	0793      	lsls	r3, r2, #30
 80036de:	680e      	ldr	r6, [r1, #0]
 80036e0:	bf08      	it	eq
 80036e2:	694b      	ldreq	r3, [r1, #20]
 80036e4:	600f      	str	r7, [r1, #0]
 80036e6:	bf18      	it	ne
 80036e8:	2300      	movne	r3, #0
 80036ea:	eba6 0807 	sub.w	r8, r6, r7
 80036ee:	608b      	str	r3, [r1, #8]
 80036f0:	f1b8 0f00 	cmp.w	r8, #0
 80036f4:	dde9      	ble.n	80036ca <__sflush_r+0xae>
 80036f6:	6a21      	ldr	r1, [r4, #32]
 80036f8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80036fa:	4643      	mov	r3, r8
 80036fc:	463a      	mov	r2, r7
 80036fe:	4628      	mov	r0, r5
 8003700:	47b0      	blx	r6
 8003702:	2800      	cmp	r0, #0
 8003704:	dc08      	bgt.n	8003718 <__sflush_r+0xfc>
 8003706:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800370a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800370e:	81a3      	strh	r3, [r4, #12]
 8003710:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003714:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003718:	4407      	add	r7, r0
 800371a:	eba8 0800 	sub.w	r8, r8, r0
 800371e:	e7e7      	b.n	80036f0 <__sflush_r+0xd4>
 8003720:	20400001 	.word	0x20400001

08003724 <_fflush_r>:
 8003724:	b538      	push	{r3, r4, r5, lr}
 8003726:	690b      	ldr	r3, [r1, #16]
 8003728:	4605      	mov	r5, r0
 800372a:	460c      	mov	r4, r1
 800372c:	b913      	cbnz	r3, 8003734 <_fflush_r+0x10>
 800372e:	2500      	movs	r5, #0
 8003730:	4628      	mov	r0, r5
 8003732:	bd38      	pop	{r3, r4, r5, pc}
 8003734:	b118      	cbz	r0, 800373e <_fflush_r+0x1a>
 8003736:	6a03      	ldr	r3, [r0, #32]
 8003738:	b90b      	cbnz	r3, 800373e <_fflush_r+0x1a>
 800373a:	f7ff fc81 	bl	8003040 <__sinit>
 800373e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003742:	2b00      	cmp	r3, #0
 8003744:	d0f3      	beq.n	800372e <_fflush_r+0xa>
 8003746:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8003748:	07d0      	lsls	r0, r2, #31
 800374a:	d404      	bmi.n	8003756 <_fflush_r+0x32>
 800374c:	0599      	lsls	r1, r3, #22
 800374e:	d402      	bmi.n	8003756 <_fflush_r+0x32>
 8003750:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003752:	f7ff fe5a 	bl	800340a <__retarget_lock_acquire_recursive>
 8003756:	4628      	mov	r0, r5
 8003758:	4621      	mov	r1, r4
 800375a:	f7ff ff5f 	bl	800361c <__sflush_r>
 800375e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8003760:	07da      	lsls	r2, r3, #31
 8003762:	4605      	mov	r5, r0
 8003764:	d4e4      	bmi.n	8003730 <_fflush_r+0xc>
 8003766:	89a3      	ldrh	r3, [r4, #12]
 8003768:	059b      	lsls	r3, r3, #22
 800376a:	d4e1      	bmi.n	8003730 <_fflush_r+0xc>
 800376c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800376e:	f7ff fe4d 	bl	800340c <__retarget_lock_release_recursive>
 8003772:	e7dd      	b.n	8003730 <_fflush_r+0xc>

08003774 <__swhatbuf_r>:
 8003774:	b570      	push	{r4, r5, r6, lr}
 8003776:	460c      	mov	r4, r1
 8003778:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800377c:	2900      	cmp	r1, #0
 800377e:	b096      	sub	sp, #88	@ 0x58
 8003780:	4615      	mov	r5, r2
 8003782:	461e      	mov	r6, r3
 8003784:	da0d      	bge.n	80037a2 <__swhatbuf_r+0x2e>
 8003786:	89a3      	ldrh	r3, [r4, #12]
 8003788:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800378c:	f04f 0100 	mov.w	r1, #0
 8003790:	bf14      	ite	ne
 8003792:	2340      	movne	r3, #64	@ 0x40
 8003794:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8003798:	2000      	movs	r0, #0
 800379a:	6031      	str	r1, [r6, #0]
 800379c:	602b      	str	r3, [r5, #0]
 800379e:	b016      	add	sp, #88	@ 0x58
 80037a0:	bd70      	pop	{r4, r5, r6, pc}
 80037a2:	466a      	mov	r2, sp
 80037a4:	f000 f848 	bl	8003838 <_fstat_r>
 80037a8:	2800      	cmp	r0, #0
 80037aa:	dbec      	blt.n	8003786 <__swhatbuf_r+0x12>
 80037ac:	9901      	ldr	r1, [sp, #4]
 80037ae:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80037b2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80037b6:	4259      	negs	r1, r3
 80037b8:	4159      	adcs	r1, r3
 80037ba:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80037be:	e7eb      	b.n	8003798 <__swhatbuf_r+0x24>

080037c0 <__smakebuf_r>:
 80037c0:	898b      	ldrh	r3, [r1, #12]
 80037c2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80037c4:	079d      	lsls	r5, r3, #30
 80037c6:	4606      	mov	r6, r0
 80037c8:	460c      	mov	r4, r1
 80037ca:	d507      	bpl.n	80037dc <__smakebuf_r+0x1c>
 80037cc:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80037d0:	6023      	str	r3, [r4, #0]
 80037d2:	6123      	str	r3, [r4, #16]
 80037d4:	2301      	movs	r3, #1
 80037d6:	6163      	str	r3, [r4, #20]
 80037d8:	b003      	add	sp, #12
 80037da:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80037dc:	ab01      	add	r3, sp, #4
 80037de:	466a      	mov	r2, sp
 80037e0:	f7ff ffc8 	bl	8003774 <__swhatbuf_r>
 80037e4:	9f00      	ldr	r7, [sp, #0]
 80037e6:	4605      	mov	r5, r0
 80037e8:	4639      	mov	r1, r7
 80037ea:	4630      	mov	r0, r6
 80037ec:	f7ff fe8a 	bl	8003504 <_malloc_r>
 80037f0:	b948      	cbnz	r0, 8003806 <__smakebuf_r+0x46>
 80037f2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80037f6:	059a      	lsls	r2, r3, #22
 80037f8:	d4ee      	bmi.n	80037d8 <__smakebuf_r+0x18>
 80037fa:	f023 0303 	bic.w	r3, r3, #3
 80037fe:	f043 0302 	orr.w	r3, r3, #2
 8003802:	81a3      	strh	r3, [r4, #12]
 8003804:	e7e2      	b.n	80037cc <__smakebuf_r+0xc>
 8003806:	89a3      	ldrh	r3, [r4, #12]
 8003808:	6020      	str	r0, [r4, #0]
 800380a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800380e:	81a3      	strh	r3, [r4, #12]
 8003810:	9b01      	ldr	r3, [sp, #4]
 8003812:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8003816:	b15b      	cbz	r3, 8003830 <__smakebuf_r+0x70>
 8003818:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800381c:	4630      	mov	r0, r6
 800381e:	f000 f81d 	bl	800385c <_isatty_r>
 8003822:	b128      	cbz	r0, 8003830 <__smakebuf_r+0x70>
 8003824:	89a3      	ldrh	r3, [r4, #12]
 8003826:	f023 0303 	bic.w	r3, r3, #3
 800382a:	f043 0301 	orr.w	r3, r3, #1
 800382e:	81a3      	strh	r3, [r4, #12]
 8003830:	89a3      	ldrh	r3, [r4, #12]
 8003832:	431d      	orrs	r5, r3
 8003834:	81a5      	strh	r5, [r4, #12]
 8003836:	e7cf      	b.n	80037d8 <__smakebuf_r+0x18>

08003838 <_fstat_r>:
 8003838:	b538      	push	{r3, r4, r5, lr}
 800383a:	4d07      	ldr	r5, [pc, #28]	@ (8003858 <_fstat_r+0x20>)
 800383c:	2300      	movs	r3, #0
 800383e:	4604      	mov	r4, r0
 8003840:	4608      	mov	r0, r1
 8003842:	4611      	mov	r1, r2
 8003844:	602b      	str	r3, [r5, #0]
 8003846:	f7fc ffc2 	bl	80007ce <_fstat>
 800384a:	1c43      	adds	r3, r0, #1
 800384c:	d102      	bne.n	8003854 <_fstat_r+0x1c>
 800384e:	682b      	ldr	r3, [r5, #0]
 8003850:	b103      	cbz	r3, 8003854 <_fstat_r+0x1c>
 8003852:	6023      	str	r3, [r4, #0]
 8003854:	bd38      	pop	{r3, r4, r5, pc}
 8003856:	bf00      	nop
 8003858:	2000f764 	.word	0x2000f764

0800385c <_isatty_r>:
 800385c:	b538      	push	{r3, r4, r5, lr}
 800385e:	4d06      	ldr	r5, [pc, #24]	@ (8003878 <_isatty_r+0x1c>)
 8003860:	2300      	movs	r3, #0
 8003862:	4604      	mov	r4, r0
 8003864:	4608      	mov	r0, r1
 8003866:	602b      	str	r3, [r5, #0]
 8003868:	f7fc ffc1 	bl	80007ee <_isatty>
 800386c:	1c43      	adds	r3, r0, #1
 800386e:	d102      	bne.n	8003876 <_isatty_r+0x1a>
 8003870:	682b      	ldr	r3, [r5, #0]
 8003872:	b103      	cbz	r3, 8003876 <_isatty_r+0x1a>
 8003874:	6023      	str	r3, [r4, #0]
 8003876:	bd38      	pop	{r3, r4, r5, pc}
 8003878:	2000f764 	.word	0x2000f764

0800387c <_sbrk_r>:
 800387c:	b538      	push	{r3, r4, r5, lr}
 800387e:	4d06      	ldr	r5, [pc, #24]	@ (8003898 <_sbrk_r+0x1c>)
 8003880:	2300      	movs	r3, #0
 8003882:	4604      	mov	r4, r0
 8003884:	4608      	mov	r0, r1
 8003886:	602b      	str	r3, [r5, #0]
 8003888:	f7fc ffca 	bl	8000820 <_sbrk>
 800388c:	1c43      	adds	r3, r0, #1
 800388e:	d102      	bne.n	8003896 <_sbrk_r+0x1a>
 8003890:	682b      	ldr	r3, [r5, #0]
 8003892:	b103      	cbz	r3, 8003896 <_sbrk_r+0x1a>
 8003894:	6023      	str	r3, [r4, #0]
 8003896:	bd38      	pop	{r3, r4, r5, pc}
 8003898:	2000f764 	.word	0x2000f764

0800389c <_init>:
 800389c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800389e:	bf00      	nop
 80038a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80038a2:	bc08      	pop	{r3}
 80038a4:	469e      	mov	lr, r3
 80038a6:	4770      	bx	lr

080038a8 <_fini>:
 80038a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80038aa:	bf00      	nop
 80038ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80038ae:	bc08      	pop	{r3}
 80038b0:	469e      	mov	lr, r3
 80038b2:	4770      	bx	lr
